
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2019  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9 (git sha1 1979e0b)


-- Parsing `demo.v' using frontend `verilog' --

1. Executing Verilog-2005 frontend: demo.v
Parsing Verilog input from `demo.v' to AST representation.
Generating RTLIL representation for module `\demo'.
Successfully finished Verilog frontend.

-- Running command `synth_ice40 -json demo.json -blif demo.blif' --

2. Executing SYNTH_ICE40 pass.

2.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/cells_sim.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\SB_IO'.
Generating RTLIL representation for module `\SB_GB_IO'.
Generating RTLIL representation for module `\SB_GB'.
Generating RTLIL representation for module `\SB_LUT4'.
Generating RTLIL representation for module `\SB_CARRY'.
Generating RTLIL representation for module `\SB_DFF'.
Generating RTLIL representation for module `\SB_DFFE'.
Generating RTLIL representation for module `\SB_DFFSR'.
Generating RTLIL representation for module `\SB_DFFR'.
Generating RTLIL representation for module `\SB_DFFSS'.
Generating RTLIL representation for module `\SB_DFFS'.
Generating RTLIL representation for module `\SB_DFFESR'.
Generating RTLIL representation for module `\SB_DFFER'.
Generating RTLIL representation for module `\SB_DFFESS'.
Generating RTLIL representation for module `\SB_DFFES'.
Generating RTLIL representation for module `\SB_DFFN'.
Generating RTLIL representation for module `\SB_DFFNE'.
Generating RTLIL representation for module `\SB_DFFNSR'.
Generating RTLIL representation for module `\SB_DFFNR'.
Generating RTLIL representation for module `\SB_DFFNSS'.
Generating RTLIL representation for module `\SB_DFFNS'.
Generating RTLIL representation for module `\SB_DFFNESR'.
Generating RTLIL representation for module `\SB_DFFNER'.
Generating RTLIL representation for module `\SB_DFFNESS'.
Generating RTLIL representation for module `\SB_DFFNES'.
Generating RTLIL representation for module `\SB_RAM40_4K'.
Generating RTLIL representation for module `\SB_RAM40_4KNR'.
Generating RTLIL representation for module `\SB_RAM40_4KNW'.
Generating RTLIL representation for module `\SB_RAM40_4KNRNW'.
Generating RTLIL representation for module `\ICESTORM_LC'.
Generating RTLIL representation for module `\SB_PLL40_CORE'.
Generating RTLIL representation for module `\SB_PLL40_PAD'.
Generating RTLIL representation for module `\SB_PLL40_2_PAD'.
Generating RTLIL representation for module `\SB_PLL40_2F_CORE'.
Generating RTLIL representation for module `\SB_PLL40_2F_PAD'.
Generating RTLIL representation for module `\SB_WARMBOOT'.
Generating RTLIL representation for module `\SB_SPRAM256KA'.
Generating RTLIL representation for module `\SB_HFOSC'.
Generating RTLIL representation for module `\SB_LFOSC'.
Generating RTLIL representation for module `\SB_RGBA_DRV'.
Generating RTLIL representation for module `\SB_LED_DRV_CUR'.
Generating RTLIL representation for module `\SB_RGB_DRV'.
Generating RTLIL representation for module `\SB_I2C'.
Generating RTLIL representation for module `\SB_SPI'.
Generating RTLIL representation for module `\SB_LEDDA_IP'.
Generating RTLIL representation for module `\SB_FILTER_50NS'.
Generating RTLIL representation for module `\SB_IO_I3C'.
Generating RTLIL representation for module `\SB_IO_OD'.
Generating RTLIL representation for module `\SB_MAC16'.
Successfully finished Verilog frontend.

2.2. Executing HIERARCHY pass (managing design hierarchy).

2.2.1. Finding top of design hierarchy..
root of   0 design levels: demo                
Automatically selected demo as design top module.

2.2.2. Analyzing design hierarchy..
Top module:  \demo

2.2.3. Analyzing design hierarchy..
Top module:  \demo
Removed 0 unused modules.

2.3. Executing PROC pass (convert processes to netlists).

2.3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

2.3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 36 switch rules as full_case in process $proc$demo.v:202$93 in module demo.
Removed a total of 0 dead cases.

2.3.3. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\demo.$proc$demo.v:87$281'.
  Set init value: \scl = 1'1
  Set init value: \state = 6'000000
  Set init value: \data = 8'00000000
  Set init value: \bit_counter = 3'111
  Set init value: \pixel_data = 16'0000000000000000
  Set init value: \pixel_bit_counter = 4'1111
  Set init value: \cmd_counter = 5'00000
  Set init value: \param_counter = 7'0000000
  Set init value: \params_left = 14'00000000000000

2.3.4. Executing PROC_ARST pass (detect async resets in processes).

2.3.5. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\demo.$proc$demo.v:87$281'.
     1/189: $1\pixel_bit_counter[3:0]
     2/189: $1\pixel_data[15:0]
     3/189: $1\bit_counter[2:0]
     4/189: $1\data[7:0]
     5/189: $1\params_left[13:0]
     6/189: $1\param_counter[6:0]
     7/189: $0$memwr$\params$demo.v:183$90_DATA[7:0]$461
     8/189: $0$memwr$\params$demo.v:183$90_ADDR[31:0]$460
     9/189: $0$memwr$\params$demo.v:182$89_DATA[7:0]$459
    10/189: $0$memwr$\params$demo.v:182$89_ADDR[31:0]$458
    11/189: $0$memwr$\params$demo.v:181$88_DATA[7:0]$457
    12/189: $0$memwr$\params$demo.v:181$88_ADDR[31:0]$456
    13/189: $0$memwr$\params$demo.v:180$87_DATA[7:0]$455
    14/189: $0$memwr$\params$demo.v:180$87_ADDR[31:0]$454
    15/189: $0$memwr$\params$demo.v:179$86_DATA[7:0]$453
    16/189: $0$memwr$\params$demo.v:179$86_ADDR[31:0]$452
    17/189: $0$memwr$\params$demo.v:178$85_DATA[7:0]$451
    18/189: $0$memwr$\params$demo.v:178$85_ADDR[31:0]$450
    19/189: $0$memwr$\params$demo.v:177$84_DATA[7:0]$449
    20/189: $0$memwr$\params$demo.v:177$84_ADDR[31:0]$448
    21/189: $0$memwr$\params$demo.v:176$83_DATA[7:0]$447
    22/189: $0$memwr$\params$demo.v:176$83_ADDR[31:0]$446
    23/189: $0$memwr$\params$demo.v:175$82_DATA[7:0]$445
    24/189: $0$memwr$\params$demo.v:175$82_ADDR[31:0]$444
    25/189: $0$memwr$\params$demo.v:174$81_DATA[7:0]$443
    26/189: $0$memwr$\params$demo.v:174$81_ADDR[31:0]$442
    27/189: $0$memwr$\params$demo.v:173$80_DATA[7:0]$441
    28/189: $0$memwr$\params$demo.v:173$80_ADDR[31:0]$440
    29/189: $0$memwr$\params$demo.v:172$79_DATA[7:0]$439
    30/189: $0$memwr$\params$demo.v:172$79_ADDR[31:0]$438
    31/189: $0$memwr$\params$demo.v:171$78_DATA[7:0]$437
    32/189: $0$memwr$\params$demo.v:171$78_ADDR[31:0]$436
    33/189: $0$memwr$\params$demo.v:170$77_DATA[7:0]$435
    34/189: $0$memwr$\params$demo.v:170$77_ADDR[31:0]$434
    35/189: $0$memwr$\params$demo.v:169$76_DATA[7:0]$433
    36/189: $0$memwr$\params$demo.v:169$76_ADDR[31:0]$432
    37/189: $0$memwr$\params$demo.v:168$75_DATA[7:0]$431
    38/189: $0$memwr$\params$demo.v:168$75_ADDR[31:0]$430
    39/189: $0$memwr$\params$demo.v:167$74_DATA[7:0]$429
    40/189: $0$memwr$\params$demo.v:167$74_ADDR[31:0]$428
    41/189: $0$memwr$\params$demo.v:166$73_DATA[7:0]$427
    42/189: $0$memwr$\params$demo.v:166$73_ADDR[31:0]$426
    43/189: $0$memwr$\params$demo.v:165$72_DATA[7:0]$425
    44/189: $0$memwr$\params$demo.v:165$72_ADDR[31:0]$424
    45/189: $0$memwr$\params$demo.v:164$71_DATA[7:0]$423
    46/189: $0$memwr$\params$demo.v:164$71_ADDR[31:0]$422
    47/189: $0$memwr$\params$demo.v:163$70_DATA[7:0]$421
    48/189: $0$memwr$\params$demo.v:163$70_ADDR[31:0]$420
    49/189: $0$memwr$\params$demo.v:162$69_DATA[7:0]$419
    50/189: $0$memwr$\params$demo.v:162$69_ADDR[31:0]$418
    51/189: $0$memwr$\params$demo.v:161$68_DATA[7:0]$417
    52/189: $0$memwr$\params$demo.v:161$68_ADDR[31:0]$416
    53/189: $0$memwr$\params$demo.v:160$67_DATA[7:0]$415
    54/189: $0$memwr$\params$demo.v:160$67_ADDR[31:0]$414
    55/189: $0$memwr$\params$demo.v:159$66_DATA[7:0]$413
    56/189: $0$memwr$\params$demo.v:159$66_ADDR[31:0]$412
    57/189: $0$memwr$\params$demo.v:158$65_DATA[7:0]$411
    58/189: $0$memwr$\params$demo.v:158$65_ADDR[31:0]$410
    59/189: $0$memwr$\params$demo.v:157$64_DATA[7:0]$409
    60/189: $0$memwr$\params$demo.v:157$64_ADDR[31:0]$408
    61/189: $0$memwr$\params$demo.v:156$63_DATA[7:0]$407
    62/189: $0$memwr$\params$demo.v:156$63_ADDR[31:0]$406
    63/189: $0$memwr$\params$demo.v:155$62_DATA[7:0]$405
    64/189: $0$memwr$\params$demo.v:155$62_ADDR[31:0]$404
    65/189: $0$memwr$\params$demo.v:154$61_DATA[7:0]$403
    66/189: $0$memwr$\params$demo.v:154$61_ADDR[31:0]$402
    67/189: $0$memwr$\params$demo.v:153$60_DATA[7:0]$401
    68/189: $0$memwr$\params$demo.v:153$60_ADDR[31:0]$400
    69/189: $0$memwr$\params$demo.v:152$59_DATA[7:0]$399
    70/189: $0$memwr$\params$demo.v:152$59_ADDR[31:0]$398
    71/189: $0$memwr$\params$demo.v:151$58_DATA[7:0]$397
    72/189: $0$memwr$\params$demo.v:151$58_ADDR[31:0]$396
    73/189: $0$memwr$\params$demo.v:150$57_DATA[7:0]$395
    74/189: $0$memwr$\params$demo.v:150$57_ADDR[31:0]$394
    75/189: $0$memwr$\params$demo.v:149$56_DATA[7:0]$393
    76/189: $0$memwr$\params$demo.v:149$56_ADDR[31:0]$392
    77/189: $0$memwr$\params$demo.v:148$55_DATA[7:0]$391
    78/189: $0$memwr$\params$demo.v:148$55_ADDR[31:0]$390
    79/189: $0$memwr$\params$demo.v:147$54_DATA[7:0]$389
    80/189: $0$memwr$\params$demo.v:147$54_ADDR[31:0]$388
    81/189: $0$memwr$\params$demo.v:146$53_DATA[7:0]$387
    82/189: $0$memwr$\params$demo.v:146$53_ADDR[31:0]$386
    83/189: $0$memwr$\params$demo.v:145$52_DATA[7:0]$385
    84/189: $0$memwr$\params$demo.v:145$52_ADDR[31:0]$384
    85/189: $0$memwr$\params$demo.v:144$51_DATA[7:0]$383
    86/189: $0$memwr$\params$demo.v:144$51_ADDR[31:0]$382
    87/189: $0$memwr$\params$demo.v:143$50_DATA[7:0]$381
    88/189: $0$memwr$\params$demo.v:143$50_ADDR[31:0]$380
    89/189: $0$memwr$\params$demo.v:142$49_DATA[7:0]$379
    90/189: $0$memwr$\params$demo.v:142$49_ADDR[31:0]$378
    91/189: $0$memwr$\params$demo.v:141$48_DATA[7:0]$377
    92/189: $0$memwr$\params$demo.v:141$48_ADDR[31:0]$376
    93/189: $0$memwr$\params$demo.v:140$47_DATA[7:0]$375
    94/189: $0$memwr$\params$demo.v:140$47_ADDR[31:0]$374
    95/189: $0$memwr$\params$demo.v:139$46_DATA[7:0]$373
    96/189: $0$memwr$\params$demo.v:139$46_ADDR[31:0]$372
    97/189: $0$memwr$\params$demo.v:138$45_DATA[7:0]$371
    98/189: $0$memwr$\params$demo.v:138$45_ADDR[31:0]$370
    99/189: $0$memwr$\params$demo.v:137$44_DATA[7:0]$369
   100/189: $0$memwr$\params$demo.v:137$44_ADDR[31:0]$368
   101/189: $0$memwr$\params$demo.v:136$43_DATA[7:0]$367
   102/189: $0$memwr$\params$demo.v:136$43_ADDR[31:0]$366
   103/189: $0$memwr$\params$demo.v:135$42_DATA[7:0]$365
   104/189: $0$memwr$\params$demo.v:135$42_ADDR[31:0]$364
   105/189: $0$memwr$\params$demo.v:134$41_DATA[7:0]$363
   106/189: $0$memwr$\params$demo.v:134$41_ADDR[31:0]$362
   107/189: $0$memwr$\params$demo.v:133$40_DATA[7:0]$361
   108/189: $0$memwr$\params$demo.v:133$40_ADDR[31:0]$360
   109/189: $0$memwr$\params$demo.v:132$39_DATA[7:0]$359
   110/189: $0$memwr$\params$demo.v:132$39_ADDR[31:0]$358
   111/189: $0$memwr$\params$demo.v:131$38_DATA[7:0]$357
   112/189: $0$memwr$\params$demo.v:131$38_ADDR[31:0]$356
   113/189: $0$memwr$\params$demo.v:130$37_DATA[7:0]$355
   114/189: $0$memwr$\params$demo.v:130$37_ADDR[31:0]$354
   115/189: $0$memwr$\params$demo.v:129$36_DATA[7:0]$353
   116/189: $0$memwr$\params$demo.v:129$36_ADDR[31:0]$352
   117/189: $0$memwr$\params$demo.v:128$35_DATA[7:0]$351
   118/189: $0$memwr$\params$demo.v:128$35_ADDR[31:0]$350
   119/189: $0$memwr$\params$demo.v:127$34_DATA[7:0]$349
   120/189: $0$memwr$\params$demo.v:127$34_ADDR[31:0]$348
   121/189: $0$memwr$\params$demo.v:126$33_DATA[7:0]$347
   122/189: $0$memwr$\params$demo.v:126$33_ADDR[31:0]$346
   123/189: $0$memwr$\params$demo.v:125$32_DATA[7:0]$345
   124/189: $0$memwr$\params$demo.v:125$32_ADDR[31:0]$344
   125/189: $0$memwr$\params$demo.v:124$31_DATA[7:0]$343
   126/189: $0$memwr$\params$demo.v:124$31_ADDR[31:0]$342
   127/189: $0$memwr$\params$demo.v:123$30_DATA[7:0]$341
   128/189: $0$memwr$\params$demo.v:123$30_ADDR[31:0]$340
   129/189: $0$memwr$\params$demo.v:122$29_DATA[7:0]$339
   130/189: $0$memwr$\params$demo.v:122$29_ADDR[31:0]$338
   131/189: $0$memwr$\params$demo.v:121$28_DATA[7:0]$337
   132/189: $0$memwr$\params$demo.v:121$28_ADDR[31:0]$336
   133/189: $0$memwr$\params$demo.v:120$27_DATA[7:0]$335
   134/189: $0$memwr$\params$demo.v:120$27_ADDR[31:0]$334
   135/189: $0$memwr$\params$demo.v:119$26_DATA[7:0]$333
   136/189: $0$memwr$\params$demo.v:119$26_ADDR[31:0]$332
   137/189: $0$memwr$\params$demo.v:118$25_DATA[7:0]$331
   138/189: $0$memwr$\params$demo.v:118$25_ADDR[31:0]$330
   139/189: $0$memwr$\params$demo.v:117$24_DATA[7:0]$329
   140/189: $0$memwr$\params$demo.v:117$24_ADDR[31:0]$328
   141/189: $0$memwr$\params$demo.v:116$23_DATA[7:0]$327
   142/189: $0$memwr$\params$demo.v:116$23_ADDR[31:0]$326
   143/189: $1\cmd_counter[4:0]
   144/189: $0$memwr$\cmd$demo.v:113$22_DATA[7:0]$325
   145/189: $0$memwr$\cmd$demo.v:113$22_ADDR[31:0]$324
   146/189: $0$memwr$\cmd$demo.v:112$21_DATA[7:0]$323
   147/189: $0$memwr$\cmd$demo.v:112$21_ADDR[31:0]$322
   148/189: $0$memwr$\cmd$demo.v:111$20_DATA[7:0]$321
   149/189: $0$memwr$\cmd$demo.v:111$20_ADDR[31:0]$320
   150/189: $0$memwr$\cmd$demo.v:110$19_DATA[7:0]$319
   151/189: $0$memwr$\cmd$demo.v:110$19_ADDR[31:0]$318
   152/189: $0$memwr$\cmd$demo.v:109$18_DATA[7:0]$317
   153/189: $0$memwr$\cmd$demo.v:109$18_ADDR[31:0]$316
   154/189: $0$memwr$\cmd$demo.v:108$17_DATA[7:0]$315
   155/189: $0$memwr$\cmd$demo.v:108$17_ADDR[31:0]$314
   156/189: $0$memwr$\cmd$demo.v:107$16_DATA[7:0]$313
   157/189: $0$memwr$\cmd$demo.v:107$16_ADDR[31:0]$312
   158/189: $0$memwr$\cmd$demo.v:106$15_DATA[7:0]$311
   159/189: $0$memwr$\cmd$demo.v:106$15_ADDR[31:0]$310
   160/189: $0$memwr$\cmd$demo.v:105$14_DATA[7:0]$309
   161/189: $0$memwr$\cmd$demo.v:105$14_ADDR[31:0]$308
   162/189: $0$memwr$\cmd$demo.v:104$13_DATA[7:0]$307
   163/189: $0$memwr$\cmd$demo.v:104$13_ADDR[31:0]$306
   164/189: $0$memwr$\cmd$demo.v:103$12_DATA[7:0]$305
   165/189: $0$memwr$\cmd$demo.v:103$12_ADDR[31:0]$304
   166/189: $0$memwr$\cmd$demo.v:102$11_DATA[7:0]$303
   167/189: $0$memwr$\cmd$demo.v:102$11_ADDR[31:0]$302
   168/189: $0$memwr$\cmd$demo.v:101$10_DATA[7:0]$301
   169/189: $0$memwr$\cmd$demo.v:101$10_ADDR[31:0]$300
   170/189: $0$memwr$\cmd$demo.v:100$9_DATA[7:0]$299
   171/189: $0$memwr$\cmd$demo.v:100$9_ADDR[31:0]$298
   172/189: $0$memwr$\cmd$demo.v:99$8_DATA[7:0]$297
   173/189: $0$memwr$\cmd$demo.v:99$8_ADDR[31:0]$296
   174/189: $0$memwr$\cmd$demo.v:98$7_DATA[7:0]$295
   175/189: $0$memwr$\cmd$demo.v:98$7_ADDR[31:0]$294
   176/189: $0$memwr$\cmd$demo.v:97$6_DATA[7:0]$293
   177/189: $0$memwr$\cmd$demo.v:97$6_ADDR[31:0]$292
   178/189: $0$memwr$\cmd$demo.v:96$5_DATA[7:0]$291
   179/189: $0$memwr$\cmd$demo.v:96$5_ADDR[31:0]$290
   180/189: $0$memwr$\cmd$demo.v:95$4_DATA[7:0]$289
   181/189: $0$memwr$\cmd$demo.v:95$4_ADDR[31:0]$288
   182/189: $0$memwr$\cmd$demo.v:94$3_DATA[7:0]$287
   183/189: $0$memwr$\cmd$demo.v:94$3_ADDR[31:0]$286
   184/189: $0$memwr$\cmd$demo.v:93$2_DATA[7:0]$285
   185/189: $0$memwr$\cmd$demo.v:93$2_ADDR[31:0]$284
   186/189: $0$memwr$\cmd$demo.v:92$1_DATA[7:0]$283
   187/189: $0$memwr$\cmd$demo.v:92$1_ADDR[31:0]$282
   188/189: $1\scl[0:0]
   189/189: $1\state[5:0]
Creating decoders for process `\demo.$proc$demo.v:202$93'.
     1/14: $0\pixel_data[15:0] [15:8]
     2/14: $0\pixel_data[15:0] [7:0]
     3/14: $0\param_counter[6:0]
     4/14: $0\cmd_counter[4:0]
     5/14: $0\pixel_bit_counter[3:0]
     6/14: $0\params_left[13:0]
     7/14: $0\bit_counter[2:0]
     8/14: $0\data[7:0]
     9/14: $0\delay[15:0]
    10/14: $0\state[5:0]
    11/14: $0\cs[0:0]
    12/14: $0\mosi[0:0]
    13/14: $0\dc[0:0]
    14/14: $0\rst[0:0]
Creating decoders for process `\demo.$proc$demo.v:195$91'.
     1/1: $0\scl[0:0]

2.3.6. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:92$1_ADDR' from process `\demo.$proc$demo.v:87$281'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:92$1_DATA' from process `\demo.$proc$demo.v:87$281'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:93$2_ADDR' from process `\demo.$proc$demo.v:87$281'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:93$2_DATA' from process `\demo.$proc$demo.v:87$281'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:94$3_ADDR' from process `\demo.$proc$demo.v:87$281'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:94$3_DATA' from process `\demo.$proc$demo.v:87$281'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:95$4_ADDR' from process `\demo.$proc$demo.v:87$281'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:95$4_DATA' from process `\demo.$proc$demo.v:87$281'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:96$5_ADDR' from process `\demo.$proc$demo.v:87$281'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:96$5_DATA' from process `\demo.$proc$demo.v:87$281'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:97$6_ADDR' from process `\demo.$proc$demo.v:87$281'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:97$6_DATA' from process `\demo.$proc$demo.v:87$281'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:98$7_ADDR' from process `\demo.$proc$demo.v:87$281'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:98$7_DATA' from process `\demo.$proc$demo.v:87$281'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:99$8_ADDR' from process `\demo.$proc$demo.v:87$281'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:99$8_DATA' from process `\demo.$proc$demo.v:87$281'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:100$9_ADDR' from process `\demo.$proc$demo.v:87$281'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:100$9_DATA' from process `\demo.$proc$demo.v:87$281'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:101$10_ADDR' from process `\demo.$proc$demo.v:87$281'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:101$10_DATA' from process `\demo.$proc$demo.v:87$281'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:102$11_ADDR' from process `\demo.$proc$demo.v:87$281'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:102$11_DATA' from process `\demo.$proc$demo.v:87$281'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:103$12_ADDR' from process `\demo.$proc$demo.v:87$281'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:103$12_DATA' from process `\demo.$proc$demo.v:87$281'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:104$13_ADDR' from process `\demo.$proc$demo.v:87$281'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:104$13_DATA' from process `\demo.$proc$demo.v:87$281'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:105$14_ADDR' from process `\demo.$proc$demo.v:87$281'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:105$14_DATA' from process `\demo.$proc$demo.v:87$281'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:106$15_ADDR' from process `\demo.$proc$demo.v:87$281'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:106$15_DATA' from process `\demo.$proc$demo.v:87$281'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:107$16_ADDR' from process `\demo.$proc$demo.v:87$281'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:107$16_DATA' from process `\demo.$proc$demo.v:87$281'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:108$17_ADDR' from process `\demo.$proc$demo.v:87$281'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:108$17_DATA' from process `\demo.$proc$demo.v:87$281'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:109$18_ADDR' from process `\demo.$proc$demo.v:87$281'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:109$18_DATA' from process `\demo.$proc$demo.v:87$281'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:110$19_ADDR' from process `\demo.$proc$demo.v:87$281'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:110$19_DATA' from process `\demo.$proc$demo.v:87$281'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:111$20_ADDR' from process `\demo.$proc$demo.v:87$281'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:111$20_DATA' from process `\demo.$proc$demo.v:87$281'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:112$21_ADDR' from process `\demo.$proc$demo.v:87$281'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:112$21_DATA' from process `\demo.$proc$demo.v:87$281'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:113$22_ADDR' from process `\demo.$proc$demo.v:87$281'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:113$22_DATA' from process `\demo.$proc$demo.v:87$281'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:116$23_ADDR' from process `\demo.$proc$demo.v:87$281'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:116$23_DATA' from process `\demo.$proc$demo.v:87$281'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:117$24_ADDR' from process `\demo.$proc$demo.v:87$281'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:117$24_DATA' from process `\demo.$proc$demo.v:87$281'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:118$25_ADDR' from process `\demo.$proc$demo.v:87$281'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:118$25_DATA' from process `\demo.$proc$demo.v:87$281'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:119$26_ADDR' from process `\demo.$proc$demo.v:87$281'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:119$26_DATA' from process `\demo.$proc$demo.v:87$281'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:120$27_ADDR' from process `\demo.$proc$demo.v:87$281'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:120$27_DATA' from process `\demo.$proc$demo.v:87$281'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:121$28_ADDR' from process `\demo.$proc$demo.v:87$281'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:121$28_DATA' from process `\demo.$proc$demo.v:87$281'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:122$29_ADDR' from process `\demo.$proc$demo.v:87$281'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:122$29_DATA' from process `\demo.$proc$demo.v:87$281'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:123$30_ADDR' from process `\demo.$proc$demo.v:87$281'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:123$30_DATA' from process `\demo.$proc$demo.v:87$281'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:124$31_ADDR' from process `\demo.$proc$demo.v:87$281'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:124$31_DATA' from process `\demo.$proc$demo.v:87$281'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:125$32_ADDR' from process `\demo.$proc$demo.v:87$281'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:125$32_DATA' from process `\demo.$proc$demo.v:87$281'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:126$33_ADDR' from process `\demo.$proc$demo.v:87$281'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:126$33_DATA' from process `\demo.$proc$demo.v:87$281'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:127$34_ADDR' from process `\demo.$proc$demo.v:87$281'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:127$34_DATA' from process `\demo.$proc$demo.v:87$281'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:128$35_ADDR' from process `\demo.$proc$demo.v:87$281'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:128$35_DATA' from process `\demo.$proc$demo.v:87$281'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:129$36_ADDR' from process `\demo.$proc$demo.v:87$281'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:129$36_DATA' from process `\demo.$proc$demo.v:87$281'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:130$37_ADDR' from process `\demo.$proc$demo.v:87$281'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:130$37_DATA' from process `\demo.$proc$demo.v:87$281'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:131$38_ADDR' from process `\demo.$proc$demo.v:87$281'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:131$38_DATA' from process `\demo.$proc$demo.v:87$281'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:132$39_ADDR' from process `\demo.$proc$demo.v:87$281'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:132$39_DATA' from process `\demo.$proc$demo.v:87$281'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:133$40_ADDR' from process `\demo.$proc$demo.v:87$281'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:133$40_DATA' from process `\demo.$proc$demo.v:87$281'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:134$41_ADDR' from process `\demo.$proc$demo.v:87$281'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:134$41_DATA' from process `\demo.$proc$demo.v:87$281'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:135$42_ADDR' from process `\demo.$proc$demo.v:87$281'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:135$42_DATA' from process `\demo.$proc$demo.v:87$281'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:136$43_ADDR' from process `\demo.$proc$demo.v:87$281'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:136$43_DATA' from process `\demo.$proc$demo.v:87$281'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:137$44_ADDR' from process `\demo.$proc$demo.v:87$281'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:137$44_DATA' from process `\demo.$proc$demo.v:87$281'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:138$45_ADDR' from process `\demo.$proc$demo.v:87$281'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:138$45_DATA' from process `\demo.$proc$demo.v:87$281'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:139$46_ADDR' from process `\demo.$proc$demo.v:87$281'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:139$46_DATA' from process `\demo.$proc$demo.v:87$281'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:140$47_ADDR' from process `\demo.$proc$demo.v:87$281'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:140$47_DATA' from process `\demo.$proc$demo.v:87$281'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:141$48_ADDR' from process `\demo.$proc$demo.v:87$281'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:141$48_DATA' from process `\demo.$proc$demo.v:87$281'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:142$49_ADDR' from process `\demo.$proc$demo.v:87$281'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:142$49_DATA' from process `\demo.$proc$demo.v:87$281'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:143$50_ADDR' from process `\demo.$proc$demo.v:87$281'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:143$50_DATA' from process `\demo.$proc$demo.v:87$281'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:144$51_ADDR' from process `\demo.$proc$demo.v:87$281'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:144$51_DATA' from process `\demo.$proc$demo.v:87$281'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:145$52_ADDR' from process `\demo.$proc$demo.v:87$281'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:145$52_DATA' from process `\demo.$proc$demo.v:87$281'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:146$53_ADDR' from process `\demo.$proc$demo.v:87$281'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:146$53_DATA' from process `\demo.$proc$demo.v:87$281'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:147$54_ADDR' from process `\demo.$proc$demo.v:87$281'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:147$54_DATA' from process `\demo.$proc$demo.v:87$281'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:148$55_ADDR' from process `\demo.$proc$demo.v:87$281'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:148$55_DATA' from process `\demo.$proc$demo.v:87$281'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:149$56_ADDR' from process `\demo.$proc$demo.v:87$281'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:149$56_DATA' from process `\demo.$proc$demo.v:87$281'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:150$57_ADDR' from process `\demo.$proc$demo.v:87$281'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:150$57_DATA' from process `\demo.$proc$demo.v:87$281'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:151$58_ADDR' from process `\demo.$proc$demo.v:87$281'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:151$58_DATA' from process `\demo.$proc$demo.v:87$281'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:152$59_ADDR' from process `\demo.$proc$demo.v:87$281'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:152$59_DATA' from process `\demo.$proc$demo.v:87$281'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:153$60_ADDR' from process `\demo.$proc$demo.v:87$281'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:153$60_DATA' from process `\demo.$proc$demo.v:87$281'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:154$61_ADDR' from process `\demo.$proc$demo.v:87$281'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:154$61_DATA' from process `\demo.$proc$demo.v:87$281'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:155$62_ADDR' from process `\demo.$proc$demo.v:87$281'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:155$62_DATA' from process `\demo.$proc$demo.v:87$281'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:156$63_ADDR' from process `\demo.$proc$demo.v:87$281'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:156$63_DATA' from process `\demo.$proc$demo.v:87$281'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:157$64_ADDR' from process `\demo.$proc$demo.v:87$281'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:157$64_DATA' from process `\demo.$proc$demo.v:87$281'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:158$65_ADDR' from process `\demo.$proc$demo.v:87$281'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:158$65_DATA' from process `\demo.$proc$demo.v:87$281'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:159$66_ADDR' from process `\demo.$proc$demo.v:87$281'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:159$66_DATA' from process `\demo.$proc$demo.v:87$281'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:160$67_ADDR' from process `\demo.$proc$demo.v:87$281'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:160$67_DATA' from process `\demo.$proc$demo.v:87$281'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:161$68_ADDR' from process `\demo.$proc$demo.v:87$281'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:161$68_DATA' from process `\demo.$proc$demo.v:87$281'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:162$69_ADDR' from process `\demo.$proc$demo.v:87$281'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:162$69_DATA' from process `\demo.$proc$demo.v:87$281'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:163$70_ADDR' from process `\demo.$proc$demo.v:87$281'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:163$70_DATA' from process `\demo.$proc$demo.v:87$281'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:164$71_ADDR' from process `\demo.$proc$demo.v:87$281'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:164$71_DATA' from process `\demo.$proc$demo.v:87$281'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:165$72_ADDR' from process `\demo.$proc$demo.v:87$281'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:165$72_DATA' from process `\demo.$proc$demo.v:87$281'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:166$73_ADDR' from process `\demo.$proc$demo.v:87$281'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:166$73_DATA' from process `\demo.$proc$demo.v:87$281'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:167$74_ADDR' from process `\demo.$proc$demo.v:87$281'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:167$74_DATA' from process `\demo.$proc$demo.v:87$281'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:168$75_ADDR' from process `\demo.$proc$demo.v:87$281'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:168$75_DATA' from process `\demo.$proc$demo.v:87$281'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:169$76_ADDR' from process `\demo.$proc$demo.v:87$281'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:169$76_DATA' from process `\demo.$proc$demo.v:87$281'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:170$77_ADDR' from process `\demo.$proc$demo.v:87$281'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:170$77_DATA' from process `\demo.$proc$demo.v:87$281'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:171$78_ADDR' from process `\demo.$proc$demo.v:87$281'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:171$78_DATA' from process `\demo.$proc$demo.v:87$281'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:172$79_ADDR' from process `\demo.$proc$demo.v:87$281'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:172$79_DATA' from process `\demo.$proc$demo.v:87$281'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:173$80_ADDR' from process `\demo.$proc$demo.v:87$281'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:173$80_DATA' from process `\demo.$proc$demo.v:87$281'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:174$81_ADDR' from process `\demo.$proc$demo.v:87$281'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:174$81_DATA' from process `\demo.$proc$demo.v:87$281'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:175$82_ADDR' from process `\demo.$proc$demo.v:87$281'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:175$82_DATA' from process `\demo.$proc$demo.v:87$281'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:176$83_ADDR' from process `\demo.$proc$demo.v:87$281'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:176$83_DATA' from process `\demo.$proc$demo.v:87$281'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:177$84_ADDR' from process `\demo.$proc$demo.v:87$281'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:177$84_DATA' from process `\demo.$proc$demo.v:87$281'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:178$85_ADDR' from process `\demo.$proc$demo.v:87$281'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:178$85_DATA' from process `\demo.$proc$demo.v:87$281'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:179$86_ADDR' from process `\demo.$proc$demo.v:87$281'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:179$86_DATA' from process `\demo.$proc$demo.v:87$281'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:180$87_ADDR' from process `\demo.$proc$demo.v:87$281'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:180$87_DATA' from process `\demo.$proc$demo.v:87$281'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:181$88_ADDR' from process `\demo.$proc$demo.v:87$281'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:181$88_DATA' from process `\demo.$proc$demo.v:87$281'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:182$89_ADDR' from process `\demo.$proc$demo.v:87$281'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:182$89_DATA' from process `\demo.$proc$demo.v:87$281'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:183$90_ADDR' from process `\demo.$proc$demo.v:87$281'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:183$90_DATA' from process `\demo.$proc$demo.v:87$281'.

2.3.7. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\demo.\rst' using process `\demo.$proc$demo.v:202$93'.
  created $dff cell `$procdff$871' with positive edge clock.
Creating register for signal `\demo.\dc' using process `\demo.$proc$demo.v:202$93'.
  created $dff cell `$procdff$872' with positive edge clock.
Creating register for signal `\demo.\mosi' using process `\demo.$proc$demo.v:202$93'.
  created $dff cell `$procdff$873' with positive edge clock.
Creating register for signal `\demo.\cs' using process `\demo.$proc$demo.v:202$93'.
  created $dff cell `$procdff$874' with positive edge clock.
Creating register for signal `\demo.\state' using process `\demo.$proc$demo.v:202$93'.
  created $dff cell `$procdff$875' with positive edge clock.
Creating register for signal `\demo.\delay' using process `\demo.$proc$demo.v:202$93'.
  created $dff cell `$procdff$876' with positive edge clock.
Creating register for signal `\demo.\data' using process `\demo.$proc$demo.v:202$93'.
  created $dff cell `$procdff$877' with positive edge clock.
Creating register for signal `\demo.\bit_counter' using process `\demo.$proc$demo.v:202$93'.
  created $dff cell `$procdff$878' with positive edge clock.
Creating register for signal `\demo.\pixel_data' using process `\demo.$proc$demo.v:202$93'.
  created $dff cell `$procdff$879' with positive edge clock.
Creating register for signal `\demo.\pixel_bit_counter' using process `\demo.$proc$demo.v:202$93'.
  created $dff cell `$procdff$880' with positive edge clock.
Creating register for signal `\demo.\cmd_counter' using process `\demo.$proc$demo.v:202$93'.
  created $dff cell `$procdff$881' with positive edge clock.
Creating register for signal `\demo.\param_counter' using process `\demo.$proc$demo.v:202$93'.
  created $dff cell `$procdff$882' with positive edge clock.
Creating register for signal `\demo.\params_left' using process `\demo.$proc$demo.v:202$93'.
  created $dff cell `$procdff$883' with positive edge clock.
Creating register for signal `\demo.\scl' using process `\demo.$proc$demo.v:195$91'.
  created $dff cell `$procdff$884' with positive edge clock.

2.3.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `demo.$proc$demo.v:87$281'.
Found and cleaned up 38 empty switches in `\demo.$proc$demo.v:202$93'.
Removing empty process `demo.$proc$demo.v:202$93'.
Removing empty process `demo.$proc$demo.v:195$91'.
Cleaned up 38 empty switches.

2.4. Executing FLATTEN pass (flatten design).
No more expansions possible.

2.5. Executing TRIBUF pass.

2.6. Executing DEMINOUT pass (demote inout ports to input or output).

2.7. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.
<suppressed ~16 debug messages>

2.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..
Removed 1 unused cells and 449 unused wires.
<suppressed ~2 debug messages>

2.9. Executing CHECK pass (checking for obvious problems).
checking module demo..
found and reported 0 problems.

2.10. Executing OPT pass (performing simple optimizations).

2.10.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.

2.10.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\demo'.
<suppressed ~267 debug messages>
Removed a total of 89 cells.

2.10.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \demo..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~14 debug messages>

2.10.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \demo.
    New ctrl vector for $pmux cell $procmux$559: { $procmux$575_CMP $auto$opt_reduce.cc:132:opt_mux$894 $auto$opt_reduce.cc:132:opt_mux$892 $auto$opt_reduce.cc:132:opt_mux$890 $auto$opt_reduce.cc:132:opt_mux$888 $auto$opt_reduce.cc:132:opt_mux$886 $procmux$560_CMP }
    New ctrl vector for $pmux cell $procmux$804: { $procmux$754_CMP $auto$opt_reduce.cc:132:opt_mux$896 }
    New ctrl vector for $pmux cell $procmux$840: { $auto$opt_reduce.cc:132:opt_mux$898 $procmux$708_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$885: { $procmux$561_CMP $procmux$562_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$887: { $procmux$563_CMP $procmux$564_CMP $procmux$565_CMP $procmux$568_CMP $procmux$572_CMP $procmux$574_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$889: { $procmux$566_CMP $procmux$567_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$891: { $procmux$569_CMP $procmux$570_CMP $procmux$571_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$893: { $procmux$573_CMP $procmux$576_CMP $procmux$577_CMP }
  Optimizing cells in module \demo.
Performed a total of 8 changes.

2.10.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\demo'.
<suppressed ~30 debug messages>
Removed a total of 10 cells.

2.10.6. Executing OPT_RMDFF pass (remove dff with constant values).

2.10.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..
Removed 0 unused cells and 99 unused wires.
<suppressed ~1 debug messages>

2.10.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.

2.10.9. Rerunning OPT passes. (Maybe there is more to do..)

2.10.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \demo..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~14 debug messages>

2.10.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \demo.
    New ctrl vector for $pmux cell $procmux$621: { $procmux$667_CMP $procmux$666_CMP $procmux$662_CMP $procmux$654_CMP $procmux$650_CMP $auto$opt_reduce.cc:132:opt_mux$900 $procmux$622_CMP }
    New ctrl vector for $pmux cell $procmux$671: { $procmux$667_CMP $procmux$792_CMP $procmux$666_CMP $procmux$662_CMP $procmux$525_CMP $procmux$658_CMP $procmux$654_CMP $procmux$771_CMP $procmux$544_CMP $procmux$754_CMP $procmux$750_CMP $procmux$746_CMP $procmux$742_CMP $procmux$708_CMP $procmux$474_CMP $procmux$650_CMP $auto$opt_reduce.cc:132:opt_mux$904 $auto$opt_reduce.cc:132:opt_mux$902 $procmux$622_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$899: { $procmux$630_CMP $procmux$626_CMP $procmux$638_CMP $procmux$634_CMP $procmux$646_CMP $procmux$642_CMP $procmux$658_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$901: { $procmux$626_CMP $procmux$634_CMP $procmux$642_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$903: { $procmux$630_CMP $procmux$638_CMP $procmux$646_CMP }
  Optimizing cells in module \demo.
Performed a total of 5 changes.

2.10.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\demo'.
Removed a total of 0 cells.

2.10.13. Executing OPT_RMDFF pass (remove dff with constant values).

2.10.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..

2.10.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.

2.10.16. Rerunning OPT passes. (Maybe there is more to do..)

2.10.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \demo..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~14 debug messages>

2.10.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \demo.
Performed a total of 0 changes.

2.10.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\demo'.
Removed a total of 0 cells.

2.10.20. Executing OPT_RMDFF pass (remove dff with constant values).

2.10.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..

2.10.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.

2.10.23. Finished OPT passes. (There is nothing left to do.)

2.11. Executing WREDUCE pass (reducing word size of cells).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:100$199 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:101$200 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:102$201 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:103$202 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:104$203 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:105$204 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:106$205 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:107$206 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:108$207 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:109$208 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:110$209 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:111$210 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:112$211 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:113$212 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:92$191 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:93$192 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:94$193 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:95$194 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:96$195 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:97$196 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:98$197 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:99$198 (cmd).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:116$213 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:117$214 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:118$215 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:119$216 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:120$217 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:121$218 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:122$219 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:123$220 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:124$221 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:125$222 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:126$223 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:127$224 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:128$225 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:129$226 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:130$227 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:131$228 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:132$229 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:133$230 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:134$231 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:135$232 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:136$233 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:137$234 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:138$235 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:139$236 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:140$237 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:141$238 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:142$239 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:143$240 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:144$241 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:145$242 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:146$243 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:147$244 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:148$245 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:149$246 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:150$247 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:151$248 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:152$249 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:153$250 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:154$251 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:155$252 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:156$253 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:157$254 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:158$255 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:159$256 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:160$257 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:161$258 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:162$259 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:163$260 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:164$261 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:165$262 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:166$263 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:167$264 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:168$265 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:169$266 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:170$267 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:171$268 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:172$269 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:173$270 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:174$271 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:175$272 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:176$273 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:177$274 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:178$275 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:179$276 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:180$277 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:181$278 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:182$279 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:183$280 (params).
Removed top 1 bits (of 16) from port B of cell demo.$le$demo.v:246$96 ($le).
Removed top 1 bits (of 16) from port B of cell demo.$le$demo.v:230$94 ($le).
Removed top 15 bits (of 16) from port B of cell demo.$add$demo.v:232$95 ($add).
Removed top 4 bits (of 5) from port B of cell demo.$add$demo.v:292$102 ($add).
Removed top 6 bits (of 12) from port B of cell demo.$lt$demo.v:300$103 ($lt).
Removed top 3 bits (of 12) from port B of cell demo.$lt$demo.v:314$105 ($lt).
Removed top 4 bits (of 5) from port B of cell demo.$sub$demo.v:337$109 ($sub).
Removed top 3 bits (of 4) from port B of cell demo.$sub$demo.v:354$115 ($sub).
Removed top 2 bits (of 3) from port B of cell demo.$sub$demo.v:373$119 ($sub).
Removed top 2 bits (of 8) from port B of cell demo.$eq$demo.v:447$141 ($eq).
Removed top 2 bits (of 8) from port B of cell demo.$eq$demo.v:446$138 ($eq).
Removed top 3 bits (of 8) from port B of cell demo.$eq$demo.v:451$145 ($eq).
Removed top 2 bits (of 8) from port B of cell demo.$eq$demo.v:503$166 ($eq).
Removed top 6 bits (of 7) from port B of cell demo.$add$demo.v:521$172 ($add).
Removed top 13 bits (of 14) from port B of cell demo.$sub$demo.v:523$173 ($sub).
Removed top 5 bits (of 12) from port B of cell demo.$lt$demo.v:531$174 ($lt).
Removed top 1 bits (of 16) from port B of cell demo.$lt$demo.v:643$189 ($lt).
Removed top 2 bits (of 6) from port B of cell demo.$procmux$474_CMP0 ($eq).
Removed top 3 bits (of 6) from port B of cell demo.$procmux$525_CMP0 ($eq).
Removed top 3 bits (of 6) from port B of cell demo.$procmux$544_CMP0 ($eq).
Removed top 2 bits (of 8) from port B of cell demo.$procmux$560_CMP0 ($eq).
Removed top 2 bits (of 8) from port B of cell demo.$procmux$561_CMP0 ($eq).
Removed top 2 bits (of 8) from port B of cell demo.$procmux$562_CMP0 ($eq).
Removed top 2 bits (of 8) from port B of cell demo.$procmux$563_CMP0 ($eq).
Removed top 2 bits (of 8) from port B of cell demo.$procmux$564_CMP0 ($eq).
Removed top 2 bits (of 6) from port B of cell demo.$procmux$622_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell demo.$procmux$626_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell demo.$procmux$630_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell demo.$procmux$634_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell demo.$procmux$638_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell demo.$procmux$642_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell demo.$procmux$646_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell demo.$procmux$650_CMP0 ($eq).
Removed top 2 bits (of 6) from port B of cell demo.$procmux$654_CMP0 ($eq).
Removed top 2 bits (of 6) from port B of cell demo.$procmux$658_CMP0 ($eq).
Removed top 4 bits (of 6) from port B of cell demo.$procmux$662_CMP0 ($eq).
Removed top 4 bits (of 6) from port B of cell demo.$procmux$666_CMP0 ($eq).
Removed top 3 bits (of 6) from mux cell demo.$procmux$698 ($mux).
Removed top 2 bits (of 6) from mux cell demo.$procmux$705 ($mux).
Removed top 2 bits (of 6) from port B of cell demo.$procmux$708_CMP0 ($eq).
Removed top 1 bits (of 6) from mux cell demo.$procmux$710 ($mux).
Removed top 1 bits (of 6) from mux cell demo.$procmux$713 ($mux).
Removed top 1 bits (of 6) from mux cell demo.$procmux$716 ($mux).
Removed top 1 bits (of 6) from mux cell demo.$procmux$719 ($mux).
Removed top 3 bits (of 6) from mux cell demo.$procmux$723 ($mux).
Removed top 1 bits (of 6) from mux cell demo.$procmux$726 ($mux).
Removed top 2 bits (of 6) from port B of cell demo.$procmux$742_CMP0 ($eq).
Removed top 5 bits (of 6) from mux cell demo.$procmux$744 ($mux).
Removed top 2 bits (of 6) from port B of cell demo.$procmux$746_CMP0 ($eq).
Removed top 2 bits (of 6) from mux cell demo.$procmux$748 ($mux).
Removed top 2 bits (of 6) from port B of cell demo.$procmux$750_CMP0 ($eq).
Removed top 2 bits (of 6) from mux cell demo.$procmux$752 ($mux).
Removed top 3 bits (of 6) from port B of cell demo.$procmux$754_CMP0 ($eq).
Removed top 4 bits (of 6) from mux cell demo.$procmux$756 ($mux).
Removed top 2 bits (of 6) from mux cell demo.$procmux$759 ($mux).
Removed top 4 bits (of 6) from mux cell demo.$procmux$763 ($mux).
Removed top 2 bits (of 6) from mux cell demo.$procmux$766 ($mux).
Removed top 3 bits (of 6) from port B of cell demo.$procmux$771_CMP0 ($eq).
Removed top 5 bits (of 6) from mux cell demo.$procmux$781 ($mux).
Removed top 5 bits (of 6) from port B of cell demo.$procmux$792_CMP0 ($eq).
Removed top 3 bits (of 6) from wire demo.$procmux$698_Y.
Removed top 2 bits (of 6) from wire demo.$procmux$705_Y.
Removed top 2 bits (of 6) from wire demo.$procmux$710_Y.
Removed top 1 bits (of 6) from wire demo.$procmux$713_Y.
Removed top 1 bits (of 6) from wire demo.$procmux$716_Y.
Removed top 1 bits (of 6) from wire demo.$procmux$719_Y.
Removed top 3 bits (of 6) from wire demo.$procmux$723_Y.
Removed top 1 bits (of 6) from wire demo.$procmux$726_Y.
Removed top 5 bits (of 6) from wire demo.$procmux$744_Y.
Removed top 2 bits (of 6) from wire demo.$procmux$748_Y.
Removed top 2 bits (of 6) from wire demo.$procmux$752_Y.
Removed top 4 bits (of 6) from wire demo.$procmux$756_Y.
Removed top 2 bits (of 6) from wire demo.$procmux$759_Y.
Removed top 4 bits (of 6) from wire demo.$procmux$763_Y.
Removed top 2 bits (of 6) from wire demo.$procmux$766_Y.
Removed top 5 bits (of 6) from wire demo.$procmux$781_Y.

2.12. Executing PEEPOPT pass (run peephole optimizers).

2.13. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..
Removed 0 unused cells and 16 unused wires.
<suppressed ~1 debug messages>

2.14. Executing SHARE pass (SAT-based resource sharing).
Found 3 cells in module demo that may be considered for resource sharing.
  Analyzing resource sharing options for $memrd$\params$demo.v:505$167 ($memrd):
    Found 1 activation_patterns using ctrl signal $procmux$474_CMP.
    No candidates found.
  Analyzing resource sharing options for $memrd$\cmd$demo.v:337$108 ($memrd):
    Found 9 activation_patterns using ctrl signal { $procmux$742_CMP $procmux$544_CMP $procmux$474_CMP $logic_or$demo.v:447$142_Y $logic_or$demo.v:442$135_Y $eq$demo.v:437$128_Y $eq$demo.v:431$125_Y $eq$demo.v:427$124_Y \dc }.
    Found 1 candidates: $memrd$\cmd$demo.v:261$98
    Analyzing resource sharing with $memrd$\cmd$demo.v:261$98 ($memrd):
      Found 2 activation_patterns using ctrl signal { $procmux$525_CMP $eq$demo.v:261$99_Y }.
      Forbidden control signals for this pair of cells: { $procmux$575_CMP $procmux$560_CMP $auto$opt_reduce.cc:132:opt_mux$894 $auto$opt_reduce.cc:132:opt_mux$886 $auto$opt_reduce.cc:132:opt_mux$888 $auto$opt_reduce.cc:132:opt_mux$892 $auto$opt_reduce.cc:132:opt_mux$890 $eq$demo.v:451$145_Y $logic_or$demo.v:447$142_Y $logic_or$demo.v:442$135_Y $eq$demo.v:437$128_Y $logic_and$demo.v:337$111_Y $eq$demo.v:337$110_Y $eq$demo.v:261$99_Y }
      Activation pattern for cell $memrd$\cmd$demo.v:337$108: { $procmux$742_CMP $eq$demo.v:431$125_Y \dc } = 3'101
      Activation pattern for cell $memrd$\cmd$demo.v:337$108: { $procmux$742_CMP $eq$demo.v:431$125_Y $eq$demo.v:427$124_Y \dc } = 4'1000
      Activation pattern for cell $memrd$\cmd$demo.v:337$108: $procmux$474_CMP = 1'1
      Activation pattern for cell $memrd$\cmd$demo.v:337$108: $procmux$544_CMP = 1'1
      Activation pattern for cell $memrd$\cmd$demo.v:261$98: $procmux$525_CMP = 1'1
      Adding exclusive control bits: $procmux$474_CMP vs. $procmux$525_CMP
      Adding exclusive control bits: $procmux$474_CMP vs. $procmux$525_CMP
      Adding exclusive control bits: $procmux$474_CMP vs. $procmux$742_CMP
      Adding exclusive control bits: $procmux$474_CMP vs. $procmux$544_CMP
      Adding exclusive control bits: $procmux$474_CMP vs. $procmux$525_CMP
      Adding exclusive control bits: $procmux$544_CMP vs. $procmux$742_CMP
      Adding exclusive control bits: $procmux$525_CMP vs. $procmux$742_CMP
      Adding exclusive control bits: $procmux$525_CMP vs. $procmux$544_CMP
      Size of SAT problem: 14 cells, 197 variables, 553 clauses
      According to the SAT solver this pair of cells can be shared.
      Activation signal for $memrd$\cmd$demo.v:261$98: $auto$share.cc:976:make_cell_activation_logic$921
      New cell: $auto$share.cc:710:make_supercell$923 ($memrd)
  Analyzing resource sharing options for $auto$share.cc:710:make_supercell$923 ($memrd):
    Found 5 activation_patterns using ctrl signal { $procmux$742_CMP $procmux$544_CMP $procmux$525_CMP $procmux$474_CMP $eq$demo.v:431$125_Y $eq$demo.v:427$124_Y \dc }.
    No candidates found.
Removing 2 cells in module demo:
  Removing cell $memrd$\cmd$demo.v:261$98 ($memrd).
  Removing cell $memrd$\cmd$demo.v:337$108 ($memrd).

2.15. Executing TECHMAP pass (map to technology primitives).

2.15.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/cmp2lut.v
Parsing Verilog input from `/usr/bin/../share/yosys/cmp2lut.v' to AST representation.
Generating RTLIL representation for module `\_90_lut_cmp_'.
Successfully finished Verilog frontend.

2.15.2. Continuing TECHMAP pass.
Using template $paramod$968c93632f950ce0f306709fa121c1e7a868940c\_90_lut_cmp_ for cells of type $eq.
Using template $paramod$77ad031fce233083715243f95e3cd2547d931e42\_90_lut_cmp_ for cells of type $eq.
Using template $paramod$b014af9c344b7c6e328d7df54af43048a86ccf04\_90_lut_cmp_ for cells of type $eq.
No more expansions possible.
<suppressed ~864 debug messages>

2.16. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.

2.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..
Removed 0 unused cells and 10 unused wires.
<suppressed ~2 debug messages>

2.18. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module demo:
  creating $macc model for $add$demo.v:232$95 ($add).
  creating $macc model for $add$demo.v:292$102 ($add).
  creating $macc model for $add$demo.v:521$172 ($add).
  creating $macc model for $sub$demo.v:337$109 ($sub).
  creating $macc model for $sub$demo.v:354$115 ($sub).
  creating $macc model for $sub$demo.v:373$119 ($sub).
  creating $macc model for $sub$demo.v:523$173 ($sub).
  creating $alu model for $macc $sub$demo.v:523$173.
  creating $alu model for $macc $sub$demo.v:373$119.
  creating $alu model for $macc $sub$demo.v:354$115.
  creating $alu model for $macc $sub$demo.v:337$109.
  creating $alu model for $macc $add$demo.v:521$172.
  creating $alu model for $macc $add$demo.v:292$102.
  creating $alu model for $macc $add$demo.v:232$95.
  creating $alu model for $le$demo.v:230$94 ($le): new $alu
  creating $alu model for $le$demo.v:246$96 ($le): new $alu
  creating $alu model for $lt$demo.v:300$103 ($lt): new $alu
  creating $alu model for $lt$demo.v:314$105 ($lt): new $alu
  creating $alu model for $lt$demo.v:531$174 ($lt): new $alu
  creating $alu model for $lt$demo.v:643$189 ($lt): new $alu
  creating $alu cell for $lt$demo.v:643$189: $auto$alumacc.cc:474:replace_alu$939
  creating $alu cell for $lt$demo.v:531$174: $auto$alumacc.cc:474:replace_alu$950
  creating $alu cell for $lt$demo.v:314$105: $auto$alumacc.cc:474:replace_alu$961
  creating $alu cell for $lt$demo.v:300$103: $auto$alumacc.cc:474:replace_alu$972
  creating $alu cell for $le$demo.v:246$96: $auto$alumacc.cc:474:replace_alu$983
  creating $alu cell for $le$demo.v:230$94: $auto$alumacc.cc:474:replace_alu$996
  creating $alu cell for $add$demo.v:232$95: $auto$alumacc.cc:474:replace_alu$1009
  creating $alu cell for $add$demo.v:292$102: $auto$alumacc.cc:474:replace_alu$1012
  creating $alu cell for $add$demo.v:521$172: $auto$alumacc.cc:474:replace_alu$1015
  creating $alu cell for $sub$demo.v:337$109: $auto$alumacc.cc:474:replace_alu$1018
  creating $alu cell for $sub$demo.v:354$115: $auto$alumacc.cc:474:replace_alu$1021
  creating $alu cell for $sub$demo.v:373$119: $auto$alumacc.cc:474:replace_alu$1024
  creating $alu cell for $sub$demo.v:523$173: $auto$alumacc.cc:474:replace_alu$1027
  created 13 $alu and 0 $macc cells.

2.19. Executing OPT pass (performing simple optimizations).

2.19.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.
<suppressed ~10 debug messages>

2.19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\demo'.
<suppressed ~18 debug messages>
Removed a total of 6 cells.

2.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \demo..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~15 debug messages>

2.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \demo.
    New input vector for $reduce_or cell $auto$alumacc.cc:509:replace_alu$994: { $auto$rtlil.cc:1832:Not$993 $auto$rtlil.cc:1835:ReduceAnd$987 }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$889: { $eq$demo.v:441$131_Y $eq$demo.v:442$134_Y }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$885: { $eq$demo.v:446$138_Y $eq$demo.v:447$141_Y }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$999: { $auto$alumacc.cc:490:replace_alu$997 [0] $auto$alumacc.cc:490:replace_alu$997 [1] $auto$alumacc.cc:490:replace_alu$997 [2] $auto$alumacc.cc:490:replace_alu$997 [3] $auto$alumacc.cc:490:replace_alu$997 [4] $auto$alumacc.cc:490:replace_alu$997 [5] $auto$alumacc.cc:490:replace_alu$997 [6] $auto$alumacc.cc:490:replace_alu$997 [7] $auto$alumacc.cc:490:replace_alu$997 [8] $auto$alumacc.cc:490:replace_alu$997 [9] $auto$alumacc.cc:490:replace_alu$997 [10] $auto$alumacc.cc:490:replace_alu$997 [11] $auto$alumacc.cc:490:replace_alu$997 [12] $auto$alumacc.cc:490:replace_alu$997 [13] $auto$alumacc.cc:490:replace_alu$997 [14] $auto$alumacc.cc:490:replace_alu$997 [15] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$942: { $auto$alumacc.cc:490:replace_alu$940 [0] $auto$alumacc.cc:490:replace_alu$940 [1] $auto$alumacc.cc:490:replace_alu$940 [2] $auto$alumacc.cc:490:replace_alu$940 [3] $auto$alumacc.cc:490:replace_alu$940 [4] $auto$alumacc.cc:490:replace_alu$940 [5] $auto$alumacc.cc:490:replace_alu$940 [6] $auto$alumacc.cc:490:replace_alu$940 [7] $auto$alumacc.cc:490:replace_alu$940 [8] $auto$alumacc.cc:490:replace_alu$940 [9] $auto$alumacc.cc:490:replace_alu$940 [10] $auto$alumacc.cc:490:replace_alu$940 [11] $auto$alumacc.cc:490:replace_alu$940 [12] $auto$alumacc.cc:490:replace_alu$940 [13] $auto$alumacc.cc:490:replace_alu$940 [14] $auto$alumacc.cc:490:replace_alu$940 [15] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$953: { $auto$alumacc.cc:490:replace_alu$951 [0] $auto$alumacc.cc:490:replace_alu$951 [1] $auto$alumacc.cc:490:replace_alu$951 [2] $auto$alumacc.cc:490:replace_alu$951 [3] $auto$alumacc.cc:490:replace_alu$951 [4] $auto$alumacc.cc:490:replace_alu$951 [5] $auto$alumacc.cc:490:replace_alu$951 [6] $auto$alumacc.cc:490:replace_alu$951 [7] $auto$alumacc.cc:490:replace_alu$951 [8] $auto$alumacc.cc:490:replace_alu$951 [9] $auto$alumacc.cc:490:replace_alu$951 [10] $auto$alumacc.cc:490:replace_alu$951 [11] $auto$alumacc.cc:490:replace_alu$951 [12] $auto$alumacc.cc:490:replace_alu$951 [13] $auto$alumacc.cc:490:replace_alu$951 [14] $auto$alumacc.cc:490:replace_alu$951 [15] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$964: { $auto$alumacc.cc:490:replace_alu$962 [0] $auto$alumacc.cc:490:replace_alu$962 [1] $auto$alumacc.cc:490:replace_alu$962 [2] $auto$alumacc.cc:490:replace_alu$962 [3] $auto$alumacc.cc:490:replace_alu$962 [4] $auto$alumacc.cc:490:replace_alu$962 [5] $auto$alumacc.cc:490:replace_alu$962 [6] $auto$alumacc.cc:490:replace_alu$962 [7] $auto$alumacc.cc:490:replace_alu$962 [8] $auto$alumacc.cc:490:replace_alu$962 [9] $auto$alumacc.cc:490:replace_alu$962 [10] $auto$alumacc.cc:490:replace_alu$962 [11] $auto$alumacc.cc:490:replace_alu$962 [12] $auto$alumacc.cc:490:replace_alu$962 [13] $auto$alumacc.cc:490:replace_alu$962 [14] $auto$alumacc.cc:490:replace_alu$962 [15] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$975: { $auto$alumacc.cc:490:replace_alu$973 [0] $auto$alumacc.cc:490:replace_alu$973 [1] $auto$alumacc.cc:490:replace_alu$973 [2] $auto$alumacc.cc:490:replace_alu$973 [3] $auto$alumacc.cc:490:replace_alu$973 [4] $auto$alumacc.cc:490:replace_alu$973 [5] $auto$alumacc.cc:490:replace_alu$973 [6] $auto$alumacc.cc:490:replace_alu$973 [7] $auto$alumacc.cc:490:replace_alu$973 [8] $auto$alumacc.cc:490:replace_alu$973 [9] $auto$alumacc.cc:490:replace_alu$973 [10] $auto$alumacc.cc:490:replace_alu$973 [11] $auto$alumacc.cc:490:replace_alu$973 [12] $auto$alumacc.cc:490:replace_alu$973 [13] $auto$alumacc.cc:490:replace_alu$973 [14] $auto$alumacc.cc:490:replace_alu$973 [15] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$986: { $auto$alumacc.cc:490:replace_alu$984 [0] $auto$alumacc.cc:490:replace_alu$984 [1] $auto$alumacc.cc:490:replace_alu$984 [2] $auto$alumacc.cc:490:replace_alu$984 [3] $auto$alumacc.cc:490:replace_alu$984 [4] $auto$alumacc.cc:490:replace_alu$984 [5] $auto$alumacc.cc:490:replace_alu$984 [6] $auto$alumacc.cc:490:replace_alu$984 [7] $auto$alumacc.cc:490:replace_alu$984 [8] $auto$alumacc.cc:490:replace_alu$984 [9] $auto$alumacc.cc:490:replace_alu$984 [10] $auto$alumacc.cc:490:replace_alu$984 [11] $auto$alumacc.cc:490:replace_alu$984 [12] $auto$alumacc.cc:490:replace_alu$984 [13] $auto$alumacc.cc:490:replace_alu$984 [14] $auto$alumacc.cc:490:replace_alu$984 [15] }
  Optimizing cells in module \demo.
Performed a total of 9 changes.

2.19.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\demo'.
Removed a total of 0 cells.

2.19.6. Executing OPT_RMDFF pass (remove dff with constant values).

2.19.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..
Removed 4 unused cells and 16 unused wires.
<suppressed ~5 debug messages>

2.19.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.

2.19.9. Rerunning OPT passes. (Maybe there is more to do..)

2.19.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \demo..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~15 debug messages>

2.19.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \demo.
Performed a total of 0 changes.

2.19.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\demo'.
Removed a total of 0 cells.

2.19.13. Executing OPT_RMDFF pass (remove dff with constant values).

2.19.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..

2.19.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.

2.19.16. Finished OPT passes. (There is nothing left to do.)

2.20. Executing FSM pass (extract and optimize FSM).

2.20.1. Executing FSM_DETECT pass (finding FSMs in design).
Not marking demo.state as FSM state register:
    Register has an initialization value.

2.20.2. Executing FSM_EXTRACT pass (extracting FSM from design).

2.20.3. Executing FSM_OPT pass (simple optimizations of FSMs).

2.20.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..

2.20.5. Executing FSM_OPT pass (simple optimizations of FSMs).

2.20.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

2.20.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

2.20.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

2.21. Executing OPT pass (performing simple optimizations).

2.21.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.

2.21.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\demo'.
Removed a total of 0 cells.

2.21.3. Executing OPT_RMDFF pass (remove dff with constant values).

2.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..

2.21.5. Finished fast OPT passes.

2.22. Executing MEMORY pass.

2.22.1. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).
Checking cell `$auto$share.cc:710:make_supercell$923' in module `\demo': no (compatible) $dff found.
Checking cell `$memrd$\params$demo.v:505$167' in module `\demo': no (compatible) $dff found.

2.22.2. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..

2.22.3. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

2.22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..

2.22.5. Executing MEMORY_COLLECT pass (generating $mem cells).
Collecting $memrd, $memwr and $meminit for memory `\cmd' in module `\demo':
  $meminit$\cmd$demo.v:92$191 ($meminit)
  $meminit$\cmd$demo.v:93$192 ($meminit)
  $meminit$\cmd$demo.v:94$193 ($meminit)
  $meminit$\cmd$demo.v:95$194 ($meminit)
  $meminit$\cmd$demo.v:96$195 ($meminit)
  $meminit$\cmd$demo.v:97$196 ($meminit)
  $meminit$\cmd$demo.v:98$197 ($meminit)
  $meminit$\cmd$demo.v:99$198 ($meminit)
  $meminit$\cmd$demo.v:100$199 ($meminit)
  $meminit$\cmd$demo.v:101$200 ($meminit)
  $meminit$\cmd$demo.v:102$201 ($meminit)
  $meminit$\cmd$demo.v:103$202 ($meminit)
  $meminit$\cmd$demo.v:104$203 ($meminit)
  $meminit$\cmd$demo.v:105$204 ($meminit)
  $meminit$\cmd$demo.v:106$205 ($meminit)
  $meminit$\cmd$demo.v:107$206 ($meminit)
  $meminit$\cmd$demo.v:108$207 ($meminit)
  $meminit$\cmd$demo.v:109$208 ($meminit)
  $meminit$\cmd$demo.v:110$209 ($meminit)
  $meminit$\cmd$demo.v:111$210 ($meminit)
  $meminit$\cmd$demo.v:112$211 ($meminit)
  $meminit$\cmd$demo.v:113$212 ($meminit)
  $auto$share.cc:710:make_supercell$923 ($memrd)
Collecting $memrd, $memwr and $meminit for memory `\params' in module `\demo':
  $meminit$\params$demo.v:116$213 ($meminit)
  $meminit$\params$demo.v:117$214 ($meminit)
  $meminit$\params$demo.v:118$215 ($meminit)
  $meminit$\params$demo.v:119$216 ($meminit)
  $meminit$\params$demo.v:120$217 ($meminit)
  $meminit$\params$demo.v:121$218 ($meminit)
  $meminit$\params$demo.v:122$219 ($meminit)
  $meminit$\params$demo.v:123$220 ($meminit)
  $meminit$\params$demo.v:124$221 ($meminit)
  $meminit$\params$demo.v:125$222 ($meminit)
  $meminit$\params$demo.v:126$223 ($meminit)
  $meminit$\params$demo.v:127$224 ($meminit)
  $meminit$\params$demo.v:128$225 ($meminit)
  $meminit$\params$demo.v:129$226 ($meminit)
  $meminit$\params$demo.v:130$227 ($meminit)
  $meminit$\params$demo.v:131$228 ($meminit)
  $meminit$\params$demo.v:132$229 ($meminit)
  $meminit$\params$demo.v:133$230 ($meminit)
  $meminit$\params$demo.v:134$231 ($meminit)
  $meminit$\params$demo.v:135$232 ($meminit)
  $meminit$\params$demo.v:136$233 ($meminit)
  $meminit$\params$demo.v:137$234 ($meminit)
  $meminit$\params$demo.v:138$235 ($meminit)
  $meminit$\params$demo.v:139$236 ($meminit)
  $meminit$\params$demo.v:140$237 ($meminit)
  $meminit$\params$demo.v:141$238 ($meminit)
  $meminit$\params$demo.v:142$239 ($meminit)
  $meminit$\params$demo.v:143$240 ($meminit)
  $meminit$\params$demo.v:144$241 ($meminit)
  $meminit$\params$demo.v:145$242 ($meminit)
  $meminit$\params$demo.v:146$243 ($meminit)
  $meminit$\params$demo.v:147$244 ($meminit)
  $meminit$\params$demo.v:148$245 ($meminit)
  $meminit$\params$demo.v:149$246 ($meminit)
  $meminit$\params$demo.v:150$247 ($meminit)
  $meminit$\params$demo.v:151$248 ($meminit)
  $meminit$\params$demo.v:152$249 ($meminit)
  $meminit$\params$demo.v:153$250 ($meminit)
  $meminit$\params$demo.v:154$251 ($meminit)
  $meminit$\params$demo.v:155$252 ($meminit)
  $meminit$\params$demo.v:156$253 ($meminit)
  $meminit$\params$demo.v:157$254 ($meminit)
  $meminit$\params$demo.v:158$255 ($meminit)
  $meminit$\params$demo.v:159$256 ($meminit)
  $meminit$\params$demo.v:160$257 ($meminit)
  $meminit$\params$demo.v:161$258 ($meminit)
  $meminit$\params$demo.v:162$259 ($meminit)
  $meminit$\params$demo.v:163$260 ($meminit)
  $meminit$\params$demo.v:164$261 ($meminit)
  $meminit$\params$demo.v:165$262 ($meminit)
  $meminit$\params$demo.v:166$263 ($meminit)
  $meminit$\params$demo.v:167$264 ($meminit)
  $meminit$\params$demo.v:168$265 ($meminit)
  $meminit$\params$demo.v:169$266 ($meminit)
  $meminit$\params$demo.v:170$267 ($meminit)
  $meminit$\params$demo.v:171$268 ($meminit)
  $meminit$\params$demo.v:172$269 ($meminit)
  $meminit$\params$demo.v:173$270 ($meminit)
  $meminit$\params$demo.v:174$271 ($meminit)
  $meminit$\params$demo.v:175$272 ($meminit)
  $meminit$\params$demo.v:176$273 ($meminit)
  $meminit$\params$demo.v:177$274 ($meminit)
  $meminit$\params$demo.v:178$275 ($meminit)
  $meminit$\params$demo.v:179$276 ($meminit)
  $meminit$\params$demo.v:180$277 ($meminit)
  $meminit$\params$demo.v:181$278 ($meminit)
  $meminit$\params$demo.v:182$279 ($meminit)
  $meminit$\params$demo.v:183$280 ($meminit)
  $memrd$\params$demo.v:505$167 ($memrd)

2.23. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..

2.24. Executing MEMORY_BRAM pass (mapping $mem cells to block memories).
Processing demo.cmd:
  Properties: ports=1 bits=176 rports=1 wports=0 dbits=8 abits=5 words=22
  Checking rule #1 for bram type $__ICE40_RAM4K_M0 (variant 1):
    Bram geometry: abits=8 dbits=16 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M0: awaste=234 dwaste=8 bwaste=3920 waste=3920 efficiency=4
    Rule #1 for bram type $__ICE40_RAM4K_M0 (variant 1) accepted.
    Mapping to bram type $__ICE40_RAM4K_M0 (variant 1):
      Read port #0 is in clock domain !~async~.
        Bram port A1.1 has incompatible clock type.
        Failed to map read port #0.
    Mapping to bram type $__ICE40_RAM4K_M0 failed.
  Checking rule #2 for bram type $__ICE40_RAM4K_M123 (variant 1):
    Bram geometry: abits=9 dbits=8 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=490 dwaste=0 bwaste=3920 waste=3920 efficiency=4
    Rule #2 for bram type $__ICE40_RAM4K_M123 (variant 1) accepted.
    Mapping to bram type $__ICE40_RAM4K_M123 (variant 1):
      Read port #0 is in clock domain !~async~.
        Bram port A1.1 has incompatible clock type.
        Failed to map read port #0.
    Mapping to bram type $__ICE40_RAM4K_M123 failed.
  Checking rule #2 for bram type $__ICE40_RAM4K_M123 (variant 2):
    Bram geometry: abits=10 dbits=4 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=1002 dwaste=0 bwaste=4008 waste=4008 efficiency=2
    Rule #2 for bram type $__ICE40_RAM4K_M123 (variant 2) accepted.
    Mapping to bram type $__ICE40_RAM4K_M123 (variant 2):
      Read port #0 is in clock domain !~async~.
        Bram port A1.1 has incompatible clock type.
        Failed to map read port #0.
    Mapping to bram type $__ICE40_RAM4K_M123 failed.
  Checking rule #2 for bram type $__ICE40_RAM4K_M123 (variant 3):
    Bram geometry: abits=11 dbits=2 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=2026 dwaste=0 bwaste=4052 waste=4052 efficiency=1
    Rule #2 for bram type $__ICE40_RAM4K_M123 (variant 3) rejected: requirement 'min efficiency 2' not met.
  No acceptable bram resources found.
Processing demo.params:
  Properties: ports=1 bits=544 rports=1 wports=0 dbits=8 abits=7 words=68
  Checking rule #1 for bram type $__ICE40_RAM4K_M0 (variant 1):
    Bram geometry: abits=8 dbits=16 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M0: awaste=188 dwaste=8 bwaste=3552 waste=3552 efficiency=13
    Rule #1 for bram type $__ICE40_RAM4K_M0 (variant 1) accepted.
    Mapping to bram type $__ICE40_RAM4K_M0 (variant 1):
      Read port #0 is in clock domain !~async~.
        Bram port A1.1 has incompatible clock type.
        Failed to map read port #0.
    Mapping to bram type $__ICE40_RAM4K_M0 failed.
  Checking rule #2 for bram type $__ICE40_RAM4K_M123 (variant 1):
    Bram geometry: abits=9 dbits=8 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=444 dwaste=0 bwaste=3552 waste=3552 efficiency=13
    Rule #2 for bram type $__ICE40_RAM4K_M123 (variant 1) accepted.
    Mapping to bram type $__ICE40_RAM4K_M123 (variant 1):
      Read port #0 is in clock domain !~async~.
        Bram port A1.1 has incompatible clock type.
        Failed to map read port #0.
    Mapping to bram type $__ICE40_RAM4K_M123 failed.
  Checking rule #2 for bram type $__ICE40_RAM4K_M123 (variant 2):
    Bram geometry: abits=10 dbits=4 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=956 dwaste=0 bwaste=3824 waste=3824 efficiency=6
    Rule #2 for bram type $__ICE40_RAM4K_M123 (variant 2) accepted.
    Mapping to bram type $__ICE40_RAM4K_M123 (variant 2):
      Read port #0 is in clock domain !~async~.
        Bram port A1.1 has incompatible clock type.
        Failed to map read port #0.
    Mapping to bram type $__ICE40_RAM4K_M123 failed.
  Checking rule #2 for bram type $__ICE40_RAM4K_M123 (variant 3):
    Bram geometry: abits=11 dbits=2 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=1980 dwaste=0 bwaste=3960 waste=3960 efficiency=3
    Rule #2 for bram type $__ICE40_RAM4K_M123 (variant 3) accepted.
    Mapping to bram type $__ICE40_RAM4K_M123 (variant 3):
      Read port #0 is in clock domain !~async~.
        Bram port A1.1 has incompatible clock type.
        Failed to map read port #0.
    Mapping to bram type $__ICE40_RAM4K_M123 failed.
  No acceptable bram resources found.

2.25. Executing TECHMAP pass (map to technology primitives).

2.25.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/brams_map.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/brams_map.v' to AST representation.
Generating RTLIL representation for module `\$__ICE40_RAM4K'.
Generating RTLIL representation for module `\$__ICE40_RAM4K_M0'.
Generating RTLIL representation for module `\$__ICE40_RAM4K_M123'.
Successfully finished Verilog frontend.

2.25.2. Continuing TECHMAP pass.
No more expansions possible.

2.26. Executing ICE40_BRAMINIT pass.

2.27. Executing OPT pass (performing simple optimizations).

2.27.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.
<suppressed ~1 debug messages>

2.27.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\demo'.
Removed a total of 0 cells.

2.27.3. Executing OPT_RMDFF pass (remove dff with constant values).

2.27.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

2.27.5. Finished fast OPT passes.

2.28. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).
Mapping memory cell \cmd in module \demo:
  created 22 $dff cells and 0 static cells of width 8.
  read interface: 0 $dff and 31 $mux cells.
  write interface: 0 write mux blocks.
Mapping memory cell \params in module \demo:
  created 68 $dff cells and 0 static cells of width 8.
  read interface: 0 $dff and 127 $mux cells.
  write interface: 0 write mux blocks.

2.29. Executing OPT pass (performing simple optimizations).

2.29.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.
<suppressed ~138 debug messages>

2.29.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\demo'.
Removed a total of 0 cells.

2.29.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \demo..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~17 debug messages>

2.29.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \demo.
    Consolidated identical input bits for $pmux cell $procmux$559:
      Old ports: A=14'00000000000000, B=98'00000000000110000000000000110000000000001000000000010000000000000000010000000000010011001000000000, Y=$procmux$559_Y
      New ports: A=5'00000, B=35'00110000110001001000000010010010000, Y={ $procmux$559_Y [9] $procmux$559_Y [4] $procmux$559_Y [2:0] }
      New connections: { $procmux$559_Y [13:10] $procmux$559_Y [8:5] $procmux$559_Y [3] } = { $procmux$559_Y [9] $procmux$559_Y [9] 7'0000000 }
    Consolidated identical input bits for $mux cell $procmux$698:
      Old ports: A=3'100, B=3'011, Y=$auto$wreduce.cc:455:run$905 [2:0]
      New ports: A=2'10, B=2'01, Y={ $auto$wreduce.cc:455:run$905 [2] $auto$wreduce.cc:455:run$905 [0] }
      New connections: $auto$wreduce.cc:455:run$905 [1] = $auto$wreduce.cc:455:run$905 [0]
    Consolidated identical input bits for $mux cell $procmux$705:
      Old ports: A=4'0110, B=4'1110, Y=$auto$wreduce.cc:455:run$906 [3:0]
      New ports: A=1'0, B=1'1, Y=$auto$wreduce.cc:455:run$906 [3]
      New connections: $auto$wreduce.cc:455:run$906 [2:0] = 3'110
    Consolidated identical input bits for $mux cell $procmux$710:
      Old ports: A=5'01100, B=5'10111, Y=$auto$wreduce.cc:455:run$907 [4:0]
      New ports: A=2'10, B=2'01, Y={ $auto$wreduce.cc:455:run$907 [3] $auto$wreduce.cc:455:run$907 [0] }
      New connections: { $auto$wreduce.cc:455:run$907 [4] $auto$wreduce.cc:455:run$907 [2:1] } = { $auto$wreduce.cc:455:run$907 [0] 1'1 $auto$wreduce.cc:455:run$907 [0] }
    Consolidated identical input bits for $mux cell $procmux$723:
      Old ports: A=3'011, B=3'101, Y=$auto$wreduce.cc:455:run$911 [2:0]
      New ports: A=2'01, B=2'10, Y=$auto$wreduce.cc:455:run$911 [2:1]
      New connections: $auto$wreduce.cc:455:run$911 [0] = 1'1
    Consolidated identical input bits for $mux cell $procmux$729:
      Old ports: A={ 1'0 $auto$wreduce.cc:455:run$912 [4:0] }, B=6'010100, Y=$procmux$729_Y
      New ports: A=$auto$wreduce.cc:455:run$912 [4:0], B=5'10100, Y=$procmux$729_Y [4:0]
      New connections: $procmux$729_Y [5] = 1'0
    Consolidated identical input bits for $mux cell $procmux$748:
      Old ports: A=4'1010, B=4'0110, Y=$auto$wreduce.cc:455:run$914 [3:0]
      New ports: A=2'10, B=2'01, Y=$auto$wreduce.cc:455:run$914 [3:2]
      New connections: $auto$wreduce.cc:455:run$914 [1:0] = 2'10
    Consolidated identical input bits for $mux cell $procmux$752:
      Old ports: A=4'0111, B=4'1010, Y=$auto$wreduce.cc:455:run$915 [3:0]
      New ports: A=2'01, B=2'10, Y={ $auto$wreduce.cc:455:run$915 [3] $auto$wreduce.cc:455:run$915 [0] }
      New connections: $auto$wreduce.cc:455:run$915 [2:1] = { $auto$wreduce.cc:455:run$915 [0] 1'1 }
    Consolidated identical input bits for $mux cell $procmux$756:
      Old ports: A=2'10, B=2'00, Y=$auto$wreduce.cc:455:run$916 [1:0]
      New ports: A=1'1, B=1'0, Y=$auto$wreduce.cc:455:run$916 [1]
      New connections: $auto$wreduce.cc:455:run$916 [0] = 1'0
    Consolidated identical input bits for $mux cell $procmux$763:
      Old ports: A=2'10, B=2'00, Y=$auto$wreduce.cc:455:run$918 [1:0]
      New ports: A=1'1, B=1'0, Y=$auto$wreduce.cc:455:run$918 [1]
      New connections: $auto$wreduce.cc:455:run$918 [0] = 1'0
    Consolidated identical input bits for $mux cell $procmux$768:
      Old ports: A={ 2'00 $auto$wreduce.cc:455:run$917 [3:0] }, B={ 2'00 $auto$wreduce.cc:455:run$919 [3:0] }, Y=$procmux$768_Y
      New ports: A=$auto$wreduce.cc:455:run$917 [3:0], B=$auto$wreduce.cc:455:run$919 [3:0], Y=$procmux$768_Y [3:0]
      New connections: $procmux$768_Y [5:4] = 2'00
  Optimizing cells in module \demo.
    Consolidated identical input bits for $mux cell $procmux$713:
      Old ports: A=$auto$wreduce.cc:455:run$907 [4:0], B=5'10101, Y=$auto$wreduce.cc:455:run$908 [4:0]
      New ports: A={ $auto$wreduce.cc:455:run$907 [3] $auto$wreduce.cc:455:run$907 [0] $auto$wreduce.cc:455:run$907 [0] }, B=3'001, Y={ $auto$wreduce.cc:455:run$908 [3] $auto$wreduce.cc:455:run$908 [1:0] }
      New connections: { $auto$wreduce.cc:455:run$908 [4] $auto$wreduce.cc:455:run$908 [2] } = { $auto$wreduce.cc:455:run$908 [0] 1'1 }
    Consolidated identical input bits for $mux cell $procmux$726:
      Old ports: A={ 2'01 $auto$wreduce.cc:455:run$911 [2:0] }, B=5'10110, Y=$auto$wreduce.cc:455:run$912 [4:0]
      New ports: A={ 1'0 $auto$wreduce.cc:455:run$911 [2:1] 1'1 }, B=4'1110, Y={ $auto$wreduce.cc:455:run$912 [4] $auto$wreduce.cc:455:run$912 [2:0] }
      New connections: $auto$wreduce.cc:455:run$912 [3] = $auto$wreduce.cc:455:run$912 [0]
    Consolidated identical input bits for $mux cell $procmux$732:
      Old ports: A=$procmux$729_Y, B=6'010010, Y=$procmux$732_Y
      New ports: A=$procmux$729_Y [4:0], B=5'10010, Y=$procmux$732_Y [4:0]
      New connections: $procmux$732_Y [5] = 1'0
    Consolidated identical input bits for $mux cell $procmux$759:
      Old ports: A={ 2'10 $auto$wreduce.cc:455:run$916 [1:0] }, B=4'0111, Y=$auto$wreduce.cc:455:run$917 [3:0]
      New ports: A={ 1'1 $auto$wreduce.cc:455:run$916 [1] 1'0 }, B=3'011, Y={ $auto$wreduce.cc:455:run$917 [3] $auto$wreduce.cc:455:run$917 [1:0] }
      New connections: $auto$wreduce.cc:455:run$917 [2] = $auto$wreduce.cc:455:run$917 [0]
    Consolidated identical input bits for $mux cell $procmux$766:
      Old ports: A={ 2'10 $auto$wreduce.cc:455:run$918 [1:0] }, B=4'0111, Y=$auto$wreduce.cc:455:run$919 [3:0]
      New ports: A={ 1'1 $auto$wreduce.cc:455:run$918 [1] 1'0 }, B=3'011, Y={ $auto$wreduce.cc:455:run$919 [3] $auto$wreduce.cc:455:run$919 [1:0] }
      New connections: $auto$wreduce.cc:455:run$919 [2] = $auto$wreduce.cc:455:run$919 [0]
  Optimizing cells in module \demo.
    Consolidated identical input bits for $mux cell $procmux$716:
      Old ports: A=$auto$wreduce.cc:455:run$908 [4:0], B=5'10011, Y=$auto$wreduce.cc:455:run$909 [4:0]
      New ports: A={ $auto$wreduce.cc:455:run$908 [3] 1'1 $auto$wreduce.cc:455:run$908 [1:0] }, B=4'0011, Y=$auto$wreduce.cc:455:run$909 [3:0]
      New connections: $auto$wreduce.cc:455:run$909 [4] = $auto$wreduce.cc:455:run$909 [0]
    Consolidated identical input bits for $mux cell $procmux$729:
      Old ports: A=$auto$wreduce.cc:455:run$912 [4:0], B=5'10100, Y=$procmux$729_Y [4:0]
      New ports: A={ $auto$wreduce.cc:455:run$912 [4] $auto$wreduce.cc:455:run$912 [2:0] }, B=4'1100, Y={ $procmux$729_Y [4] $procmux$729_Y [2:0] }
      New connections: $procmux$729_Y [3] = $procmux$729_Y [0]
    Consolidated identical input bits for $mux cell $procmux$735:
      Old ports: A=$procmux$732_Y, B=6'001111, Y=$procmux$735_Y
      New ports: A=$procmux$732_Y [4:0], B=5'01111, Y=$procmux$735_Y [4:0]
      New connections: $procmux$735_Y [5] = 1'0
    Consolidated identical input bits for $mux cell $procmux$768:
      Old ports: A=$auto$wreduce.cc:455:run$917 [3:0], B=$auto$wreduce.cc:455:run$919 [3:0], Y=$procmux$768_Y [3:0]
      New ports: A={ $auto$wreduce.cc:455:run$917 [3] $auto$wreduce.cc:455:run$917 [1:0] }, B={ $auto$wreduce.cc:455:run$919 [3] $auto$wreduce.cc:455:run$919 [1:0] }, Y={ $procmux$768_Y [3] $procmux$768_Y [1:0] }
      New connections: $procmux$768_Y [2] = $procmux$768_Y [0]
  Optimizing cells in module \demo.
    Consolidated identical input bits for $mux cell $procmux$732:
      Old ports: A=$procmux$729_Y [4:0], B=5'10010, Y=$procmux$732_Y [4:0]
      New ports: A={ $procmux$729_Y [4] $procmux$729_Y [2:0] }, B=4'1010, Y={ $procmux$732_Y [4] $procmux$732_Y [2:0] }
      New connections: $procmux$732_Y [3] = $procmux$732_Y [0]
    Consolidated identical input bits for $mux cell $procmux$738:
      Old ports: A=$procmux$735_Y, B=6'010000, Y=$procmux$738_Y
      New ports: A=$procmux$735_Y [4:0], B=5'10000, Y=$procmux$738_Y [4:0]
      New connections: $procmux$738_Y [5] = 1'0
  Optimizing cells in module \demo.
    Consolidated identical input bits for $mux cell $procmux$735:
      Old ports: A=$procmux$732_Y [4:0], B=5'01111, Y=$procmux$735_Y [4:0]
      New ports: A={ $procmux$732_Y [4] $procmux$732_Y [2:0] }, B=4'0111, Y={ $procmux$735_Y [4] $procmux$735_Y [2:0] }
      New connections: $procmux$735_Y [3] = $procmux$735_Y [0]
    Consolidated identical input bits for $mux cell $procmux$740:
      Old ports: A=$procmux$738_Y, B={ 1'0 $auto$wreduce.cc:455:run$910 [4:0] }, Y=$procmux$740_Y
      New ports: A=$procmux$738_Y [4:0], B=$auto$wreduce.cc:455:run$910 [4:0], Y=$procmux$740_Y [4:0]
      New connections: $procmux$740_Y [5] = 1'0
  Optimizing cells in module \demo.
    Consolidated identical input bits for $mux cell $procmux$738:
      Old ports: A=$procmux$735_Y [4:0], B=5'10000, Y=$procmux$738_Y [4:0]
      New ports: A={ $procmux$735_Y [4] $procmux$735_Y [2:0] }, B=4'1000, Y={ $procmux$738_Y [4] $procmux$738_Y [2:0] }
      New connections: $procmux$738_Y [3] = $procmux$738_Y [0]
  Optimizing cells in module \demo.
Performed a total of 25 changes.

2.29.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\demo'.
Removed a total of 0 cells.

2.29.6. Executing OPT_RMDFF pass (remove dff with constant values).
Removing $memory\params[67]$1306 ($dff) from module demo.
Removing $memory\params[66]$1304 ($dff) from module demo.
Removing $memory\params[65]$1302 ($dff) from module demo.
Removing $memory\params[64]$1300 ($dff) from module demo.
Removing $memory\params[63]$1298 ($dff) from module demo.
Removing $memory\params[62]$1296 ($dff) from module demo.
Removing $memory\params[61]$1294 ($dff) from module demo.
Removing $memory\params[60]$1292 ($dff) from module demo.
Removing $memory\params[59]$1290 ($dff) from module demo.
Removing $memory\params[58]$1288 ($dff) from module demo.
Removing $memory\params[57]$1286 ($dff) from module demo.
Removing $memory\params[56]$1284 ($dff) from module demo.
Removing $memory\params[55]$1282 ($dff) from module demo.
Removing $memory\params[54]$1280 ($dff) from module demo.
Removing $memory\params[53]$1278 ($dff) from module demo.
Removing $memory\params[52]$1276 ($dff) from module demo.
Removing $memory\params[51]$1274 ($dff) from module demo.
Removing $memory\params[50]$1272 ($dff) from module demo.
Removing $memory\params[49]$1270 ($dff) from module demo.
Removing $memory\params[48]$1268 ($dff) from module demo.
Removing $memory\params[47]$1266 ($dff) from module demo.
Removing $memory\params[46]$1264 ($dff) from module demo.
Removing $memory\params[45]$1262 ($dff) from module demo.
Removing $memory\params[44]$1260 ($dff) from module demo.
Removing $memory\params[43]$1258 ($dff) from module demo.
Removing $memory\params[42]$1256 ($dff) from module demo.
Removing $memory\params[41]$1254 ($dff) from module demo.
Removing $memory\params[40]$1252 ($dff) from module demo.
Removing $memory\params[39]$1250 ($dff) from module demo.
Removing $memory\params[38]$1248 ($dff) from module demo.
Removing $memory\params[37]$1246 ($dff) from module demo.
Removing $memory\params[36]$1244 ($dff) from module demo.
Removing $memory\params[35]$1242 ($dff) from module demo.
Removing $memory\params[34]$1240 ($dff) from module demo.
Removing $memory\params[33]$1238 ($dff) from module demo.
Removing $memory\params[32]$1236 ($dff) from module demo.
Removing $memory\params[31]$1234 ($dff) from module demo.
Removing $memory\params[30]$1232 ($dff) from module demo.
Removing $memory\params[29]$1230 ($dff) from module demo.
Removing $memory\params[28]$1228 ($dff) from module demo.
Removing $memory\params[27]$1226 ($dff) from module demo.
Removing $memory\params[26]$1224 ($dff) from module demo.
Removing $memory\params[25]$1222 ($dff) from module demo.
Removing $memory\params[24]$1220 ($dff) from module demo.
Removing $memory\params[23]$1218 ($dff) from module demo.
Removing $memory\params[22]$1216 ($dff) from module demo.
Removing $memory\params[21]$1214 ($dff) from module demo.
Removing $memory\params[20]$1212 ($dff) from module demo.
Removing $memory\params[19]$1210 ($dff) from module demo.
Removing $memory\params[18]$1208 ($dff) from module demo.
Removing $memory\params[17]$1206 ($dff) from module demo.
Removing $memory\params[16]$1204 ($dff) from module demo.
Removing $memory\params[15]$1202 ($dff) from module demo.
Removing $memory\params[14]$1200 ($dff) from module demo.
Removing $memory\params[13]$1198 ($dff) from module demo.
Removing $memory\params[12]$1196 ($dff) from module demo.
Removing $memory\params[11]$1194 ($dff) from module demo.
Removing $memory\params[10]$1192 ($dff) from module demo.
Removing $memory\params[9]$1190 ($dff) from module demo.
Removing $memory\params[8]$1188 ($dff) from module demo.
Removing $memory\params[7]$1186 ($dff) from module demo.
Removing $memory\params[6]$1184 ($dff) from module demo.
Removing $memory\params[5]$1182 ($dff) from module demo.
Removing $memory\params[4]$1180 ($dff) from module demo.
Removing $memory\params[3]$1178 ($dff) from module demo.
Removing $memory\params[2]$1176 ($dff) from module demo.
Removing $memory\params[1]$1174 ($dff) from module demo.
Removing $memory\params[0]$1172 ($dff) from module demo.
Removing $memory\cmd[21]$1077 ($dff) from module demo.
Removing $memory\cmd[20]$1075 ($dff) from module demo.
Removing $memory\cmd[19]$1073 ($dff) from module demo.
Removing $memory\cmd[18]$1071 ($dff) from module demo.
Removing $memory\cmd[17]$1069 ($dff) from module demo.
Removing $memory\cmd[16]$1067 ($dff) from module demo.
Removing $memory\cmd[15]$1065 ($dff) from module demo.
Removing $memory\cmd[14]$1063 ($dff) from module demo.
Removing $memory\cmd[13]$1061 ($dff) from module demo.
Removing $memory\cmd[12]$1059 ($dff) from module demo.
Removing $memory\cmd[11]$1057 ($dff) from module demo.
Removing $memory\cmd[10]$1055 ($dff) from module demo.
Removing $memory\cmd[9]$1053 ($dff) from module demo.
Removing $memory\cmd[8]$1051 ($dff) from module demo.
Removing $memory\cmd[7]$1049 ($dff) from module demo.
Removing $memory\cmd[6]$1047 ($dff) from module demo.
Removing $memory\cmd[5]$1045 ($dff) from module demo.
Removing $memory\cmd[4]$1043 ($dff) from module demo.
Removing $memory\cmd[3]$1041 ($dff) from module demo.
Removing $memory\cmd[2]$1039 ($dff) from module demo.
Removing $memory\cmd[1]$1037 ($dff) from module demo.
Removing $memory\cmd[0]$1035 ($dff) from module demo.
Replaced 90 DFF cells.

2.29.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..
Removed 0 unused cells and 314 unused wires.
<suppressed ~1 debug messages>

2.29.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.
<suppressed ~2 debug messages>

2.29.9. Rerunning OPT passes. (Maybe there is more to do..)

2.29.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \demo..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~17 debug messages>

2.29.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \demo.
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][4][0]$1124:
      Old ports: A=8'00010001, B=8'10110001, Y=$memory\cmd$rdmux[0][3][0]$a$1101
      New ports: A=1'0, B=1'1, Y=$memory\cmd$rdmux[0][3][0]$a$1101 [5]
      New connections: { $memory\cmd$rdmux[0][3][0]$a$1101 [7:6] $memory\cmd$rdmux[0][3][0]$a$1101 [4:0] } = { $memory\cmd$rdmux[0][3][0]$a$1101 [5] 6'010001 }
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][4][10]$1154:
      Old ports: A=8'00101100, B=8'00000000, Y=$memory\cmd$rdmux[0][3][5]$a$1116
      New ports: A=1'1, B=1'0, Y=$memory\cmd$rdmux[0][3][5]$a$1116 [2]
      New connections: { $memory\cmd$rdmux[0][3][5]$a$1116 [7:3] $memory\cmd$rdmux[0][3][5]$a$1116 [1:0] } = { 2'00 $memory\cmd$rdmux[0][3][5]$a$1116 [2] 1'0 $memory\cmd$rdmux[0][3][5]$a$1116 [2] 2'00 }
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][4][1]$1127:
      Old ports: A=8'10110010, B=8'10110011, Y=$memory\cmd$rdmux[0][3][0]$b$1102
      New ports: A=1'0, B=1'1, Y=$memory\cmd$rdmux[0][3][0]$b$1102 [0]
      New connections: $memory\cmd$rdmux[0][3][0]$b$1102 [7:1] = 7'1011001
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][4][2]$1130:
      Old ports: A=8'10110100, B=8'11000000, Y=$memory\cmd$rdmux[0][3][1]$a$1104
      New ports: A=2'01, B=2'10, Y={ $memory\cmd$rdmux[0][3][1]$a$1104 [6] $memory\cmd$rdmux[0][3][1]$a$1104 [2] }
      New connections: { $memory\cmd$rdmux[0][3][1]$a$1104 [7] $memory\cmd$rdmux[0][3][1]$a$1104 [5:3] $memory\cmd$rdmux[0][3][1]$a$1104 [1:0] } = { 1'1 $memory\cmd$rdmux[0][3][1]$a$1104 [2] $memory\cmd$rdmux[0][3][1]$a$1104 [2] 3'000 }
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][4][3]$1133:
      Old ports: A=8'11000001, B=8'11000010, Y=$memory\cmd$rdmux[0][3][1]$b$1105
      New ports: A=2'01, B=2'10, Y=$memory\cmd$rdmux[0][3][1]$b$1105 [1:0]
      New connections: $memory\cmd$rdmux[0][3][1]$b$1105 [7:2] = 6'110000
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][4][4]$1136:
      Old ports: A=8'11000011, B=8'11000100, Y=$memory\cmd$rdmux[0][3][2]$a$1107
      New ports: A=2'01, B=2'10, Y={ $memory\cmd$rdmux[0][3][2]$a$1107 [2] $memory\cmd$rdmux[0][3][2]$a$1107 [0] }
      New connections: { $memory\cmd$rdmux[0][3][2]$a$1107 [7:3] $memory\cmd$rdmux[0][3][2]$a$1107 [1] } = { 5'11000 $memory\cmd$rdmux[0][3][2]$a$1107 [0] }
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][4][5]$1139:
      Old ports: A=8'11000101, B=8'11100000, Y=$memory\cmd$rdmux[0][3][2]$b$1108
      New ports: A=2'01, B=2'10, Y={ $memory\cmd$rdmux[0][3][2]$b$1108 [5] $memory\cmd$rdmux[0][3][2]$b$1108 [0] }
      New connections: { $memory\cmd$rdmux[0][3][2]$b$1108 [7:6] $memory\cmd$rdmux[0][3][2]$b$1108 [4:1] } = { 4'1100 $memory\cmd$rdmux[0][3][2]$b$1108 [0] 1'0 }
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][4][6]$1142:
      Old ports: A=8'11100001, B=8'11111100, Y=$memory\cmd$rdmux[0][3][3]$a$1110
      New ports: A=2'01, B=2'10, Y={ $memory\cmd$rdmux[0][3][3]$a$1110 [2] $memory\cmd$rdmux[0][3][3]$a$1110 [0] }
      New connections: { $memory\cmd$rdmux[0][3][3]$a$1110 [7:3] $memory\cmd$rdmux[0][3][3]$a$1110 [1] } = { 3'111 $memory\cmd$rdmux[0][3][3]$a$1110 [2] $memory\cmd$rdmux[0][3][3]$a$1110 [2] 1'0 }
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][4][7]$1145:
      Old ports: A=8'00111010, B=8'00110110, Y=$memory\cmd$rdmux[0][3][3]$b$1111
      New ports: A=2'10, B=2'01, Y=$memory\cmd$rdmux[0][3][3]$b$1111 [3:2]
      New connections: { $memory\cmd$rdmux[0][3][3]$b$1111 [7:4] $memory\cmd$rdmux[0][3][3]$b$1111 [1:0] } = 6'001110
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][4][8]$1148:
      Old ports: A=8'00100001, B=8'00101001, Y=$memory\cmd$rdmux[0][3][4]$a$1113
      New ports: A=1'0, B=1'1, Y=$memory\cmd$rdmux[0][3][4]$a$1113 [3]
      New connections: { $memory\cmd$rdmux[0][3][4]$a$1113 [7:4] $memory\cmd$rdmux[0][3][4]$a$1113 [2:0] } = 7'0010001
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][4][9]$1151:
      Old ports: A=8'00101010, B=8'00101011, Y=$memory\cmd$rdmux[0][3][4]$b$1114
      New ports: A=1'0, B=1'1, Y=$memory\cmd$rdmux[0][3][4]$b$1114 [0]
      New connections: $memory\cmd$rdmux[0][3][4]$b$1114 [7:1] = 7'0010101
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][0]$1497:
      Old ports: A=8'00000101, B=8'00111100, Y=$memory\params$rdmux[0][5][0]$a$1402
      New ports: A=2'01, B=2'10, Y={ $memory\params$rdmux[0][5][0]$a$1402 [3] $memory\params$rdmux[0][5][0]$a$1402 [0] }
      New connections: { $memory\params$rdmux[0][5][0]$a$1402 [7:4] $memory\params$rdmux[0][5][0]$a$1402 [2:1] } = { 2'00 $memory\params$rdmux[0][5][0]$a$1402 [3] $memory\params$rdmux[0][5][0]$a$1402 [3] 2'10 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][10]$1527:
      Old ports: A=8'01101010, B=8'10001101, Y=$memory\params$rdmux[0][5][5]$a$1417
      New ports: A=2'10, B=2'01, Y=$memory\params$rdmux[0][5][5]$a$1417 [1:0]
      New connections: $memory\params$rdmux[0][5][5]$a$1417 [7:2] = { $memory\params$rdmux[0][5][5]$a$1417 [0] $memory\params$rdmux[0][5][5]$a$1417 [1] $memory\params$rdmux[0][5][5]$a$1417 [1] 2'01 $memory\params$rdmux[0][5][5]$a$1417 [0] }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][11]$1530:
      Old ports: A=8'11101110, B=8'00001111, Y=$memory\params$rdmux[0][5][5]$b$1418
      New ports: A=2'10, B=2'01, Y={ $memory\params$rdmux[0][5][5]$b$1418 [5] $memory\params$rdmux[0][5][5]$b$1418 [0] }
      New connections: { $memory\params$rdmux[0][5][5]$b$1418 [7:6] $memory\params$rdmux[0][5][5]$b$1418 [4:1] } = { $memory\params$rdmux[0][5][5]$b$1418 [5] $memory\params$rdmux[0][5][5]$b$1418 [5] 4'0111 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][12]$1533:
      Old ports: A=8'00000111, B=8'00001110, Y=$memory\params$rdmux[0][5][6]$a$1420
      New ports: A=2'01, B=2'10, Y={ $memory\params$rdmux[0][5][6]$a$1420 [3] $memory\params$rdmux[0][5][6]$a$1420 [0] }
      New connections: { $memory\params$rdmux[0][5][6]$a$1420 [7:4] $memory\params$rdmux[0][5][6]$a$1420 [2:1] } = 6'000011
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][13]$1536:
      Old ports: A=8'00001000, B=8'00000111, Y=$memory\params$rdmux[0][5][6]$b$1421
      New ports: A=2'10, B=2'01, Y={ $memory\params$rdmux[0][5][6]$b$1421 [3] $memory\params$rdmux[0][5][6]$b$1421 [0] }
      New connections: { $memory\params$rdmux[0][5][6]$b$1421 [7:4] $memory\params$rdmux[0][5][6]$b$1421 [2:1] } = { 4'0000 $memory\params$rdmux[0][5][6]$b$1421 [0] $memory\params$rdmux[0][5][6]$b$1421 [0] }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][14]$1539:
      Old ports: A=8'00010000, B=8'00000111, Y=$memory\params$rdmux[0][5][7]$a$1423
      New ports: A=2'10, B=2'01, Y={ $memory\params$rdmux[0][5][7]$a$1423 [4] $memory\params$rdmux[0][5][7]$a$1423 [0] }
      New connections: { $memory\params$rdmux[0][5][7]$a$1423 [7:5] $memory\params$rdmux[0][5][7]$a$1423 [3:1] } = { 4'0000 $memory\params$rdmux[0][5][7]$a$1423 [0] $memory\params$rdmux[0][5][7]$a$1423 [0] }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][15]$1542:
      Old ports: A=8'00000010, B=8'00000111, Y=$memory\params$rdmux[0][5][7]$b$1424
      New ports: A=1'0, B=1'1, Y=$memory\params$rdmux[0][5][7]$b$1424 [0]
      New connections: $memory\params$rdmux[0][5][7]$b$1424 [7:1] = { 5'00000 $memory\params$rdmux[0][5][7]$b$1424 [0] 1'1 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][16]$1545:
      Old ports: A=8'00001001, B=8'00001111, Y=$memory\params$rdmux[0][5][8]$a$1426
      New ports: A=1'0, B=1'1, Y=$memory\params$rdmux[0][5][8]$a$1426 [1]
      New connections: { $memory\params$rdmux[0][5][8]$a$1426 [7:2] $memory\params$rdmux[0][5][8]$a$1426 [0] } = { 5'00001 $memory\params$rdmux[0][5][8]$a$1426 [1] 1'1 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][17]$1548:
      Old ports: A=8'00100101, B=8'00110110, Y=$memory\params$rdmux[0][5][8]$b$1427
      New ports: A=2'01, B=2'10, Y=$memory\params$rdmux[0][5][8]$b$1427 [1:0]
      New connections: $memory\params$rdmux[0][5][8]$b$1427 [7:2] = { 3'001 $memory\params$rdmux[0][5][8]$b$1427 [1] 2'01 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][18]$1551:
      Old ports: A=8'00000000, B=8'00001000, Y=$memory\params$rdmux[0][5][9]$a$1429
      New ports: A=1'0, B=1'1, Y=$memory\params$rdmux[0][5][9]$a$1429 [3]
      New connections: { $memory\params$rdmux[0][5][9]$a$1429 [7:4] $memory\params$rdmux[0][5][9]$a$1429 [2:0] } = 7'0000000
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][19]$1554:
      Old ports: A=8'00000100, B=8'00010000, Y=$memory\params$rdmux[0][5][9]$b$1430
      New ports: A=2'01, B=2'10, Y={ $memory\params$rdmux[0][5][9]$b$1430 [4] $memory\params$rdmux[0][5][9]$b$1430 [2] }
      New connections: { $memory\params$rdmux[0][5][9]$b$1430 [7:5] $memory\params$rdmux[0][5][9]$b$1430 [3] $memory\params$rdmux[0][5][9]$b$1430 [1:0] } = 6'000000
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][1]$1500:
      Old ports: A=8'00111100, B=8'00000101, Y=$memory\params$rdmux[0][5][0]$b$1403
      New ports: A=2'10, B=2'01, Y={ $memory\params$rdmux[0][5][0]$b$1403 [3] $memory\params$rdmux[0][5][0]$b$1403 [0] }
      New connections: { $memory\params$rdmux[0][5][0]$b$1403 [7:4] $memory\params$rdmux[0][5][0]$b$1403 [2:1] } = { 2'00 $memory\params$rdmux[0][5][0]$b$1403 [3] $memory\params$rdmux[0][5][0]$b$1403 [3] 2'10 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][20]$1557:
      Old ports: A=8'00001010, B=8'00001101, Y=$memory\params$rdmux[0][5][10]$a$1432
      New ports: A=2'10, B=2'01, Y=$memory\params$rdmux[0][5][10]$a$1432 [1:0]
      New connections: $memory\params$rdmux[0][5][10]$a$1432 [7:2] = { 5'00001 $memory\params$rdmux[0][5][10]$a$1432 [0] }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][21]$1560:
      Old ports: A=8'00001000, B=8'00000111, Y=$memory\params$rdmux[0][5][10]$b$1433
      New ports: A=2'10, B=2'01, Y={ $memory\params$rdmux[0][5][10]$b$1433 [3] $memory\params$rdmux[0][5][10]$b$1433 [0] }
      New connections: { $memory\params$rdmux[0][5][10]$b$1433 [7:4] $memory\params$rdmux[0][5][10]$b$1433 [2:1] } = { 4'0000 $memory\params$rdmux[0][5][10]$b$1433 [0] $memory\params$rdmux[0][5][10]$b$1433 [0] }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][22]$1563:
      Old ports: A=8'00001111, B=8'00000111, Y=$memory\params$rdmux[0][5][11]$a$1435
      New ports: A=1'1, B=1'0, Y=$memory\params$rdmux[0][5][11]$a$1435 [3]
      New connections: { $memory\params$rdmux[0][5][11]$a$1435 [7:4] $memory\params$rdmux[0][5][11]$a$1435 [2:0] } = 7'0000111
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][23]$1566:
      Old ports: A=8'00000010, B=8'00000111, Y=$memory\params$rdmux[0][5][11]$b$1436
      New ports: A=1'0, B=1'1, Y=$memory\params$rdmux[0][5][11]$b$1436 [0]
      New connections: $memory\params$rdmux[0][5][11]$b$1436 [7:1] = { 5'00000 $memory\params$rdmux[0][5][11]$b$1436 [0] 1'1 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][24]$1569:
      Old ports: A=8'00001001, B=8'00001111, Y=$memory\params$rdmux[0][5][12]$a$1438
      New ports: A=1'0, B=1'1, Y=$memory\params$rdmux[0][5][12]$a$1438 [1]
      New connections: { $memory\params$rdmux[0][5][12]$a$1438 [7:2] $memory\params$rdmux[0][5][12]$a$1438 [0] } = { 5'00001 $memory\params$rdmux[0][5][12]$a$1438 [1] 1'1 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][25]$1572:
      Old ports: A=8'00100101, B=8'00110101, Y=$memory\params$rdmux[0][5][12]$b$1439
      New ports: A=1'0, B=1'1, Y=$memory\params$rdmux[0][5][12]$b$1439 [4]
      New connections: { $memory\params$rdmux[0][5][12]$b$1439 [7:5] $memory\params$rdmux[0][5][12]$b$1439 [3:0] } = 7'0010101
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][26]$1575:
      Old ports: A=8'00000000, B=8'00001001, Y=$memory\params$rdmux[0][5][13]$a$1441
      New ports: A=1'0, B=1'1, Y=$memory\params$rdmux[0][5][13]$a$1441 [0]
      New connections: $memory\params$rdmux[0][5][13]$a$1441 [7:1] = { 4'0000 $memory\params$rdmux[0][5][13]$a$1441 [0] 2'00 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][27]$1578:
      Old ports: A=8'00000100, B=8'00010000, Y=$memory\params$rdmux[0][5][13]$b$1442
      New ports: A=2'01, B=2'10, Y={ $memory\params$rdmux[0][5][13]$b$1442 [4] $memory\params$rdmux[0][5][13]$b$1442 [2] }
      New connections: { $memory\params$rdmux[0][5][13]$b$1442 [7:5] $memory\params$rdmux[0][5][13]$b$1442 [3] $memory\params$rdmux[0][5][13]$b$1442 [1:0] } = 6'000000
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][28]$1581:
      Old ports: A=8'10000000, B=8'00000101, Y=$memory\params$rdmux[0][5][14]$a$1444
      New ports: A=2'10, B=2'01, Y={ $memory\params$rdmux[0][5][14]$a$1444 [7] $memory\params$rdmux[0][5][14]$a$1444 [0] }
      New connections: $memory\params$rdmux[0][5][14]$a$1444 [6:1] = { 4'0000 $memory\params$rdmux[0][5][14]$a$1444 [0] 1'0 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][29]$1584:
      Old ports: A=8'01111000, B=8'00000000, Y=$memory\params$rdmux[0][5][14]$b$1445
      New ports: A=1'1, B=1'0, Y=$memory\params$rdmux[0][5][14]$b$1445 [3]
      New connections: { $memory\params$rdmux[0][5][14]$b$1445 [7:4] $memory\params$rdmux[0][5][14]$b$1445 [2:0] } = { 1'0 $memory\params$rdmux[0][5][14]$b$1445 [3] $memory\params$rdmux[0][5][14]$b$1445 [3] $memory\params$rdmux[0][5][14]$b$1445 [3] 3'000 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][30]$1587:
      Old ports: A=8'00000001, B=8'00000000, Y=$memory\params$rdmux[0][5][15]$a$1447
      New ports: A=1'1, B=1'0, Y=$memory\params$rdmux[0][5][15]$a$1447 [0]
      New connections: $memory\params$rdmux[0][5][15]$a$1447 [7:1] = 7'0000000
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][31]$1590:
      Old ports: A=8'10100000, B=8'00000000, Y=$memory\params$rdmux[0][5][15]$b$1448
      New ports: A=1'1, B=1'0, Y=$memory\params$rdmux[0][5][15]$b$1448 [5]
      New connections: { $memory\params$rdmux[0][5][15]$b$1448 [7:6] $memory\params$rdmux[0][5][15]$b$1448 [4:0] } = { $memory\params$rdmux[0][5][15]$b$1448 [5] 6'000000 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][32]$1593:
      Old ports: A=8'00011010, B=8'00000000, Y=$memory\params$rdmux[0][5][16]$a$1450
      New ports: A=1'1, B=1'0, Y=$memory\params$rdmux[0][5][16]$a$1450 [1]
      New connections: { $memory\params$rdmux[0][5][16]$a$1450 [7:2] $memory\params$rdmux[0][5][16]$a$1450 [0] } = { 3'000 $memory\params$rdmux[0][5][16]$a$1450 [1] $memory\params$rdmux[0][5][16]$a$1450 [1] 2'00 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][33]$1596:
      Old ports: A=8'01101001, B=8'11000111, Y=$memory\params$rdmux[0][5][16]$b$1451
      New ports: A=2'10, B=2'01, Y={ $memory\params$rdmux[0][5][16]$b$1451 [3] $memory\params$rdmux[0][5][16]$b$1451 [1] }
      New connections: { $memory\params$rdmux[0][5][16]$b$1451 [7:4] $memory\params$rdmux[0][5][16]$b$1451 [2] $memory\params$rdmux[0][5][16]$b$1451 [0] } = { $memory\params$rdmux[0][5][16]$b$1451 [1] 1'1 $memory\params$rdmux[0][5][16]$b$1451 [3] 1'0 $memory\params$rdmux[0][5][16]$b$1451 [1] 1'1 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][3]$1506:
      Old ports: A=8'00000101, B=8'00111100, Y=$memory\params$rdmux[0][5][1]$b$1406
      New ports: A=2'01, B=2'10, Y={ $memory\params$rdmux[0][5][1]$b$1406 [3] $memory\params$rdmux[0][5][1]$b$1406 [0] }
      New connections: { $memory\params$rdmux[0][5][1]$b$1406 [7:4] $memory\params$rdmux[0][5][1]$b$1406 [2:1] } = { 2'00 $memory\params$rdmux[0][5][1]$b$1406 [3] $memory\params$rdmux[0][5][1]$b$1406 [3] 2'10 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][4]$1509:
      Old ports: A=8'00111100, B=8'00000101, Y=$memory\params$rdmux[0][5][2]$a$1408
      New ports: A=2'10, B=2'01, Y={ $memory\params$rdmux[0][5][2]$a$1408 [3] $memory\params$rdmux[0][5][2]$a$1408 [0] }
      New connections: { $memory\params$rdmux[0][5][2]$a$1408 [7:4] $memory\params$rdmux[0][5][2]$a$1408 [2:1] } = { 2'00 $memory\params$rdmux[0][5][2]$a$1408 [3] $memory\params$rdmux[0][5][2]$a$1408 [3] 2'10 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][6]$1515:
      Old ports: A=8'00000011, B=8'10101011, Y=$memory\params$rdmux[0][5][3]$a$1411
      New ports: A=1'0, B=1'1, Y=$memory\params$rdmux[0][5][3]$a$1411 [3]
      New connections: { $memory\params$rdmux[0][5][3]$a$1411 [7:4] $memory\params$rdmux[0][5][3]$a$1411 [2:0] } = { $memory\params$rdmux[0][5][3]$a$1411 [3] 1'0 $memory\params$rdmux[0][5][3]$a$1411 [3] 4'0011 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][7]$1518:
      Old ports: A=8'00001011, B=8'00000100, Y=$memory\params$rdmux[0][5][3]$b$1412
      New ports: A=2'01, B=2'10, Y={ $memory\params$rdmux[0][5][3]$b$1412 [2] $memory\params$rdmux[0][5][3]$b$1412 [0] }
      New connections: { $memory\params$rdmux[0][5][3]$b$1412 [7:3] $memory\params$rdmux[0][5][3]$b$1412 [1] } = { 4'0000 $memory\params$rdmux[0][5][3]$b$1412 [0] $memory\params$rdmux[0][5][3]$b$1412 [0] }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][8]$1521:
      Old ports: A=8'11000101, B=8'00001101, Y=$memory\params$rdmux[0][5][4]$a$1414
      New ports: A=2'10, B=2'01, Y={ $memory\params$rdmux[0][5][4]$a$1414 [6] $memory\params$rdmux[0][5][4]$a$1414 [3] }
      New connections: { $memory\params$rdmux[0][5][4]$a$1414 [7] $memory\params$rdmux[0][5][4]$a$1414 [5:4] $memory\params$rdmux[0][5][4]$a$1414 [2:0] } = { $memory\params$rdmux[0][5][4]$a$1414 [6] 5'00101 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][9]$1524:
      Old ports: A=8'00000000, B=8'10001101, Y=$memory\params$rdmux[0][5][4]$b$1415
      New ports: A=1'0, B=1'1, Y=$memory\params$rdmux[0][5][4]$b$1415 [0]
      New connections: $memory\params$rdmux[0][5][4]$b$1415 [7:1] = { $memory\params$rdmux[0][5][4]$b$1415 [0] 3'000 $memory\params$rdmux[0][5][4]$b$1415 [0] $memory\params$rdmux[0][5][4]$b$1415 [0] 1'0 }
  Optimizing cells in module \demo.
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][3][0]$1100:
      Old ports: A=$memory\cmd$rdmux[0][3][0]$a$1101, B=$memory\cmd$rdmux[0][3][0]$b$1102, Y=$memory\cmd$rdmux[0][2][0]$a$1089
      New ports: A={ $memory\cmd$rdmux[0][3][0]$a$1101 [5] 2'01 }, B={ 2'11 $memory\cmd$rdmux[0][3][0]$b$1102 [0] }, Y={ $memory\cmd$rdmux[0][2][0]$a$1089 [5] $memory\cmd$rdmux[0][2][0]$a$1089 [1:0] }
      New connections: { $memory\cmd$rdmux[0][2][0]$a$1089 [7:6] $memory\cmd$rdmux[0][2][0]$a$1089 [4:2] } = { $memory\cmd$rdmux[0][2][0]$a$1089 [5] 4'0100 }
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][3][1]$1103:
      Old ports: A=$memory\cmd$rdmux[0][3][1]$a$1104, B=$memory\cmd$rdmux[0][3][1]$b$1105, Y=$memory\cmd$rdmux[0][2][0]$b$1090
      New ports: A={ $memory\cmd$rdmux[0][3][1]$a$1104 [6] $memory\cmd$rdmux[0][3][1]$a$1104 [2] 2'00 }, B={ 2'10 $memory\cmd$rdmux[0][3][1]$b$1105 [1:0] }, Y={ $memory\cmd$rdmux[0][2][0]$b$1090 [6] $memory\cmd$rdmux[0][2][0]$b$1090 [2:0] }
      New connections: { $memory\cmd$rdmux[0][2][0]$b$1090 [7] $memory\cmd$rdmux[0][2][0]$b$1090 [5:3] } = { 1'1 $memory\cmd$rdmux[0][2][0]$b$1090 [2] $memory\cmd$rdmux[0][2][0]$b$1090 [2] 1'0 }
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][3][2]$1106:
      Old ports: A=$memory\cmd$rdmux[0][3][2]$a$1107, B=$memory\cmd$rdmux[0][3][2]$b$1108, Y=$memory\cmd$rdmux[0][2][1]$a$1092
      New ports: A={ 1'0 $memory\cmd$rdmux[0][3][2]$a$1107 [2] $memory\cmd$rdmux[0][3][2]$a$1107 [0] $memory\cmd$rdmux[0][3][2]$a$1107 [0] }, B={ $memory\cmd$rdmux[0][3][2]$b$1108 [5] $memory\cmd$rdmux[0][3][2]$b$1108 [0] 1'0 $memory\cmd$rdmux[0][3][2]$b$1108 [0] }, Y={ $memory\cmd$rdmux[0][2][1]$a$1092 [5] $memory\cmd$rdmux[0][2][1]$a$1092 [2:0] }
      New connections: { $memory\cmd$rdmux[0][2][1]$a$1092 [7:6] $memory\cmd$rdmux[0][2][1]$a$1092 [4:3] } = 4'1100
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][3][3]$1109:
      Old ports: A=$memory\cmd$rdmux[0][3][3]$a$1110, B=$memory\cmd$rdmux[0][3][3]$b$1111, Y=$memory\cmd$rdmux[0][2][1]$b$1093
      New ports: A={ 1'1 $memory\cmd$rdmux[0][3][3]$a$1110 [2] $memory\cmd$rdmux[0][3][3]$a$1110 [2] $memory\cmd$rdmux[0][3][3]$a$1110 [2] 1'0 $memory\cmd$rdmux[0][3][3]$a$1110 [0] }, B={ 2'01 $memory\cmd$rdmux[0][3][3]$b$1111 [3:2] 2'10 }, Y={ $memory\cmd$rdmux[0][2][1]$b$1093 [6] $memory\cmd$rdmux[0][2][1]$b$1093 [4:0] }
      New connections: { $memory\cmd$rdmux[0][2][1]$b$1093 [7] $memory\cmd$rdmux[0][2][1]$b$1093 [5] } = { $memory\cmd$rdmux[0][2][1]$b$1093 [6] 1'1 }
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][3][4]$1112:
      Old ports: A=$memory\cmd$rdmux[0][3][4]$a$1113, B=$memory\cmd$rdmux[0][3][4]$b$1114, Y=$memory\cmd$rdmux[0][2][2]$a$1095
      New ports: A={ $memory\cmd$rdmux[0][3][4]$a$1113 [3] 2'01 }, B={ 2'11 $memory\cmd$rdmux[0][3][4]$b$1114 [0] }, Y={ $memory\cmd$rdmux[0][2][2]$a$1095 [3] $memory\cmd$rdmux[0][2][2]$a$1095 [1:0] }
      New connections: { $memory\cmd$rdmux[0][2][2]$a$1095 [7:4] $memory\cmd$rdmux[0][2][2]$a$1095 [2] } = 5'00100
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][3][5]$1115:
      Old ports: A=$memory\cmd$rdmux[0][3][5]$a$1116, B=8'xxxxxxxx, Y=$memory\cmd$rdmux[0][2][2]$b$1096
      New ports: A={ $memory\cmd$rdmux[0][3][5]$a$1116 [2] 1'0 }, B=2'xx, Y={ $memory\cmd$rdmux[0][2][2]$b$1096 [2] $memory\cmd$rdmux[0][2][2]$b$1096 [0] }
      New connections: { $memory\cmd$rdmux[0][2][2]$b$1096 [7:3] $memory\cmd$rdmux[0][2][2]$b$1096 [1] } = { $memory\cmd$rdmux[0][2][2]$b$1096 [0] $memory\cmd$rdmux[0][2][2]$b$1096 [0] $memory\cmd$rdmux[0][2][2]$b$1096 [2] $memory\cmd$rdmux[0][2][2]$b$1096 [0] $memory\cmd$rdmux[0][2][2]$b$1096 [2] $memory\cmd$rdmux[0][2][2]$b$1096 [0] }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][0]$1401:
      Old ports: A=$memory\params$rdmux[0][5][0]$a$1402, B=$memory\params$rdmux[0][5][0]$b$1403, Y=$memory\params$rdmux[0][4][0]$a$1354
      New ports: A={ $memory\params$rdmux[0][5][0]$a$1402 [3] $memory\params$rdmux[0][5][0]$a$1402 [0] }, B={ $memory\params$rdmux[0][5][0]$b$1403 [3] $memory\params$rdmux[0][5][0]$b$1403 [0] }, Y={ $memory\params$rdmux[0][4][0]$a$1354 [3] $memory\params$rdmux[0][4][0]$a$1354 [0] }
      New connections: { $memory\params$rdmux[0][4][0]$a$1354 [7:4] $memory\params$rdmux[0][4][0]$a$1354 [2:1] } = { 2'00 $memory\params$rdmux[0][4][0]$a$1354 [3] $memory\params$rdmux[0][4][0]$a$1354 [3] 2'10 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][10]$1431:
      Old ports: A=$memory\params$rdmux[0][5][10]$a$1432, B=$memory\params$rdmux[0][5][10]$b$1433, Y=$memory\params$rdmux[0][4][5]$a$1369
      New ports: A={ 1'1 $memory\params$rdmux[0][5][10]$a$1432 [1:0] }, B={ $memory\params$rdmux[0][5][10]$b$1433 [3] $memory\params$rdmux[0][5][10]$b$1433 [0] $memory\params$rdmux[0][5][10]$b$1433 [0] }, Y={ $memory\params$rdmux[0][4][5]$a$1369 [3] $memory\params$rdmux[0][4][5]$a$1369 [1:0] }
      New connections: { $memory\params$rdmux[0][4][5]$a$1369 [7:4] $memory\params$rdmux[0][4][5]$a$1369 [2] } = { 4'0000 $memory\params$rdmux[0][4][5]$a$1369 [0] }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][11]$1434:
      Old ports: A=$memory\params$rdmux[0][5][11]$a$1435, B=$memory\params$rdmux[0][5][11]$b$1436, Y=$memory\params$rdmux[0][4][5]$b$1370
      New ports: A={ $memory\params$rdmux[0][5][11]$a$1435 [3] 1'1 }, B={ 1'0 $memory\params$rdmux[0][5][11]$b$1436 [0] }, Y={ $memory\params$rdmux[0][4][5]$b$1370 [3] $memory\params$rdmux[0][4][5]$b$1370 [0] }
      New connections: { $memory\params$rdmux[0][4][5]$b$1370 [7:4] $memory\params$rdmux[0][4][5]$b$1370 [2:1] } = { 4'0000 $memory\params$rdmux[0][4][5]$b$1370 [0] 1'1 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][12]$1437:
      Old ports: A=$memory\params$rdmux[0][5][12]$a$1438, B=$memory\params$rdmux[0][5][12]$b$1439, Y=$memory\params$rdmux[0][4][6]$a$1372
      New ports: A={ 3'001 $memory\params$rdmux[0][5][12]$a$1438 [1] $memory\params$rdmux[0][5][12]$a$1438 [1] }, B={ 1'1 $memory\params$rdmux[0][5][12]$b$1439 [4] 3'010 }, Y=$memory\params$rdmux[0][4][6]$a$1372 [5:1]
      New connections: { $memory\params$rdmux[0][4][6]$a$1372 [7:6] $memory\params$rdmux[0][4][6]$a$1372 [0] } = 3'001
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][13]$1440:
      Old ports: A=$memory\params$rdmux[0][5][13]$a$1441, B=$memory\params$rdmux[0][5][13]$b$1442, Y=$memory\params$rdmux[0][4][6]$b$1373
      New ports: A={ 2'00 $memory\params$rdmux[0][5][13]$a$1441 [0] }, B={ $memory\params$rdmux[0][5][13]$b$1442 [4] $memory\params$rdmux[0][5][13]$b$1442 [2] 1'0 }, Y={ $memory\params$rdmux[0][4][6]$b$1373 [4] $memory\params$rdmux[0][4][6]$b$1373 [2] $memory\params$rdmux[0][4][6]$b$1373 [0] }
      New connections: { $memory\params$rdmux[0][4][6]$b$1373 [7:5] $memory\params$rdmux[0][4][6]$b$1373 [3] $memory\params$rdmux[0][4][6]$b$1373 [1] } = { 3'000 $memory\params$rdmux[0][4][6]$b$1373 [0] 1'0 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][14]$1443:
      Old ports: A=$memory\params$rdmux[0][5][14]$a$1444, B=$memory\params$rdmux[0][5][14]$b$1445, Y=$memory\params$rdmux[0][4][7]$a$1375
      New ports: A={ $memory\params$rdmux[0][5][14]$a$1444 [7] 1'0 $memory\params$rdmux[0][5][14]$a$1444 [0] }, B={ 1'0 $memory\params$rdmux[0][5][14]$b$1445 [3] 1'0 }, Y={ $memory\params$rdmux[0][4][7]$a$1375 [7] $memory\params$rdmux[0][4][7]$a$1375 [3] $memory\params$rdmux[0][4][7]$a$1375 [0] }
      New connections: { $memory\params$rdmux[0][4][7]$a$1375 [6:4] $memory\params$rdmux[0][4][7]$a$1375 [2:1] } = { $memory\params$rdmux[0][4][7]$a$1375 [3] $memory\params$rdmux[0][4][7]$a$1375 [3] $memory\params$rdmux[0][4][7]$a$1375 [3] $memory\params$rdmux[0][4][7]$a$1375 [0] 1'0 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][15]$1446:
      Old ports: A=$memory\params$rdmux[0][5][15]$a$1447, B=$memory\params$rdmux[0][5][15]$b$1448, Y=$memory\params$rdmux[0][4][7]$b$1376
      New ports: A={ 1'0 $memory\params$rdmux[0][5][15]$a$1447 [0] }, B={ $memory\params$rdmux[0][5][15]$b$1448 [5] 1'0 }, Y={ $memory\params$rdmux[0][4][7]$b$1376 [5] $memory\params$rdmux[0][4][7]$b$1376 [0] }
      New connections: { $memory\params$rdmux[0][4][7]$b$1376 [7:6] $memory\params$rdmux[0][4][7]$b$1376 [4:1] } = { $memory\params$rdmux[0][4][7]$b$1376 [5] 5'00000 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][16]$1449:
      Old ports: A=$memory\params$rdmux[0][5][16]$a$1450, B=$memory\params$rdmux[0][5][16]$b$1451, Y=$memory\params$rdmux[0][4][8]$a$1378
      New ports: A={ 1'0 $memory\params$rdmux[0][5][16]$a$1450 [1] $memory\params$rdmux[0][5][16]$a$1450 [1] 1'0 $memory\params$rdmux[0][5][16]$a$1450 [1] 1'0 }, B={ $memory\params$rdmux[0][5][16]$b$1451 [3] 1'0 $memory\params$rdmux[0][5][16]$b$1451 [3] $memory\params$rdmux[0][5][16]$b$1451 [1] $memory\params$rdmux[0][5][16]$b$1451 [1] 1'1 }, Y=$memory\params$rdmux[0][4][8]$a$1378 [5:0]
      New connections: $memory\params$rdmux[0][4][8]$a$1378 [7:6] = { $memory\params$rdmux[0][4][8]$a$1378 [2] $memory\params$rdmux[0][4][8]$a$1378 [0] }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][1]$1404:
      Old ports: A=$memory\params$rdmux[0][5][1]$a$1405, B=$memory\params$rdmux[0][5][1]$b$1406, Y=$memory\params$rdmux[0][4][0]$b$1355
      New ports: A=2'10, B={ $memory\params$rdmux[0][5][1]$b$1406 [3] $memory\params$rdmux[0][5][1]$b$1406 [0] }, Y={ $memory\params$rdmux[0][4][0]$b$1355 [3] $memory\params$rdmux[0][4][0]$b$1355 [0] }
      New connections: { $memory\params$rdmux[0][4][0]$b$1355 [7:4] $memory\params$rdmux[0][4][0]$b$1355 [2:1] } = { 2'00 $memory\params$rdmux[0][4][0]$b$1355 [3] $memory\params$rdmux[0][4][0]$b$1355 [3] 2'10 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][2]$1407:
      Old ports: A=$memory\params$rdmux[0][5][2]$a$1408, B=8'00111100, Y=$memory\params$rdmux[0][4][1]$a$1357
      New ports: A={ $memory\params$rdmux[0][5][2]$a$1408 [3] $memory\params$rdmux[0][5][2]$a$1408 [0] }, B=2'10, Y={ $memory\params$rdmux[0][4][1]$a$1357 [3] $memory\params$rdmux[0][4][1]$a$1357 [0] }
      New connections: { $memory\params$rdmux[0][4][1]$a$1357 [7:4] $memory\params$rdmux[0][4][1]$a$1357 [2:1] } = { 2'00 $memory\params$rdmux[0][4][1]$a$1357 [3] $memory\params$rdmux[0][4][1]$a$1357 [3] 2'10 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][3]$1410:
      Old ports: A=$memory\params$rdmux[0][5][3]$a$1411, B=$memory\params$rdmux[0][5][3]$b$1412, Y=$memory\params$rdmux[0][4][1]$b$1358
      New ports: A={ $memory\params$rdmux[0][5][3]$a$1411 [3] $memory\params$rdmux[0][5][3]$a$1411 [3] 2'01 }, B={ 1'0 $memory\params$rdmux[0][5][3]$b$1412 [0] $memory\params$rdmux[0][5][3]$b$1412 [2] $memory\params$rdmux[0][5][3]$b$1412 [0] }, Y={ $memory\params$rdmux[0][4][1]$b$1358 [5] $memory\params$rdmux[0][4][1]$b$1358 [3:2] $memory\params$rdmux[0][4][1]$b$1358 [0] }
      New connections: { $memory\params$rdmux[0][4][1]$b$1358 [7:6] $memory\params$rdmux[0][4][1]$b$1358 [4] $memory\params$rdmux[0][4][1]$b$1358 [1] } = { $memory\params$rdmux[0][4][1]$b$1358 [5] 2'00 $memory\params$rdmux[0][4][1]$b$1358 [0] }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][4]$1413:
      Old ports: A=$memory\params$rdmux[0][5][4]$a$1414, B=$memory\params$rdmux[0][5][4]$b$1415, Y=$memory\params$rdmux[0][4][2]$a$1360
      New ports: A={ $memory\params$rdmux[0][5][4]$a$1414 [6] $memory\params$rdmux[0][5][4]$a$1414 [6] $memory\params$rdmux[0][5][4]$a$1414 [3] 1'1 }, B={ $memory\params$rdmux[0][5][4]$b$1415 [0] 1'0 $memory\params$rdmux[0][5][4]$b$1415 [0] $memory\params$rdmux[0][5][4]$b$1415 [0] }, Y={ $memory\params$rdmux[0][4][2]$a$1360 [7:6] $memory\params$rdmux[0][4][2]$a$1360 [3] $memory\params$rdmux[0][4][2]$a$1360 [0] }
      New connections: { $memory\params$rdmux[0][4][2]$a$1360 [5:4] $memory\params$rdmux[0][4][2]$a$1360 [2:1] } = { 2'00 $memory\params$rdmux[0][4][2]$a$1360 [0] 1'0 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][5]$1416:
      Old ports: A=$memory\params$rdmux[0][5][5]$a$1417, B=$memory\params$rdmux[0][5][5]$b$1418, Y=$memory\params$rdmux[0][4][2]$b$1361
      New ports: A={ $memory\params$rdmux[0][5][5]$a$1417 [0] $memory\params$rdmux[0][5][5]$a$1417 [1:0] $memory\params$rdmux[0][5][5]$a$1417 [1:0] }, B={ $memory\params$rdmux[0][5][5]$b$1418 [5] $memory\params$rdmux[0][5][5]$b$1418 [5] 2'11 $memory\params$rdmux[0][5][5]$b$1418 [0] }, Y={ $memory\params$rdmux[0][4][2]$b$1361 [7] $memory\params$rdmux[0][4][2]$b$1361 [5] $memory\params$rdmux[0][4][2]$b$1361 [2:0] }
      New connections: { $memory\params$rdmux[0][4][2]$b$1361 [6] $memory\params$rdmux[0][4][2]$b$1361 [4:3] } = { $memory\params$rdmux[0][4][2]$b$1361 [5] 2'01 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][6]$1419:
      Old ports: A=$memory\params$rdmux[0][5][6]$a$1420, B=$memory\params$rdmux[0][5][6]$b$1421, Y=$memory\params$rdmux[0][4][3]$a$1363
      New ports: A={ $memory\params$rdmux[0][5][6]$a$1420 [3] 1'1 $memory\params$rdmux[0][5][6]$a$1420 [0] }, B={ $memory\params$rdmux[0][5][6]$b$1421 [3] $memory\params$rdmux[0][5][6]$b$1421 [0] $memory\params$rdmux[0][5][6]$b$1421 [0] }, Y={ $memory\params$rdmux[0][4][3]$a$1363 [3] $memory\params$rdmux[0][4][3]$a$1363 [1:0] }
      New connections: { $memory\params$rdmux[0][4][3]$a$1363 [7:4] $memory\params$rdmux[0][4][3]$a$1363 [2] } = { 4'0000 $memory\params$rdmux[0][4][3]$a$1363 [1] }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][7]$1422:
      Old ports: A=$memory\params$rdmux[0][5][7]$a$1423, B=$memory\params$rdmux[0][5][7]$b$1424, Y=$memory\params$rdmux[0][4][3]$b$1364
      New ports: A={ $memory\params$rdmux[0][5][7]$a$1423 [4] $memory\params$rdmux[0][5][7]$a$1423 [0] $memory\params$rdmux[0][5][7]$a$1423 [0] }, B={ 2'01 $memory\params$rdmux[0][5][7]$b$1424 [0] }, Y={ $memory\params$rdmux[0][4][3]$b$1364 [4] $memory\params$rdmux[0][4][3]$b$1364 [1:0] }
      New connections: { $memory\params$rdmux[0][4][3]$b$1364 [7:5] $memory\params$rdmux[0][4][3]$b$1364 [3:2] } = { 4'0000 $memory\params$rdmux[0][4][3]$b$1364 [0] }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][8]$1425:
      Old ports: A=$memory\params$rdmux[0][5][8]$a$1426, B=$memory\params$rdmux[0][5][8]$b$1427, Y=$memory\params$rdmux[0][4][4]$a$1366
      New ports: A={ 3'001 $memory\params$rdmux[0][5][8]$a$1426 [1] $memory\params$rdmux[0][5][8]$a$1426 [1] 1'1 }, B={ 1'1 $memory\params$rdmux[0][5][8]$b$1427 [1] 2'01 $memory\params$rdmux[0][5][8]$b$1427 [1:0] }, Y=$memory\params$rdmux[0][4][4]$a$1366 [5:0]
      New connections: $memory\params$rdmux[0][4][4]$a$1366 [7:6] = 2'00
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][9]$1428:
      Old ports: A=$memory\params$rdmux[0][5][9]$a$1429, B=$memory\params$rdmux[0][5][9]$b$1430, Y=$memory\params$rdmux[0][4][4]$b$1367
      New ports: A={ 1'0 $memory\params$rdmux[0][5][9]$a$1429 [3] 1'0 }, B={ $memory\params$rdmux[0][5][9]$b$1430 [4] 1'0 $memory\params$rdmux[0][5][9]$b$1430 [2] }, Y=$memory\params$rdmux[0][4][4]$b$1367 [4:2]
      New connections: { $memory\params$rdmux[0][4][4]$b$1367 [7:5] $memory\params$rdmux[0][4][4]$b$1367 [1:0] } = 5'00000
  Optimizing cells in module \demo.
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][2][0]$1088:
      Old ports: A=$memory\cmd$rdmux[0][2][0]$a$1089, B=$memory\cmd$rdmux[0][2][0]$b$1090, Y=$memory\cmd$rdmux[0][1][0]$a$1083
      New ports: A={ $memory\cmd$rdmux[0][2][0]$a$1089 [5] 1'0 $memory\cmd$rdmux[0][2][0]$a$1089 [5] 2'10 $memory\cmd$rdmux[0][2][0]$a$1089 [1:0] }, B={ 1'1 $memory\cmd$rdmux[0][2][0]$b$1090 [6] $memory\cmd$rdmux[0][2][0]$b$1090 [2] $memory\cmd$rdmux[0][2][0]$b$1090 [2] $memory\cmd$rdmux[0][2][0]$b$1090 [2:0] }, Y={ $memory\cmd$rdmux[0][1][0]$a$1083 [7:4] $memory\cmd$rdmux[0][1][0]$a$1083 [2:0] }
      New connections: $memory\cmd$rdmux[0][1][0]$a$1083 [3] = 1'0
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][2][1]$1091:
      Old ports: A=$memory\cmd$rdmux[0][2][1]$a$1092, B=$memory\cmd$rdmux[0][2][1]$b$1093, Y=$memory\cmd$rdmux[0][1][0]$b$1084
      New ports: A={ 1'1 $memory\cmd$rdmux[0][2][1]$a$1092 [5] 2'00 $memory\cmd$rdmux[0][2][1]$a$1092 [2:0] }, B={ $memory\cmd$rdmux[0][2][1]$b$1093 [6] 1'1 $memory\cmd$rdmux[0][2][1]$b$1093 [4:0] }, Y=$memory\cmd$rdmux[0][1][0]$b$1084 [6:0]
      New connections: $memory\cmd$rdmux[0][1][0]$b$1084 [7] = $memory\cmd$rdmux[0][1][0]$b$1084 [6]
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][2][2]$1094:
      Old ports: A=$memory\cmd$rdmux[0][2][2]$a$1095, B=$memory\cmd$rdmux[0][2][2]$b$1096, Y=$memory\cmd$rdmux[0][1][1]$a$1086
      New ports: A={ 2'10 $memory\cmd$rdmux[0][2][2]$a$1095 [3] 1'0 $memory\cmd$rdmux[0][2][2]$a$1095 [1:0] }, B={ $memory\cmd$rdmux[0][2][2]$b$1096 [2] $memory\cmd$rdmux[0][2][2]$b$1096 [0] $memory\cmd$rdmux[0][2][2]$b$1096 [2] $memory\cmd$rdmux[0][2][2]$b$1096 [2] $memory\cmd$rdmux[0][2][2]$b$1096 [0] $memory\cmd$rdmux[0][2][2]$b$1096 [0] }, Y=$memory\cmd$rdmux[0][1][1]$a$1086 [5:0]
      New connections: $memory\cmd$rdmux[0][1][1]$a$1086 [7:6] = { $memory\cmd$rdmux[0][1][1]$a$1086 [4] $memory\cmd$rdmux[0][1][1]$a$1086 [4] }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][4][0]$1353:
      Old ports: A=$memory\params$rdmux[0][4][0]$a$1354, B=$memory\params$rdmux[0][4][0]$b$1355, Y=$memory\params$rdmux[0][3][0]$a$1330
      New ports: A={ $memory\params$rdmux[0][4][0]$a$1354 [3] $memory\params$rdmux[0][4][0]$a$1354 [0] }, B={ $memory\params$rdmux[0][4][0]$b$1355 [3] $memory\params$rdmux[0][4][0]$b$1355 [0] }, Y={ $memory\params$rdmux[0][3][0]$a$1330 [3] $memory\params$rdmux[0][3][0]$a$1330 [0] }
      New connections: { $memory\params$rdmux[0][3][0]$a$1330 [7:4] $memory\params$rdmux[0][3][0]$a$1330 [2:1] } = { 2'00 $memory\params$rdmux[0][3][0]$a$1330 [3] $memory\params$rdmux[0][3][0]$a$1330 [3] 2'10 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][4][1]$1356:
      Old ports: A=$memory\params$rdmux[0][4][1]$a$1357, B=$memory\params$rdmux[0][4][1]$b$1358, Y=$memory\params$rdmux[0][3][0]$b$1331
      New ports: A={ 1'0 $memory\params$rdmux[0][4][1]$a$1357 [3] $memory\params$rdmux[0][4][1]$a$1357 [3] $memory\params$rdmux[0][4][1]$a$1357 [3] 2'10 $memory\params$rdmux[0][4][1]$a$1357 [0] }, B={ $memory\params$rdmux[0][4][1]$b$1358 [5] $memory\params$rdmux[0][4][1]$b$1358 [5] 1'0 $memory\params$rdmux[0][4][1]$b$1358 [3:2] $memory\params$rdmux[0][4][1]$b$1358 [0] $memory\params$rdmux[0][4][1]$b$1358 [0] }, Y={ $memory\params$rdmux[0][3][0]$b$1331 [7] $memory\params$rdmux[0][3][0]$b$1331 [5:0] }
      New connections: $memory\params$rdmux[0][3][0]$b$1331 [6] = 1'0
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][4][2]$1359:
      Old ports: A=$memory\params$rdmux[0][4][2]$a$1360, B=$memory\params$rdmux[0][4][2]$b$1361, Y=$memory\params$rdmux[0][3][1]$a$1333
      New ports: A={ $memory\params$rdmux[0][4][2]$a$1360 [7:6] 1'0 $memory\params$rdmux[0][4][2]$a$1360 [3] $memory\params$rdmux[0][4][2]$a$1360 [0] 1'0 $memory\params$rdmux[0][4][2]$a$1360 [0] }, B={ $memory\params$rdmux[0][4][2]$b$1361 [7] $memory\params$rdmux[0][4][2]$b$1361 [5] $memory\params$rdmux[0][4][2]$b$1361 [5] 1'1 $memory\params$rdmux[0][4][2]$b$1361 [2:0] }, Y={ $memory\params$rdmux[0][3][1]$a$1333 [7:5] $memory\params$rdmux[0][3][1]$a$1333 [3:0] }
      New connections: $memory\params$rdmux[0][3][1]$a$1333 [4] = 1'0
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][4][3]$1362:
      Old ports: A=$memory\params$rdmux[0][4][3]$a$1363, B=$memory\params$rdmux[0][4][3]$b$1364, Y=$memory\params$rdmux[0][3][1]$b$1334
      New ports: A={ 1'0 $memory\params$rdmux[0][4][3]$a$1363 [3] $memory\params$rdmux[0][4][3]$a$1363 [1] $memory\params$rdmux[0][4][3]$a$1363 [1:0] }, B={ $memory\params$rdmux[0][4][3]$b$1364 [4] 1'0 $memory\params$rdmux[0][4][3]$b$1364 [0] $memory\params$rdmux[0][4][3]$b$1364 [1:0] }, Y=$memory\params$rdmux[0][3][1]$b$1334 [4:0]
      New connections: $memory\params$rdmux[0][3][1]$b$1334 [7:5] = 3'000
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][4][4]$1365:
      Old ports: A=$memory\params$rdmux[0][4][4]$a$1366, B=$memory\params$rdmux[0][4][4]$b$1367, Y=$memory\params$rdmux[0][3][2]$a$1336
      New ports: A=$memory\params$rdmux[0][4][4]$a$1366 [5:0], B={ 1'0 $memory\params$rdmux[0][4][4]$b$1367 [4:2] 2'00 }, Y=$memory\params$rdmux[0][3][2]$a$1336 [5:0]
      New connections: $memory\params$rdmux[0][3][2]$a$1336 [7:6] = 2'00
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][4][5]$1368:
      Old ports: A=$memory\params$rdmux[0][4][5]$a$1369, B=$memory\params$rdmux[0][4][5]$b$1370, Y=$memory\params$rdmux[0][3][2]$b$1337
      New ports: A={ $memory\params$rdmux[0][4][5]$a$1369 [3] $memory\params$rdmux[0][4][5]$a$1369 [1:0] }, B={ $memory\params$rdmux[0][4][5]$b$1370 [3] 1'1 $memory\params$rdmux[0][4][5]$b$1370 [0] }, Y={ $memory\params$rdmux[0][3][2]$b$1337 [3] $memory\params$rdmux[0][3][2]$b$1337 [1:0] }
      New connections: { $memory\params$rdmux[0][3][2]$b$1337 [7:4] $memory\params$rdmux[0][3][2]$b$1337 [2] } = { 4'0000 $memory\params$rdmux[0][3][2]$b$1337 [0] }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][4][6]$1371:
      Old ports: A=$memory\params$rdmux[0][4][6]$a$1372, B=$memory\params$rdmux[0][4][6]$b$1373, Y=$memory\params$rdmux[0][3][3]$a$1339
      New ports: A={ $memory\params$rdmux[0][4][6]$a$1372 [5:1] 1'1 }, B={ 1'0 $memory\params$rdmux[0][4][6]$b$1373 [4] $memory\params$rdmux[0][4][6]$b$1373 [0] $memory\params$rdmux[0][4][6]$b$1373 [2] 1'0 $memory\params$rdmux[0][4][6]$b$1373 [0] }, Y=$memory\params$rdmux[0][3][3]$a$1339 [5:0]
      New connections: $memory\params$rdmux[0][3][3]$a$1339 [7:6] = 2'00
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][4][7]$1374:
      Old ports: A=$memory\params$rdmux[0][4][7]$a$1375, B=$memory\params$rdmux[0][4][7]$b$1376, Y=$memory\params$rdmux[0][3][3]$b$1340
      New ports: A={ $memory\params$rdmux[0][4][7]$a$1375 [7] $memory\params$rdmux[0][4][7]$a$1375 [3] $memory\params$rdmux[0][4][7]$a$1375 [3] $memory\params$rdmux[0][4][7]$a$1375 [0] $memory\params$rdmux[0][4][7]$a$1375 [0] }, B={ $memory\params$rdmux[0][4][7]$b$1376 [5] $memory\params$rdmux[0][4][7]$b$1376 [5] 2'00 $memory\params$rdmux[0][4][7]$b$1376 [0] }, Y={ $memory\params$rdmux[0][3][3]$b$1340 [7] $memory\params$rdmux[0][3][3]$b$1340 [5] $memory\params$rdmux[0][3][3]$b$1340 [3:2] $memory\params$rdmux[0][3][3]$b$1340 [0] }
      New connections: { $memory\params$rdmux[0][3][3]$b$1340 [6] $memory\params$rdmux[0][3][3]$b$1340 [4] $memory\params$rdmux[0][3][3]$b$1340 [1] } = { $memory\params$rdmux[0][3][3]$b$1340 [3] $memory\params$rdmux[0][3][3]$b$1340 [3] 1'0 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][4][8]$1377:
      Old ports: A=$memory\params$rdmux[0][4][8]$a$1378, B=8'xxxxxxxx, Y=$memory\params$rdmux[0][3][4]$a$1342
      New ports: A=$memory\params$rdmux[0][4][8]$a$1378 [5:0], B=6'xxxxxx, Y=$memory\params$rdmux[0][3][4]$a$1342 [5:0]
      New connections: $memory\params$rdmux[0][3][4]$a$1342 [7:6] = { $memory\params$rdmux[0][3][4]$a$1342 [2] $memory\params$rdmux[0][3][4]$a$1342 [0] }
  Optimizing cells in module \demo.
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][1][1]$1085:
      Old ports: A=$memory\cmd$rdmux[0][1][1]$a$1086, B=8'xxxxxxxx, Y=$memory\cmd$rdmux[0][0][0]$b$1081
      New ports: A=$memory\cmd$rdmux[0][1][1]$a$1086 [5:0], B=6'xxxxxx, Y=$memory\cmd$rdmux[0][0][0]$b$1081 [5:0]
      New connections: $memory\cmd$rdmux[0][0][0]$b$1081 [7:6] = { $memory\cmd$rdmux[0][0][0]$b$1081 [4] $memory\cmd$rdmux[0][0][0]$b$1081 [4] }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][3][0]$1329:
      Old ports: A=$memory\params$rdmux[0][3][0]$a$1330, B=$memory\params$rdmux[0][3][0]$b$1331, Y=$memory\params$rdmux[0][2][0]$a$1318
      New ports: A={ 1'0 $memory\params$rdmux[0][3][0]$a$1330 [3] $memory\params$rdmux[0][3][0]$a$1330 [3] $memory\params$rdmux[0][3][0]$a$1330 [3] 2'10 $memory\params$rdmux[0][3][0]$a$1330 [0] }, B={ $memory\params$rdmux[0][3][0]$b$1331 [7] $memory\params$rdmux[0][3][0]$b$1331 [5:0] }, Y={ $memory\params$rdmux[0][2][0]$a$1318 [7] $memory\params$rdmux[0][2][0]$a$1318 [5:0] }
      New connections: $memory\params$rdmux[0][2][0]$a$1318 [6] = 1'0
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][3][2]$1335:
      Old ports: A=$memory\params$rdmux[0][3][2]$a$1336, B=$memory\params$rdmux[0][3][2]$b$1337, Y=$memory\params$rdmux[0][2][1]$a$1321
      New ports: A=$memory\params$rdmux[0][3][2]$a$1336 [5:0], B={ 2'00 $memory\params$rdmux[0][3][2]$b$1337 [3] $memory\params$rdmux[0][3][2]$b$1337 [0] $memory\params$rdmux[0][3][2]$b$1337 [1:0] }, Y=$memory\params$rdmux[0][2][1]$a$1321 [5:0]
      New connections: $memory\params$rdmux[0][2][1]$a$1321 [7:6] = 2'00
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][3][4]$1341:
      Old ports: A=$memory\params$rdmux[0][3][4]$a$1342, B=8'xxxxxxxx, Y=$memory\params$rdmux[0][2][2]$a$1324
      New ports: A=$memory\params$rdmux[0][3][4]$a$1342 [5:0], B=6'xxxxxx, Y=$memory\params$rdmux[0][2][2]$a$1324 [5:0]
      New connections: $memory\params$rdmux[0][2][2]$a$1324 [7:6] = { $memory\params$rdmux[0][2][2]$a$1324 [2] $memory\params$rdmux[0][2][2]$a$1324 [0] }
  Optimizing cells in module \demo.
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][2][2]$1323:
      Old ports: A=$memory\params$rdmux[0][2][2]$a$1324, B=8'xxxxxxxx, Y=$memory\params$rdmux[0][1][1]$a$1315
      New ports: A=$memory\params$rdmux[0][2][2]$a$1324 [5:0], B=6'xxxxxx, Y=$memory\params$rdmux[0][1][1]$a$1315 [5:0]
      New connections: $memory\params$rdmux[0][1][1]$a$1315 [7:6] = { $memory\params$rdmux[0][1][1]$a$1315 [2] $memory\params$rdmux[0][1][1]$a$1315 [0] }
  Optimizing cells in module \demo.
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][1][1]$1314:
      Old ports: A=$memory\params$rdmux[0][1][1]$a$1315, B=8'xxxxxxxx, Y=$memory\params$rdmux[0][0][0]$b$1310
      New ports: A=$memory\params$rdmux[0][1][1]$a$1315 [5:0], B=6'xxxxxx, Y=$memory\params$rdmux[0][0][0]$b$1310 [5:0]
      New connections: $memory\params$rdmux[0][0][0]$b$1310 [7:6] = { $memory\params$rdmux[0][0][0]$b$1310 [2] $memory\params$rdmux[0][0][0]$b$1310 [0] }
  Optimizing cells in module \demo.
Performed a total of 84 changes.

2.29.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\demo'.
<suppressed ~108 debug messages>
Removed a total of 36 cells.

2.29.13. Executing OPT_RMDFF pass (remove dff with constant values).

2.29.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..
Removed 0 unused cells and 38 unused wires.
<suppressed ~1 debug messages>

2.29.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.

2.29.16. Rerunning OPT passes. (Maybe there is more to do..)

2.29.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \demo..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~23 debug messages>

2.29.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \demo.
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][3][2]$1106:
      Old ports: A={ 1'0 $memory\cmd$rdmux[0][3][1]$a$1104 [6:5] $memory\cmd$rdmux[0][3][1]$a$1104 [5] }, B={ $memory\cmd$rdmux[0][3][1]$a$1104 [6:5] 1'0 $memory\cmd$rdmux[0][3][1]$a$1104 [5] }, Y={ $memory\cmd$rdmux[0][2][1]$a$1092 [5] $memory\cmd$rdmux[0][2][1]$a$1092 [2:0] }
      New ports: A={ 1'0 $memory\cmd$rdmux[0][3][1]$a$1104 [6:5] }, B={ $memory\cmd$rdmux[0][3][1]$a$1104 [6:5] 1'0 }, Y={ $memory\cmd$rdmux[0][2][1]$a$1092 [5] $memory\cmd$rdmux[0][2][1]$a$1092 [2:1] }
      New connections: $memory\cmd$rdmux[0][2][1]$a$1092 [0] = $memory\cmd$rdmux[0][3][1]$a$1104 [5]
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][10]$1431:
      Old ports: A={ 1'1 $memory\params$rdmux[0][5][0]$b$1403 [5] $memory\params$rdmux[0][5][0]$b$1403 [0] }, B={ $memory\params$rdmux[0][5][0]$b$1403 [5] $memory\params$rdmux[0][5][0]$b$1403 [0] $memory\params$rdmux[0][5][0]$b$1403 [0] }, Y={ $memory\params$rdmux[0][4][5]$a$1369 [3] $memory\params$rdmux[0][4][5]$a$1369 [1] $memory\params$rdmux[0][4][5]$a$1369 [2] }
      New ports: A={ 1'1 $memory\params$rdmux[0][5][0]$b$1403 [5] }, B={ $memory\params$rdmux[0][5][0]$b$1403 [5] $memory\params$rdmux[0][5][0]$b$1403 [0] }, Y={ $memory\params$rdmux[0][4][5]$a$1369 [3] $memory\params$rdmux[0][4][5]$a$1369 [1] }
      New connections: $memory\params$rdmux[0][4][5]$a$1369 [2] = $memory\params$rdmux[0][5][0]$b$1403 [0]
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][5]$1416:
      Old ports: A={ $memory\params$rdmux[0][5][0]$b$1403 [0] $memory\params$rdmux[0][5][0]$b$1403 [5] $memory\params$rdmux[0][5][0]$b$1403 [0] $memory\params$rdmux[0][5][0]$b$1403 [5] $memory\params$rdmux[0][5][0]$b$1403 [0] }, B={ $memory\params$rdmux[0][5][0]$b$1403 [5] $memory\params$rdmux[0][5][0]$b$1403 [5] 2'11 $memory\params$rdmux[0][5][0]$b$1403 [0] }, Y={ $memory\params$rdmux[0][4][2]$b$1361 [7:6] $memory\params$rdmux[0][4][2]$b$1361 [2:0] }
      New ports: A={ $memory\params$rdmux[0][5][0]$b$1403 [0] $memory\params$rdmux[0][5][0]$b$1403 [0] $memory\params$rdmux[0][5][0]$b$1403 [5] }, B={ $memory\params$rdmux[0][5][0]$b$1403 [5] 2'11 }, Y={ $memory\params$rdmux[0][4][2]$b$1361 [7] $memory\params$rdmux[0][4][2]$b$1361 [2:1] }
      New connections: { $memory\params$rdmux[0][4][2]$b$1361 [6] $memory\params$rdmux[0][4][2]$b$1361 [0] } = { $memory\params$rdmux[0][5][0]$b$1403 [5] $memory\params$rdmux[0][5][0]$b$1403 [0] }
  Optimizing cells in module \demo.
Performed a total of 3 changes.

2.29.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\demo'.
Removed a total of 0 cells.

2.29.20. Executing OPT_RMDFF pass (remove dff with constant values).

2.29.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

2.29.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.

2.29.23. Rerunning OPT passes. (Maybe there is more to do..)

2.29.24. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \demo..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~23 debug messages>

2.29.25. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \demo.
Performed a total of 0 changes.

2.29.26. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\demo'.
Removed a total of 0 cells.

2.29.27. Executing OPT_RMDFF pass (remove dff with constant values).

2.29.28. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..

2.29.29. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.

2.29.30. Finished OPT passes. (There is nothing left to do.)

2.30. Executing TECHMAP pass (map to technology primitives).

2.30.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

2.30.2. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/arith_map.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/arith_map.v' to AST representation.
Generating RTLIL representation for module `\_80_ice40_alu'.
Successfully finished Verilog frontend.

2.30.3. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $logic_not.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=7\Y_WIDTH=7 for cells of type $alu.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $logic_and.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=15\B_WIDTH=16\Y_WIDTH=16 for cells of type $alu.
Using template $paramod$constmap:446553370afc6c2aa6cc0b8f657b7f64b237ff7c$paramod$55f49a009a975a30a28fdd971adb6110903d4740\_90_shift_shiftx for cells of type $shiftx.
Using template $paramod$constmap:ee5af906ae0d3d414c6a0471604c553ef70c8e09$paramod$1297efc30c1e19551d1f4e269f2cbfa7dd15f801\_90_shift_shiftx for cells of type $shiftx.
Using extmapper simplemap for cells of type $eq.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=16\Y_WIDTH=16 for cells of type $alu.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $logic_or.
Using extmapper simplemap for cells of type $lut.
Using extmapper simplemap for cells of type $reduce_and.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=7\B_WIDTH=16\Y_WIDTH=16 for cells of type $alu.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=4\B_WIDTH=1\Y_WIDTH=4 for cells of type $alu.
Using extmapper simplemap for cells of type $ne.
Using template $paramod\_90_pmux\WIDTH=14\S_WIDTH=2 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=5\S_WIDTH=7 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=8\S_WIDTH=2 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=16\S_WIDTH=7 for cells of type $pmux.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=14\B_WIDTH=1\Y_WIDTH=14 for cells of type $alu.
Using template $paramod\_90_pmux\WIDTH=6\S_WIDTH=19 for cells of type $pmux.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=3\B_WIDTH=1\Y_WIDTH=3 for cells of type $alu.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=5\Y_WIDTH=5 for cells of type $alu.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=9\B_WIDTH=16\Y_WIDTH=16 for cells of type $alu.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=6\B_WIDTH=16\Y_WIDTH=16 for cells of type $alu.
Using template $paramod\_90_pmux\WIDTH=1\S_WIDTH=2 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=1\S_WIDTH=3 for cells of type $pmux.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=5\B_WIDTH=1\Y_WIDTH=5 for cells of type $alu.
Using extmapper simplemap for cells of type $dff.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $pos.
Using extmapper simplemap for cells of type $and.
No more expansions possible.
<suppressed ~866 debug messages>

2.31. Executing ICE40_OPT pass (performing simple optimizations).

2.31.1. Running ICE40 specific optimizations.

2.31.2. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.
<suppressed ~874 debug messages>

2.31.3. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\demo'.
<suppressed ~1518 debug messages>
Removed a total of 506 cells.

2.31.4. Executing OPT_RMDFF pass (remove dff with constant values).

2.31.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..
Removed 181 unused cells and 687 unused wires.
<suppressed ~182 debug messages>

2.31.6. Rerunning OPT passes. (Removed registers in this run.)

2.31.7. Running ICE40 specific optimizations.
Optimized away SB_CARRY cell demo.$auto$alumacc.cc:474:replace_alu$1009.slice[0].carry: CO=\delay [0]
Optimized away SB_CARRY cell demo.$auto$alumacc.cc:474:replace_alu$1012.slice[0].carry: CO=\cmd_counter [0]
Optimized away SB_CARRY cell demo.$auto$alumacc.cc:474:replace_alu$1015.slice[0].carry: CO=\param_counter [0]
Optimized away SB_CARRY cell demo.$auto$alumacc.cc:474:replace_alu$1018.slice[0].carry: CO=\cmd_counter [0]
Optimized away SB_CARRY cell demo.$auto$alumacc.cc:474:replace_alu$1021.slice[0].carry: CO=\pixel_bit_counter [0]
Optimized away SB_CARRY cell demo.$auto$alumacc.cc:474:replace_alu$1024.slice[0].carry: CO=\bit_counter [0]
Optimized away SB_CARRY cell demo.$auto$alumacc.cc:474:replace_alu$1027.slice[0].carry: CO=\params_left [0]
Optimized away SB_CARRY cell demo.$auto$alumacc.cc:474:replace_alu$939.slice[0].carry: CO=$auto$alumacc.cc:474:replace_alu$939.BB [0]
Optimized away SB_CARRY cell demo.$auto$alumacc.cc:474:replace_alu$950.slice[0].carry: CO=$auto$alumacc.cc:474:replace_alu$939.BB [0]
Optimized away SB_CARRY cell demo.$auto$alumacc.cc:474:replace_alu$961.slice[0].carry: CO=$auto$alumacc.cc:474:replace_alu$939.BB [0]
Optimized away SB_CARRY cell demo.$auto$alumacc.cc:474:replace_alu$972.slice[0].carry: CO=$auto$alumacc.cc:474:replace_alu$939.BB [0]
Optimized away SB_CARRY cell demo.$auto$alumacc.cc:474:replace_alu$983.slice[0].carry: CO=$auto$alumacc.cc:474:replace_alu$939.BB [0]
Optimized away SB_CARRY cell demo.$auto$alumacc.cc:474:replace_alu$996.slice[0].carry: CO=1'1
Mapping SB_LUT4 cell demo.$auto$alumacc.cc:474:replace_alu$1009.slice[1].adder back to logic.
Mapping SB_LUT4 cell demo.$auto$alumacc.cc:474:replace_alu$1012.slice[1].adder back to logic.
Mapping SB_LUT4 cell demo.$auto$alumacc.cc:474:replace_alu$1015.slice[1].adder back to logic.
Mapping SB_LUT4 cell demo.$auto$alumacc.cc:474:replace_alu$1018.slice[1].adder back to logic.
Mapping SB_LUT4 cell demo.$auto$alumacc.cc:474:replace_alu$1021.slice[1].adder back to logic.
Mapping SB_LUT4 cell demo.$auto$alumacc.cc:474:replace_alu$1024.slice[1].adder back to logic.
Mapping SB_LUT4 cell demo.$auto$alumacc.cc:474:replace_alu$1027.slice[1].adder back to logic.

2.31.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.
<suppressed ~90 debug messages>

2.31.9. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\demo'.
<suppressed ~21 debug messages>
Removed a total of 7 cells.

2.31.10. Executing OPT_RMDFF pass (remove dff with constant values).

2.31.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..
Removed 0 unused cells and 20 unused wires.
<suppressed ~1 debug messages>

2.31.12. Rerunning OPT passes. (Removed registers in this run.)

2.31.13. Running ICE40 specific optimizations.
Optimized away SB_CARRY cell demo.$auto$alumacc.cc:474:replace_alu$996.slice[1].carry: CO=$auto$alumacc.cc:474:replace_alu$939.BB [1]

2.31.14. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.

2.31.15. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\demo'.
Removed a total of 0 cells.

2.31.16. Executing OPT_RMDFF pass (remove dff with constant values).

2.31.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..

2.31.18. Rerunning OPT passes. (Removed registers in this run.)

2.31.19. Running ICE40 specific optimizations.

2.31.20. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.

2.31.21. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\demo'.
Removed a total of 0 cells.

2.31.22. Executing OPT_RMDFF pass (remove dff with constant values).

2.31.23. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..

2.31.24. Finished OPT passes. (There is nothing left to do.)

2.32. Executing DFFSR2DFF pass (mapping DFFSR cells to simpler FFs).

2.33. Executing DFF2DFFE pass (transform $dff to $dffe where applicable).
Selected cell types for direct conversion:
  $_DFF_PP1_ -> $__DFFE_PP1
  $_DFF_PP0_ -> $__DFFE_PP0
  $_DFF_PN1_ -> $__DFFE_PN1
  $_DFF_PN0_ -> $__DFFE_PN0
  $_DFF_NP1_ -> $__DFFE_NP1
  $_DFF_NP0_ -> $__DFFE_NP0
  $_DFF_NN1_ -> $__DFFE_NN1
  $_DFF_NN0_ -> $__DFFE_NN0
  $_DFF_N_ -> $_DFFE_NP_
  $_DFF_P_ -> $_DFFE_PP_
Transforming FF to FF+Enable cells in module demo:
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3746 to $_DFFE_PP_ for $0\rst[0:0] -> \rst.
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3747 to $_DFFE_PP_ for $0\dc[0:0] -> \dc.
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3748 to $_DFFE_PP_ for $0\mosi[0:0] -> \mosi.
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3749 to $_DFFE_PP_ for $0\cs[0:0] -> \cs.
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3750 to $_DFFE_PP_ for $0\state[5:0] [0] -> \state [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3751 to $_DFFE_PP_ for $0\state[5:0] [1] -> \state [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3752 to $_DFFE_PP_ for $0\state[5:0] [2] -> \state [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3753 to $_DFFE_PP_ for $0\state[5:0] [3] -> \state [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3754 to $_DFFE_PP_ for $0\state[5:0] [4] -> \state [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3755 to $_DFFE_PP_ for $0\state[5:0] [5] -> \state [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3756 to $_DFFE_PP_ for $0\delay[15:0] [0] -> \delay [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3757 to $_DFFE_PP_ for $0\delay[15:0] [1] -> \delay [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3758 to $_DFFE_PP_ for $0\delay[15:0] [2] -> \delay [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3759 to $_DFFE_PP_ for $0\delay[15:0] [3] -> \delay [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3760 to $_DFFE_PP_ for $0\delay[15:0] [4] -> \delay [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3761 to $_DFFE_PP_ for $0\delay[15:0] [5] -> \delay [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3762 to $_DFFE_PP_ for $0\delay[15:0] [6] -> \delay [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3763 to $_DFFE_PP_ for $0\delay[15:0] [7] -> \delay [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3764 to $_DFFE_PP_ for $0\delay[15:0] [8] -> \delay [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3765 to $_DFFE_PP_ for $0\delay[15:0] [9] -> \delay [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3766 to $_DFFE_PP_ for $0\delay[15:0] [10] -> \delay [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3767 to $_DFFE_PP_ for $0\delay[15:0] [11] -> \delay [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3768 to $_DFFE_PP_ for $0\delay[15:0] [12] -> \delay [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3769 to $_DFFE_PP_ for $0\delay[15:0] [13] -> \delay [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3770 to $_DFFE_PP_ for $0\delay[15:0] [14] -> \delay [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3771 to $_DFFE_PP_ for $0\delay[15:0] [15] -> \delay [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3772 to $_DFFE_PP_ for $0\data[7:0] [0] -> \data [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3773 to $_DFFE_PP_ for $0\data[7:0] [1] -> \data [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3774 to $_DFFE_PP_ for $0\data[7:0] [2] -> \data [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3775 to $_DFFE_PP_ for $0\data[7:0] [3] -> \data [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3776 to $_DFFE_PP_ for $0\data[7:0] [4] -> \data [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3777 to $_DFFE_PP_ for $0\data[7:0] [5] -> \data [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3778 to $_DFFE_PP_ for $0\data[7:0] [6] -> \data [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3779 to $_DFFE_PP_ for $0\data[7:0] [7] -> \data [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3780 to $_DFFE_PP_ for $0\bit_counter[2:0] [0] -> \bit_counter [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3781 to $_DFFE_PP_ for $0\bit_counter[2:0] [1] -> \bit_counter [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3782 to $_DFFE_PP_ for $0\bit_counter[2:0] [2] -> \bit_counter [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3783 to $_DFFE_PP_ for $0\pixel_data[15:0] [0] -> \pixel_data [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3784 to $_DFFE_PP_ for $0\pixel_data[15:0] [1] -> \pixel_data [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3785 to $_DFFE_PP_ for $0\pixel_data[15:0] [2] -> \pixel_data [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3786 to $_DFFE_PP_ for $0\pixel_data[15:0] [3] -> \pixel_data [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3787 to $_DFFE_PP_ for $0\pixel_data[15:0] [4] -> \pixel_data [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3788 to $_DFFE_PP_ for $0\pixel_data[15:0] [5] -> \pixel_data [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3789 to $_DFFE_PP_ for $0\pixel_data[15:0] [6] -> \pixel_data [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3790 to $_DFFE_PP_ for $0\pixel_data[15:0] [7] -> \pixel_data [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3791 to $_DFFE_PP_ for $0\pixel_data[15:0] [8] -> \pixel_data [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3792 to $_DFFE_PP_ for $0\pixel_data[15:0] [9] -> \pixel_data [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3793 to $_DFFE_PP_ for $0\pixel_data[15:0] [10] -> \pixel_data [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3794 to $_DFFE_PP_ for $0\pixel_data[15:0] [11] -> \pixel_data [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3795 to $_DFFE_PP_ for $0\pixel_data[15:0] [12] -> \pixel_data [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3796 to $_DFFE_PP_ for $0\pixel_data[15:0] [13] -> \pixel_data [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3797 to $_DFFE_PP_ for $0\pixel_data[15:0] [14] -> \pixel_data [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3798 to $_DFFE_PP_ for $0\pixel_data[15:0] [15] -> \pixel_data [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3799 to $_DFFE_PP_ for $0\pixel_bit_counter[3:0] [0] -> \pixel_bit_counter [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3800 to $_DFFE_PP_ for $0\pixel_bit_counter[3:0] [1] -> \pixel_bit_counter [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3801 to $_DFFE_PP_ for $0\pixel_bit_counter[3:0] [2] -> \pixel_bit_counter [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3802 to $_DFFE_PP_ for $0\pixel_bit_counter[3:0] [3] -> \pixel_bit_counter [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3803 to $_DFFE_PP_ for $0\cmd_counter[4:0] [0] -> \cmd_counter [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3804 to $_DFFE_PP_ for $0\cmd_counter[4:0] [1] -> \cmd_counter [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3805 to $_DFFE_PP_ for $0\cmd_counter[4:0] [2] -> \cmd_counter [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3806 to $_DFFE_PP_ for $0\cmd_counter[4:0] [3] -> \cmd_counter [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3807 to $_DFFE_PP_ for $0\cmd_counter[4:0] [4] -> \cmd_counter [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3808 to $_DFFE_PP_ for $0\param_counter[6:0] [0] -> \param_counter [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3809 to $_DFFE_PP_ for $0\param_counter[6:0] [1] -> \param_counter [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3810 to $_DFFE_PP_ for $0\param_counter[6:0] [2] -> \param_counter [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3811 to $_DFFE_PP_ for $0\param_counter[6:0] [3] -> \param_counter [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3812 to $_DFFE_PP_ for $0\param_counter[6:0] [4] -> \param_counter [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3813 to $_DFFE_PP_ for $0\param_counter[6:0] [5] -> \param_counter [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3814 to $_DFFE_PP_ for $0\param_counter[6:0] [6] -> \param_counter [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3815 to $_DFFE_PP_ for $0\params_left[13:0] [0] -> \params_left [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3816 to $_DFFE_PP_ for $0\params_left[13:0] [1] -> \params_left [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3817 to $_DFFE_PP_ for $0\params_left[13:0] [2] -> \params_left [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3818 to $_DFFE_PP_ for $0\params_left[13:0] [3] -> \params_left [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3819 to $_DFFE_PP_ for $0\params_left[13:0] [4] -> \params_left [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3820 to $_DFFE_PP_ for $0\params_left[13:0] [5] -> \params_left [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3821 to $_DFFE_PP_ for $0\params_left[13:0] [6] -> \params_left [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3822 to $_DFFE_PP_ for $0\params_left[13:0] [7] -> \params_left [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3823 to $_DFFE_PP_ for $0\params_left[13:0] [8] -> \params_left [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3824 to $_DFFE_PP_ for $0\params_left[13:0] [9] -> \params_left [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3825 to $_DFFE_PP_ for $0\params_left[13:0] [10] -> \params_left [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3826 to $_DFFE_PP_ for $0\params_left[13:0] [11] -> \params_left [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3827 to $_DFFE_PP_ for $0\params_left[13:0] [12] -> \params_left [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3828 to $_DFFE_PP_ for $0\params_left[13:0] [13] -> \params_left [13].

2.34. Executing TECHMAP pass (map to technology primitives).

2.34.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/cells_map.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$__DFFE_NN0'.
Generating RTLIL representation for module `\$__DFFE_NN1'.
Generating RTLIL representation for module `\$__DFFE_PN0'.
Generating RTLIL representation for module `\$__DFFE_PN1'.
Generating RTLIL representation for module `\$__DFFE_NP0'.
Generating RTLIL representation for module `\$__DFFE_NP1'.
Generating RTLIL representation for module `\$__DFFE_PP0'.
Generating RTLIL representation for module `\$__DFFE_PP1'.
Successfully finished Verilog frontend.

2.34.2. Continuing TECHMAP pass.
Using template \$_DFFE_PP_ for cells of type $_DFFE_PP_.
Using template \$_DFF_P_ for cells of type $_DFF_P_.
No more expansions possible.
<suppressed ~84 debug messages>

2.35. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.
<suppressed ~249 debug messages>

2.36. Executing SIMPLEMAP pass (map simple cells to gate primitives).

2.37. Executing ICE40_FFINIT pass (implement FF init values).
Handling FF init values in demo.
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3829 (SB_DFF): \scl = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3754 (SB_DFFE): \state [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3751 (SB_DFFE): \state [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3752 (SB_DFFE): \state [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3815 (SB_DFFE): \params_left [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3753 (SB_DFFE): \state [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3755 (SB_DFFE): \state [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3750 (SB_DFFE): \state [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3772 (SB_DFFE): \data [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3773 (SB_DFFE): \data [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3774 (SB_DFFE): \data [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3775 (SB_DFFE): \data [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3776 (SB_DFFE): \data [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3777 (SB_DFFE): \data [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3778 (SB_DFFE): \data [6] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3779 (SB_DFFE): \data [7] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3781 (SB_DFFE): \bit_counter [1] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3788 (SB_DFFE): \pixel_data [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3782 (SB_DFFE): \bit_counter [2] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3784 (SB_DFFE): \pixel_data [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3785 (SB_DFFE): \pixel_data [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3786 (SB_DFFE): \pixel_data [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3780 (SB_DFFE): \bit_counter [0] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3787 (SB_DFFE): \pixel_data [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3789 (SB_DFFE): \pixel_data [6] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3790 (SB_DFFE): \pixel_data [7] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3791 (SB_DFFE): \pixel_data [8] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3792 (SB_DFFE): \pixel_data [9] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3793 (SB_DFFE): \pixel_data [10] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3794 (SB_DFFE): \pixel_data [11] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3795 (SB_DFFE): \pixel_data [12] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3796 (SB_DFFE): \pixel_data [13] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3797 (SB_DFFE): \pixel_data [14] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3798 (SB_DFFE): \pixel_data [15] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3799 (SB_DFFE): \pixel_bit_counter [0] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3800 (SB_DFFE): \pixel_bit_counter [1] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3801 (SB_DFFE): \pixel_bit_counter [2] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3807 (SB_DFFE): \cmd_counter [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3802 (SB_DFFE): \pixel_bit_counter [3] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3804 (SB_DFFE): \cmd_counter [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3805 (SB_DFFE): \cmd_counter [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3783 (SB_DFFE): \pixel_data [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3806 (SB_DFFE): \cmd_counter [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3808 (SB_DFFE): \param_counter [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3809 (SB_DFFE): \param_counter [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3810 (SB_DFFE): \param_counter [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3811 (SB_DFFE): \param_counter [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3812 (SB_DFFE): \param_counter [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3813 (SB_DFFE): \param_counter [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3816 (SB_DFFE): \params_left [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3803 (SB_DFFE): \cmd_counter [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3814 (SB_DFFE): \param_counter [6] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3817 (SB_DFFE): \params_left [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3818 (SB_DFFE): \params_left [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3819 (SB_DFFE): \params_left [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3820 (SB_DFFE): \params_left [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3821 (SB_DFFE): \params_left [6] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3822 (SB_DFFE): \params_left [7] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3823 (SB_DFFE): \params_left [8] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3824 (SB_DFFE): \params_left [9] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3825 (SB_DFFE): \params_left [10] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3826 (SB_DFFE): \params_left [11] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3827 (SB_DFFE): \params_left [12] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3828 (SB_DFFE): \params_left [13] = 0

2.38. Executing ICE40_FFSSR pass (merge synchronous set/reset into FF cells).
Merging set/reset $_MUX_ cells into SB_FFs in demo.

2.39. Executing ICE40_OPT pass (performing simple optimizations).

2.39.1. Running ICE40 specific optimizations.

2.39.2. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.
<suppressed ~133 debug messages>

2.39.3. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\demo'.
<suppressed ~399 debug messages>
Removed a total of 133 cells.

2.39.4. Executing OPT_RMDFF pass (remove dff with constant values).

2.39.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..
Removed 0 unused cells and 725 unused wires.
<suppressed ~1 debug messages>

2.39.6. Rerunning OPT passes. (Removed registers in this run.)

2.39.7. Running ICE40 specific optimizations.

2.39.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.

2.39.9. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\demo'.
Removed a total of 0 cells.

2.39.10. Executing OPT_RMDFF pass (remove dff with constant values).

2.39.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..

2.39.12. Finished OPT passes. (There is nothing left to do.)

2.40. Executing TECHMAP pass (map to technology primitives).

2.40.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/latches_map.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/latches_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Successfully finished Verilog frontend.

2.40.2. Continuing TECHMAP pass.
No more expansions possible.

2.41. Executing ABC pass (technology mapping using ABC).

2.41.1. Extracting gate netlist of module `\demo' to `<abc-temp-dir>/input.blif'..
Extracted 1195 gates and 1323 wires to a netlist network with 126 inputs and 103 outputs.

2.41.1.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + lutpack -S 1 
ABC: + dress 
ABC: Total number of equiv classes                =     220.
ABC: Participating nodes from both networks       =     522.
ABC: Participating nodes from the first network   =     220. (  61.28 % of nodes)
ABC: Participating nodes from the second network  =     302. (  84.12 % of nodes)
ABC: Node pairs (any polarity)                    =     220. (  61.28 % of names can be moved)
ABC: Node pairs (same polarity)                   =     179. (  49.86 % of names can be moved)
ABC: Total runtime =     0.09 sec
ABC: + write_blif <abc-temp-dir>/output.blif 

2.41.1.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:      714
ABC RESULTS:        internal signals:     1094
ABC RESULTS:           input signals:      126
ABC RESULTS:          output signals:      103
Removing temp directory.
Removed 0 unused cells and 585 unused wires.

2.42. Executing TECHMAP pass (map to technology primitives).

2.42.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/cells_map.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$__DFFE_NN0'.
Generating RTLIL representation for module `\$__DFFE_NN1'.
Generating RTLIL representation for module `\$__DFFE_PN0'.
Generating RTLIL representation for module `\$__DFFE_PN1'.
Generating RTLIL representation for module `\$__DFFE_NP0'.
Generating RTLIL representation for module `\$__DFFE_NP1'.
Generating RTLIL representation for module `\$__DFFE_PP0'.
Generating RTLIL representation for module `\$__DFFE_PP1'.
Generating RTLIL representation for module `\$lut'.
Successfully finished Verilog frontend.

2.42.2. Continuing TECHMAP pass.
Using template $paramod\$lut\WIDTH=2\LUT=4'0001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0101001100110011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1010110011001100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001010000000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001111100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000010111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000011100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111000000010001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000011111111000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1110110000000011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011111111111100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111000001000100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000001011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=1\LUT=2'01 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011111101010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111111110001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111000111111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011101011111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00000111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000011101111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0111111100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000000111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011000010111011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000111001110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001000111110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00010100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000001100001110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000001110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00001110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111111110010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000101111111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111100000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001011100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000011111110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1110101100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100001110101010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000100011010011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00001011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000101110111011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0111110000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011110111110010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00111010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011101110110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000111110111011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000011111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0101001100111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011111100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11111000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0110000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000101100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0110100100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01011100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000011101110111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000001111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011010100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111001100000101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011010111111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100101000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100000100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11110100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1110000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0010111111111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10100011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111010000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011101100001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111110011110101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000010001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01010011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0111011111111000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000110000001011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111101110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0111111111111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111110100000011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111010111111100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001010000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000001101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000111000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111000010111011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11111110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111101011001101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111111100000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111100010001000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1110000011111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10101100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11001010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111000100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000110100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111111111000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000110000001010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100111111111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111010001000100 for cells of type $lut.
No more expansions possible.
<suppressed ~1589 debug messages>
Removed 0 unused cells and 714 unused wires.

2.43. Executing HIERARCHY pass (managing design hierarchy).

2.43.1. Analyzing design hierarchy..
Top module:  \demo

2.43.2. Analyzing design hierarchy..
Top module:  \demo
Removed 0 unused modules.

2.44. Printing statistics.

=== demo ===

   Number of wires:                472
   Number of wire bits:           1379
   Number of public wires:         110
   Number of public wire bits:     810
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                617
     SB_CARRY                      129
     SB_DFF                          1
     SB_DFFE                        83
     SB_LUT4                       404

2.45. Executing CHECK pass (checking for obvious problems).
checking module demo..
found and reported 0 problems.

2.46. Executing BLIF backend.

2.47. Executing JSON backend.

End of script. Logfile hash: f4ba5cfe03
CPU: user 3.88s system 0.15s, MEM: 33.01 MB total, 27.59 MB resident
Yosys 0.9 (git sha1 1979e0b)
Time spent: 18% 25x opt_expr (0 sec), 16% 24x opt_clean (0 sec), ...
