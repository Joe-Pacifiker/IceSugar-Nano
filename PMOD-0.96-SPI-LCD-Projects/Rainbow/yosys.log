
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2019  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9 (git sha1 1979e0b)


-- Parsing `rainbow.v' using frontend `verilog' --

1. Executing Verilog-2005 frontend: rainbow.v
Parsing Verilog input from `rainbow.v' to AST representation.
Generating RTLIL representation for module `\rainbow'.
Successfully finished Verilog frontend.

-- Running command `synth_ice40 -json rainbow.json -blif rainbow.blif' --

2. Executing SYNTH_ICE40 pass.

2.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/cells_sim.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\SB_IO'.
Generating RTLIL representation for module `\SB_GB_IO'.
Generating RTLIL representation for module `\SB_GB'.
Generating RTLIL representation for module `\SB_LUT4'.
Generating RTLIL representation for module `\SB_CARRY'.
Generating RTLIL representation for module `\SB_DFF'.
Generating RTLIL representation for module `\SB_DFFE'.
Generating RTLIL representation for module `\SB_DFFSR'.
Generating RTLIL representation for module `\SB_DFFR'.
Generating RTLIL representation for module `\SB_DFFSS'.
Generating RTLIL representation for module `\SB_DFFS'.
Generating RTLIL representation for module `\SB_DFFESR'.
Generating RTLIL representation for module `\SB_DFFER'.
Generating RTLIL representation for module `\SB_DFFESS'.
Generating RTLIL representation for module `\SB_DFFES'.
Generating RTLIL representation for module `\SB_DFFN'.
Generating RTLIL representation for module `\SB_DFFNE'.
Generating RTLIL representation for module `\SB_DFFNSR'.
Generating RTLIL representation for module `\SB_DFFNR'.
Generating RTLIL representation for module `\SB_DFFNSS'.
Generating RTLIL representation for module `\SB_DFFNS'.
Generating RTLIL representation for module `\SB_DFFNESR'.
Generating RTLIL representation for module `\SB_DFFNER'.
Generating RTLIL representation for module `\SB_DFFNESS'.
Generating RTLIL representation for module `\SB_DFFNES'.
Generating RTLIL representation for module `\SB_RAM40_4K'.
Generating RTLIL representation for module `\SB_RAM40_4KNR'.
Generating RTLIL representation for module `\SB_RAM40_4KNW'.
Generating RTLIL representation for module `\SB_RAM40_4KNRNW'.
Generating RTLIL representation for module `\ICESTORM_LC'.
Generating RTLIL representation for module `\SB_PLL40_CORE'.
Generating RTLIL representation for module `\SB_PLL40_PAD'.
Generating RTLIL representation for module `\SB_PLL40_2_PAD'.
Generating RTLIL representation for module `\SB_PLL40_2F_CORE'.
Generating RTLIL representation for module `\SB_PLL40_2F_PAD'.
Generating RTLIL representation for module `\SB_WARMBOOT'.
Generating RTLIL representation for module `\SB_SPRAM256KA'.
Generating RTLIL representation for module `\SB_HFOSC'.
Generating RTLIL representation for module `\SB_LFOSC'.
Generating RTLIL representation for module `\SB_RGBA_DRV'.
Generating RTLIL representation for module `\SB_LED_DRV_CUR'.
Generating RTLIL representation for module `\SB_RGB_DRV'.
Generating RTLIL representation for module `\SB_I2C'.
Generating RTLIL representation for module `\SB_SPI'.
Generating RTLIL representation for module `\SB_LEDDA_IP'.
Generating RTLIL representation for module `\SB_FILTER_50NS'.
Generating RTLIL representation for module `\SB_IO_I3C'.
Generating RTLIL representation for module `\SB_IO_OD'.
Generating RTLIL representation for module `\SB_MAC16'.
Successfully finished Verilog frontend.

2.2. Executing HIERARCHY pass (managing design hierarchy).

2.2.1. Finding top of design hierarchy..
root of   0 design levels: rainbow             
Automatically selected rainbow as design top module.

2.2.2. Analyzing design hierarchy..
Top module:  \rainbow

2.2.3. Analyzing design hierarchy..
Top module:  \rainbow
Removed 0 unused modules.

2.3. Executing PROC pass (convert processes to netlists).

2.3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

2.3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 36 switch rules as full_case in process $proc$rainbow.v:205$93 in module rainbow.
Removed a total of 0 dead cases.

2.3.3. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\rainbow.$proc$rainbow.v:88$285'.
  Set init value: \scl = 1'1
  Set init value: \rainbow = 16'1111111111111111
  Set init value: \state = 6'000000
  Set init value: \data = 8'00000000
  Set init value: \bit_counter = 3'111
  Set init value: \pixel_data = 16'0000000000000000
  Set init value: \pixel_bit_counter = 4'1111
  Set init value: \cmd_counter = 5'00000
  Set init value: \param_counter = 7'0000000
  Set init value: \params_left = 14'00000000000000

2.3.4. Executing PROC_ARST pass (detect async resets in processes).

2.3.5. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\rainbow.$proc$rainbow.v:88$285'.
     1/190: $1\pixel_bit_counter[3:0]
     2/190: $1\pixel_data[15:0]
     3/190: $1\bit_counter[2:0]
     4/190: $1\data[7:0]
     5/190: $1\params_left[13:0]
     6/190: $1\param_counter[6:0]
     7/190: $0$memwr$\params$rainbow.v:186$90_DATA[7:0]$465
     8/190: $0$memwr$\params$rainbow.v:186$90_ADDR[31:0]$464
     9/190: $0$memwr$\params$rainbow.v:185$89_DATA[7:0]$463
    10/190: $0$memwr$\params$rainbow.v:185$89_ADDR[31:0]$462
    11/190: $0$memwr$\params$rainbow.v:184$88_DATA[7:0]$461
    12/190: $0$memwr$\params$rainbow.v:184$88_ADDR[31:0]$460
    13/190: $0$memwr$\params$rainbow.v:183$87_DATA[7:0]$459
    14/190: $0$memwr$\params$rainbow.v:183$87_ADDR[31:0]$458
    15/190: $0$memwr$\params$rainbow.v:182$86_DATA[7:0]$457
    16/190: $0$memwr$\params$rainbow.v:182$86_ADDR[31:0]$456
    17/190: $0$memwr$\params$rainbow.v:181$85_DATA[7:0]$455
    18/190: $0$memwr$\params$rainbow.v:181$85_ADDR[31:0]$454
    19/190: $0$memwr$\params$rainbow.v:180$84_DATA[7:0]$453
    20/190: $0$memwr$\params$rainbow.v:180$84_ADDR[31:0]$452
    21/190: $0$memwr$\params$rainbow.v:179$83_DATA[7:0]$451
    22/190: $0$memwr$\params$rainbow.v:179$83_ADDR[31:0]$450
    23/190: $0$memwr$\params$rainbow.v:178$82_DATA[7:0]$449
    24/190: $0$memwr$\params$rainbow.v:178$82_ADDR[31:0]$448
    25/190: $0$memwr$\params$rainbow.v:177$81_DATA[7:0]$447
    26/190: $0$memwr$\params$rainbow.v:177$81_ADDR[31:0]$446
    27/190: $0$memwr$\params$rainbow.v:176$80_DATA[7:0]$445
    28/190: $0$memwr$\params$rainbow.v:176$80_ADDR[31:0]$444
    29/190: $0$memwr$\params$rainbow.v:175$79_DATA[7:0]$443
    30/190: $0$memwr$\params$rainbow.v:175$79_ADDR[31:0]$442
    31/190: $0$memwr$\params$rainbow.v:174$78_DATA[7:0]$441
    32/190: $0$memwr$\params$rainbow.v:174$78_ADDR[31:0]$440
    33/190: $0$memwr$\params$rainbow.v:173$77_DATA[7:0]$439
    34/190: $0$memwr$\params$rainbow.v:173$77_ADDR[31:0]$438
    35/190: $0$memwr$\params$rainbow.v:172$76_DATA[7:0]$437
    36/190: $0$memwr$\params$rainbow.v:172$76_ADDR[31:0]$436
    37/190: $0$memwr$\params$rainbow.v:171$75_DATA[7:0]$435
    38/190: $0$memwr$\params$rainbow.v:171$75_ADDR[31:0]$434
    39/190: $0$memwr$\params$rainbow.v:170$74_DATA[7:0]$433
    40/190: $0$memwr$\params$rainbow.v:170$74_ADDR[31:0]$432
    41/190: $0$memwr$\params$rainbow.v:169$73_DATA[7:0]$431
    42/190: $0$memwr$\params$rainbow.v:169$73_ADDR[31:0]$430
    43/190: $0$memwr$\params$rainbow.v:168$72_DATA[7:0]$429
    44/190: $0$memwr$\params$rainbow.v:168$72_ADDR[31:0]$428
    45/190: $0$memwr$\params$rainbow.v:167$71_DATA[7:0]$427
    46/190: $0$memwr$\params$rainbow.v:167$71_ADDR[31:0]$426
    47/190: $0$memwr$\params$rainbow.v:166$70_DATA[7:0]$425
    48/190: $0$memwr$\params$rainbow.v:166$70_ADDR[31:0]$424
    49/190: $0$memwr$\params$rainbow.v:165$69_DATA[7:0]$423
    50/190: $0$memwr$\params$rainbow.v:165$69_ADDR[31:0]$422
    51/190: $0$memwr$\params$rainbow.v:164$68_DATA[7:0]$421
    52/190: $0$memwr$\params$rainbow.v:164$68_ADDR[31:0]$420
    53/190: $0$memwr$\params$rainbow.v:163$67_DATA[7:0]$419
    54/190: $0$memwr$\params$rainbow.v:163$67_ADDR[31:0]$418
    55/190: $0$memwr$\params$rainbow.v:162$66_DATA[7:0]$417
    56/190: $0$memwr$\params$rainbow.v:162$66_ADDR[31:0]$416
    57/190: $0$memwr$\params$rainbow.v:161$65_DATA[7:0]$415
    58/190: $0$memwr$\params$rainbow.v:161$65_ADDR[31:0]$414
    59/190: $0$memwr$\params$rainbow.v:160$64_DATA[7:0]$413
    60/190: $0$memwr$\params$rainbow.v:160$64_ADDR[31:0]$412
    61/190: $0$memwr$\params$rainbow.v:159$63_DATA[7:0]$411
    62/190: $0$memwr$\params$rainbow.v:159$63_ADDR[31:0]$410
    63/190: $0$memwr$\params$rainbow.v:158$62_DATA[7:0]$409
    64/190: $0$memwr$\params$rainbow.v:158$62_ADDR[31:0]$408
    65/190: $0$memwr$\params$rainbow.v:157$61_DATA[7:0]$407
    66/190: $0$memwr$\params$rainbow.v:157$61_ADDR[31:0]$406
    67/190: $0$memwr$\params$rainbow.v:156$60_DATA[7:0]$405
    68/190: $0$memwr$\params$rainbow.v:156$60_ADDR[31:0]$404
    69/190: $0$memwr$\params$rainbow.v:155$59_DATA[7:0]$403
    70/190: $0$memwr$\params$rainbow.v:155$59_ADDR[31:0]$402
    71/190: $0$memwr$\params$rainbow.v:154$58_DATA[7:0]$401
    72/190: $0$memwr$\params$rainbow.v:154$58_ADDR[31:0]$400
    73/190: $0$memwr$\params$rainbow.v:153$57_DATA[7:0]$399
    74/190: $0$memwr$\params$rainbow.v:153$57_ADDR[31:0]$398
    75/190: $0$memwr$\params$rainbow.v:152$56_DATA[7:0]$397
    76/190: $0$memwr$\params$rainbow.v:152$56_ADDR[31:0]$396
    77/190: $0$memwr$\params$rainbow.v:151$55_DATA[7:0]$395
    78/190: $0$memwr$\params$rainbow.v:151$55_ADDR[31:0]$394
    79/190: $0$memwr$\params$rainbow.v:150$54_DATA[7:0]$393
    80/190: $0$memwr$\params$rainbow.v:150$54_ADDR[31:0]$392
    81/190: $0$memwr$\params$rainbow.v:149$53_DATA[7:0]$391
    82/190: $0$memwr$\params$rainbow.v:149$53_ADDR[31:0]$390
    83/190: $0$memwr$\params$rainbow.v:148$52_DATA[7:0]$389
    84/190: $0$memwr$\params$rainbow.v:148$52_ADDR[31:0]$388
    85/190: $0$memwr$\params$rainbow.v:147$51_DATA[7:0]$387
    86/190: $0$memwr$\params$rainbow.v:147$51_ADDR[31:0]$386
    87/190: $0$memwr$\params$rainbow.v:146$50_DATA[7:0]$385
    88/190: $0$memwr$\params$rainbow.v:146$50_ADDR[31:0]$384
    89/190: $0$memwr$\params$rainbow.v:145$49_DATA[7:0]$383
    90/190: $0$memwr$\params$rainbow.v:145$49_ADDR[31:0]$382
    91/190: $0$memwr$\params$rainbow.v:144$48_DATA[7:0]$381
    92/190: $0$memwr$\params$rainbow.v:144$48_ADDR[31:0]$380
    93/190: $0$memwr$\params$rainbow.v:143$47_DATA[7:0]$379
    94/190: $0$memwr$\params$rainbow.v:143$47_ADDR[31:0]$378
    95/190: $0$memwr$\params$rainbow.v:142$46_DATA[7:0]$377
    96/190: $0$memwr$\params$rainbow.v:142$46_ADDR[31:0]$376
    97/190: $0$memwr$\params$rainbow.v:141$45_DATA[7:0]$375
    98/190: $0$memwr$\params$rainbow.v:141$45_ADDR[31:0]$374
    99/190: $0$memwr$\params$rainbow.v:140$44_DATA[7:0]$373
   100/190: $0$memwr$\params$rainbow.v:140$44_ADDR[31:0]$372
   101/190: $0$memwr$\params$rainbow.v:139$43_DATA[7:0]$371
   102/190: $0$memwr$\params$rainbow.v:139$43_ADDR[31:0]$370
   103/190: $0$memwr$\params$rainbow.v:138$42_DATA[7:0]$369
   104/190: $0$memwr$\params$rainbow.v:138$42_ADDR[31:0]$368
   105/190: $0$memwr$\params$rainbow.v:137$41_DATA[7:0]$367
   106/190: $0$memwr$\params$rainbow.v:137$41_ADDR[31:0]$366
   107/190: $0$memwr$\params$rainbow.v:136$40_DATA[7:0]$365
   108/190: $0$memwr$\params$rainbow.v:136$40_ADDR[31:0]$364
   109/190: $0$memwr$\params$rainbow.v:135$39_DATA[7:0]$363
   110/190: $0$memwr$\params$rainbow.v:135$39_ADDR[31:0]$362
   111/190: $0$memwr$\params$rainbow.v:134$38_DATA[7:0]$361
   112/190: $0$memwr$\params$rainbow.v:134$38_ADDR[31:0]$360
   113/190: $0$memwr$\params$rainbow.v:133$37_DATA[7:0]$359
   114/190: $0$memwr$\params$rainbow.v:133$37_ADDR[31:0]$358
   115/190: $0$memwr$\params$rainbow.v:132$36_DATA[7:0]$357
   116/190: $0$memwr$\params$rainbow.v:132$36_ADDR[31:0]$356
   117/190: $0$memwr$\params$rainbow.v:131$35_DATA[7:0]$355
   118/190: $0$memwr$\params$rainbow.v:131$35_ADDR[31:0]$354
   119/190: $0$memwr$\params$rainbow.v:130$34_DATA[7:0]$353
   120/190: $0$memwr$\params$rainbow.v:130$34_ADDR[31:0]$352
   121/190: $0$memwr$\params$rainbow.v:129$33_DATA[7:0]$351
   122/190: $0$memwr$\params$rainbow.v:129$33_ADDR[31:0]$350
   123/190: $0$memwr$\params$rainbow.v:128$32_DATA[7:0]$349
   124/190: $0$memwr$\params$rainbow.v:128$32_ADDR[31:0]$348
   125/190: $0$memwr$\params$rainbow.v:127$31_DATA[7:0]$347
   126/190: $0$memwr$\params$rainbow.v:127$31_ADDR[31:0]$346
   127/190: $0$memwr$\params$rainbow.v:126$30_DATA[7:0]$345
   128/190: $0$memwr$\params$rainbow.v:126$30_ADDR[31:0]$344
   129/190: $0$memwr$\params$rainbow.v:125$29_DATA[7:0]$343
   130/190: $0$memwr$\params$rainbow.v:125$29_ADDR[31:0]$342
   131/190: $0$memwr$\params$rainbow.v:124$28_DATA[7:0]$341
   132/190: $0$memwr$\params$rainbow.v:124$28_ADDR[31:0]$340
   133/190: $0$memwr$\params$rainbow.v:123$27_DATA[7:0]$339
   134/190: $0$memwr$\params$rainbow.v:123$27_ADDR[31:0]$338
   135/190: $0$memwr$\params$rainbow.v:122$26_DATA[7:0]$337
   136/190: $0$memwr$\params$rainbow.v:122$26_ADDR[31:0]$336
   137/190: $0$memwr$\params$rainbow.v:121$25_DATA[7:0]$335
   138/190: $0$memwr$\params$rainbow.v:121$25_ADDR[31:0]$334
   139/190: $0$memwr$\params$rainbow.v:120$24_DATA[7:0]$333
   140/190: $0$memwr$\params$rainbow.v:120$24_ADDR[31:0]$332
   141/190: $0$memwr$\params$rainbow.v:119$23_DATA[7:0]$331
   142/190: $0$memwr$\params$rainbow.v:119$23_ADDR[31:0]$330
   143/190: $1\cmd_counter[4:0]
   144/190: $0$memwr$\cmd$rainbow.v:116$22_DATA[7:0]$329
   145/190: $0$memwr$\cmd$rainbow.v:116$22_ADDR[31:0]$328
   146/190: $0$memwr$\cmd$rainbow.v:115$21_DATA[7:0]$327
   147/190: $0$memwr$\cmd$rainbow.v:115$21_ADDR[31:0]$326
   148/190: $0$memwr$\cmd$rainbow.v:114$20_DATA[7:0]$325
   149/190: $0$memwr$\cmd$rainbow.v:114$20_ADDR[31:0]$324
   150/190: $0$memwr$\cmd$rainbow.v:113$19_DATA[7:0]$323
   151/190: $0$memwr$\cmd$rainbow.v:113$19_ADDR[31:0]$322
   152/190: $0$memwr$\cmd$rainbow.v:112$18_DATA[7:0]$321
   153/190: $0$memwr$\cmd$rainbow.v:112$18_ADDR[31:0]$320
   154/190: $0$memwr$\cmd$rainbow.v:111$17_DATA[7:0]$319
   155/190: $0$memwr$\cmd$rainbow.v:111$17_ADDR[31:0]$318
   156/190: $0$memwr$\cmd$rainbow.v:110$16_DATA[7:0]$317
   157/190: $0$memwr$\cmd$rainbow.v:110$16_ADDR[31:0]$316
   158/190: $0$memwr$\cmd$rainbow.v:109$15_DATA[7:0]$315
   159/190: $0$memwr$\cmd$rainbow.v:109$15_ADDR[31:0]$314
   160/190: $0$memwr$\cmd$rainbow.v:108$14_DATA[7:0]$313
   161/190: $0$memwr$\cmd$rainbow.v:108$14_ADDR[31:0]$312
   162/190: $0$memwr$\cmd$rainbow.v:107$13_DATA[7:0]$311
   163/190: $0$memwr$\cmd$rainbow.v:107$13_ADDR[31:0]$310
   164/190: $0$memwr$\cmd$rainbow.v:106$12_DATA[7:0]$309
   165/190: $0$memwr$\cmd$rainbow.v:106$12_ADDR[31:0]$308
   166/190: $0$memwr$\cmd$rainbow.v:105$11_DATA[7:0]$307
   167/190: $0$memwr$\cmd$rainbow.v:105$11_ADDR[31:0]$306
   168/190: $0$memwr$\cmd$rainbow.v:104$10_DATA[7:0]$305
   169/190: $0$memwr$\cmd$rainbow.v:104$10_ADDR[31:0]$304
   170/190: $0$memwr$\cmd$rainbow.v:103$9_DATA[7:0]$303
   171/190: $0$memwr$\cmd$rainbow.v:103$9_ADDR[31:0]$302
   172/190: $0$memwr$\cmd$rainbow.v:102$8_DATA[7:0]$301
   173/190: $0$memwr$\cmd$rainbow.v:102$8_ADDR[31:0]$300
   174/190: $0$memwr$\cmd$rainbow.v:101$7_DATA[7:0]$299
   175/190: $0$memwr$\cmd$rainbow.v:101$7_ADDR[31:0]$298
   176/190: $0$memwr$\cmd$rainbow.v:100$6_DATA[7:0]$297
   177/190: $0$memwr$\cmd$rainbow.v:100$6_ADDR[31:0]$296
   178/190: $0$memwr$\cmd$rainbow.v:99$5_DATA[7:0]$295
   179/190: $0$memwr$\cmd$rainbow.v:99$5_ADDR[31:0]$294
   180/190: $0$memwr$\cmd$rainbow.v:98$4_DATA[7:0]$293
   181/190: $0$memwr$\cmd$rainbow.v:98$4_ADDR[31:0]$292
   182/190: $0$memwr$\cmd$rainbow.v:97$3_DATA[7:0]$291
   183/190: $0$memwr$\cmd$rainbow.v:97$3_ADDR[31:0]$290
   184/190: $0$memwr$\cmd$rainbow.v:96$2_DATA[7:0]$289
   185/190: $0$memwr$\cmd$rainbow.v:96$2_ADDR[31:0]$288
   186/190: $0$memwr$\cmd$rainbow.v:95$1_DATA[7:0]$287
   187/190: $0$memwr$\cmd$rainbow.v:95$1_ADDR[31:0]$286
   188/190: $1\rainbow[15:0]
   189/190: $1\scl[0:0]
   190/190: $1\state[5:0]
Creating decoders for process `\rainbow.$proc$rainbow.v:205$93'.
     1/15: $0\pixel_data[15:0] [15:8]
     2/15: $0\pixel_data[15:0] [7:0]
     3/15: $0\param_counter[6:0]
     4/15: $0\cmd_counter[4:0]
     5/15: $0\pixel_bit_counter[3:0]
     6/15: $0\params_left[13:0]
     7/15: $0\bit_counter[2:0]
     8/15: $0\data[7:0]
     9/15: $0\delay[15:0]
    10/15: $0\state[5:0]
    11/15: $0\cs[0:0]
    12/15: $0\rainbow[15:0]
    13/15: $0\mosi[0:0]
    14/15: $0\dc[0:0]
    15/15: $0\rst[0:0]
Creating decoders for process `\rainbow.$proc$rainbow.v:198$91'.
     1/1: $0\scl[0:0]

2.3.6. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\rainbow.$memwr$\cmd$rainbow.v:95$1_ADDR' from process `\rainbow.$proc$rainbow.v:88$285'.
No latch inferred for signal `\rainbow.$memwr$\cmd$rainbow.v:95$1_DATA' from process `\rainbow.$proc$rainbow.v:88$285'.
No latch inferred for signal `\rainbow.$memwr$\cmd$rainbow.v:96$2_ADDR' from process `\rainbow.$proc$rainbow.v:88$285'.
No latch inferred for signal `\rainbow.$memwr$\cmd$rainbow.v:96$2_DATA' from process `\rainbow.$proc$rainbow.v:88$285'.
No latch inferred for signal `\rainbow.$memwr$\cmd$rainbow.v:97$3_ADDR' from process `\rainbow.$proc$rainbow.v:88$285'.
No latch inferred for signal `\rainbow.$memwr$\cmd$rainbow.v:97$3_DATA' from process `\rainbow.$proc$rainbow.v:88$285'.
No latch inferred for signal `\rainbow.$memwr$\cmd$rainbow.v:98$4_ADDR' from process `\rainbow.$proc$rainbow.v:88$285'.
No latch inferred for signal `\rainbow.$memwr$\cmd$rainbow.v:98$4_DATA' from process `\rainbow.$proc$rainbow.v:88$285'.
No latch inferred for signal `\rainbow.$memwr$\cmd$rainbow.v:99$5_ADDR' from process `\rainbow.$proc$rainbow.v:88$285'.
No latch inferred for signal `\rainbow.$memwr$\cmd$rainbow.v:99$5_DATA' from process `\rainbow.$proc$rainbow.v:88$285'.
No latch inferred for signal `\rainbow.$memwr$\cmd$rainbow.v:100$6_ADDR' from process `\rainbow.$proc$rainbow.v:88$285'.
No latch inferred for signal `\rainbow.$memwr$\cmd$rainbow.v:100$6_DATA' from process `\rainbow.$proc$rainbow.v:88$285'.
No latch inferred for signal `\rainbow.$memwr$\cmd$rainbow.v:101$7_ADDR' from process `\rainbow.$proc$rainbow.v:88$285'.
No latch inferred for signal `\rainbow.$memwr$\cmd$rainbow.v:101$7_DATA' from process `\rainbow.$proc$rainbow.v:88$285'.
No latch inferred for signal `\rainbow.$memwr$\cmd$rainbow.v:102$8_ADDR' from process `\rainbow.$proc$rainbow.v:88$285'.
No latch inferred for signal `\rainbow.$memwr$\cmd$rainbow.v:102$8_DATA' from process `\rainbow.$proc$rainbow.v:88$285'.
No latch inferred for signal `\rainbow.$memwr$\cmd$rainbow.v:103$9_ADDR' from process `\rainbow.$proc$rainbow.v:88$285'.
No latch inferred for signal `\rainbow.$memwr$\cmd$rainbow.v:103$9_DATA' from process `\rainbow.$proc$rainbow.v:88$285'.
No latch inferred for signal `\rainbow.$memwr$\cmd$rainbow.v:104$10_ADDR' from process `\rainbow.$proc$rainbow.v:88$285'.
No latch inferred for signal `\rainbow.$memwr$\cmd$rainbow.v:104$10_DATA' from process `\rainbow.$proc$rainbow.v:88$285'.
No latch inferred for signal `\rainbow.$memwr$\cmd$rainbow.v:105$11_ADDR' from process `\rainbow.$proc$rainbow.v:88$285'.
No latch inferred for signal `\rainbow.$memwr$\cmd$rainbow.v:105$11_DATA' from process `\rainbow.$proc$rainbow.v:88$285'.
No latch inferred for signal `\rainbow.$memwr$\cmd$rainbow.v:106$12_ADDR' from process `\rainbow.$proc$rainbow.v:88$285'.
No latch inferred for signal `\rainbow.$memwr$\cmd$rainbow.v:106$12_DATA' from process `\rainbow.$proc$rainbow.v:88$285'.
No latch inferred for signal `\rainbow.$memwr$\cmd$rainbow.v:107$13_ADDR' from process `\rainbow.$proc$rainbow.v:88$285'.
No latch inferred for signal `\rainbow.$memwr$\cmd$rainbow.v:107$13_DATA' from process `\rainbow.$proc$rainbow.v:88$285'.
No latch inferred for signal `\rainbow.$memwr$\cmd$rainbow.v:108$14_ADDR' from process `\rainbow.$proc$rainbow.v:88$285'.
No latch inferred for signal `\rainbow.$memwr$\cmd$rainbow.v:108$14_DATA' from process `\rainbow.$proc$rainbow.v:88$285'.
No latch inferred for signal `\rainbow.$memwr$\cmd$rainbow.v:109$15_ADDR' from process `\rainbow.$proc$rainbow.v:88$285'.
No latch inferred for signal `\rainbow.$memwr$\cmd$rainbow.v:109$15_DATA' from process `\rainbow.$proc$rainbow.v:88$285'.
No latch inferred for signal `\rainbow.$memwr$\cmd$rainbow.v:110$16_ADDR' from process `\rainbow.$proc$rainbow.v:88$285'.
No latch inferred for signal `\rainbow.$memwr$\cmd$rainbow.v:110$16_DATA' from process `\rainbow.$proc$rainbow.v:88$285'.
No latch inferred for signal `\rainbow.$memwr$\cmd$rainbow.v:111$17_ADDR' from process `\rainbow.$proc$rainbow.v:88$285'.
No latch inferred for signal `\rainbow.$memwr$\cmd$rainbow.v:111$17_DATA' from process `\rainbow.$proc$rainbow.v:88$285'.
No latch inferred for signal `\rainbow.$memwr$\cmd$rainbow.v:112$18_ADDR' from process `\rainbow.$proc$rainbow.v:88$285'.
No latch inferred for signal `\rainbow.$memwr$\cmd$rainbow.v:112$18_DATA' from process `\rainbow.$proc$rainbow.v:88$285'.
No latch inferred for signal `\rainbow.$memwr$\cmd$rainbow.v:113$19_ADDR' from process `\rainbow.$proc$rainbow.v:88$285'.
No latch inferred for signal `\rainbow.$memwr$\cmd$rainbow.v:113$19_DATA' from process `\rainbow.$proc$rainbow.v:88$285'.
No latch inferred for signal `\rainbow.$memwr$\cmd$rainbow.v:114$20_ADDR' from process `\rainbow.$proc$rainbow.v:88$285'.
No latch inferred for signal `\rainbow.$memwr$\cmd$rainbow.v:114$20_DATA' from process `\rainbow.$proc$rainbow.v:88$285'.
No latch inferred for signal `\rainbow.$memwr$\cmd$rainbow.v:115$21_ADDR' from process `\rainbow.$proc$rainbow.v:88$285'.
No latch inferred for signal `\rainbow.$memwr$\cmd$rainbow.v:115$21_DATA' from process `\rainbow.$proc$rainbow.v:88$285'.
No latch inferred for signal `\rainbow.$memwr$\cmd$rainbow.v:116$22_ADDR' from process `\rainbow.$proc$rainbow.v:88$285'.
No latch inferred for signal `\rainbow.$memwr$\cmd$rainbow.v:116$22_DATA' from process `\rainbow.$proc$rainbow.v:88$285'.
No latch inferred for signal `\rainbow.$memwr$\params$rainbow.v:119$23_ADDR' from process `\rainbow.$proc$rainbow.v:88$285'.
No latch inferred for signal `\rainbow.$memwr$\params$rainbow.v:119$23_DATA' from process `\rainbow.$proc$rainbow.v:88$285'.
No latch inferred for signal `\rainbow.$memwr$\params$rainbow.v:120$24_ADDR' from process `\rainbow.$proc$rainbow.v:88$285'.
No latch inferred for signal `\rainbow.$memwr$\params$rainbow.v:120$24_DATA' from process `\rainbow.$proc$rainbow.v:88$285'.
No latch inferred for signal `\rainbow.$memwr$\params$rainbow.v:121$25_ADDR' from process `\rainbow.$proc$rainbow.v:88$285'.
No latch inferred for signal `\rainbow.$memwr$\params$rainbow.v:121$25_DATA' from process `\rainbow.$proc$rainbow.v:88$285'.
No latch inferred for signal `\rainbow.$memwr$\params$rainbow.v:122$26_ADDR' from process `\rainbow.$proc$rainbow.v:88$285'.
No latch inferred for signal `\rainbow.$memwr$\params$rainbow.v:122$26_DATA' from process `\rainbow.$proc$rainbow.v:88$285'.
No latch inferred for signal `\rainbow.$memwr$\params$rainbow.v:123$27_ADDR' from process `\rainbow.$proc$rainbow.v:88$285'.
No latch inferred for signal `\rainbow.$memwr$\params$rainbow.v:123$27_DATA' from process `\rainbow.$proc$rainbow.v:88$285'.
No latch inferred for signal `\rainbow.$memwr$\params$rainbow.v:124$28_ADDR' from process `\rainbow.$proc$rainbow.v:88$285'.
No latch inferred for signal `\rainbow.$memwr$\params$rainbow.v:124$28_DATA' from process `\rainbow.$proc$rainbow.v:88$285'.
No latch inferred for signal `\rainbow.$memwr$\params$rainbow.v:125$29_ADDR' from process `\rainbow.$proc$rainbow.v:88$285'.
No latch inferred for signal `\rainbow.$memwr$\params$rainbow.v:125$29_DATA' from process `\rainbow.$proc$rainbow.v:88$285'.
No latch inferred for signal `\rainbow.$memwr$\params$rainbow.v:126$30_ADDR' from process `\rainbow.$proc$rainbow.v:88$285'.
No latch inferred for signal `\rainbow.$memwr$\params$rainbow.v:126$30_DATA' from process `\rainbow.$proc$rainbow.v:88$285'.
No latch inferred for signal `\rainbow.$memwr$\params$rainbow.v:127$31_ADDR' from process `\rainbow.$proc$rainbow.v:88$285'.
No latch inferred for signal `\rainbow.$memwr$\params$rainbow.v:127$31_DATA' from process `\rainbow.$proc$rainbow.v:88$285'.
No latch inferred for signal `\rainbow.$memwr$\params$rainbow.v:128$32_ADDR' from process `\rainbow.$proc$rainbow.v:88$285'.
No latch inferred for signal `\rainbow.$memwr$\params$rainbow.v:128$32_DATA' from process `\rainbow.$proc$rainbow.v:88$285'.
No latch inferred for signal `\rainbow.$memwr$\params$rainbow.v:129$33_ADDR' from process `\rainbow.$proc$rainbow.v:88$285'.
No latch inferred for signal `\rainbow.$memwr$\params$rainbow.v:129$33_DATA' from process `\rainbow.$proc$rainbow.v:88$285'.
No latch inferred for signal `\rainbow.$memwr$\params$rainbow.v:130$34_ADDR' from process `\rainbow.$proc$rainbow.v:88$285'.
No latch inferred for signal `\rainbow.$memwr$\params$rainbow.v:130$34_DATA' from process `\rainbow.$proc$rainbow.v:88$285'.
No latch inferred for signal `\rainbow.$memwr$\params$rainbow.v:131$35_ADDR' from process `\rainbow.$proc$rainbow.v:88$285'.
No latch inferred for signal `\rainbow.$memwr$\params$rainbow.v:131$35_DATA' from process `\rainbow.$proc$rainbow.v:88$285'.
No latch inferred for signal `\rainbow.$memwr$\params$rainbow.v:132$36_ADDR' from process `\rainbow.$proc$rainbow.v:88$285'.
No latch inferred for signal `\rainbow.$memwr$\params$rainbow.v:132$36_DATA' from process `\rainbow.$proc$rainbow.v:88$285'.
No latch inferred for signal `\rainbow.$memwr$\params$rainbow.v:133$37_ADDR' from process `\rainbow.$proc$rainbow.v:88$285'.
No latch inferred for signal `\rainbow.$memwr$\params$rainbow.v:133$37_DATA' from process `\rainbow.$proc$rainbow.v:88$285'.
No latch inferred for signal `\rainbow.$memwr$\params$rainbow.v:134$38_ADDR' from process `\rainbow.$proc$rainbow.v:88$285'.
No latch inferred for signal `\rainbow.$memwr$\params$rainbow.v:134$38_DATA' from process `\rainbow.$proc$rainbow.v:88$285'.
No latch inferred for signal `\rainbow.$memwr$\params$rainbow.v:135$39_ADDR' from process `\rainbow.$proc$rainbow.v:88$285'.
No latch inferred for signal `\rainbow.$memwr$\params$rainbow.v:135$39_DATA' from process `\rainbow.$proc$rainbow.v:88$285'.
No latch inferred for signal `\rainbow.$memwr$\params$rainbow.v:136$40_ADDR' from process `\rainbow.$proc$rainbow.v:88$285'.
No latch inferred for signal `\rainbow.$memwr$\params$rainbow.v:136$40_DATA' from process `\rainbow.$proc$rainbow.v:88$285'.
No latch inferred for signal `\rainbow.$memwr$\params$rainbow.v:137$41_ADDR' from process `\rainbow.$proc$rainbow.v:88$285'.
No latch inferred for signal `\rainbow.$memwr$\params$rainbow.v:137$41_DATA' from process `\rainbow.$proc$rainbow.v:88$285'.
No latch inferred for signal `\rainbow.$memwr$\params$rainbow.v:138$42_ADDR' from process `\rainbow.$proc$rainbow.v:88$285'.
No latch inferred for signal `\rainbow.$memwr$\params$rainbow.v:138$42_DATA' from process `\rainbow.$proc$rainbow.v:88$285'.
No latch inferred for signal `\rainbow.$memwr$\params$rainbow.v:139$43_ADDR' from process `\rainbow.$proc$rainbow.v:88$285'.
No latch inferred for signal `\rainbow.$memwr$\params$rainbow.v:139$43_DATA' from process `\rainbow.$proc$rainbow.v:88$285'.
No latch inferred for signal `\rainbow.$memwr$\params$rainbow.v:140$44_ADDR' from process `\rainbow.$proc$rainbow.v:88$285'.
No latch inferred for signal `\rainbow.$memwr$\params$rainbow.v:140$44_DATA' from process `\rainbow.$proc$rainbow.v:88$285'.
No latch inferred for signal `\rainbow.$memwr$\params$rainbow.v:141$45_ADDR' from process `\rainbow.$proc$rainbow.v:88$285'.
No latch inferred for signal `\rainbow.$memwr$\params$rainbow.v:141$45_DATA' from process `\rainbow.$proc$rainbow.v:88$285'.
No latch inferred for signal `\rainbow.$memwr$\params$rainbow.v:142$46_ADDR' from process `\rainbow.$proc$rainbow.v:88$285'.
No latch inferred for signal `\rainbow.$memwr$\params$rainbow.v:142$46_DATA' from process `\rainbow.$proc$rainbow.v:88$285'.
No latch inferred for signal `\rainbow.$memwr$\params$rainbow.v:143$47_ADDR' from process `\rainbow.$proc$rainbow.v:88$285'.
No latch inferred for signal `\rainbow.$memwr$\params$rainbow.v:143$47_DATA' from process `\rainbow.$proc$rainbow.v:88$285'.
No latch inferred for signal `\rainbow.$memwr$\params$rainbow.v:144$48_ADDR' from process `\rainbow.$proc$rainbow.v:88$285'.
No latch inferred for signal `\rainbow.$memwr$\params$rainbow.v:144$48_DATA' from process `\rainbow.$proc$rainbow.v:88$285'.
No latch inferred for signal `\rainbow.$memwr$\params$rainbow.v:145$49_ADDR' from process `\rainbow.$proc$rainbow.v:88$285'.
No latch inferred for signal `\rainbow.$memwr$\params$rainbow.v:145$49_DATA' from process `\rainbow.$proc$rainbow.v:88$285'.
No latch inferred for signal `\rainbow.$memwr$\params$rainbow.v:146$50_ADDR' from process `\rainbow.$proc$rainbow.v:88$285'.
No latch inferred for signal `\rainbow.$memwr$\params$rainbow.v:146$50_DATA' from process `\rainbow.$proc$rainbow.v:88$285'.
No latch inferred for signal `\rainbow.$memwr$\params$rainbow.v:147$51_ADDR' from process `\rainbow.$proc$rainbow.v:88$285'.
No latch inferred for signal `\rainbow.$memwr$\params$rainbow.v:147$51_DATA' from process `\rainbow.$proc$rainbow.v:88$285'.
No latch inferred for signal `\rainbow.$memwr$\params$rainbow.v:148$52_ADDR' from process `\rainbow.$proc$rainbow.v:88$285'.
No latch inferred for signal `\rainbow.$memwr$\params$rainbow.v:148$52_DATA' from process `\rainbow.$proc$rainbow.v:88$285'.
No latch inferred for signal `\rainbow.$memwr$\params$rainbow.v:149$53_ADDR' from process `\rainbow.$proc$rainbow.v:88$285'.
No latch inferred for signal `\rainbow.$memwr$\params$rainbow.v:149$53_DATA' from process `\rainbow.$proc$rainbow.v:88$285'.
No latch inferred for signal `\rainbow.$memwr$\params$rainbow.v:150$54_ADDR' from process `\rainbow.$proc$rainbow.v:88$285'.
No latch inferred for signal `\rainbow.$memwr$\params$rainbow.v:150$54_DATA' from process `\rainbow.$proc$rainbow.v:88$285'.
No latch inferred for signal `\rainbow.$memwr$\params$rainbow.v:151$55_ADDR' from process `\rainbow.$proc$rainbow.v:88$285'.
No latch inferred for signal `\rainbow.$memwr$\params$rainbow.v:151$55_DATA' from process `\rainbow.$proc$rainbow.v:88$285'.
No latch inferred for signal `\rainbow.$memwr$\params$rainbow.v:152$56_ADDR' from process `\rainbow.$proc$rainbow.v:88$285'.
No latch inferred for signal `\rainbow.$memwr$\params$rainbow.v:152$56_DATA' from process `\rainbow.$proc$rainbow.v:88$285'.
No latch inferred for signal `\rainbow.$memwr$\params$rainbow.v:153$57_ADDR' from process `\rainbow.$proc$rainbow.v:88$285'.
No latch inferred for signal `\rainbow.$memwr$\params$rainbow.v:153$57_DATA' from process `\rainbow.$proc$rainbow.v:88$285'.
No latch inferred for signal `\rainbow.$memwr$\params$rainbow.v:154$58_ADDR' from process `\rainbow.$proc$rainbow.v:88$285'.
No latch inferred for signal `\rainbow.$memwr$\params$rainbow.v:154$58_DATA' from process `\rainbow.$proc$rainbow.v:88$285'.
No latch inferred for signal `\rainbow.$memwr$\params$rainbow.v:155$59_ADDR' from process `\rainbow.$proc$rainbow.v:88$285'.
No latch inferred for signal `\rainbow.$memwr$\params$rainbow.v:155$59_DATA' from process `\rainbow.$proc$rainbow.v:88$285'.
No latch inferred for signal `\rainbow.$memwr$\params$rainbow.v:156$60_ADDR' from process `\rainbow.$proc$rainbow.v:88$285'.
No latch inferred for signal `\rainbow.$memwr$\params$rainbow.v:156$60_DATA' from process `\rainbow.$proc$rainbow.v:88$285'.
No latch inferred for signal `\rainbow.$memwr$\params$rainbow.v:157$61_ADDR' from process `\rainbow.$proc$rainbow.v:88$285'.
No latch inferred for signal `\rainbow.$memwr$\params$rainbow.v:157$61_DATA' from process `\rainbow.$proc$rainbow.v:88$285'.
No latch inferred for signal `\rainbow.$memwr$\params$rainbow.v:158$62_ADDR' from process `\rainbow.$proc$rainbow.v:88$285'.
No latch inferred for signal `\rainbow.$memwr$\params$rainbow.v:158$62_DATA' from process `\rainbow.$proc$rainbow.v:88$285'.
No latch inferred for signal `\rainbow.$memwr$\params$rainbow.v:159$63_ADDR' from process `\rainbow.$proc$rainbow.v:88$285'.
No latch inferred for signal `\rainbow.$memwr$\params$rainbow.v:159$63_DATA' from process `\rainbow.$proc$rainbow.v:88$285'.
No latch inferred for signal `\rainbow.$memwr$\params$rainbow.v:160$64_ADDR' from process `\rainbow.$proc$rainbow.v:88$285'.
No latch inferred for signal `\rainbow.$memwr$\params$rainbow.v:160$64_DATA' from process `\rainbow.$proc$rainbow.v:88$285'.
No latch inferred for signal `\rainbow.$memwr$\params$rainbow.v:161$65_ADDR' from process `\rainbow.$proc$rainbow.v:88$285'.
No latch inferred for signal `\rainbow.$memwr$\params$rainbow.v:161$65_DATA' from process `\rainbow.$proc$rainbow.v:88$285'.
No latch inferred for signal `\rainbow.$memwr$\params$rainbow.v:162$66_ADDR' from process `\rainbow.$proc$rainbow.v:88$285'.
No latch inferred for signal `\rainbow.$memwr$\params$rainbow.v:162$66_DATA' from process `\rainbow.$proc$rainbow.v:88$285'.
No latch inferred for signal `\rainbow.$memwr$\params$rainbow.v:163$67_ADDR' from process `\rainbow.$proc$rainbow.v:88$285'.
No latch inferred for signal `\rainbow.$memwr$\params$rainbow.v:163$67_DATA' from process `\rainbow.$proc$rainbow.v:88$285'.
No latch inferred for signal `\rainbow.$memwr$\params$rainbow.v:164$68_ADDR' from process `\rainbow.$proc$rainbow.v:88$285'.
No latch inferred for signal `\rainbow.$memwr$\params$rainbow.v:164$68_DATA' from process `\rainbow.$proc$rainbow.v:88$285'.
No latch inferred for signal `\rainbow.$memwr$\params$rainbow.v:165$69_ADDR' from process `\rainbow.$proc$rainbow.v:88$285'.
No latch inferred for signal `\rainbow.$memwr$\params$rainbow.v:165$69_DATA' from process `\rainbow.$proc$rainbow.v:88$285'.
No latch inferred for signal `\rainbow.$memwr$\params$rainbow.v:166$70_ADDR' from process `\rainbow.$proc$rainbow.v:88$285'.
No latch inferred for signal `\rainbow.$memwr$\params$rainbow.v:166$70_DATA' from process `\rainbow.$proc$rainbow.v:88$285'.
No latch inferred for signal `\rainbow.$memwr$\params$rainbow.v:167$71_ADDR' from process `\rainbow.$proc$rainbow.v:88$285'.
No latch inferred for signal `\rainbow.$memwr$\params$rainbow.v:167$71_DATA' from process `\rainbow.$proc$rainbow.v:88$285'.
No latch inferred for signal `\rainbow.$memwr$\params$rainbow.v:168$72_ADDR' from process `\rainbow.$proc$rainbow.v:88$285'.
No latch inferred for signal `\rainbow.$memwr$\params$rainbow.v:168$72_DATA' from process `\rainbow.$proc$rainbow.v:88$285'.
No latch inferred for signal `\rainbow.$memwr$\params$rainbow.v:169$73_ADDR' from process `\rainbow.$proc$rainbow.v:88$285'.
No latch inferred for signal `\rainbow.$memwr$\params$rainbow.v:169$73_DATA' from process `\rainbow.$proc$rainbow.v:88$285'.
No latch inferred for signal `\rainbow.$memwr$\params$rainbow.v:170$74_ADDR' from process `\rainbow.$proc$rainbow.v:88$285'.
No latch inferred for signal `\rainbow.$memwr$\params$rainbow.v:170$74_DATA' from process `\rainbow.$proc$rainbow.v:88$285'.
No latch inferred for signal `\rainbow.$memwr$\params$rainbow.v:171$75_ADDR' from process `\rainbow.$proc$rainbow.v:88$285'.
No latch inferred for signal `\rainbow.$memwr$\params$rainbow.v:171$75_DATA' from process `\rainbow.$proc$rainbow.v:88$285'.
No latch inferred for signal `\rainbow.$memwr$\params$rainbow.v:172$76_ADDR' from process `\rainbow.$proc$rainbow.v:88$285'.
No latch inferred for signal `\rainbow.$memwr$\params$rainbow.v:172$76_DATA' from process `\rainbow.$proc$rainbow.v:88$285'.
No latch inferred for signal `\rainbow.$memwr$\params$rainbow.v:173$77_ADDR' from process `\rainbow.$proc$rainbow.v:88$285'.
No latch inferred for signal `\rainbow.$memwr$\params$rainbow.v:173$77_DATA' from process `\rainbow.$proc$rainbow.v:88$285'.
No latch inferred for signal `\rainbow.$memwr$\params$rainbow.v:174$78_ADDR' from process `\rainbow.$proc$rainbow.v:88$285'.
No latch inferred for signal `\rainbow.$memwr$\params$rainbow.v:174$78_DATA' from process `\rainbow.$proc$rainbow.v:88$285'.
No latch inferred for signal `\rainbow.$memwr$\params$rainbow.v:175$79_ADDR' from process `\rainbow.$proc$rainbow.v:88$285'.
No latch inferred for signal `\rainbow.$memwr$\params$rainbow.v:175$79_DATA' from process `\rainbow.$proc$rainbow.v:88$285'.
No latch inferred for signal `\rainbow.$memwr$\params$rainbow.v:176$80_ADDR' from process `\rainbow.$proc$rainbow.v:88$285'.
No latch inferred for signal `\rainbow.$memwr$\params$rainbow.v:176$80_DATA' from process `\rainbow.$proc$rainbow.v:88$285'.
No latch inferred for signal `\rainbow.$memwr$\params$rainbow.v:177$81_ADDR' from process `\rainbow.$proc$rainbow.v:88$285'.
No latch inferred for signal `\rainbow.$memwr$\params$rainbow.v:177$81_DATA' from process `\rainbow.$proc$rainbow.v:88$285'.
No latch inferred for signal `\rainbow.$memwr$\params$rainbow.v:178$82_ADDR' from process `\rainbow.$proc$rainbow.v:88$285'.
No latch inferred for signal `\rainbow.$memwr$\params$rainbow.v:178$82_DATA' from process `\rainbow.$proc$rainbow.v:88$285'.
No latch inferred for signal `\rainbow.$memwr$\params$rainbow.v:179$83_ADDR' from process `\rainbow.$proc$rainbow.v:88$285'.
No latch inferred for signal `\rainbow.$memwr$\params$rainbow.v:179$83_DATA' from process `\rainbow.$proc$rainbow.v:88$285'.
No latch inferred for signal `\rainbow.$memwr$\params$rainbow.v:180$84_ADDR' from process `\rainbow.$proc$rainbow.v:88$285'.
No latch inferred for signal `\rainbow.$memwr$\params$rainbow.v:180$84_DATA' from process `\rainbow.$proc$rainbow.v:88$285'.
No latch inferred for signal `\rainbow.$memwr$\params$rainbow.v:181$85_ADDR' from process `\rainbow.$proc$rainbow.v:88$285'.
No latch inferred for signal `\rainbow.$memwr$\params$rainbow.v:181$85_DATA' from process `\rainbow.$proc$rainbow.v:88$285'.
No latch inferred for signal `\rainbow.$memwr$\params$rainbow.v:182$86_ADDR' from process `\rainbow.$proc$rainbow.v:88$285'.
No latch inferred for signal `\rainbow.$memwr$\params$rainbow.v:182$86_DATA' from process `\rainbow.$proc$rainbow.v:88$285'.
No latch inferred for signal `\rainbow.$memwr$\params$rainbow.v:183$87_ADDR' from process `\rainbow.$proc$rainbow.v:88$285'.
No latch inferred for signal `\rainbow.$memwr$\params$rainbow.v:183$87_DATA' from process `\rainbow.$proc$rainbow.v:88$285'.
No latch inferred for signal `\rainbow.$memwr$\params$rainbow.v:184$88_ADDR' from process `\rainbow.$proc$rainbow.v:88$285'.
No latch inferred for signal `\rainbow.$memwr$\params$rainbow.v:184$88_DATA' from process `\rainbow.$proc$rainbow.v:88$285'.
No latch inferred for signal `\rainbow.$memwr$\params$rainbow.v:185$89_ADDR' from process `\rainbow.$proc$rainbow.v:88$285'.
No latch inferred for signal `\rainbow.$memwr$\params$rainbow.v:185$89_DATA' from process `\rainbow.$proc$rainbow.v:88$285'.
No latch inferred for signal `\rainbow.$memwr$\params$rainbow.v:186$90_ADDR' from process `\rainbow.$proc$rainbow.v:88$285'.
No latch inferred for signal `\rainbow.$memwr$\params$rainbow.v:186$90_DATA' from process `\rainbow.$proc$rainbow.v:88$285'.

2.3.7. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\rainbow.\rst' using process `\rainbow.$proc$rainbow.v:205$93'.
  created $dff cell `$procdff$888' with positive edge clock.
Creating register for signal `\rainbow.\dc' using process `\rainbow.$proc$rainbow.v:205$93'.
  created $dff cell `$procdff$889' with positive edge clock.
Creating register for signal `\rainbow.\mosi' using process `\rainbow.$proc$rainbow.v:205$93'.
  created $dff cell `$procdff$890' with positive edge clock.
Creating register for signal `\rainbow.\rainbow' using process `\rainbow.$proc$rainbow.v:205$93'.
  created $dff cell `$procdff$891' with positive edge clock.
Creating register for signal `\rainbow.\cs' using process `\rainbow.$proc$rainbow.v:205$93'.
  created $dff cell `$procdff$892' with positive edge clock.
Creating register for signal `\rainbow.\state' using process `\rainbow.$proc$rainbow.v:205$93'.
  created $dff cell `$procdff$893' with positive edge clock.
Creating register for signal `\rainbow.\delay' using process `\rainbow.$proc$rainbow.v:205$93'.
  created $dff cell `$procdff$894' with positive edge clock.
Creating register for signal `\rainbow.\data' using process `\rainbow.$proc$rainbow.v:205$93'.
  created $dff cell `$procdff$895' with positive edge clock.
Creating register for signal `\rainbow.\bit_counter' using process `\rainbow.$proc$rainbow.v:205$93'.
  created $dff cell `$procdff$896' with positive edge clock.
Creating register for signal `\rainbow.\pixel_data' using process `\rainbow.$proc$rainbow.v:205$93'.
  created $dff cell `$procdff$897' with positive edge clock.
Creating register for signal `\rainbow.\pixel_bit_counter' using process `\rainbow.$proc$rainbow.v:205$93'.
  created $dff cell `$procdff$898' with positive edge clock.
Creating register for signal `\rainbow.\cmd_counter' using process `\rainbow.$proc$rainbow.v:205$93'.
  created $dff cell `$procdff$899' with positive edge clock.
Creating register for signal `\rainbow.\param_counter' using process `\rainbow.$proc$rainbow.v:205$93'.
  created $dff cell `$procdff$900' with positive edge clock.
Creating register for signal `\rainbow.\params_left' using process `\rainbow.$proc$rainbow.v:205$93'.
  created $dff cell `$procdff$901' with positive edge clock.
Creating register for signal `\rainbow.\scl' using process `\rainbow.$proc$rainbow.v:198$91'.
  created $dff cell `$procdff$902' with positive edge clock.

2.3.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `rainbow.$proc$rainbow.v:88$285'.
Found and cleaned up 39 empty switches in `\rainbow.$proc$rainbow.v:205$93'.
Removing empty process `rainbow.$proc$rainbow.v:205$93'.
Removing empty process `rainbow.$proc$rainbow.v:198$91'.
Cleaned up 39 empty switches.

2.4. Executing FLATTEN pass (flatten design).
No more expansions possible.

2.5. Executing TRIBUF pass.

2.6. Executing DEMINOUT pass (demote inout ports to input or output).

2.7. Executing OPT_EXPR pass (perform const folding).
Optimizing module rainbow.
<suppressed ~16 debug messages>

2.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \rainbow..
Removed 1 unused cells and 456 unused wires.
<suppressed ~2 debug messages>

2.9. Executing CHECK pass (checking for obvious problems).
checking module rainbow..
found and reported 0 problems.

2.10. Executing OPT pass (performing simple optimizations).

2.10.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module rainbow.

2.10.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\rainbow'.
<suppressed ~276 debug messages>
Removed a total of 92 cells.

2.10.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \rainbow..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~15 debug messages>

2.10.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \rainbow.
    New ctrl vector for $pmux cell $procmux$561: { $procmux$577_CMP $auto$opt_reduce.cc:132:opt_mux$912 $auto$opt_reduce.cc:132:opt_mux$910 $auto$opt_reduce.cc:132:opt_mux$908 $auto$opt_reduce.cc:132:opt_mux$906 $auto$opt_reduce.cc:132:opt_mux$904 $procmux$562_CMP }
    New ctrl vector for $pmux cell $procmux$806: { $procmux$756_CMP $auto$opt_reduce.cc:132:opt_mux$914 }
    New ctrl vector for $pmux cell $procmux$857: { $auto$opt_reduce.cc:132:opt_mux$916 $procmux$710_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$903: { $procmux$563_CMP $procmux$564_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$905: { $procmux$565_CMP $procmux$566_CMP $procmux$567_CMP $procmux$570_CMP $procmux$574_CMP $procmux$576_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$907: { $procmux$568_CMP $procmux$569_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$909: { $procmux$571_CMP $procmux$572_CMP $procmux$573_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$911: { $procmux$575_CMP $procmux$578_CMP $procmux$579_CMP }
  Optimizing cells in module \rainbow.
Performed a total of 8 changes.

2.10.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\rainbow'.
<suppressed ~30 debug messages>
Removed a total of 10 cells.

2.10.6. Executing OPT_RMDFF pass (remove dff with constant values).

2.10.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \rainbow..
Removed 0 unused cells and 102 unused wires.
<suppressed ~1 debug messages>

2.10.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module rainbow.

2.10.9. Rerunning OPT passes. (Maybe there is more to do..)

2.10.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \rainbow..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~15 debug messages>

2.10.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \rainbow.
    New ctrl vector for $pmux cell $procmux$623: { $procmux$669_CMP $procmux$668_CMP $procmux$664_CMP $procmux$656_CMP $procmux$652_CMP $auto$opt_reduce.cc:132:opt_mux$918 $procmux$624_CMP }
    New ctrl vector for $pmux cell $procmux$673: { $procmux$669_CMP $procmux$794_CMP $procmux$668_CMP $procmux$664_CMP $procmux$527_CMP $procmux$660_CMP $procmux$656_CMP $procmux$773_CMP $procmux$546_CMP $procmux$756_CMP $procmux$752_CMP $procmux$748_CMP $procmux$744_CMP $procmux$710_CMP $procmux$478_CMP $procmux$652_CMP $auto$opt_reduce.cc:132:opt_mux$922 $auto$opt_reduce.cc:132:opt_mux$920 $procmux$624_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$917: { $procmux$632_CMP $procmux$628_CMP $procmux$640_CMP $procmux$636_CMP $procmux$648_CMP $procmux$644_CMP $procmux$660_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$919: { $procmux$628_CMP $procmux$636_CMP $procmux$644_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$921: { $procmux$632_CMP $procmux$640_CMP $procmux$648_CMP }
  Optimizing cells in module \rainbow.
Performed a total of 5 changes.

2.10.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\rainbow'.
Removed a total of 0 cells.

2.10.13. Executing OPT_RMDFF pass (remove dff with constant values).

2.10.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \rainbow..

2.10.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module rainbow.

2.10.16. Rerunning OPT passes. (Maybe there is more to do..)

2.10.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \rainbow..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~15 debug messages>

2.10.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \rainbow.
Performed a total of 0 changes.

2.10.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\rainbow'.
Removed a total of 0 cells.

2.10.20. Executing OPT_RMDFF pass (remove dff with constant values).

2.10.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \rainbow..

2.10.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module rainbow.

2.10.23. Finished OPT passes. (There is nothing left to do.)

2.11. Executing WREDUCE pass (reducing word size of cells).
Removed top 27 address bits (of 32) from memory init port rainbow.$meminit$\cmd$rainbow.v:100$200 (cmd).
Removed top 27 address bits (of 32) from memory init port rainbow.$meminit$\cmd$rainbow.v:101$201 (cmd).
Removed top 27 address bits (of 32) from memory init port rainbow.$meminit$\cmd$rainbow.v:102$202 (cmd).
Removed top 27 address bits (of 32) from memory init port rainbow.$meminit$\cmd$rainbow.v:103$203 (cmd).
Removed top 27 address bits (of 32) from memory init port rainbow.$meminit$\cmd$rainbow.v:104$204 (cmd).
Removed top 27 address bits (of 32) from memory init port rainbow.$meminit$\cmd$rainbow.v:105$205 (cmd).
Removed top 27 address bits (of 32) from memory init port rainbow.$meminit$\cmd$rainbow.v:106$206 (cmd).
Removed top 27 address bits (of 32) from memory init port rainbow.$meminit$\cmd$rainbow.v:107$207 (cmd).
Removed top 27 address bits (of 32) from memory init port rainbow.$meminit$\cmd$rainbow.v:108$208 (cmd).
Removed top 27 address bits (of 32) from memory init port rainbow.$meminit$\cmd$rainbow.v:109$209 (cmd).
Removed top 27 address bits (of 32) from memory init port rainbow.$meminit$\cmd$rainbow.v:110$210 (cmd).
Removed top 27 address bits (of 32) from memory init port rainbow.$meminit$\cmd$rainbow.v:111$211 (cmd).
Removed top 27 address bits (of 32) from memory init port rainbow.$meminit$\cmd$rainbow.v:112$212 (cmd).
Removed top 27 address bits (of 32) from memory init port rainbow.$meminit$\cmd$rainbow.v:113$213 (cmd).
Removed top 27 address bits (of 32) from memory init port rainbow.$meminit$\cmd$rainbow.v:114$214 (cmd).
Removed top 27 address bits (of 32) from memory init port rainbow.$meminit$\cmd$rainbow.v:115$215 (cmd).
Removed top 27 address bits (of 32) from memory init port rainbow.$meminit$\cmd$rainbow.v:116$216 (cmd).
Removed top 27 address bits (of 32) from memory init port rainbow.$meminit$\cmd$rainbow.v:95$195 (cmd).
Removed top 27 address bits (of 32) from memory init port rainbow.$meminit$\cmd$rainbow.v:96$196 (cmd).
Removed top 27 address bits (of 32) from memory init port rainbow.$meminit$\cmd$rainbow.v:97$197 (cmd).
Removed top 27 address bits (of 32) from memory init port rainbow.$meminit$\cmd$rainbow.v:98$198 (cmd).
Removed top 27 address bits (of 32) from memory init port rainbow.$meminit$\cmd$rainbow.v:99$199 (cmd).
Removed top 25 address bits (of 32) from memory init port rainbow.$meminit$\params$rainbow.v:119$217 (params).
Removed top 25 address bits (of 32) from memory init port rainbow.$meminit$\params$rainbow.v:120$218 (params).
Removed top 25 address bits (of 32) from memory init port rainbow.$meminit$\params$rainbow.v:121$219 (params).
Removed top 25 address bits (of 32) from memory init port rainbow.$meminit$\params$rainbow.v:122$220 (params).
Removed top 25 address bits (of 32) from memory init port rainbow.$meminit$\params$rainbow.v:123$221 (params).
Removed top 25 address bits (of 32) from memory init port rainbow.$meminit$\params$rainbow.v:124$222 (params).
Removed top 25 address bits (of 32) from memory init port rainbow.$meminit$\params$rainbow.v:125$223 (params).
Removed top 25 address bits (of 32) from memory init port rainbow.$meminit$\params$rainbow.v:126$224 (params).
Removed top 25 address bits (of 32) from memory init port rainbow.$meminit$\params$rainbow.v:127$225 (params).
Removed top 25 address bits (of 32) from memory init port rainbow.$meminit$\params$rainbow.v:128$226 (params).
Removed top 25 address bits (of 32) from memory init port rainbow.$meminit$\params$rainbow.v:129$227 (params).
Removed top 25 address bits (of 32) from memory init port rainbow.$meminit$\params$rainbow.v:130$228 (params).
Removed top 25 address bits (of 32) from memory init port rainbow.$meminit$\params$rainbow.v:131$229 (params).
Removed top 25 address bits (of 32) from memory init port rainbow.$meminit$\params$rainbow.v:132$230 (params).
Removed top 25 address bits (of 32) from memory init port rainbow.$meminit$\params$rainbow.v:133$231 (params).
Removed top 25 address bits (of 32) from memory init port rainbow.$meminit$\params$rainbow.v:134$232 (params).
Removed top 25 address bits (of 32) from memory init port rainbow.$meminit$\params$rainbow.v:135$233 (params).
Removed top 25 address bits (of 32) from memory init port rainbow.$meminit$\params$rainbow.v:136$234 (params).
Removed top 25 address bits (of 32) from memory init port rainbow.$meminit$\params$rainbow.v:137$235 (params).
Removed top 25 address bits (of 32) from memory init port rainbow.$meminit$\params$rainbow.v:138$236 (params).
Removed top 25 address bits (of 32) from memory init port rainbow.$meminit$\params$rainbow.v:139$237 (params).
Removed top 25 address bits (of 32) from memory init port rainbow.$meminit$\params$rainbow.v:140$238 (params).
Removed top 25 address bits (of 32) from memory init port rainbow.$meminit$\params$rainbow.v:141$239 (params).
Removed top 25 address bits (of 32) from memory init port rainbow.$meminit$\params$rainbow.v:142$240 (params).
Removed top 25 address bits (of 32) from memory init port rainbow.$meminit$\params$rainbow.v:143$241 (params).
Removed top 25 address bits (of 32) from memory init port rainbow.$meminit$\params$rainbow.v:144$242 (params).
Removed top 25 address bits (of 32) from memory init port rainbow.$meminit$\params$rainbow.v:145$243 (params).
Removed top 25 address bits (of 32) from memory init port rainbow.$meminit$\params$rainbow.v:146$244 (params).
Removed top 25 address bits (of 32) from memory init port rainbow.$meminit$\params$rainbow.v:147$245 (params).
Removed top 25 address bits (of 32) from memory init port rainbow.$meminit$\params$rainbow.v:148$246 (params).
Removed top 25 address bits (of 32) from memory init port rainbow.$meminit$\params$rainbow.v:149$247 (params).
Removed top 25 address bits (of 32) from memory init port rainbow.$meminit$\params$rainbow.v:150$248 (params).
Removed top 25 address bits (of 32) from memory init port rainbow.$meminit$\params$rainbow.v:151$249 (params).
Removed top 25 address bits (of 32) from memory init port rainbow.$meminit$\params$rainbow.v:152$250 (params).
Removed top 25 address bits (of 32) from memory init port rainbow.$meminit$\params$rainbow.v:153$251 (params).
Removed top 25 address bits (of 32) from memory init port rainbow.$meminit$\params$rainbow.v:154$252 (params).
Removed top 25 address bits (of 32) from memory init port rainbow.$meminit$\params$rainbow.v:155$253 (params).
Removed top 25 address bits (of 32) from memory init port rainbow.$meminit$\params$rainbow.v:156$254 (params).
Removed top 25 address bits (of 32) from memory init port rainbow.$meminit$\params$rainbow.v:157$255 (params).
Removed top 25 address bits (of 32) from memory init port rainbow.$meminit$\params$rainbow.v:158$256 (params).
Removed top 25 address bits (of 32) from memory init port rainbow.$meminit$\params$rainbow.v:159$257 (params).
Removed top 25 address bits (of 32) from memory init port rainbow.$meminit$\params$rainbow.v:160$258 (params).
Removed top 25 address bits (of 32) from memory init port rainbow.$meminit$\params$rainbow.v:161$259 (params).
Removed top 25 address bits (of 32) from memory init port rainbow.$meminit$\params$rainbow.v:162$260 (params).
Removed top 25 address bits (of 32) from memory init port rainbow.$meminit$\params$rainbow.v:163$261 (params).
Removed top 25 address bits (of 32) from memory init port rainbow.$meminit$\params$rainbow.v:164$262 (params).
Removed top 25 address bits (of 32) from memory init port rainbow.$meminit$\params$rainbow.v:165$263 (params).
Removed top 25 address bits (of 32) from memory init port rainbow.$meminit$\params$rainbow.v:166$264 (params).
Removed top 25 address bits (of 32) from memory init port rainbow.$meminit$\params$rainbow.v:167$265 (params).
Removed top 25 address bits (of 32) from memory init port rainbow.$meminit$\params$rainbow.v:168$266 (params).
Removed top 25 address bits (of 32) from memory init port rainbow.$meminit$\params$rainbow.v:169$267 (params).
Removed top 25 address bits (of 32) from memory init port rainbow.$meminit$\params$rainbow.v:170$268 (params).
Removed top 25 address bits (of 32) from memory init port rainbow.$meminit$\params$rainbow.v:171$269 (params).
Removed top 25 address bits (of 32) from memory init port rainbow.$meminit$\params$rainbow.v:172$270 (params).
Removed top 25 address bits (of 32) from memory init port rainbow.$meminit$\params$rainbow.v:173$271 (params).
Removed top 25 address bits (of 32) from memory init port rainbow.$meminit$\params$rainbow.v:174$272 (params).
Removed top 25 address bits (of 32) from memory init port rainbow.$meminit$\params$rainbow.v:175$273 (params).
Removed top 25 address bits (of 32) from memory init port rainbow.$meminit$\params$rainbow.v:176$274 (params).
Removed top 25 address bits (of 32) from memory init port rainbow.$meminit$\params$rainbow.v:177$275 (params).
Removed top 25 address bits (of 32) from memory init port rainbow.$meminit$\params$rainbow.v:178$276 (params).
Removed top 25 address bits (of 32) from memory init port rainbow.$meminit$\params$rainbow.v:179$277 (params).
Removed top 25 address bits (of 32) from memory init port rainbow.$meminit$\params$rainbow.v:180$278 (params).
Removed top 25 address bits (of 32) from memory init port rainbow.$meminit$\params$rainbow.v:181$279 (params).
Removed top 25 address bits (of 32) from memory init port rainbow.$meminit$\params$rainbow.v:182$280 (params).
Removed top 25 address bits (of 32) from memory init port rainbow.$meminit$\params$rainbow.v:183$281 (params).
Removed top 25 address bits (of 32) from memory init port rainbow.$meminit$\params$rainbow.v:184$282 (params).
Removed top 25 address bits (of 32) from memory init port rainbow.$meminit$\params$rainbow.v:185$283 (params).
Removed top 25 address bits (of 32) from memory init port rainbow.$meminit$\params$rainbow.v:186$284 (params).
Removed top 1 bits (of 16) from port B of cell rainbow.$le$rainbow.v:249$96 ($le).
Removed top 1 bits (of 16) from port B of cell rainbow.$le$rainbow.v:233$94 ($le).
Removed top 15 bits (of 16) from port B of cell rainbow.$add$rainbow.v:235$95 ($add).
Removed top 4 bits (of 5) from port B of cell rainbow.$add$rainbow.v:295$102 ($add).
Removed top 6 bits (of 12) from port B of cell rainbow.$lt$rainbow.v:303$103 ($lt).
Removed top 3 bits (of 12) from port B of cell rainbow.$lt$rainbow.v:317$105 ($lt).
Removed top 4 bits (of 5) from port B of cell rainbow.$sub$rainbow.v:340$109 ($sub).
Removed top 3 bits (of 4) from port B of cell rainbow.$sub$rainbow.v:357$115 ($sub).
Removed top 2 bits (of 3) from port B of cell rainbow.$sub$rainbow.v:376$119 ($sub).
Removed top 2 bits (of 8) from port B of cell rainbow.$eq$rainbow.v:450$141 ($eq).
Removed top 2 bits (of 8) from port B of cell rainbow.$eq$rainbow.v:449$138 ($eq).
Removed top 3 bits (of 8) from port B of cell rainbow.$eq$rainbow.v:454$145 ($eq).
Removed top 2 bits (of 8) from port B of cell rainbow.$eq$rainbow.v:506$166 ($eq).
Removed top 3 bits (of 5) from port B of cell rainbow.$sub$rainbow.v:520$172 ($sub).
Removed top 3 bits (of 7) from port B of cell rainbow.$sub$rainbow.v:521$173 ($sub).
Removed top 3 bits (of 16) from port B of cell rainbow.$sub$rainbow.v:522$174 ($sub).
Removed top 6 bits (of 7) from port B of cell rainbow.$add$rainbow.v:530$176 ($add).
Removed top 13 bits (of 14) from port B of cell rainbow.$sub$rainbow.v:532$177 ($sub).
Removed top 5 bits (of 12) from port B of cell rainbow.$lt$rainbow.v:540$178 ($lt).
Removed top 1 bits (of 16) from port B of cell rainbow.$lt$rainbow.v:652$193 ($lt).
Removed top 2 bits (of 6) from port B of cell rainbow.$procmux$478_CMP0 ($eq).
Removed top 3 bits (of 6) from port B of cell rainbow.$procmux$527_CMP0 ($eq).
Removed top 3 bits (of 6) from port B of cell rainbow.$procmux$546_CMP0 ($eq).
Removed top 2 bits (of 8) from port B of cell rainbow.$procmux$562_CMP0 ($eq).
Removed top 2 bits (of 8) from port B of cell rainbow.$procmux$563_CMP0 ($eq).
Removed top 2 bits (of 8) from port B of cell rainbow.$procmux$564_CMP0 ($eq).
Removed top 2 bits (of 8) from port B of cell rainbow.$procmux$565_CMP0 ($eq).
Removed top 2 bits (of 8) from port B of cell rainbow.$procmux$566_CMP0 ($eq).
Removed top 2 bits (of 6) from port B of cell rainbow.$procmux$624_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell rainbow.$procmux$628_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell rainbow.$procmux$632_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell rainbow.$procmux$636_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell rainbow.$procmux$640_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell rainbow.$procmux$644_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell rainbow.$procmux$648_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell rainbow.$procmux$652_CMP0 ($eq).
Removed top 2 bits (of 6) from port B of cell rainbow.$procmux$656_CMP0 ($eq).
Removed top 2 bits (of 6) from port B of cell rainbow.$procmux$660_CMP0 ($eq).
Removed top 4 bits (of 6) from port B of cell rainbow.$procmux$664_CMP0 ($eq).
Removed top 4 bits (of 6) from port B of cell rainbow.$procmux$668_CMP0 ($eq).
Removed top 3 bits (of 6) from mux cell rainbow.$procmux$700 ($mux).
Removed top 2 bits (of 6) from mux cell rainbow.$procmux$707 ($mux).
Removed top 2 bits (of 6) from port B of cell rainbow.$procmux$710_CMP0 ($eq).
Removed top 1 bits (of 6) from mux cell rainbow.$procmux$712 ($mux).
Removed top 1 bits (of 6) from mux cell rainbow.$procmux$715 ($mux).
Removed top 1 bits (of 6) from mux cell rainbow.$procmux$718 ($mux).
Removed top 1 bits (of 6) from mux cell rainbow.$procmux$721 ($mux).
Removed top 3 bits (of 6) from mux cell rainbow.$procmux$725 ($mux).
Removed top 1 bits (of 6) from mux cell rainbow.$procmux$728 ($mux).
Removed top 2 bits (of 6) from port B of cell rainbow.$procmux$744_CMP0 ($eq).
Removed top 5 bits (of 6) from mux cell rainbow.$procmux$746 ($mux).
Removed top 2 bits (of 6) from port B of cell rainbow.$procmux$748_CMP0 ($eq).
Removed top 2 bits (of 6) from mux cell rainbow.$procmux$750 ($mux).
Removed top 2 bits (of 6) from port B of cell rainbow.$procmux$752_CMP0 ($eq).
Removed top 2 bits (of 6) from mux cell rainbow.$procmux$754 ($mux).
Removed top 3 bits (of 6) from port B of cell rainbow.$procmux$756_CMP0 ($eq).
Removed top 4 bits (of 6) from mux cell rainbow.$procmux$758 ($mux).
Removed top 2 bits (of 6) from mux cell rainbow.$procmux$761 ($mux).
Removed top 4 bits (of 6) from mux cell rainbow.$procmux$765 ($mux).
Removed top 2 bits (of 6) from mux cell rainbow.$procmux$768 ($mux).
Removed top 3 bits (of 6) from port B of cell rainbow.$procmux$773_CMP0 ($eq).
Removed top 5 bits (of 6) from mux cell rainbow.$procmux$783 ($mux).
Removed top 5 bits (of 6) from port B of cell rainbow.$procmux$794_CMP0 ($eq).
Removed top 3 bits (of 6) from wire rainbow.$procmux$700_Y.
Removed top 2 bits (of 6) from wire rainbow.$procmux$707_Y.
Removed top 2 bits (of 6) from wire rainbow.$procmux$712_Y.
Removed top 1 bits (of 6) from wire rainbow.$procmux$715_Y.
Removed top 1 bits (of 6) from wire rainbow.$procmux$718_Y.
Removed top 1 bits (of 6) from wire rainbow.$procmux$721_Y.
Removed top 3 bits (of 6) from wire rainbow.$procmux$725_Y.
Removed top 1 bits (of 6) from wire rainbow.$procmux$728_Y.
Removed top 5 bits (of 6) from wire rainbow.$procmux$746_Y.
Removed top 2 bits (of 6) from wire rainbow.$procmux$750_Y.
Removed top 2 bits (of 6) from wire rainbow.$procmux$754_Y.
Removed top 4 bits (of 6) from wire rainbow.$procmux$758_Y.
Removed top 2 bits (of 6) from wire rainbow.$procmux$761_Y.
Removed top 4 bits (of 6) from wire rainbow.$procmux$765_Y.
Removed top 2 bits (of 6) from wire rainbow.$procmux$768_Y.
Removed top 5 bits (of 6) from wire rainbow.$procmux$783_Y.

2.12. Executing PEEPOPT pass (run peephole optimizers).

2.13. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \rainbow..
Removed 0 unused cells and 16 unused wires.
<suppressed ~1 debug messages>

2.14. Executing SHARE pass (SAT-based resource sharing).
Found 3 cells in module rainbow that may be considered for resource sharing.
  Analyzing resource sharing options for $memrd$\params$rainbow.v:513$167 ($memrd):
    Found 1 activation_patterns using ctrl signal { $procmux$478_CMP $eq$rainbow.v:340$110_Y }.
    No candidates found.
  Analyzing resource sharing options for $memrd$\cmd$rainbow.v:340$108 ($memrd):
    Found 10 activation_patterns using ctrl signal { $procmux$744_CMP $procmux$546_CMP $procmux$478_CMP $eq$rainbow.v:516$168_Y $logic_or$rainbow.v:450$142_Y $logic_or$rainbow.v:445$135_Y $eq$rainbow.v:440$128_Y $eq$rainbow.v:434$125_Y $eq$rainbow.v:430$124_Y \dc }.
    Found 1 candidates: $memrd$\cmd$rainbow.v:264$98
    Analyzing resource sharing with $memrd$\cmd$rainbow.v:264$98 ($memrd):
      Found 2 activation_patterns using ctrl signal { $procmux$527_CMP $eq$rainbow.v:264$99_Y }.
      Forbidden control signals for this pair of cells: { $procmux$577_CMP $procmux$562_CMP $auto$opt_reduce.cc:132:opt_mux$906 $auto$opt_reduce.cc:132:opt_mux$904 $auto$opt_reduce.cc:132:opt_mux$908 $auto$opt_reduce.cc:132:opt_mux$910 $auto$opt_reduce.cc:132:opt_mux$912 $eq$rainbow.v:454$145_Y $logic_or$rainbow.v:450$142_Y $logic_or$rainbow.v:445$135_Y $eq$rainbow.v:440$128_Y $logic_and$rainbow.v:340$111_Y $eq$rainbow.v:340$110_Y $eq$rainbow.v:264$99_Y }
      Activation pattern for cell $memrd$\cmd$rainbow.v:340$108: { $procmux$744_CMP $eq$rainbow.v:434$125_Y \dc } = 3'101
      Activation pattern for cell $memrd$\cmd$rainbow.v:340$108: { $procmux$744_CMP $eq$rainbow.v:434$125_Y $eq$rainbow.v:430$124_Y \dc } = 4'1000
      Activation pattern for cell $memrd$\cmd$rainbow.v:340$108: { $procmux$478_CMP $eq$rainbow.v:516$168_Y } = 2'11
      Activation pattern for cell $memrd$\cmd$rainbow.v:340$108: $procmux$478_CMP = 1'1
      Activation pattern for cell $memrd$\cmd$rainbow.v:340$108: $procmux$546_CMP = 1'1
      Activation pattern for cell $memrd$\cmd$rainbow.v:264$98: $procmux$527_CMP = 1'1
      Adding exclusive control bits: $procmux$478_CMP vs. $procmux$527_CMP
      Adding exclusive control bits: $procmux$478_CMP vs. $procmux$527_CMP
      Adding exclusive control bits: $procmux$478_CMP vs. $procmux$527_CMP
      Adding exclusive control bits: $procmux$478_CMP vs. $procmux$744_CMP
      Adding exclusive control bits: $procmux$478_CMP vs. $procmux$546_CMP
      Adding exclusive control bits: $procmux$478_CMP vs. $procmux$527_CMP
      Adding exclusive control bits: $procmux$546_CMP vs. $procmux$744_CMP
      Adding exclusive control bits: $procmux$527_CMP vs. $procmux$744_CMP
      Adding exclusive control bits: $procmux$527_CMP vs. $procmux$546_CMP
      Size of SAT problem: 15 cells, 221 variables, 596 clauses
      According to the SAT solver this pair of cells can be shared.
      Activation signal for $memrd$\cmd$rainbow.v:264$98: $auto$share.cc:976:make_cell_activation_logic$939
      New cell: $auto$share.cc:710:make_supercell$941 ($memrd)
  Analyzing resource sharing options for $auto$share.cc:710:make_supercell$941 ($memrd):
    Found 6 activation_patterns using ctrl signal { $procmux$744_CMP $procmux$546_CMP $procmux$527_CMP $procmux$478_CMP $eq$rainbow.v:516$168_Y $eq$rainbow.v:434$125_Y $eq$rainbow.v:430$124_Y \dc }.
    No candidates found.
Removing 2 cells in module rainbow:
  Removing cell $memrd$\cmd$rainbow.v:264$98 ($memrd).
  Removing cell $memrd$\cmd$rainbow.v:340$108 ($memrd).

2.15. Executing TECHMAP pass (map to technology primitives).

2.15.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/cmp2lut.v
Parsing Verilog input from `/usr/bin/../share/yosys/cmp2lut.v' to AST representation.
Generating RTLIL representation for module `\_90_lut_cmp_'.
Successfully finished Verilog frontend.

2.15.2. Continuing TECHMAP pass.
Using template $paramod$968c93632f950ce0f306709fa121c1e7a868940c\_90_lut_cmp_ for cells of type $eq.
Using template $paramod$77ad031fce233083715243f95e3cd2547d931e42\_90_lut_cmp_ for cells of type $eq.
Using template $paramod$b014af9c344b7c6e328d7df54af43048a86ccf04\_90_lut_cmp_ for cells of type $eq.
No more expansions possible.
<suppressed ~864 debug messages>

2.16. Executing OPT_EXPR pass (perform const folding).
Optimizing module rainbow.

2.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \rainbow..
Removed 0 unused cells and 10 unused wires.
<suppressed ~2 debug messages>

2.18. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module rainbow:
  creating $macc model for $add$rainbow.v:235$95 ($add).
  creating $macc model for $add$rainbow.v:295$102 ($add).
  creating $macc model for $add$rainbow.v:530$176 ($add).
  creating $macc model for $sub$rainbow.v:340$109 ($sub).
  creating $macc model for $sub$rainbow.v:357$115 ($sub).
  creating $macc model for $sub$rainbow.v:376$119 ($sub).
  creating $macc model for $sub$rainbow.v:520$172 ($sub).
  creating $macc model for $sub$rainbow.v:521$173 ($sub).
  creating $macc model for $sub$rainbow.v:522$174 ($sub).
  creating $macc model for $sub$rainbow.v:532$177 ($sub).
  creating $alu model for $macc $sub$rainbow.v:532$177.
  creating $alu model for $macc $sub$rainbow.v:522$174.
  creating $alu model for $macc $sub$rainbow.v:521$173.
  creating $alu model for $macc $sub$rainbow.v:520$172.
  creating $alu model for $macc $sub$rainbow.v:376$119.
  creating $alu model for $macc $sub$rainbow.v:357$115.
  creating $alu model for $macc $sub$rainbow.v:340$109.
  creating $alu model for $macc $add$rainbow.v:530$176.
  creating $alu model for $macc $add$rainbow.v:295$102.
  creating $alu model for $macc $add$rainbow.v:235$95.
  creating $alu model for $le$rainbow.v:233$94 ($le): new $alu
  creating $alu model for $le$rainbow.v:249$96 ($le): new $alu
  creating $alu model for $lt$rainbow.v:303$103 ($lt): new $alu
  creating $alu model for $lt$rainbow.v:317$105 ($lt): new $alu
  creating $alu model for $lt$rainbow.v:540$178 ($lt): new $alu
  creating $alu model for $lt$rainbow.v:652$193 ($lt): new $alu
  creating $alu cell for $lt$rainbow.v:652$193: $auto$alumacc.cc:474:replace_alu$957
  creating $alu cell for $lt$rainbow.v:540$178: $auto$alumacc.cc:474:replace_alu$968
  creating $alu cell for $lt$rainbow.v:317$105: $auto$alumacc.cc:474:replace_alu$979
  creating $alu cell for $lt$rainbow.v:303$103: $auto$alumacc.cc:474:replace_alu$990
  creating $alu cell for $le$rainbow.v:249$96: $auto$alumacc.cc:474:replace_alu$1001
  creating $alu cell for $le$rainbow.v:233$94: $auto$alumacc.cc:474:replace_alu$1014
  creating $alu cell for $add$rainbow.v:235$95: $auto$alumacc.cc:474:replace_alu$1027
  creating $alu cell for $add$rainbow.v:295$102: $auto$alumacc.cc:474:replace_alu$1030
  creating $alu cell for $add$rainbow.v:530$176: $auto$alumacc.cc:474:replace_alu$1033
  creating $alu cell for $sub$rainbow.v:340$109: $auto$alumacc.cc:474:replace_alu$1036
  creating $alu cell for $sub$rainbow.v:357$115: $auto$alumacc.cc:474:replace_alu$1039
  creating $alu cell for $sub$rainbow.v:376$119: $auto$alumacc.cc:474:replace_alu$1042
  creating $alu cell for $sub$rainbow.v:520$172: $auto$alumacc.cc:474:replace_alu$1045
  creating $alu cell for $sub$rainbow.v:521$173: $auto$alumacc.cc:474:replace_alu$1048
  creating $alu cell for $sub$rainbow.v:522$174: $auto$alumacc.cc:474:replace_alu$1051
  creating $alu cell for $sub$rainbow.v:532$177: $auto$alumacc.cc:474:replace_alu$1054
  created 16 $alu and 0 $macc cells.

2.19. Executing OPT pass (performing simple optimizations).

2.19.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module rainbow.
<suppressed ~10 debug messages>

2.19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\rainbow'.
<suppressed ~18 debug messages>
Removed a total of 6 cells.

2.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \rainbow..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~16 debug messages>

2.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \rainbow.
    New input vector for $reduce_or cell $auto$alumacc.cc:509:replace_alu$1012: { $auto$rtlil.cc:1832:Not$1011 $auto$rtlil.cc:1835:ReduceAnd$1005 }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$907: { $eq$rainbow.v:444$131_Y $eq$rainbow.v:445$134_Y }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$903: { $eq$rainbow.v:449$138_Y $eq$rainbow.v:450$141_Y }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$1017: { $auto$alumacc.cc:490:replace_alu$1015 [0] $auto$alumacc.cc:490:replace_alu$1015 [1] $auto$alumacc.cc:490:replace_alu$1015 [2] $auto$alumacc.cc:490:replace_alu$1015 [3] $auto$alumacc.cc:490:replace_alu$1015 [4] $auto$alumacc.cc:490:replace_alu$1015 [5] $auto$alumacc.cc:490:replace_alu$1015 [6] $auto$alumacc.cc:490:replace_alu$1015 [7] $auto$alumacc.cc:490:replace_alu$1015 [8] $auto$alumacc.cc:490:replace_alu$1015 [9] $auto$alumacc.cc:490:replace_alu$1015 [10] $auto$alumacc.cc:490:replace_alu$1015 [11] $auto$alumacc.cc:490:replace_alu$1015 [12] $auto$alumacc.cc:490:replace_alu$1015 [13] $auto$alumacc.cc:490:replace_alu$1015 [14] $auto$alumacc.cc:490:replace_alu$1015 [15] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$960: { $auto$alumacc.cc:490:replace_alu$958 [0] $auto$alumacc.cc:490:replace_alu$958 [1] $auto$alumacc.cc:490:replace_alu$958 [2] $auto$alumacc.cc:490:replace_alu$958 [3] $auto$alumacc.cc:490:replace_alu$958 [4] $auto$alumacc.cc:490:replace_alu$958 [5] $auto$alumacc.cc:490:replace_alu$958 [6] $auto$alumacc.cc:490:replace_alu$958 [7] $auto$alumacc.cc:490:replace_alu$958 [8] $auto$alumacc.cc:490:replace_alu$958 [9] $auto$alumacc.cc:490:replace_alu$958 [10] $auto$alumacc.cc:490:replace_alu$958 [11] $auto$alumacc.cc:490:replace_alu$958 [12] $auto$alumacc.cc:490:replace_alu$958 [13] $auto$alumacc.cc:490:replace_alu$958 [14] $auto$alumacc.cc:490:replace_alu$958 [15] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$971: { $auto$alumacc.cc:490:replace_alu$969 [0] $auto$alumacc.cc:490:replace_alu$969 [1] $auto$alumacc.cc:490:replace_alu$969 [2] $auto$alumacc.cc:490:replace_alu$969 [3] $auto$alumacc.cc:490:replace_alu$969 [4] $auto$alumacc.cc:490:replace_alu$969 [5] $auto$alumacc.cc:490:replace_alu$969 [6] $auto$alumacc.cc:490:replace_alu$969 [7] $auto$alumacc.cc:490:replace_alu$969 [8] $auto$alumacc.cc:490:replace_alu$969 [9] $auto$alumacc.cc:490:replace_alu$969 [10] $auto$alumacc.cc:490:replace_alu$969 [11] $auto$alumacc.cc:490:replace_alu$969 [12] $auto$alumacc.cc:490:replace_alu$969 [13] $auto$alumacc.cc:490:replace_alu$969 [14] $auto$alumacc.cc:490:replace_alu$969 [15] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$982: { $auto$alumacc.cc:490:replace_alu$980 [0] $auto$alumacc.cc:490:replace_alu$980 [1] $auto$alumacc.cc:490:replace_alu$980 [2] $auto$alumacc.cc:490:replace_alu$980 [3] $auto$alumacc.cc:490:replace_alu$980 [4] $auto$alumacc.cc:490:replace_alu$980 [5] $auto$alumacc.cc:490:replace_alu$980 [6] $auto$alumacc.cc:490:replace_alu$980 [7] $auto$alumacc.cc:490:replace_alu$980 [8] $auto$alumacc.cc:490:replace_alu$980 [9] $auto$alumacc.cc:490:replace_alu$980 [10] $auto$alumacc.cc:490:replace_alu$980 [11] $auto$alumacc.cc:490:replace_alu$980 [12] $auto$alumacc.cc:490:replace_alu$980 [13] $auto$alumacc.cc:490:replace_alu$980 [14] $auto$alumacc.cc:490:replace_alu$980 [15] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$993: { $auto$alumacc.cc:490:replace_alu$991 [0] $auto$alumacc.cc:490:replace_alu$991 [1] $auto$alumacc.cc:490:replace_alu$991 [2] $auto$alumacc.cc:490:replace_alu$991 [3] $auto$alumacc.cc:490:replace_alu$991 [4] $auto$alumacc.cc:490:replace_alu$991 [5] $auto$alumacc.cc:490:replace_alu$991 [6] $auto$alumacc.cc:490:replace_alu$991 [7] $auto$alumacc.cc:490:replace_alu$991 [8] $auto$alumacc.cc:490:replace_alu$991 [9] $auto$alumacc.cc:490:replace_alu$991 [10] $auto$alumacc.cc:490:replace_alu$991 [11] $auto$alumacc.cc:490:replace_alu$991 [12] $auto$alumacc.cc:490:replace_alu$991 [13] $auto$alumacc.cc:490:replace_alu$991 [14] $auto$alumacc.cc:490:replace_alu$991 [15] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$1004: { $auto$alumacc.cc:490:replace_alu$1002 [0] $auto$alumacc.cc:490:replace_alu$1002 [1] $auto$alumacc.cc:490:replace_alu$1002 [2] $auto$alumacc.cc:490:replace_alu$1002 [3] $auto$alumacc.cc:490:replace_alu$1002 [4] $auto$alumacc.cc:490:replace_alu$1002 [5] $auto$alumacc.cc:490:replace_alu$1002 [6] $auto$alumacc.cc:490:replace_alu$1002 [7] $auto$alumacc.cc:490:replace_alu$1002 [8] $auto$alumacc.cc:490:replace_alu$1002 [9] $auto$alumacc.cc:490:replace_alu$1002 [10] $auto$alumacc.cc:490:replace_alu$1002 [11] $auto$alumacc.cc:490:replace_alu$1002 [12] $auto$alumacc.cc:490:replace_alu$1002 [13] $auto$alumacc.cc:490:replace_alu$1002 [14] $auto$alumacc.cc:490:replace_alu$1002 [15] }
  Optimizing cells in module \rainbow.
Performed a total of 9 changes.

2.19.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\rainbow'.
Removed a total of 0 cells.

2.19.6. Executing OPT_RMDFF pass (remove dff with constant values).

2.19.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \rainbow..
Removed 4 unused cells and 16 unused wires.
<suppressed ~5 debug messages>

2.19.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module rainbow.

2.19.9. Rerunning OPT passes. (Maybe there is more to do..)

2.19.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \rainbow..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~16 debug messages>

2.19.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \rainbow.
Performed a total of 0 changes.

2.19.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\rainbow'.
Removed a total of 0 cells.

2.19.13. Executing OPT_RMDFF pass (remove dff with constant values).

2.19.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \rainbow..

2.19.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module rainbow.

2.19.16. Finished OPT passes. (There is nothing left to do.)

2.20. Executing FSM pass (extract and optimize FSM).

2.20.1. Executing FSM_DETECT pass (finding FSMs in design).
Not marking rainbow.state as FSM state register:
    Register has an initialization value.

2.20.2. Executing FSM_EXTRACT pass (extracting FSM from design).

2.20.3. Executing FSM_OPT pass (simple optimizations of FSMs).

2.20.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \rainbow..

2.20.5. Executing FSM_OPT pass (simple optimizations of FSMs).

2.20.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

2.20.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

2.20.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

2.21. Executing OPT pass (performing simple optimizations).

2.21.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module rainbow.

2.21.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\rainbow'.
Removed a total of 0 cells.

2.21.3. Executing OPT_RMDFF pass (remove dff with constant values).

2.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \rainbow..

2.21.5. Finished fast OPT passes.

2.22. Executing MEMORY pass.

2.22.1. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).
Checking cell `$auto$share.cc:710:make_supercell$941' in module `\rainbow': no (compatible) $dff found.
Checking cell `$memrd$\params$rainbow.v:513$167' in module `\rainbow': no (compatible) $dff found.

2.22.2. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \rainbow..
Removed 1 unused cells and 1 unused wires.
<suppressed ~2 debug messages>

2.22.3. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

2.22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \rainbow..

2.22.5. Executing MEMORY_COLLECT pass (generating $mem cells).
Collecting $memrd, $memwr and $meminit for memory `\cmd' in module `\rainbow':
  $meminit$\cmd$rainbow.v:95$195 ($meminit)
  $meminit$\cmd$rainbow.v:96$196 ($meminit)
  $meminit$\cmd$rainbow.v:97$197 ($meminit)
  $meminit$\cmd$rainbow.v:98$198 ($meminit)
  $meminit$\cmd$rainbow.v:99$199 ($meminit)
  $meminit$\cmd$rainbow.v:100$200 ($meminit)
  $meminit$\cmd$rainbow.v:101$201 ($meminit)
  $meminit$\cmd$rainbow.v:102$202 ($meminit)
  $meminit$\cmd$rainbow.v:103$203 ($meminit)
  $meminit$\cmd$rainbow.v:104$204 ($meminit)
  $meminit$\cmd$rainbow.v:105$205 ($meminit)
  $meminit$\cmd$rainbow.v:106$206 ($meminit)
  $meminit$\cmd$rainbow.v:107$207 ($meminit)
  $meminit$\cmd$rainbow.v:108$208 ($meminit)
  $meminit$\cmd$rainbow.v:109$209 ($meminit)
  $meminit$\cmd$rainbow.v:110$210 ($meminit)
  $meminit$\cmd$rainbow.v:111$211 ($meminit)
  $meminit$\cmd$rainbow.v:112$212 ($meminit)
  $meminit$\cmd$rainbow.v:113$213 ($meminit)
  $meminit$\cmd$rainbow.v:114$214 ($meminit)
  $meminit$\cmd$rainbow.v:115$215 ($meminit)
  $meminit$\cmd$rainbow.v:116$216 ($meminit)
  $auto$share.cc:710:make_supercell$941 ($memrd)
Collecting $memrd, $memwr and $meminit for memory `\params' in module `\rainbow':
  $meminit$\params$rainbow.v:119$217 ($meminit)
  $meminit$\params$rainbow.v:120$218 ($meminit)
  $meminit$\params$rainbow.v:121$219 ($meminit)
  $meminit$\params$rainbow.v:122$220 ($meminit)
  $meminit$\params$rainbow.v:123$221 ($meminit)
  $meminit$\params$rainbow.v:124$222 ($meminit)
  $meminit$\params$rainbow.v:125$223 ($meminit)
  $meminit$\params$rainbow.v:126$224 ($meminit)
  $meminit$\params$rainbow.v:127$225 ($meminit)
  $meminit$\params$rainbow.v:128$226 ($meminit)
  $meminit$\params$rainbow.v:129$227 ($meminit)
  $meminit$\params$rainbow.v:130$228 ($meminit)
  $meminit$\params$rainbow.v:131$229 ($meminit)
  $meminit$\params$rainbow.v:132$230 ($meminit)
  $meminit$\params$rainbow.v:133$231 ($meminit)
  $meminit$\params$rainbow.v:134$232 ($meminit)
  $meminit$\params$rainbow.v:135$233 ($meminit)
  $meminit$\params$rainbow.v:136$234 ($meminit)
  $meminit$\params$rainbow.v:137$235 ($meminit)
  $meminit$\params$rainbow.v:138$236 ($meminit)
  $meminit$\params$rainbow.v:139$237 ($meminit)
  $meminit$\params$rainbow.v:140$238 ($meminit)
  $meminit$\params$rainbow.v:141$239 ($meminit)
  $meminit$\params$rainbow.v:142$240 ($meminit)
  $meminit$\params$rainbow.v:143$241 ($meminit)
  $meminit$\params$rainbow.v:144$242 ($meminit)
  $meminit$\params$rainbow.v:145$243 ($meminit)
  $meminit$\params$rainbow.v:146$244 ($meminit)
  $meminit$\params$rainbow.v:147$245 ($meminit)
  $meminit$\params$rainbow.v:148$246 ($meminit)
  $meminit$\params$rainbow.v:149$247 ($meminit)
  $meminit$\params$rainbow.v:150$248 ($meminit)
  $meminit$\params$rainbow.v:151$249 ($meminit)
  $meminit$\params$rainbow.v:152$250 ($meminit)
  $meminit$\params$rainbow.v:153$251 ($meminit)
  $meminit$\params$rainbow.v:154$252 ($meminit)
  $meminit$\params$rainbow.v:155$253 ($meminit)
  $meminit$\params$rainbow.v:156$254 ($meminit)
  $meminit$\params$rainbow.v:157$255 ($meminit)
  $meminit$\params$rainbow.v:158$256 ($meminit)
  $meminit$\params$rainbow.v:159$257 ($meminit)
  $meminit$\params$rainbow.v:160$258 ($meminit)
  $meminit$\params$rainbow.v:161$259 ($meminit)
  $meminit$\params$rainbow.v:162$260 ($meminit)
  $meminit$\params$rainbow.v:163$261 ($meminit)
  $meminit$\params$rainbow.v:164$262 ($meminit)
  $meminit$\params$rainbow.v:165$263 ($meminit)
  $meminit$\params$rainbow.v:166$264 ($meminit)
  $meminit$\params$rainbow.v:167$265 ($meminit)
  $meminit$\params$rainbow.v:168$266 ($meminit)
  $meminit$\params$rainbow.v:169$267 ($meminit)
  $meminit$\params$rainbow.v:170$268 ($meminit)
  $meminit$\params$rainbow.v:171$269 ($meminit)
  $meminit$\params$rainbow.v:172$270 ($meminit)
  $meminit$\params$rainbow.v:173$271 ($meminit)
  $meminit$\params$rainbow.v:174$272 ($meminit)
  $meminit$\params$rainbow.v:175$273 ($meminit)
  $meminit$\params$rainbow.v:176$274 ($meminit)
  $meminit$\params$rainbow.v:177$275 ($meminit)
  $meminit$\params$rainbow.v:178$276 ($meminit)
  $meminit$\params$rainbow.v:179$277 ($meminit)
  $meminit$\params$rainbow.v:180$278 ($meminit)
  $meminit$\params$rainbow.v:181$279 ($meminit)
  $meminit$\params$rainbow.v:182$280 ($meminit)
  $meminit$\params$rainbow.v:183$281 ($meminit)
  $meminit$\params$rainbow.v:184$282 ($meminit)
  $meminit$\params$rainbow.v:185$283 ($meminit)
  $meminit$\params$rainbow.v:186$284 ($meminit)
  $memrd$\params$rainbow.v:513$167 ($memrd)

2.23. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \rainbow..

2.24. Executing MEMORY_BRAM pass (mapping $mem cells to block memories).
Processing rainbow.cmd:
  Properties: ports=1 bits=176 rports=1 wports=0 dbits=8 abits=5 words=22
  Checking rule #1 for bram type $__ICE40_RAM4K_M0 (variant 1):
    Bram geometry: abits=8 dbits=16 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M0: awaste=234 dwaste=8 bwaste=3920 waste=3920 efficiency=4
    Rule #1 for bram type $__ICE40_RAM4K_M0 (variant 1) accepted.
    Mapping to bram type $__ICE40_RAM4K_M0 (variant 1):
      Read port #0 is in clock domain !~async~.
        Bram port A1.1 has incompatible clock type.
        Failed to map read port #0.
    Mapping to bram type $__ICE40_RAM4K_M0 failed.
  Checking rule #2 for bram type $__ICE40_RAM4K_M123 (variant 1):
    Bram geometry: abits=9 dbits=8 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=490 dwaste=0 bwaste=3920 waste=3920 efficiency=4
    Rule #2 for bram type $__ICE40_RAM4K_M123 (variant 1) accepted.
    Mapping to bram type $__ICE40_RAM4K_M123 (variant 1):
      Read port #0 is in clock domain !~async~.
        Bram port A1.1 has incompatible clock type.
        Failed to map read port #0.
    Mapping to bram type $__ICE40_RAM4K_M123 failed.
  Checking rule #2 for bram type $__ICE40_RAM4K_M123 (variant 2):
    Bram geometry: abits=10 dbits=4 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=1002 dwaste=0 bwaste=4008 waste=4008 efficiency=2
    Rule #2 for bram type $__ICE40_RAM4K_M123 (variant 2) accepted.
    Mapping to bram type $__ICE40_RAM4K_M123 (variant 2):
      Read port #0 is in clock domain !~async~.
        Bram port A1.1 has incompatible clock type.
        Failed to map read port #0.
    Mapping to bram type $__ICE40_RAM4K_M123 failed.
  Checking rule #2 for bram type $__ICE40_RAM4K_M123 (variant 3):
    Bram geometry: abits=11 dbits=2 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=2026 dwaste=0 bwaste=4052 waste=4052 efficiency=1
    Rule #2 for bram type $__ICE40_RAM4K_M123 (variant 3) rejected: requirement 'min efficiency 2' not met.
  No acceptable bram resources found.
Processing rainbow.params:
  Properties: ports=1 bits=544 rports=1 wports=0 dbits=8 abits=7 words=68
  Checking rule #1 for bram type $__ICE40_RAM4K_M0 (variant 1):
    Bram geometry: abits=8 dbits=16 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M0: awaste=188 dwaste=8 bwaste=3552 waste=3552 efficiency=13
    Rule #1 for bram type $__ICE40_RAM4K_M0 (variant 1) accepted.
    Mapping to bram type $__ICE40_RAM4K_M0 (variant 1):
      Read port #0 is in clock domain !~async~.
        Bram port A1.1 has incompatible clock type.
        Failed to map read port #0.
    Mapping to bram type $__ICE40_RAM4K_M0 failed.
  Checking rule #2 for bram type $__ICE40_RAM4K_M123 (variant 1):
    Bram geometry: abits=9 dbits=8 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=444 dwaste=0 bwaste=3552 waste=3552 efficiency=13
    Rule #2 for bram type $__ICE40_RAM4K_M123 (variant 1) accepted.
    Mapping to bram type $__ICE40_RAM4K_M123 (variant 1):
      Read port #0 is in clock domain !~async~.
        Bram port A1.1 has incompatible clock type.
        Failed to map read port #0.
    Mapping to bram type $__ICE40_RAM4K_M123 failed.
  Checking rule #2 for bram type $__ICE40_RAM4K_M123 (variant 2):
    Bram geometry: abits=10 dbits=4 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=956 dwaste=0 bwaste=3824 waste=3824 efficiency=6
    Rule #2 for bram type $__ICE40_RAM4K_M123 (variant 2) accepted.
    Mapping to bram type $__ICE40_RAM4K_M123 (variant 2):
      Read port #0 is in clock domain !~async~.
        Bram port A1.1 has incompatible clock type.
        Failed to map read port #0.
    Mapping to bram type $__ICE40_RAM4K_M123 failed.
  Checking rule #2 for bram type $__ICE40_RAM4K_M123 (variant 3):
    Bram geometry: abits=11 dbits=2 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=1980 dwaste=0 bwaste=3960 waste=3960 efficiency=3
    Rule #2 for bram type $__ICE40_RAM4K_M123 (variant 3) accepted.
    Mapping to bram type $__ICE40_RAM4K_M123 (variant 3):
      Read port #0 is in clock domain !~async~.
        Bram port A1.1 has incompatible clock type.
        Failed to map read port #0.
    Mapping to bram type $__ICE40_RAM4K_M123 failed.
  No acceptable bram resources found.

2.25. Executing TECHMAP pass (map to technology primitives).

2.25.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/brams_map.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/brams_map.v' to AST representation.
Generating RTLIL representation for module `\$__ICE40_RAM4K'.
Generating RTLIL representation for module `\$__ICE40_RAM4K_M0'.
Generating RTLIL representation for module `\$__ICE40_RAM4K_M123'.
Successfully finished Verilog frontend.

2.25.2. Continuing TECHMAP pass.
No more expansions possible.

2.26. Executing ICE40_BRAMINIT pass.

2.27. Executing OPT pass (performing simple optimizations).

2.27.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module rainbow.
<suppressed ~1 debug messages>

2.27.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\rainbow'.
Removed a total of 0 cells.

2.27.3. Executing OPT_RMDFF pass (remove dff with constant values).

2.27.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \rainbow..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

2.27.5. Finished fast OPT passes.

2.28. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).
Mapping memory cell \cmd in module \rainbow:
  created 22 $dff cells and 0 static cells of width 8.
  read interface: 0 $dff and 31 $mux cells.
  write interface: 0 write mux blocks.
Mapping memory cell \params in module \rainbow:
  created 68 $dff cells and 0 static cells of width 8.
  read interface: 0 $dff and 127 $mux cells.
  write interface: 0 write mux blocks.

2.29. Executing OPT pass (performing simple optimizations).

2.29.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module rainbow.
<suppressed ~141 debug messages>

2.29.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\rainbow'.
Removed a total of 0 cells.

2.29.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \rainbow..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~17 debug messages>

2.29.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \rainbow.
    Consolidated identical input bits for $pmux cell $procmux$561:
      Old ports: A=14'00000000000000, B=98'00000000000110000000000000110000000000001000000000010000000000000000010000000000010011001000000000, Y=$procmux$561_Y
      New ports: A=5'00000, B=35'00110000110001001000000010010010000, Y={ $procmux$561_Y [9] $procmux$561_Y [4] $procmux$561_Y [2:0] }
      New connections: { $procmux$561_Y [13:10] $procmux$561_Y [8:5] $procmux$561_Y [3] } = { $procmux$561_Y [9] $procmux$561_Y [9] 7'0000000 }
    Consolidated identical input bits for $mux cell $procmux$700:
      Old ports: A=3'100, B=3'011, Y=$auto$wreduce.cc:455:run$923 [2:0]
      New ports: A=2'10, B=2'01, Y={ $auto$wreduce.cc:455:run$923 [2] $auto$wreduce.cc:455:run$923 [0] }
      New connections: $auto$wreduce.cc:455:run$923 [1] = $auto$wreduce.cc:455:run$923 [0]
    Consolidated identical input bits for $mux cell $procmux$707:
      Old ports: A=4'0110, B=4'1110, Y=$auto$wreduce.cc:455:run$924 [3:0]
      New ports: A=1'0, B=1'1, Y=$auto$wreduce.cc:455:run$924 [3]
      New connections: $auto$wreduce.cc:455:run$924 [2:0] = 3'110
    Consolidated identical input bits for $mux cell $procmux$712:
      Old ports: A=5'01100, B=5'10111, Y=$auto$wreduce.cc:455:run$925 [4:0]
      New ports: A=2'10, B=2'01, Y={ $auto$wreduce.cc:455:run$925 [3] $auto$wreduce.cc:455:run$925 [0] }
      New connections: { $auto$wreduce.cc:455:run$925 [4] $auto$wreduce.cc:455:run$925 [2:1] } = { $auto$wreduce.cc:455:run$925 [0] 1'1 $auto$wreduce.cc:455:run$925 [0] }
    Consolidated identical input bits for $mux cell $procmux$725:
      Old ports: A=3'011, B=3'101, Y=$auto$wreduce.cc:455:run$929 [2:0]
      New ports: A=2'01, B=2'10, Y=$auto$wreduce.cc:455:run$929 [2:1]
      New connections: $auto$wreduce.cc:455:run$929 [0] = 1'1
    Consolidated identical input bits for $mux cell $procmux$731:
      Old ports: A={ 1'0 $auto$wreduce.cc:455:run$930 [4:0] }, B=6'010100, Y=$procmux$731_Y
      New ports: A=$auto$wreduce.cc:455:run$930 [4:0], B=5'10100, Y=$procmux$731_Y [4:0]
      New connections: $procmux$731_Y [5] = 1'0
    Consolidated identical input bits for $mux cell $procmux$750:
      Old ports: A=4'1010, B=4'0110, Y=$auto$wreduce.cc:455:run$932 [3:0]
      New ports: A=2'10, B=2'01, Y=$auto$wreduce.cc:455:run$932 [3:2]
      New connections: $auto$wreduce.cc:455:run$932 [1:0] = 2'10
    Consolidated identical input bits for $mux cell $procmux$754:
      Old ports: A=4'0111, B=4'1010, Y=$auto$wreduce.cc:455:run$933 [3:0]
      New ports: A=2'01, B=2'10, Y={ $auto$wreduce.cc:455:run$933 [3] $auto$wreduce.cc:455:run$933 [0] }
      New connections: $auto$wreduce.cc:455:run$933 [2:1] = { $auto$wreduce.cc:455:run$933 [0] 1'1 }
    Consolidated identical input bits for $mux cell $procmux$758:
      Old ports: A=2'10, B=2'00, Y=$auto$wreduce.cc:455:run$934 [1:0]
      New ports: A=1'1, B=1'0, Y=$auto$wreduce.cc:455:run$934 [1]
      New connections: $auto$wreduce.cc:455:run$934 [0] = 1'0
    Consolidated identical input bits for $mux cell $procmux$765:
      Old ports: A=2'10, B=2'00, Y=$auto$wreduce.cc:455:run$936 [1:0]
      New ports: A=1'1, B=1'0, Y=$auto$wreduce.cc:455:run$936 [1]
      New connections: $auto$wreduce.cc:455:run$936 [0] = 1'0
    Consolidated identical input bits for $mux cell $procmux$770:
      Old ports: A={ 2'00 $auto$wreduce.cc:455:run$935 [3:0] }, B={ 2'00 $auto$wreduce.cc:455:run$937 [3:0] }, Y=$procmux$770_Y
      New ports: A=$auto$wreduce.cc:455:run$935 [3:0], B=$auto$wreduce.cc:455:run$937 [3:0], Y=$procmux$770_Y [3:0]
      New connections: $procmux$770_Y [5:4] = 2'00
  Optimizing cells in module \rainbow.
    Consolidated identical input bits for $mux cell $procmux$715:
      Old ports: A=$auto$wreduce.cc:455:run$925 [4:0], B=5'10101, Y=$auto$wreduce.cc:455:run$926 [4:0]
      New ports: A={ $auto$wreduce.cc:455:run$925 [3] $auto$wreduce.cc:455:run$925 [0] $auto$wreduce.cc:455:run$925 [0] }, B=3'001, Y={ $auto$wreduce.cc:455:run$926 [3] $auto$wreduce.cc:455:run$926 [1:0] }
      New connections: { $auto$wreduce.cc:455:run$926 [4] $auto$wreduce.cc:455:run$926 [2] } = { $auto$wreduce.cc:455:run$926 [0] 1'1 }
    Consolidated identical input bits for $mux cell $procmux$728:
      Old ports: A={ 2'01 $auto$wreduce.cc:455:run$929 [2:0] }, B=5'10110, Y=$auto$wreduce.cc:455:run$930 [4:0]
      New ports: A={ 1'0 $auto$wreduce.cc:455:run$929 [2:1] 1'1 }, B=4'1110, Y={ $auto$wreduce.cc:455:run$930 [4] $auto$wreduce.cc:455:run$930 [2:0] }
      New connections: $auto$wreduce.cc:455:run$930 [3] = $auto$wreduce.cc:455:run$930 [0]
    Consolidated identical input bits for $mux cell $procmux$734:
      Old ports: A=$procmux$731_Y, B=6'010010, Y=$procmux$734_Y
      New ports: A=$procmux$731_Y [4:0], B=5'10010, Y=$procmux$734_Y [4:0]
      New connections: $procmux$734_Y [5] = 1'0
    Consolidated identical input bits for $mux cell $procmux$761:
      Old ports: A={ 2'10 $auto$wreduce.cc:455:run$934 [1:0] }, B=4'0111, Y=$auto$wreduce.cc:455:run$935 [3:0]
      New ports: A={ 1'1 $auto$wreduce.cc:455:run$934 [1] 1'0 }, B=3'011, Y={ $auto$wreduce.cc:455:run$935 [3] $auto$wreduce.cc:455:run$935 [1:0] }
      New connections: $auto$wreduce.cc:455:run$935 [2] = $auto$wreduce.cc:455:run$935 [0]
    Consolidated identical input bits for $mux cell $procmux$768:
      Old ports: A={ 2'10 $auto$wreduce.cc:455:run$936 [1:0] }, B=4'0111, Y=$auto$wreduce.cc:455:run$937 [3:0]
      New ports: A={ 1'1 $auto$wreduce.cc:455:run$936 [1] 1'0 }, B=3'011, Y={ $auto$wreduce.cc:455:run$937 [3] $auto$wreduce.cc:455:run$937 [1:0] }
      New connections: $auto$wreduce.cc:455:run$937 [2] = $auto$wreduce.cc:455:run$937 [0]
  Optimizing cells in module \rainbow.
    Consolidated identical input bits for $mux cell $procmux$718:
      Old ports: A=$auto$wreduce.cc:455:run$926 [4:0], B=5'10011, Y=$auto$wreduce.cc:455:run$927 [4:0]
      New ports: A={ $auto$wreduce.cc:455:run$926 [3] 1'1 $auto$wreduce.cc:455:run$926 [1:0] }, B=4'0011, Y=$auto$wreduce.cc:455:run$927 [3:0]
      New connections: $auto$wreduce.cc:455:run$927 [4] = $auto$wreduce.cc:455:run$927 [0]
    Consolidated identical input bits for $mux cell $procmux$731:
      Old ports: A=$auto$wreduce.cc:455:run$930 [4:0], B=5'10100, Y=$procmux$731_Y [4:0]
      New ports: A={ $auto$wreduce.cc:455:run$930 [4] $auto$wreduce.cc:455:run$930 [2:0] }, B=4'1100, Y={ $procmux$731_Y [4] $procmux$731_Y [2:0] }
      New connections: $procmux$731_Y [3] = $procmux$731_Y [0]
    Consolidated identical input bits for $mux cell $procmux$737:
      Old ports: A=$procmux$734_Y, B=6'001111, Y=$procmux$737_Y
      New ports: A=$procmux$734_Y [4:0], B=5'01111, Y=$procmux$737_Y [4:0]
      New connections: $procmux$737_Y [5] = 1'0
    Consolidated identical input bits for $mux cell $procmux$770:
      Old ports: A=$auto$wreduce.cc:455:run$935 [3:0], B=$auto$wreduce.cc:455:run$937 [3:0], Y=$procmux$770_Y [3:0]
      New ports: A={ $auto$wreduce.cc:455:run$935 [3] $auto$wreduce.cc:455:run$935 [1:0] }, B={ $auto$wreduce.cc:455:run$937 [3] $auto$wreduce.cc:455:run$937 [1:0] }, Y={ $procmux$770_Y [3] $procmux$770_Y [1:0] }
      New connections: $procmux$770_Y [2] = $procmux$770_Y [0]
  Optimizing cells in module \rainbow.
    Consolidated identical input bits for $mux cell $procmux$734:
      Old ports: A=$procmux$731_Y [4:0], B=5'10010, Y=$procmux$734_Y [4:0]
      New ports: A={ $procmux$731_Y [4] $procmux$731_Y [2:0] }, B=4'1010, Y={ $procmux$734_Y [4] $procmux$734_Y [2:0] }
      New connections: $procmux$734_Y [3] = $procmux$734_Y [0]
    Consolidated identical input bits for $mux cell $procmux$740:
      Old ports: A=$procmux$737_Y, B=6'010000, Y=$procmux$740_Y
      New ports: A=$procmux$737_Y [4:0], B=5'10000, Y=$procmux$740_Y [4:0]
      New connections: $procmux$740_Y [5] = 1'0
  Optimizing cells in module \rainbow.
    Consolidated identical input bits for $mux cell $procmux$737:
      Old ports: A=$procmux$734_Y [4:0], B=5'01111, Y=$procmux$737_Y [4:0]
      New ports: A={ $procmux$734_Y [4] $procmux$734_Y [2:0] }, B=4'0111, Y={ $procmux$737_Y [4] $procmux$737_Y [2:0] }
      New connections: $procmux$737_Y [3] = $procmux$737_Y [0]
    Consolidated identical input bits for $mux cell $procmux$742:
      Old ports: A=$procmux$740_Y, B={ 1'0 $auto$wreduce.cc:455:run$928 [4:0] }, Y=$procmux$742_Y
      New ports: A=$procmux$740_Y [4:0], B=$auto$wreduce.cc:455:run$928 [4:0], Y=$procmux$742_Y [4:0]
      New connections: $procmux$742_Y [5] = 1'0
  Optimizing cells in module \rainbow.
    Consolidated identical input bits for $mux cell $procmux$740:
      Old ports: A=$procmux$737_Y [4:0], B=5'10000, Y=$procmux$740_Y [4:0]
      New ports: A={ $procmux$737_Y [4] $procmux$737_Y [2:0] }, B=4'1000, Y={ $procmux$740_Y [4] $procmux$740_Y [2:0] }
      New connections: $procmux$740_Y [3] = $procmux$740_Y [0]
  Optimizing cells in module \rainbow.
Performed a total of 25 changes.

2.29.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\rainbow'.
Removed a total of 0 cells.

2.29.6. Executing OPT_RMDFF pass (remove dff with constant values).
Removing $memory\params[67]$1335 ($dff) from module rainbow.
Removing $memory\params[66]$1333 ($dff) from module rainbow.
Removing $memory\params[65]$1331 ($dff) from module rainbow.
Removing $memory\params[64]$1329 ($dff) from module rainbow.
Removing $memory\params[63]$1327 ($dff) from module rainbow.
Removing $memory\params[62]$1325 ($dff) from module rainbow.
Removing $memory\params[61]$1323 ($dff) from module rainbow.
Removing $memory\params[60]$1321 ($dff) from module rainbow.
Removing $memory\params[59]$1319 ($dff) from module rainbow.
Removing $memory\params[58]$1317 ($dff) from module rainbow.
Removing $memory\params[57]$1315 ($dff) from module rainbow.
Removing $memory\params[56]$1313 ($dff) from module rainbow.
Removing $memory\params[55]$1311 ($dff) from module rainbow.
Removing $memory\params[54]$1309 ($dff) from module rainbow.
Removing $memory\params[53]$1307 ($dff) from module rainbow.
Removing $memory\params[52]$1305 ($dff) from module rainbow.
Removing $memory\params[51]$1303 ($dff) from module rainbow.
Removing $memory\params[50]$1301 ($dff) from module rainbow.
Removing $memory\params[49]$1299 ($dff) from module rainbow.
Removing $memory\params[48]$1297 ($dff) from module rainbow.
Removing $memory\params[47]$1295 ($dff) from module rainbow.
Removing $memory\params[46]$1293 ($dff) from module rainbow.
Removing $memory\params[45]$1291 ($dff) from module rainbow.
Removing $memory\params[44]$1289 ($dff) from module rainbow.
Removing $memory\params[43]$1287 ($dff) from module rainbow.
Removing $memory\params[42]$1285 ($dff) from module rainbow.
Removing $memory\params[41]$1283 ($dff) from module rainbow.
Removing $memory\params[40]$1281 ($dff) from module rainbow.
Removing $memory\params[39]$1279 ($dff) from module rainbow.
Removing $memory\params[38]$1277 ($dff) from module rainbow.
Removing $memory\params[37]$1275 ($dff) from module rainbow.
Removing $memory\params[36]$1273 ($dff) from module rainbow.
Removing $memory\params[35]$1271 ($dff) from module rainbow.
Removing $memory\params[34]$1269 ($dff) from module rainbow.
Removing $memory\params[33]$1267 ($dff) from module rainbow.
Removing $memory\params[32]$1265 ($dff) from module rainbow.
Removing $memory\params[31]$1263 ($dff) from module rainbow.
Removing $memory\params[30]$1261 ($dff) from module rainbow.
Removing $memory\params[29]$1259 ($dff) from module rainbow.
Removing $memory\params[28]$1257 ($dff) from module rainbow.
Removing $memory\params[27]$1255 ($dff) from module rainbow.
Removing $memory\params[26]$1253 ($dff) from module rainbow.
Removing $memory\params[25]$1251 ($dff) from module rainbow.
Removing $memory\params[24]$1249 ($dff) from module rainbow.
Removing $memory\params[23]$1247 ($dff) from module rainbow.
Removing $memory\params[22]$1245 ($dff) from module rainbow.
Removing $memory\params[21]$1243 ($dff) from module rainbow.
Removing $memory\params[20]$1241 ($dff) from module rainbow.
Removing $memory\params[19]$1239 ($dff) from module rainbow.
Removing $memory\params[18]$1237 ($dff) from module rainbow.
Removing $memory\params[17]$1235 ($dff) from module rainbow.
Removing $memory\params[16]$1233 ($dff) from module rainbow.
Removing $memory\params[15]$1231 ($dff) from module rainbow.
Removing $memory\params[14]$1229 ($dff) from module rainbow.
Removing $memory\params[13]$1227 ($dff) from module rainbow.
Removing $memory\params[12]$1225 ($dff) from module rainbow.
Removing $memory\params[11]$1223 ($dff) from module rainbow.
Removing $memory\params[10]$1221 ($dff) from module rainbow.
Removing $memory\params[9]$1219 ($dff) from module rainbow.
Removing $memory\params[8]$1217 ($dff) from module rainbow.
Removing $memory\params[7]$1215 ($dff) from module rainbow.
Removing $memory\params[6]$1213 ($dff) from module rainbow.
Removing $memory\params[5]$1211 ($dff) from module rainbow.
Removing $memory\params[4]$1209 ($dff) from module rainbow.
Removing $memory\params[3]$1207 ($dff) from module rainbow.
Removing $memory\params[2]$1205 ($dff) from module rainbow.
Removing $memory\params[1]$1203 ($dff) from module rainbow.
Removing $memory\params[0]$1201 ($dff) from module rainbow.
Removing $memory\cmd[21]$1106 ($dff) from module rainbow.
Removing $memory\cmd[20]$1104 ($dff) from module rainbow.
Removing $memory\cmd[19]$1102 ($dff) from module rainbow.
Removing $memory\cmd[18]$1100 ($dff) from module rainbow.
Removing $memory\cmd[17]$1098 ($dff) from module rainbow.
Removing $memory\cmd[16]$1096 ($dff) from module rainbow.
Removing $memory\cmd[15]$1094 ($dff) from module rainbow.
Removing $memory\cmd[14]$1092 ($dff) from module rainbow.
Removing $memory\cmd[13]$1090 ($dff) from module rainbow.
Removing $memory\cmd[12]$1088 ($dff) from module rainbow.
Removing $memory\cmd[11]$1086 ($dff) from module rainbow.
Removing $memory\cmd[10]$1084 ($dff) from module rainbow.
Removing $memory\cmd[9]$1082 ($dff) from module rainbow.
Removing $memory\cmd[8]$1080 ($dff) from module rainbow.
Removing $memory\cmd[7]$1078 ($dff) from module rainbow.
Removing $memory\cmd[6]$1076 ($dff) from module rainbow.
Removing $memory\cmd[5]$1074 ($dff) from module rainbow.
Removing $memory\cmd[4]$1072 ($dff) from module rainbow.
Removing $memory\cmd[3]$1070 ($dff) from module rainbow.
Removing $memory\cmd[2]$1068 ($dff) from module rainbow.
Removing $memory\cmd[1]$1066 ($dff) from module rainbow.
Removing $memory\cmd[0]$1064 ($dff) from module rainbow.
Replaced 90 DFF cells.

2.29.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \rainbow..
Removed 0 unused cells and 314 unused wires.
<suppressed ~1 debug messages>

2.29.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module rainbow.
<suppressed ~2 debug messages>

2.29.9. Rerunning OPT passes. (Maybe there is more to do..)

2.29.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \rainbow..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~17 debug messages>

2.29.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \rainbow.
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][4][0]$1153:
      Old ports: A=8'00010001, B=8'10110001, Y=$memory\cmd$rdmux[0][3][0]$a$1130
      New ports: A=1'0, B=1'1, Y=$memory\cmd$rdmux[0][3][0]$a$1130 [5]
      New connections: { $memory\cmd$rdmux[0][3][0]$a$1130 [7:6] $memory\cmd$rdmux[0][3][0]$a$1130 [4:0] } = { $memory\cmd$rdmux[0][3][0]$a$1130 [5] 6'010001 }
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][4][10]$1183:
      Old ports: A=8'00101100, B=8'00000000, Y=$memory\cmd$rdmux[0][3][5]$a$1145
      New ports: A=1'1, B=1'0, Y=$memory\cmd$rdmux[0][3][5]$a$1145 [2]
      New connections: { $memory\cmd$rdmux[0][3][5]$a$1145 [7:3] $memory\cmd$rdmux[0][3][5]$a$1145 [1:0] } = { 2'00 $memory\cmd$rdmux[0][3][5]$a$1145 [2] 1'0 $memory\cmd$rdmux[0][3][5]$a$1145 [2] 2'00 }
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][4][1]$1156:
      Old ports: A=8'10110010, B=8'10110011, Y=$memory\cmd$rdmux[0][3][0]$b$1131
      New ports: A=1'0, B=1'1, Y=$memory\cmd$rdmux[0][3][0]$b$1131 [0]
      New connections: $memory\cmd$rdmux[0][3][0]$b$1131 [7:1] = 7'1011001
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][4][2]$1159:
      Old ports: A=8'10110100, B=8'11000000, Y=$memory\cmd$rdmux[0][3][1]$a$1133
      New ports: A=2'01, B=2'10, Y={ $memory\cmd$rdmux[0][3][1]$a$1133 [6] $memory\cmd$rdmux[0][3][1]$a$1133 [2] }
      New connections: { $memory\cmd$rdmux[0][3][1]$a$1133 [7] $memory\cmd$rdmux[0][3][1]$a$1133 [5:3] $memory\cmd$rdmux[0][3][1]$a$1133 [1:0] } = { 1'1 $memory\cmd$rdmux[0][3][1]$a$1133 [2] $memory\cmd$rdmux[0][3][1]$a$1133 [2] 3'000 }
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][4][3]$1162:
      Old ports: A=8'11000001, B=8'11000010, Y=$memory\cmd$rdmux[0][3][1]$b$1134
      New ports: A=2'01, B=2'10, Y=$memory\cmd$rdmux[0][3][1]$b$1134 [1:0]
      New connections: $memory\cmd$rdmux[0][3][1]$b$1134 [7:2] = 6'110000
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][4][4]$1165:
      Old ports: A=8'11000011, B=8'11000100, Y=$memory\cmd$rdmux[0][3][2]$a$1136
      New ports: A=2'01, B=2'10, Y={ $memory\cmd$rdmux[0][3][2]$a$1136 [2] $memory\cmd$rdmux[0][3][2]$a$1136 [0] }
      New connections: { $memory\cmd$rdmux[0][3][2]$a$1136 [7:3] $memory\cmd$rdmux[0][3][2]$a$1136 [1] } = { 5'11000 $memory\cmd$rdmux[0][3][2]$a$1136 [0] }
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][4][5]$1168:
      Old ports: A=8'11000101, B=8'11100000, Y=$memory\cmd$rdmux[0][3][2]$b$1137
      New ports: A=2'01, B=2'10, Y={ $memory\cmd$rdmux[0][3][2]$b$1137 [5] $memory\cmd$rdmux[0][3][2]$b$1137 [0] }
      New connections: { $memory\cmd$rdmux[0][3][2]$b$1137 [7:6] $memory\cmd$rdmux[0][3][2]$b$1137 [4:1] } = { 4'1100 $memory\cmd$rdmux[0][3][2]$b$1137 [0] 1'0 }
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][4][6]$1171:
      Old ports: A=8'11100001, B=8'11111100, Y=$memory\cmd$rdmux[0][3][3]$a$1139
      New ports: A=2'01, B=2'10, Y={ $memory\cmd$rdmux[0][3][3]$a$1139 [2] $memory\cmd$rdmux[0][3][3]$a$1139 [0] }
      New connections: { $memory\cmd$rdmux[0][3][3]$a$1139 [7:3] $memory\cmd$rdmux[0][3][3]$a$1139 [1] } = { 3'111 $memory\cmd$rdmux[0][3][3]$a$1139 [2] $memory\cmd$rdmux[0][3][3]$a$1139 [2] 1'0 }
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][4][7]$1174:
      Old ports: A=8'00111010, B=8'00110110, Y=$memory\cmd$rdmux[0][3][3]$b$1140
      New ports: A=2'10, B=2'01, Y=$memory\cmd$rdmux[0][3][3]$b$1140 [3:2]
      New connections: { $memory\cmd$rdmux[0][3][3]$b$1140 [7:4] $memory\cmd$rdmux[0][3][3]$b$1140 [1:0] } = 6'001110
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][4][8]$1177:
      Old ports: A=8'00100001, B=8'00101001, Y=$memory\cmd$rdmux[0][3][4]$a$1142
      New ports: A=1'0, B=1'1, Y=$memory\cmd$rdmux[0][3][4]$a$1142 [3]
      New connections: { $memory\cmd$rdmux[0][3][4]$a$1142 [7:4] $memory\cmd$rdmux[0][3][4]$a$1142 [2:0] } = 7'0010001
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][4][9]$1180:
      Old ports: A=8'00101010, B=8'00101011, Y=$memory\cmd$rdmux[0][3][4]$b$1143
      New ports: A=1'0, B=1'1, Y=$memory\cmd$rdmux[0][3][4]$b$1143 [0]
      New connections: $memory\cmd$rdmux[0][3][4]$b$1143 [7:1] = 7'0010101
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][0]$1526:
      Old ports: A=8'00000101, B=8'00111100, Y=$memory\params$rdmux[0][5][0]$a$1431
      New ports: A=2'01, B=2'10, Y={ $memory\params$rdmux[0][5][0]$a$1431 [3] $memory\params$rdmux[0][5][0]$a$1431 [0] }
      New connections: { $memory\params$rdmux[0][5][0]$a$1431 [7:4] $memory\params$rdmux[0][5][0]$a$1431 [2:1] } = { 2'00 $memory\params$rdmux[0][5][0]$a$1431 [3] $memory\params$rdmux[0][5][0]$a$1431 [3] 2'10 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][10]$1556:
      Old ports: A=8'01101010, B=8'10001101, Y=$memory\params$rdmux[0][5][5]$a$1446
      New ports: A=2'10, B=2'01, Y=$memory\params$rdmux[0][5][5]$a$1446 [1:0]
      New connections: $memory\params$rdmux[0][5][5]$a$1446 [7:2] = { $memory\params$rdmux[0][5][5]$a$1446 [0] $memory\params$rdmux[0][5][5]$a$1446 [1] $memory\params$rdmux[0][5][5]$a$1446 [1] 2'01 $memory\params$rdmux[0][5][5]$a$1446 [0] }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][11]$1559:
      Old ports: A=8'11101110, B=8'00001111, Y=$memory\params$rdmux[0][5][5]$b$1447
      New ports: A=2'10, B=2'01, Y={ $memory\params$rdmux[0][5][5]$b$1447 [5] $memory\params$rdmux[0][5][5]$b$1447 [0] }
      New connections: { $memory\params$rdmux[0][5][5]$b$1447 [7:6] $memory\params$rdmux[0][5][5]$b$1447 [4:1] } = { $memory\params$rdmux[0][5][5]$b$1447 [5] $memory\params$rdmux[0][5][5]$b$1447 [5] 4'0111 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][12]$1562:
      Old ports: A=8'00000111, B=8'00001110, Y=$memory\params$rdmux[0][5][6]$a$1449
      New ports: A=2'01, B=2'10, Y={ $memory\params$rdmux[0][5][6]$a$1449 [3] $memory\params$rdmux[0][5][6]$a$1449 [0] }
      New connections: { $memory\params$rdmux[0][5][6]$a$1449 [7:4] $memory\params$rdmux[0][5][6]$a$1449 [2:1] } = 6'000011
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][13]$1565:
      Old ports: A=8'00001000, B=8'00000111, Y=$memory\params$rdmux[0][5][6]$b$1450
      New ports: A=2'10, B=2'01, Y={ $memory\params$rdmux[0][5][6]$b$1450 [3] $memory\params$rdmux[0][5][6]$b$1450 [0] }
      New connections: { $memory\params$rdmux[0][5][6]$b$1450 [7:4] $memory\params$rdmux[0][5][6]$b$1450 [2:1] } = { 4'0000 $memory\params$rdmux[0][5][6]$b$1450 [0] $memory\params$rdmux[0][5][6]$b$1450 [0] }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][14]$1568:
      Old ports: A=8'00010000, B=8'00000111, Y=$memory\params$rdmux[0][5][7]$a$1452
      New ports: A=2'10, B=2'01, Y={ $memory\params$rdmux[0][5][7]$a$1452 [4] $memory\params$rdmux[0][5][7]$a$1452 [0] }
      New connections: { $memory\params$rdmux[0][5][7]$a$1452 [7:5] $memory\params$rdmux[0][5][7]$a$1452 [3:1] } = { 4'0000 $memory\params$rdmux[0][5][7]$a$1452 [0] $memory\params$rdmux[0][5][7]$a$1452 [0] }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][15]$1571:
      Old ports: A=8'00000010, B=8'00000111, Y=$memory\params$rdmux[0][5][7]$b$1453
      New ports: A=1'0, B=1'1, Y=$memory\params$rdmux[0][5][7]$b$1453 [0]
      New connections: $memory\params$rdmux[0][5][7]$b$1453 [7:1] = { 5'00000 $memory\params$rdmux[0][5][7]$b$1453 [0] 1'1 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][16]$1574:
      Old ports: A=8'00001001, B=8'00001111, Y=$memory\params$rdmux[0][5][8]$a$1455
      New ports: A=1'0, B=1'1, Y=$memory\params$rdmux[0][5][8]$a$1455 [1]
      New connections: { $memory\params$rdmux[0][5][8]$a$1455 [7:2] $memory\params$rdmux[0][5][8]$a$1455 [0] } = { 5'00001 $memory\params$rdmux[0][5][8]$a$1455 [1] 1'1 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][17]$1577:
      Old ports: A=8'00100101, B=8'00110110, Y=$memory\params$rdmux[0][5][8]$b$1456
      New ports: A=2'01, B=2'10, Y=$memory\params$rdmux[0][5][8]$b$1456 [1:0]
      New connections: $memory\params$rdmux[0][5][8]$b$1456 [7:2] = { 3'001 $memory\params$rdmux[0][5][8]$b$1456 [1] 2'01 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][18]$1580:
      Old ports: A=8'00000000, B=8'00001000, Y=$memory\params$rdmux[0][5][9]$a$1458
      New ports: A=1'0, B=1'1, Y=$memory\params$rdmux[0][5][9]$a$1458 [3]
      New connections: { $memory\params$rdmux[0][5][9]$a$1458 [7:4] $memory\params$rdmux[0][5][9]$a$1458 [2:0] } = 7'0000000
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][19]$1583:
      Old ports: A=8'00000100, B=8'00010000, Y=$memory\params$rdmux[0][5][9]$b$1459
      New ports: A=2'01, B=2'10, Y={ $memory\params$rdmux[0][5][9]$b$1459 [4] $memory\params$rdmux[0][5][9]$b$1459 [2] }
      New connections: { $memory\params$rdmux[0][5][9]$b$1459 [7:5] $memory\params$rdmux[0][5][9]$b$1459 [3] $memory\params$rdmux[0][5][9]$b$1459 [1:0] } = 6'000000
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][1]$1529:
      Old ports: A=8'00111100, B=8'00000101, Y=$memory\params$rdmux[0][5][0]$b$1432
      New ports: A=2'10, B=2'01, Y={ $memory\params$rdmux[0][5][0]$b$1432 [3] $memory\params$rdmux[0][5][0]$b$1432 [0] }
      New connections: { $memory\params$rdmux[0][5][0]$b$1432 [7:4] $memory\params$rdmux[0][5][0]$b$1432 [2:1] } = { 2'00 $memory\params$rdmux[0][5][0]$b$1432 [3] $memory\params$rdmux[0][5][0]$b$1432 [3] 2'10 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][20]$1586:
      Old ports: A=8'00001010, B=8'00001101, Y=$memory\params$rdmux[0][5][10]$a$1461
      New ports: A=2'10, B=2'01, Y=$memory\params$rdmux[0][5][10]$a$1461 [1:0]
      New connections: $memory\params$rdmux[0][5][10]$a$1461 [7:2] = { 5'00001 $memory\params$rdmux[0][5][10]$a$1461 [0] }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][21]$1589:
      Old ports: A=8'00001000, B=8'00000111, Y=$memory\params$rdmux[0][5][10]$b$1462
      New ports: A=2'10, B=2'01, Y={ $memory\params$rdmux[0][5][10]$b$1462 [3] $memory\params$rdmux[0][5][10]$b$1462 [0] }
      New connections: { $memory\params$rdmux[0][5][10]$b$1462 [7:4] $memory\params$rdmux[0][5][10]$b$1462 [2:1] } = { 4'0000 $memory\params$rdmux[0][5][10]$b$1462 [0] $memory\params$rdmux[0][5][10]$b$1462 [0] }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][22]$1592:
      Old ports: A=8'00001111, B=8'00000111, Y=$memory\params$rdmux[0][5][11]$a$1464
      New ports: A=1'1, B=1'0, Y=$memory\params$rdmux[0][5][11]$a$1464 [3]
      New connections: { $memory\params$rdmux[0][5][11]$a$1464 [7:4] $memory\params$rdmux[0][5][11]$a$1464 [2:0] } = 7'0000111
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][23]$1595:
      Old ports: A=8'00000010, B=8'00000111, Y=$memory\params$rdmux[0][5][11]$b$1465
      New ports: A=1'0, B=1'1, Y=$memory\params$rdmux[0][5][11]$b$1465 [0]
      New connections: $memory\params$rdmux[0][5][11]$b$1465 [7:1] = { 5'00000 $memory\params$rdmux[0][5][11]$b$1465 [0] 1'1 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][24]$1598:
      Old ports: A=8'00001001, B=8'00001111, Y=$memory\params$rdmux[0][5][12]$a$1467
      New ports: A=1'0, B=1'1, Y=$memory\params$rdmux[0][5][12]$a$1467 [1]
      New connections: { $memory\params$rdmux[0][5][12]$a$1467 [7:2] $memory\params$rdmux[0][5][12]$a$1467 [0] } = { 5'00001 $memory\params$rdmux[0][5][12]$a$1467 [1] 1'1 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][25]$1601:
      Old ports: A=8'00100101, B=8'00110101, Y=$memory\params$rdmux[0][5][12]$b$1468
      New ports: A=1'0, B=1'1, Y=$memory\params$rdmux[0][5][12]$b$1468 [4]
      New connections: { $memory\params$rdmux[0][5][12]$b$1468 [7:5] $memory\params$rdmux[0][5][12]$b$1468 [3:0] } = 7'0010101
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][26]$1604:
      Old ports: A=8'00000000, B=8'00001001, Y=$memory\params$rdmux[0][5][13]$a$1470
      New ports: A=1'0, B=1'1, Y=$memory\params$rdmux[0][5][13]$a$1470 [0]
      New connections: $memory\params$rdmux[0][5][13]$a$1470 [7:1] = { 4'0000 $memory\params$rdmux[0][5][13]$a$1470 [0] 2'00 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][27]$1607:
      Old ports: A=8'00000100, B=8'00010000, Y=$memory\params$rdmux[0][5][13]$b$1471
      New ports: A=2'01, B=2'10, Y={ $memory\params$rdmux[0][5][13]$b$1471 [4] $memory\params$rdmux[0][5][13]$b$1471 [2] }
      New connections: { $memory\params$rdmux[0][5][13]$b$1471 [7:5] $memory\params$rdmux[0][5][13]$b$1471 [3] $memory\params$rdmux[0][5][13]$b$1471 [1:0] } = 6'000000
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][28]$1610:
      Old ports: A=8'10000000, B=8'00000101, Y=$memory\params$rdmux[0][5][14]$a$1473
      New ports: A=2'10, B=2'01, Y={ $memory\params$rdmux[0][5][14]$a$1473 [7] $memory\params$rdmux[0][5][14]$a$1473 [0] }
      New connections: $memory\params$rdmux[0][5][14]$a$1473 [6:1] = { 4'0000 $memory\params$rdmux[0][5][14]$a$1473 [0] 1'0 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][29]$1613:
      Old ports: A=8'01111000, B=8'00000000, Y=$memory\params$rdmux[0][5][14]$b$1474
      New ports: A=1'1, B=1'0, Y=$memory\params$rdmux[0][5][14]$b$1474 [3]
      New connections: { $memory\params$rdmux[0][5][14]$b$1474 [7:4] $memory\params$rdmux[0][5][14]$b$1474 [2:0] } = { 1'0 $memory\params$rdmux[0][5][14]$b$1474 [3] $memory\params$rdmux[0][5][14]$b$1474 [3] $memory\params$rdmux[0][5][14]$b$1474 [3] 3'000 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][30]$1616:
      Old ports: A=8'00000001, B=8'00000000, Y=$memory\params$rdmux[0][5][15]$a$1476
      New ports: A=1'1, B=1'0, Y=$memory\params$rdmux[0][5][15]$a$1476 [0]
      New connections: $memory\params$rdmux[0][5][15]$a$1476 [7:1] = 7'0000000
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][31]$1619:
      Old ports: A=8'10100000, B=8'00000000, Y=$memory\params$rdmux[0][5][15]$b$1477
      New ports: A=1'1, B=1'0, Y=$memory\params$rdmux[0][5][15]$b$1477 [5]
      New connections: { $memory\params$rdmux[0][5][15]$b$1477 [7:6] $memory\params$rdmux[0][5][15]$b$1477 [4:0] } = { $memory\params$rdmux[0][5][15]$b$1477 [5] 6'000000 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][32]$1622:
      Old ports: A=8'00011010, B=8'00000000, Y=$memory\params$rdmux[0][5][16]$a$1479
      New ports: A=1'1, B=1'0, Y=$memory\params$rdmux[0][5][16]$a$1479 [1]
      New connections: { $memory\params$rdmux[0][5][16]$a$1479 [7:2] $memory\params$rdmux[0][5][16]$a$1479 [0] } = { 3'000 $memory\params$rdmux[0][5][16]$a$1479 [1] $memory\params$rdmux[0][5][16]$a$1479 [1] 2'00 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][33]$1625:
      Old ports: A=8'01101001, B=8'11110000, Y=$memory\params$rdmux[0][5][16]$b$1480
      New ports: A=2'01, B=2'10, Y={ $memory\params$rdmux[0][5][16]$b$1480 [4] $memory\params$rdmux[0][5][16]$b$1480 [0] }
      New connections: { $memory\params$rdmux[0][5][16]$b$1480 [7:5] $memory\params$rdmux[0][5][16]$b$1480 [3:1] } = { $memory\params$rdmux[0][5][16]$b$1480 [4] 2'11 $memory\params$rdmux[0][5][16]$b$1480 [0] 2'00 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][3]$1535:
      Old ports: A=8'00000101, B=8'00111100, Y=$memory\params$rdmux[0][5][1]$b$1435
      New ports: A=2'01, B=2'10, Y={ $memory\params$rdmux[0][5][1]$b$1435 [3] $memory\params$rdmux[0][5][1]$b$1435 [0] }
      New connections: { $memory\params$rdmux[0][5][1]$b$1435 [7:4] $memory\params$rdmux[0][5][1]$b$1435 [2:1] } = { 2'00 $memory\params$rdmux[0][5][1]$b$1435 [3] $memory\params$rdmux[0][5][1]$b$1435 [3] 2'10 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][4]$1538:
      Old ports: A=8'00111100, B=8'00000101, Y=$memory\params$rdmux[0][5][2]$a$1437
      New ports: A=2'10, B=2'01, Y={ $memory\params$rdmux[0][5][2]$a$1437 [3] $memory\params$rdmux[0][5][2]$a$1437 [0] }
      New connections: { $memory\params$rdmux[0][5][2]$a$1437 [7:4] $memory\params$rdmux[0][5][2]$a$1437 [2:1] } = { 2'00 $memory\params$rdmux[0][5][2]$a$1437 [3] $memory\params$rdmux[0][5][2]$a$1437 [3] 2'10 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][6]$1544:
      Old ports: A=8'00000011, B=8'10101011, Y=$memory\params$rdmux[0][5][3]$a$1440
      New ports: A=1'0, B=1'1, Y=$memory\params$rdmux[0][5][3]$a$1440 [3]
      New connections: { $memory\params$rdmux[0][5][3]$a$1440 [7:4] $memory\params$rdmux[0][5][3]$a$1440 [2:0] } = { $memory\params$rdmux[0][5][3]$a$1440 [3] 1'0 $memory\params$rdmux[0][5][3]$a$1440 [3] 4'0011 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][7]$1547:
      Old ports: A=8'00001011, B=8'00000100, Y=$memory\params$rdmux[0][5][3]$b$1441
      New ports: A=2'01, B=2'10, Y={ $memory\params$rdmux[0][5][3]$b$1441 [2] $memory\params$rdmux[0][5][3]$b$1441 [0] }
      New connections: { $memory\params$rdmux[0][5][3]$b$1441 [7:3] $memory\params$rdmux[0][5][3]$b$1441 [1] } = { 4'0000 $memory\params$rdmux[0][5][3]$b$1441 [0] $memory\params$rdmux[0][5][3]$b$1441 [0] }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][8]$1550:
      Old ports: A=8'11000101, B=8'00001101, Y=$memory\params$rdmux[0][5][4]$a$1443
      New ports: A=2'10, B=2'01, Y={ $memory\params$rdmux[0][5][4]$a$1443 [6] $memory\params$rdmux[0][5][4]$a$1443 [3] }
      New connections: { $memory\params$rdmux[0][5][4]$a$1443 [7] $memory\params$rdmux[0][5][4]$a$1443 [5:4] $memory\params$rdmux[0][5][4]$a$1443 [2:0] } = { $memory\params$rdmux[0][5][4]$a$1443 [6] 5'00101 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][9]$1553:
      Old ports: A=8'00000000, B=8'10001101, Y=$memory\params$rdmux[0][5][4]$b$1444
      New ports: A=1'0, B=1'1, Y=$memory\params$rdmux[0][5][4]$b$1444 [0]
      New connections: $memory\params$rdmux[0][5][4]$b$1444 [7:1] = { $memory\params$rdmux[0][5][4]$b$1444 [0] 3'000 $memory\params$rdmux[0][5][4]$b$1444 [0] $memory\params$rdmux[0][5][4]$b$1444 [0] 1'0 }
  Optimizing cells in module \rainbow.
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][3][0]$1129:
      Old ports: A=$memory\cmd$rdmux[0][3][0]$a$1130, B=$memory\cmd$rdmux[0][3][0]$b$1131, Y=$memory\cmd$rdmux[0][2][0]$a$1118
      New ports: A={ $memory\cmd$rdmux[0][3][0]$a$1130 [5] 2'01 }, B={ 2'11 $memory\cmd$rdmux[0][3][0]$b$1131 [0] }, Y={ $memory\cmd$rdmux[0][2][0]$a$1118 [5] $memory\cmd$rdmux[0][2][0]$a$1118 [1:0] }
      New connections: { $memory\cmd$rdmux[0][2][0]$a$1118 [7:6] $memory\cmd$rdmux[0][2][0]$a$1118 [4:2] } = { $memory\cmd$rdmux[0][2][0]$a$1118 [5] 4'0100 }
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][3][1]$1132:
      Old ports: A=$memory\cmd$rdmux[0][3][1]$a$1133, B=$memory\cmd$rdmux[0][3][1]$b$1134, Y=$memory\cmd$rdmux[0][2][0]$b$1119
      New ports: A={ $memory\cmd$rdmux[0][3][1]$a$1133 [6] $memory\cmd$rdmux[0][3][1]$a$1133 [2] 2'00 }, B={ 2'10 $memory\cmd$rdmux[0][3][1]$b$1134 [1:0] }, Y={ $memory\cmd$rdmux[0][2][0]$b$1119 [6] $memory\cmd$rdmux[0][2][0]$b$1119 [2:0] }
      New connections: { $memory\cmd$rdmux[0][2][0]$b$1119 [7] $memory\cmd$rdmux[0][2][0]$b$1119 [5:3] } = { 1'1 $memory\cmd$rdmux[0][2][0]$b$1119 [2] $memory\cmd$rdmux[0][2][0]$b$1119 [2] 1'0 }
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][3][2]$1135:
      Old ports: A=$memory\cmd$rdmux[0][3][2]$a$1136, B=$memory\cmd$rdmux[0][3][2]$b$1137, Y=$memory\cmd$rdmux[0][2][1]$a$1121
      New ports: A={ 1'0 $memory\cmd$rdmux[0][3][2]$a$1136 [2] $memory\cmd$rdmux[0][3][2]$a$1136 [0] $memory\cmd$rdmux[0][3][2]$a$1136 [0] }, B={ $memory\cmd$rdmux[0][3][2]$b$1137 [5] $memory\cmd$rdmux[0][3][2]$b$1137 [0] 1'0 $memory\cmd$rdmux[0][3][2]$b$1137 [0] }, Y={ $memory\cmd$rdmux[0][2][1]$a$1121 [5] $memory\cmd$rdmux[0][2][1]$a$1121 [2:0] }
      New connections: { $memory\cmd$rdmux[0][2][1]$a$1121 [7:6] $memory\cmd$rdmux[0][2][1]$a$1121 [4:3] } = 4'1100
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][3][3]$1138:
      Old ports: A=$memory\cmd$rdmux[0][3][3]$a$1139, B=$memory\cmd$rdmux[0][3][3]$b$1140, Y=$memory\cmd$rdmux[0][2][1]$b$1122
      New ports: A={ 1'1 $memory\cmd$rdmux[0][3][3]$a$1139 [2] $memory\cmd$rdmux[0][3][3]$a$1139 [2] $memory\cmd$rdmux[0][3][3]$a$1139 [2] 1'0 $memory\cmd$rdmux[0][3][3]$a$1139 [0] }, B={ 2'01 $memory\cmd$rdmux[0][3][3]$b$1140 [3:2] 2'10 }, Y={ $memory\cmd$rdmux[0][2][1]$b$1122 [6] $memory\cmd$rdmux[0][2][1]$b$1122 [4:0] }
      New connections: { $memory\cmd$rdmux[0][2][1]$b$1122 [7] $memory\cmd$rdmux[0][2][1]$b$1122 [5] } = { $memory\cmd$rdmux[0][2][1]$b$1122 [6] 1'1 }
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][3][4]$1141:
      Old ports: A=$memory\cmd$rdmux[0][3][4]$a$1142, B=$memory\cmd$rdmux[0][3][4]$b$1143, Y=$memory\cmd$rdmux[0][2][2]$a$1124
      New ports: A={ $memory\cmd$rdmux[0][3][4]$a$1142 [3] 2'01 }, B={ 2'11 $memory\cmd$rdmux[0][3][4]$b$1143 [0] }, Y={ $memory\cmd$rdmux[0][2][2]$a$1124 [3] $memory\cmd$rdmux[0][2][2]$a$1124 [1:0] }
      New connections: { $memory\cmd$rdmux[0][2][2]$a$1124 [7:4] $memory\cmd$rdmux[0][2][2]$a$1124 [2] } = 5'00100
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][3][5]$1144:
      Old ports: A=$memory\cmd$rdmux[0][3][5]$a$1145, B=8'xxxxxxxx, Y=$memory\cmd$rdmux[0][2][2]$b$1125
      New ports: A={ $memory\cmd$rdmux[0][3][5]$a$1145 [2] 1'0 }, B=2'xx, Y={ $memory\cmd$rdmux[0][2][2]$b$1125 [2] $memory\cmd$rdmux[0][2][2]$b$1125 [0] }
      New connections: { $memory\cmd$rdmux[0][2][2]$b$1125 [7:3] $memory\cmd$rdmux[0][2][2]$b$1125 [1] } = { $memory\cmd$rdmux[0][2][2]$b$1125 [0] $memory\cmd$rdmux[0][2][2]$b$1125 [0] $memory\cmd$rdmux[0][2][2]$b$1125 [2] $memory\cmd$rdmux[0][2][2]$b$1125 [0] $memory\cmd$rdmux[0][2][2]$b$1125 [2] $memory\cmd$rdmux[0][2][2]$b$1125 [0] }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][0]$1430:
      Old ports: A=$memory\params$rdmux[0][5][0]$a$1431, B=$memory\params$rdmux[0][5][0]$b$1432, Y=$memory\params$rdmux[0][4][0]$a$1383
      New ports: A={ $memory\params$rdmux[0][5][0]$a$1431 [3] $memory\params$rdmux[0][5][0]$a$1431 [0] }, B={ $memory\params$rdmux[0][5][0]$b$1432 [3] $memory\params$rdmux[0][5][0]$b$1432 [0] }, Y={ $memory\params$rdmux[0][4][0]$a$1383 [3] $memory\params$rdmux[0][4][0]$a$1383 [0] }
      New connections: { $memory\params$rdmux[0][4][0]$a$1383 [7:4] $memory\params$rdmux[0][4][0]$a$1383 [2:1] } = { 2'00 $memory\params$rdmux[0][4][0]$a$1383 [3] $memory\params$rdmux[0][4][0]$a$1383 [3] 2'10 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][10]$1460:
      Old ports: A=$memory\params$rdmux[0][5][10]$a$1461, B=$memory\params$rdmux[0][5][10]$b$1462, Y=$memory\params$rdmux[0][4][5]$a$1398
      New ports: A={ 1'1 $memory\params$rdmux[0][5][10]$a$1461 [1:0] }, B={ $memory\params$rdmux[0][5][10]$b$1462 [3] $memory\params$rdmux[0][5][10]$b$1462 [0] $memory\params$rdmux[0][5][10]$b$1462 [0] }, Y={ $memory\params$rdmux[0][4][5]$a$1398 [3] $memory\params$rdmux[0][4][5]$a$1398 [1:0] }
      New connections: { $memory\params$rdmux[0][4][5]$a$1398 [7:4] $memory\params$rdmux[0][4][5]$a$1398 [2] } = { 4'0000 $memory\params$rdmux[0][4][5]$a$1398 [0] }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][11]$1463:
      Old ports: A=$memory\params$rdmux[0][5][11]$a$1464, B=$memory\params$rdmux[0][5][11]$b$1465, Y=$memory\params$rdmux[0][4][5]$b$1399
      New ports: A={ $memory\params$rdmux[0][5][11]$a$1464 [3] 1'1 }, B={ 1'0 $memory\params$rdmux[0][5][11]$b$1465 [0] }, Y={ $memory\params$rdmux[0][4][5]$b$1399 [3] $memory\params$rdmux[0][4][5]$b$1399 [0] }
      New connections: { $memory\params$rdmux[0][4][5]$b$1399 [7:4] $memory\params$rdmux[0][4][5]$b$1399 [2:1] } = { 4'0000 $memory\params$rdmux[0][4][5]$b$1399 [0] 1'1 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][12]$1466:
      Old ports: A=$memory\params$rdmux[0][5][12]$a$1467, B=$memory\params$rdmux[0][5][12]$b$1468, Y=$memory\params$rdmux[0][4][6]$a$1401
      New ports: A={ 3'001 $memory\params$rdmux[0][5][12]$a$1467 [1] $memory\params$rdmux[0][5][12]$a$1467 [1] }, B={ 1'1 $memory\params$rdmux[0][5][12]$b$1468 [4] 3'010 }, Y=$memory\params$rdmux[0][4][6]$a$1401 [5:1]
      New connections: { $memory\params$rdmux[0][4][6]$a$1401 [7:6] $memory\params$rdmux[0][4][6]$a$1401 [0] } = 3'001
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][13]$1469:
      Old ports: A=$memory\params$rdmux[0][5][13]$a$1470, B=$memory\params$rdmux[0][5][13]$b$1471, Y=$memory\params$rdmux[0][4][6]$b$1402
      New ports: A={ 2'00 $memory\params$rdmux[0][5][13]$a$1470 [0] }, B={ $memory\params$rdmux[0][5][13]$b$1471 [4] $memory\params$rdmux[0][5][13]$b$1471 [2] 1'0 }, Y={ $memory\params$rdmux[0][4][6]$b$1402 [4] $memory\params$rdmux[0][4][6]$b$1402 [2] $memory\params$rdmux[0][4][6]$b$1402 [0] }
      New connections: { $memory\params$rdmux[0][4][6]$b$1402 [7:5] $memory\params$rdmux[0][4][6]$b$1402 [3] $memory\params$rdmux[0][4][6]$b$1402 [1] } = { 3'000 $memory\params$rdmux[0][4][6]$b$1402 [0] 1'0 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][14]$1472:
      Old ports: A=$memory\params$rdmux[0][5][14]$a$1473, B=$memory\params$rdmux[0][5][14]$b$1474, Y=$memory\params$rdmux[0][4][7]$a$1404
      New ports: A={ $memory\params$rdmux[0][5][14]$a$1473 [7] 1'0 $memory\params$rdmux[0][5][14]$a$1473 [0] }, B={ 1'0 $memory\params$rdmux[0][5][14]$b$1474 [3] 1'0 }, Y={ $memory\params$rdmux[0][4][7]$a$1404 [7] $memory\params$rdmux[0][4][7]$a$1404 [3] $memory\params$rdmux[0][4][7]$a$1404 [0] }
      New connections: { $memory\params$rdmux[0][4][7]$a$1404 [6:4] $memory\params$rdmux[0][4][7]$a$1404 [2:1] } = { $memory\params$rdmux[0][4][7]$a$1404 [3] $memory\params$rdmux[0][4][7]$a$1404 [3] $memory\params$rdmux[0][4][7]$a$1404 [3] $memory\params$rdmux[0][4][7]$a$1404 [0] 1'0 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][15]$1475:
      Old ports: A=$memory\params$rdmux[0][5][15]$a$1476, B=$memory\params$rdmux[0][5][15]$b$1477, Y=$memory\params$rdmux[0][4][7]$b$1405
      New ports: A={ 1'0 $memory\params$rdmux[0][5][15]$a$1476 [0] }, B={ $memory\params$rdmux[0][5][15]$b$1477 [5] 1'0 }, Y={ $memory\params$rdmux[0][4][7]$b$1405 [5] $memory\params$rdmux[0][4][7]$b$1405 [0] }
      New connections: { $memory\params$rdmux[0][4][7]$b$1405 [7:6] $memory\params$rdmux[0][4][7]$b$1405 [4:1] } = { $memory\params$rdmux[0][4][7]$b$1405 [5] 5'00000 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][16]$1478:
      Old ports: A=$memory\params$rdmux[0][5][16]$a$1479, B=$memory\params$rdmux[0][5][16]$b$1480, Y=$memory\params$rdmux[0][4][8]$a$1407
      New ports: A={ 2'00 $memory\params$rdmux[0][5][16]$a$1479 [1] $memory\params$rdmux[0][5][16]$a$1479 [1] $memory\params$rdmux[0][5][16]$a$1479 [1] 1'0 }, B={ $memory\params$rdmux[0][5][16]$b$1480 [4] 1'1 $memory\params$rdmux[0][5][16]$b$1480 [4] $memory\params$rdmux[0][5][16]$b$1480 [0] 1'0 $memory\params$rdmux[0][5][16]$b$1480 [0] }, Y={ $memory\params$rdmux[0][4][8]$a$1407 [7] $memory\params$rdmux[0][4][8]$a$1407 [5:3] $memory\params$rdmux[0][4][8]$a$1407 [1:0] }
      New connections: { $memory\params$rdmux[0][4][8]$a$1407 [6] $memory\params$rdmux[0][4][8]$a$1407 [2] } = { $memory\params$rdmux[0][4][8]$a$1407 [5] 1'0 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][1]$1433:
      Old ports: A=$memory\params$rdmux[0][5][1]$a$1434, B=$memory\params$rdmux[0][5][1]$b$1435, Y=$memory\params$rdmux[0][4][0]$b$1384
      New ports: A=2'10, B={ $memory\params$rdmux[0][5][1]$b$1435 [3] $memory\params$rdmux[0][5][1]$b$1435 [0] }, Y={ $memory\params$rdmux[0][4][0]$b$1384 [3] $memory\params$rdmux[0][4][0]$b$1384 [0] }
      New connections: { $memory\params$rdmux[0][4][0]$b$1384 [7:4] $memory\params$rdmux[0][4][0]$b$1384 [2:1] } = { 2'00 $memory\params$rdmux[0][4][0]$b$1384 [3] $memory\params$rdmux[0][4][0]$b$1384 [3] 2'10 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][2]$1436:
      Old ports: A=$memory\params$rdmux[0][5][2]$a$1437, B=8'00111100, Y=$memory\params$rdmux[0][4][1]$a$1386
      New ports: A={ $memory\params$rdmux[0][5][2]$a$1437 [3] $memory\params$rdmux[0][5][2]$a$1437 [0] }, B=2'10, Y={ $memory\params$rdmux[0][4][1]$a$1386 [3] $memory\params$rdmux[0][4][1]$a$1386 [0] }
      New connections: { $memory\params$rdmux[0][4][1]$a$1386 [7:4] $memory\params$rdmux[0][4][1]$a$1386 [2:1] } = { 2'00 $memory\params$rdmux[0][4][1]$a$1386 [3] $memory\params$rdmux[0][4][1]$a$1386 [3] 2'10 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][3]$1439:
      Old ports: A=$memory\params$rdmux[0][5][3]$a$1440, B=$memory\params$rdmux[0][5][3]$b$1441, Y=$memory\params$rdmux[0][4][1]$b$1387
      New ports: A={ $memory\params$rdmux[0][5][3]$a$1440 [3] $memory\params$rdmux[0][5][3]$a$1440 [3] 2'01 }, B={ 1'0 $memory\params$rdmux[0][5][3]$b$1441 [0] $memory\params$rdmux[0][5][3]$b$1441 [2] $memory\params$rdmux[0][5][3]$b$1441 [0] }, Y={ $memory\params$rdmux[0][4][1]$b$1387 [5] $memory\params$rdmux[0][4][1]$b$1387 [3:2] $memory\params$rdmux[0][4][1]$b$1387 [0] }
      New connections: { $memory\params$rdmux[0][4][1]$b$1387 [7:6] $memory\params$rdmux[0][4][1]$b$1387 [4] $memory\params$rdmux[0][4][1]$b$1387 [1] } = { $memory\params$rdmux[0][4][1]$b$1387 [5] 2'00 $memory\params$rdmux[0][4][1]$b$1387 [0] }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][4]$1442:
      Old ports: A=$memory\params$rdmux[0][5][4]$a$1443, B=$memory\params$rdmux[0][5][4]$b$1444, Y=$memory\params$rdmux[0][4][2]$a$1389
      New ports: A={ $memory\params$rdmux[0][5][4]$a$1443 [6] $memory\params$rdmux[0][5][4]$a$1443 [6] $memory\params$rdmux[0][5][4]$a$1443 [3] 1'1 }, B={ $memory\params$rdmux[0][5][4]$b$1444 [0] 1'0 $memory\params$rdmux[0][5][4]$b$1444 [0] $memory\params$rdmux[0][5][4]$b$1444 [0] }, Y={ $memory\params$rdmux[0][4][2]$a$1389 [7:6] $memory\params$rdmux[0][4][2]$a$1389 [3] $memory\params$rdmux[0][4][2]$a$1389 [0] }
      New connections: { $memory\params$rdmux[0][4][2]$a$1389 [5:4] $memory\params$rdmux[0][4][2]$a$1389 [2:1] } = { 2'00 $memory\params$rdmux[0][4][2]$a$1389 [0] 1'0 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][5]$1445:
      Old ports: A=$memory\params$rdmux[0][5][5]$a$1446, B=$memory\params$rdmux[0][5][5]$b$1447, Y=$memory\params$rdmux[0][4][2]$b$1390
      New ports: A={ $memory\params$rdmux[0][5][5]$a$1446 [0] $memory\params$rdmux[0][5][5]$a$1446 [1:0] $memory\params$rdmux[0][5][5]$a$1446 [1:0] }, B={ $memory\params$rdmux[0][5][5]$b$1447 [5] $memory\params$rdmux[0][5][5]$b$1447 [5] 2'11 $memory\params$rdmux[0][5][5]$b$1447 [0] }, Y={ $memory\params$rdmux[0][4][2]$b$1390 [7] $memory\params$rdmux[0][4][2]$b$1390 [5] $memory\params$rdmux[0][4][2]$b$1390 [2:0] }
      New connections: { $memory\params$rdmux[0][4][2]$b$1390 [6] $memory\params$rdmux[0][4][2]$b$1390 [4:3] } = { $memory\params$rdmux[0][4][2]$b$1390 [5] 2'01 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][6]$1448:
      Old ports: A=$memory\params$rdmux[0][5][6]$a$1449, B=$memory\params$rdmux[0][5][6]$b$1450, Y=$memory\params$rdmux[0][4][3]$a$1392
      New ports: A={ $memory\params$rdmux[0][5][6]$a$1449 [3] 1'1 $memory\params$rdmux[0][5][6]$a$1449 [0] }, B={ $memory\params$rdmux[0][5][6]$b$1450 [3] $memory\params$rdmux[0][5][6]$b$1450 [0] $memory\params$rdmux[0][5][6]$b$1450 [0] }, Y={ $memory\params$rdmux[0][4][3]$a$1392 [3] $memory\params$rdmux[0][4][3]$a$1392 [1:0] }
      New connections: { $memory\params$rdmux[0][4][3]$a$1392 [7:4] $memory\params$rdmux[0][4][3]$a$1392 [2] } = { 4'0000 $memory\params$rdmux[0][4][3]$a$1392 [1] }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][7]$1451:
      Old ports: A=$memory\params$rdmux[0][5][7]$a$1452, B=$memory\params$rdmux[0][5][7]$b$1453, Y=$memory\params$rdmux[0][4][3]$b$1393
      New ports: A={ $memory\params$rdmux[0][5][7]$a$1452 [4] $memory\params$rdmux[0][5][7]$a$1452 [0] $memory\params$rdmux[0][5][7]$a$1452 [0] }, B={ 2'01 $memory\params$rdmux[0][5][7]$b$1453 [0] }, Y={ $memory\params$rdmux[0][4][3]$b$1393 [4] $memory\params$rdmux[0][4][3]$b$1393 [1:0] }
      New connections: { $memory\params$rdmux[0][4][3]$b$1393 [7:5] $memory\params$rdmux[0][4][3]$b$1393 [3:2] } = { 4'0000 $memory\params$rdmux[0][4][3]$b$1393 [0] }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][8]$1454:
      Old ports: A=$memory\params$rdmux[0][5][8]$a$1455, B=$memory\params$rdmux[0][5][8]$b$1456, Y=$memory\params$rdmux[0][4][4]$a$1395
      New ports: A={ 3'001 $memory\params$rdmux[0][5][8]$a$1455 [1] $memory\params$rdmux[0][5][8]$a$1455 [1] 1'1 }, B={ 1'1 $memory\params$rdmux[0][5][8]$b$1456 [1] 2'01 $memory\params$rdmux[0][5][8]$b$1456 [1:0] }, Y=$memory\params$rdmux[0][4][4]$a$1395 [5:0]
      New connections: $memory\params$rdmux[0][4][4]$a$1395 [7:6] = 2'00
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][9]$1457:
      Old ports: A=$memory\params$rdmux[0][5][9]$a$1458, B=$memory\params$rdmux[0][5][9]$b$1459, Y=$memory\params$rdmux[0][4][4]$b$1396
      New ports: A={ 1'0 $memory\params$rdmux[0][5][9]$a$1458 [3] 1'0 }, B={ $memory\params$rdmux[0][5][9]$b$1459 [4] 1'0 $memory\params$rdmux[0][5][9]$b$1459 [2] }, Y=$memory\params$rdmux[0][4][4]$b$1396 [4:2]
      New connections: { $memory\params$rdmux[0][4][4]$b$1396 [7:5] $memory\params$rdmux[0][4][4]$b$1396 [1:0] } = 5'00000
  Optimizing cells in module \rainbow.
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][2][0]$1117:
      Old ports: A=$memory\cmd$rdmux[0][2][0]$a$1118, B=$memory\cmd$rdmux[0][2][0]$b$1119, Y=$memory\cmd$rdmux[0][1][0]$a$1112
      New ports: A={ $memory\cmd$rdmux[0][2][0]$a$1118 [5] 1'0 $memory\cmd$rdmux[0][2][0]$a$1118 [5] 2'10 $memory\cmd$rdmux[0][2][0]$a$1118 [1:0] }, B={ 1'1 $memory\cmd$rdmux[0][2][0]$b$1119 [6] $memory\cmd$rdmux[0][2][0]$b$1119 [2] $memory\cmd$rdmux[0][2][0]$b$1119 [2] $memory\cmd$rdmux[0][2][0]$b$1119 [2:0] }, Y={ $memory\cmd$rdmux[0][1][0]$a$1112 [7:4] $memory\cmd$rdmux[0][1][0]$a$1112 [2:0] }
      New connections: $memory\cmd$rdmux[0][1][0]$a$1112 [3] = 1'0
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][2][1]$1120:
      Old ports: A=$memory\cmd$rdmux[0][2][1]$a$1121, B=$memory\cmd$rdmux[0][2][1]$b$1122, Y=$memory\cmd$rdmux[0][1][0]$b$1113
      New ports: A={ 1'1 $memory\cmd$rdmux[0][2][1]$a$1121 [5] 2'00 $memory\cmd$rdmux[0][2][1]$a$1121 [2:0] }, B={ $memory\cmd$rdmux[0][2][1]$b$1122 [6] 1'1 $memory\cmd$rdmux[0][2][1]$b$1122 [4:0] }, Y=$memory\cmd$rdmux[0][1][0]$b$1113 [6:0]
      New connections: $memory\cmd$rdmux[0][1][0]$b$1113 [7] = $memory\cmd$rdmux[0][1][0]$b$1113 [6]
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][2][2]$1123:
      Old ports: A=$memory\cmd$rdmux[0][2][2]$a$1124, B=$memory\cmd$rdmux[0][2][2]$b$1125, Y=$memory\cmd$rdmux[0][1][1]$a$1115
      New ports: A={ 2'10 $memory\cmd$rdmux[0][2][2]$a$1124 [3] 1'0 $memory\cmd$rdmux[0][2][2]$a$1124 [1:0] }, B={ $memory\cmd$rdmux[0][2][2]$b$1125 [2] $memory\cmd$rdmux[0][2][2]$b$1125 [0] $memory\cmd$rdmux[0][2][2]$b$1125 [2] $memory\cmd$rdmux[0][2][2]$b$1125 [2] $memory\cmd$rdmux[0][2][2]$b$1125 [0] $memory\cmd$rdmux[0][2][2]$b$1125 [0] }, Y=$memory\cmd$rdmux[0][1][1]$a$1115 [5:0]
      New connections: $memory\cmd$rdmux[0][1][1]$a$1115 [7:6] = { $memory\cmd$rdmux[0][1][1]$a$1115 [4] $memory\cmd$rdmux[0][1][1]$a$1115 [4] }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][4][0]$1382:
      Old ports: A=$memory\params$rdmux[0][4][0]$a$1383, B=$memory\params$rdmux[0][4][0]$b$1384, Y=$memory\params$rdmux[0][3][0]$a$1359
      New ports: A={ $memory\params$rdmux[0][4][0]$a$1383 [3] $memory\params$rdmux[0][4][0]$a$1383 [0] }, B={ $memory\params$rdmux[0][4][0]$b$1384 [3] $memory\params$rdmux[0][4][0]$b$1384 [0] }, Y={ $memory\params$rdmux[0][3][0]$a$1359 [3] $memory\params$rdmux[0][3][0]$a$1359 [0] }
      New connections: { $memory\params$rdmux[0][3][0]$a$1359 [7:4] $memory\params$rdmux[0][3][0]$a$1359 [2:1] } = { 2'00 $memory\params$rdmux[0][3][0]$a$1359 [3] $memory\params$rdmux[0][3][0]$a$1359 [3] 2'10 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][4][1]$1385:
      Old ports: A=$memory\params$rdmux[0][4][1]$a$1386, B=$memory\params$rdmux[0][4][1]$b$1387, Y=$memory\params$rdmux[0][3][0]$b$1360
      New ports: A={ 1'0 $memory\params$rdmux[0][4][1]$a$1386 [3] $memory\params$rdmux[0][4][1]$a$1386 [3] $memory\params$rdmux[0][4][1]$a$1386 [3] 2'10 $memory\params$rdmux[0][4][1]$a$1386 [0] }, B={ $memory\params$rdmux[0][4][1]$b$1387 [5] $memory\params$rdmux[0][4][1]$b$1387 [5] 1'0 $memory\params$rdmux[0][4][1]$b$1387 [3:2] $memory\params$rdmux[0][4][1]$b$1387 [0] $memory\params$rdmux[0][4][1]$b$1387 [0] }, Y={ $memory\params$rdmux[0][3][0]$b$1360 [7] $memory\params$rdmux[0][3][0]$b$1360 [5:0] }
      New connections: $memory\params$rdmux[0][3][0]$b$1360 [6] = 1'0
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][4][2]$1388:
      Old ports: A=$memory\params$rdmux[0][4][2]$a$1389, B=$memory\params$rdmux[0][4][2]$b$1390, Y=$memory\params$rdmux[0][3][1]$a$1362
      New ports: A={ $memory\params$rdmux[0][4][2]$a$1389 [7:6] 1'0 $memory\params$rdmux[0][4][2]$a$1389 [3] $memory\params$rdmux[0][4][2]$a$1389 [0] 1'0 $memory\params$rdmux[0][4][2]$a$1389 [0] }, B={ $memory\params$rdmux[0][4][2]$b$1390 [7] $memory\params$rdmux[0][4][2]$b$1390 [5] $memory\params$rdmux[0][4][2]$b$1390 [5] 1'1 $memory\params$rdmux[0][4][2]$b$1390 [2:0] }, Y={ $memory\params$rdmux[0][3][1]$a$1362 [7:5] $memory\params$rdmux[0][3][1]$a$1362 [3:0] }
      New connections: $memory\params$rdmux[0][3][1]$a$1362 [4] = 1'0
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][4][3]$1391:
      Old ports: A=$memory\params$rdmux[0][4][3]$a$1392, B=$memory\params$rdmux[0][4][3]$b$1393, Y=$memory\params$rdmux[0][3][1]$b$1363
      New ports: A={ 1'0 $memory\params$rdmux[0][4][3]$a$1392 [3] $memory\params$rdmux[0][4][3]$a$1392 [1] $memory\params$rdmux[0][4][3]$a$1392 [1:0] }, B={ $memory\params$rdmux[0][4][3]$b$1393 [4] 1'0 $memory\params$rdmux[0][4][3]$b$1393 [0] $memory\params$rdmux[0][4][3]$b$1393 [1:0] }, Y=$memory\params$rdmux[0][3][1]$b$1363 [4:0]
      New connections: $memory\params$rdmux[0][3][1]$b$1363 [7:5] = 3'000
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][4][4]$1394:
      Old ports: A=$memory\params$rdmux[0][4][4]$a$1395, B=$memory\params$rdmux[0][4][4]$b$1396, Y=$memory\params$rdmux[0][3][2]$a$1365
      New ports: A=$memory\params$rdmux[0][4][4]$a$1395 [5:0], B={ 1'0 $memory\params$rdmux[0][4][4]$b$1396 [4:2] 2'00 }, Y=$memory\params$rdmux[0][3][2]$a$1365 [5:0]
      New connections: $memory\params$rdmux[0][3][2]$a$1365 [7:6] = 2'00
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][4][5]$1397:
      Old ports: A=$memory\params$rdmux[0][4][5]$a$1398, B=$memory\params$rdmux[0][4][5]$b$1399, Y=$memory\params$rdmux[0][3][2]$b$1366
      New ports: A={ $memory\params$rdmux[0][4][5]$a$1398 [3] $memory\params$rdmux[0][4][5]$a$1398 [1:0] }, B={ $memory\params$rdmux[0][4][5]$b$1399 [3] 1'1 $memory\params$rdmux[0][4][5]$b$1399 [0] }, Y={ $memory\params$rdmux[0][3][2]$b$1366 [3] $memory\params$rdmux[0][3][2]$b$1366 [1:0] }
      New connections: { $memory\params$rdmux[0][3][2]$b$1366 [7:4] $memory\params$rdmux[0][3][2]$b$1366 [2] } = { 4'0000 $memory\params$rdmux[0][3][2]$b$1366 [0] }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][4][6]$1400:
      Old ports: A=$memory\params$rdmux[0][4][6]$a$1401, B=$memory\params$rdmux[0][4][6]$b$1402, Y=$memory\params$rdmux[0][3][3]$a$1368
      New ports: A={ $memory\params$rdmux[0][4][6]$a$1401 [5:1] 1'1 }, B={ 1'0 $memory\params$rdmux[0][4][6]$b$1402 [4] $memory\params$rdmux[0][4][6]$b$1402 [0] $memory\params$rdmux[0][4][6]$b$1402 [2] 1'0 $memory\params$rdmux[0][4][6]$b$1402 [0] }, Y=$memory\params$rdmux[0][3][3]$a$1368 [5:0]
      New connections: $memory\params$rdmux[0][3][3]$a$1368 [7:6] = 2'00
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][4][7]$1403:
      Old ports: A=$memory\params$rdmux[0][4][7]$a$1404, B=$memory\params$rdmux[0][4][7]$b$1405, Y=$memory\params$rdmux[0][3][3]$b$1369
      New ports: A={ $memory\params$rdmux[0][4][7]$a$1404 [7] $memory\params$rdmux[0][4][7]$a$1404 [3] $memory\params$rdmux[0][4][7]$a$1404 [3] $memory\params$rdmux[0][4][7]$a$1404 [0] $memory\params$rdmux[0][4][7]$a$1404 [0] }, B={ $memory\params$rdmux[0][4][7]$b$1405 [5] $memory\params$rdmux[0][4][7]$b$1405 [5] 2'00 $memory\params$rdmux[0][4][7]$b$1405 [0] }, Y={ $memory\params$rdmux[0][3][3]$b$1369 [7] $memory\params$rdmux[0][3][3]$b$1369 [5] $memory\params$rdmux[0][3][3]$b$1369 [3:2] $memory\params$rdmux[0][3][3]$b$1369 [0] }
      New connections: { $memory\params$rdmux[0][3][3]$b$1369 [6] $memory\params$rdmux[0][3][3]$b$1369 [4] $memory\params$rdmux[0][3][3]$b$1369 [1] } = { $memory\params$rdmux[0][3][3]$b$1369 [3] $memory\params$rdmux[0][3][3]$b$1369 [3] 1'0 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][4][8]$1406:
      Old ports: A=$memory\params$rdmux[0][4][8]$a$1407, B=8'xxxxxxxx, Y=$memory\params$rdmux[0][3][4]$a$1371
      New ports: A={ $memory\params$rdmux[0][4][8]$a$1407 [7] $memory\params$rdmux[0][4][8]$a$1407 [5:3] 1'0 $memory\params$rdmux[0][4][8]$a$1407 [1:0] }, B=7'xxxxxxx, Y={ $memory\params$rdmux[0][3][4]$a$1371 [7] $memory\params$rdmux[0][3][4]$a$1371 [5:0] }
      New connections: $memory\params$rdmux[0][3][4]$a$1371 [6] = $memory\params$rdmux[0][3][4]$a$1371 [5]
  Optimizing cells in module \rainbow.
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][1][1]$1114:
      Old ports: A=$memory\cmd$rdmux[0][1][1]$a$1115, B=8'xxxxxxxx, Y=$memory\cmd$rdmux[0][0][0]$b$1110
      New ports: A=$memory\cmd$rdmux[0][1][1]$a$1115 [5:0], B=6'xxxxxx, Y=$memory\cmd$rdmux[0][0][0]$b$1110 [5:0]
      New connections: $memory\cmd$rdmux[0][0][0]$b$1110 [7:6] = { $memory\cmd$rdmux[0][0][0]$b$1110 [4] $memory\cmd$rdmux[0][0][0]$b$1110 [4] }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][3][0]$1358:
      Old ports: A=$memory\params$rdmux[0][3][0]$a$1359, B=$memory\params$rdmux[0][3][0]$b$1360, Y=$memory\params$rdmux[0][2][0]$a$1347
      New ports: A={ 1'0 $memory\params$rdmux[0][3][0]$a$1359 [3] $memory\params$rdmux[0][3][0]$a$1359 [3] $memory\params$rdmux[0][3][0]$a$1359 [3] 2'10 $memory\params$rdmux[0][3][0]$a$1359 [0] }, B={ $memory\params$rdmux[0][3][0]$b$1360 [7] $memory\params$rdmux[0][3][0]$b$1360 [5:0] }, Y={ $memory\params$rdmux[0][2][0]$a$1347 [7] $memory\params$rdmux[0][2][0]$a$1347 [5:0] }
      New connections: $memory\params$rdmux[0][2][0]$a$1347 [6] = 1'0
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][3][2]$1364:
      Old ports: A=$memory\params$rdmux[0][3][2]$a$1365, B=$memory\params$rdmux[0][3][2]$b$1366, Y=$memory\params$rdmux[0][2][1]$a$1350
      New ports: A=$memory\params$rdmux[0][3][2]$a$1365 [5:0], B={ 2'00 $memory\params$rdmux[0][3][2]$b$1366 [3] $memory\params$rdmux[0][3][2]$b$1366 [0] $memory\params$rdmux[0][3][2]$b$1366 [1:0] }, Y=$memory\params$rdmux[0][2][1]$a$1350 [5:0]
      New connections: $memory\params$rdmux[0][2][1]$a$1350 [7:6] = 2'00
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][3][4]$1370:
      Old ports: A=$memory\params$rdmux[0][3][4]$a$1371, B=8'xxxxxxxx, Y=$memory\params$rdmux[0][2][2]$a$1353
      New ports: A={ $memory\params$rdmux[0][3][4]$a$1371 [7] $memory\params$rdmux[0][3][4]$a$1371 [5:0] }, B=7'xxxxxxx, Y={ $memory\params$rdmux[0][2][2]$a$1353 [7] $memory\params$rdmux[0][2][2]$a$1353 [5:0] }
      New connections: $memory\params$rdmux[0][2][2]$a$1353 [6] = $memory\params$rdmux[0][2][2]$a$1353 [5]
  Optimizing cells in module \rainbow.
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][2][2]$1352:
      Old ports: A=$memory\params$rdmux[0][2][2]$a$1353, B=8'xxxxxxxx, Y=$memory\params$rdmux[0][1][1]$a$1344
      New ports: A={ $memory\params$rdmux[0][2][2]$a$1353 [7] $memory\params$rdmux[0][2][2]$a$1353 [5:0] }, B=7'xxxxxxx, Y={ $memory\params$rdmux[0][1][1]$a$1344 [7] $memory\params$rdmux[0][1][1]$a$1344 [5:0] }
      New connections: $memory\params$rdmux[0][1][1]$a$1344 [6] = $memory\params$rdmux[0][1][1]$a$1344 [5]
  Optimizing cells in module \rainbow.
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][1][1]$1343:
      Old ports: A=$memory\params$rdmux[0][1][1]$a$1344, B=8'xxxxxxxx, Y=$memory\params$rdmux[0][0][0]$b$1339
      New ports: A={ $memory\params$rdmux[0][1][1]$a$1344 [7] $memory\params$rdmux[0][1][1]$a$1344 [5:0] }, B=7'xxxxxxx, Y={ $memory\params$rdmux[0][0][0]$b$1339 [7] $memory\params$rdmux[0][0][0]$b$1339 [5:0] }
      New connections: $memory\params$rdmux[0][0][0]$b$1339 [6] = $memory\params$rdmux[0][0][0]$b$1339 [5]
  Optimizing cells in module \rainbow.
Performed a total of 84 changes.

2.29.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\rainbow'.
<suppressed ~108 debug messages>
Removed a total of 36 cells.

2.29.13. Executing OPT_RMDFF pass (remove dff with constant values).

2.29.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \rainbow..
Removed 0 unused cells and 38 unused wires.
<suppressed ~1 debug messages>

2.29.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module rainbow.

2.29.16. Rerunning OPT passes. (Maybe there is more to do..)

2.29.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \rainbow..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~23 debug messages>

2.29.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \rainbow.
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][3][2]$1135:
      Old ports: A={ 1'0 $memory\cmd$rdmux[0][3][1]$a$1133 [6:5] $memory\cmd$rdmux[0][3][1]$a$1133 [5] }, B={ $memory\cmd$rdmux[0][3][1]$a$1133 [6:5] 1'0 $memory\cmd$rdmux[0][3][1]$a$1133 [5] }, Y={ $memory\cmd$rdmux[0][2][1]$a$1121 [5] $memory\cmd$rdmux[0][2][1]$a$1121 [2:0] }
      New ports: A={ 1'0 $memory\cmd$rdmux[0][3][1]$a$1133 [6:5] }, B={ $memory\cmd$rdmux[0][3][1]$a$1133 [6:5] 1'0 }, Y={ $memory\cmd$rdmux[0][2][1]$a$1121 [5] $memory\cmd$rdmux[0][2][1]$a$1121 [2:1] }
      New connections: $memory\cmd$rdmux[0][2][1]$a$1121 [0] = $memory\cmd$rdmux[0][3][1]$a$1133 [5]
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][10]$1460:
      Old ports: A={ 1'1 $memory\params$rdmux[0][5][0]$b$1432 [5] $memory\params$rdmux[0][5][0]$b$1432 [0] }, B={ $memory\params$rdmux[0][5][0]$b$1432 [5] $memory\params$rdmux[0][5][0]$b$1432 [0] $memory\params$rdmux[0][5][0]$b$1432 [0] }, Y={ $memory\params$rdmux[0][4][5]$a$1398 [3] $memory\params$rdmux[0][4][5]$a$1398 [1] $memory\params$rdmux[0][4][5]$a$1398 [2] }
      New ports: A={ 1'1 $memory\params$rdmux[0][5][0]$b$1432 [5] }, B={ $memory\params$rdmux[0][5][0]$b$1432 [5] $memory\params$rdmux[0][5][0]$b$1432 [0] }, Y={ $memory\params$rdmux[0][4][5]$a$1398 [3] $memory\params$rdmux[0][4][5]$a$1398 [1] }
      New connections: $memory\params$rdmux[0][4][5]$a$1398 [2] = $memory\params$rdmux[0][5][0]$b$1432 [0]
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][5]$1445:
      Old ports: A={ $memory\params$rdmux[0][5][0]$b$1432 [0] $memory\params$rdmux[0][5][0]$b$1432 [5] $memory\params$rdmux[0][5][0]$b$1432 [0] $memory\params$rdmux[0][5][0]$b$1432 [5] $memory\params$rdmux[0][5][0]$b$1432 [0] }, B={ $memory\params$rdmux[0][5][0]$b$1432 [5] $memory\params$rdmux[0][5][0]$b$1432 [5] 2'11 $memory\params$rdmux[0][5][0]$b$1432 [0] }, Y={ $memory\params$rdmux[0][4][2]$b$1390 [7:6] $memory\params$rdmux[0][4][2]$b$1390 [2:0] }
      New ports: A={ $memory\params$rdmux[0][5][0]$b$1432 [0] $memory\params$rdmux[0][5][0]$b$1432 [0] $memory\params$rdmux[0][5][0]$b$1432 [5] }, B={ $memory\params$rdmux[0][5][0]$b$1432 [5] 2'11 }, Y={ $memory\params$rdmux[0][4][2]$b$1390 [7] $memory\params$rdmux[0][4][2]$b$1390 [2:1] }
      New connections: { $memory\params$rdmux[0][4][2]$b$1390 [6] $memory\params$rdmux[0][4][2]$b$1390 [0] } = { $memory\params$rdmux[0][5][0]$b$1432 [5] $memory\params$rdmux[0][5][0]$b$1432 [0] }
  Optimizing cells in module \rainbow.
Performed a total of 3 changes.

2.29.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\rainbow'.
Removed a total of 0 cells.

2.29.20. Executing OPT_RMDFF pass (remove dff with constant values).

2.29.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \rainbow..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

2.29.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module rainbow.

2.29.23. Rerunning OPT passes. (Maybe there is more to do..)

2.29.24. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \rainbow..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~23 debug messages>

2.29.25. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \rainbow.
Performed a total of 0 changes.

2.29.26. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\rainbow'.
Removed a total of 0 cells.

2.29.27. Executing OPT_RMDFF pass (remove dff with constant values).

2.29.28. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \rainbow..

2.29.29. Executing OPT_EXPR pass (perform const folding).
Optimizing module rainbow.

2.29.30. Finished OPT passes. (There is nothing left to do.)

2.30. Executing TECHMAP pass (map to technology primitives).

2.30.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

2.30.2. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/arith_map.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/arith_map.v' to AST representation.
Generating RTLIL representation for module `\_80_ice40_alu'.
Successfully finished Verilog frontend.

2.30.3. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $reduce_or.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=16\Y_WIDTH=16 for cells of type $alu.
Using extmapper simplemap for cells of type $logic_and.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=15\B_WIDTH=16\Y_WIDTH=16 for cells of type $alu.
Using template $paramod$constmap:446553370afc6c2aa6cc0b8f657b7f64b237ff7c$paramod$55f49a009a975a30a28fdd971adb6110903d4740\_90_shift_shiftx for cells of type $shiftx.
Using template $paramod$constmap:ee5af906ae0d3d414c6a0471604c553ef70c8e09$paramod$1297efc30c1e19551d1f4e269f2cbfa7dd15f801\_90_shift_shiftx for cells of type $shiftx.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $lut.
Using extmapper simplemap for cells of type $logic_or.
Using extmapper simplemap for cells of type $reduce_and.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=7\B_WIDTH=16\Y_WIDTH=16 for cells of type $alu.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=14\B_WIDTH=1\Y_WIDTH=14 for cells of type $alu.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=4\B_WIDTH=1\Y_WIDTH=4 for cells of type $alu.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=3\B_WIDTH=1\Y_WIDTH=3 for cells of type $alu.
Using extmapper simplemap for cells of type $ne.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=7\Y_WIDTH=7 for cells of type $alu.
Using template $paramod\_90_pmux\WIDTH=5\S_WIDTH=2 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=14\S_WIDTH=2 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=5\S_WIDTH=7 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=8\S_WIDTH=2 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=16\S_WIDTH=7 for cells of type $pmux.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=16\B_WIDTH=13\Y_WIDTH=16 for cells of type $alu.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=7\B_WIDTH=4\Y_WIDTH=7 for cells of type $alu.
Using template $paramod\_90_pmux\WIDTH=6\S_WIDTH=19 for cells of type $pmux.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=5\B_WIDTH=2\Y_WIDTH=5 for cells of type $alu.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=5\Y_WIDTH=5 for cells of type $alu.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=9\B_WIDTH=16\Y_WIDTH=16 for cells of type $alu.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=6\B_WIDTH=16\Y_WIDTH=16 for cells of type $alu.
Using template $paramod\_90_pmux\WIDTH=1\S_WIDTH=2 for cells of type $pmux.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=5\B_WIDTH=1\Y_WIDTH=5 for cells of type $alu.
Using template $paramod\_90_pmux\WIDTH=1\S_WIDTH=3 for cells of type $pmux.
Using extmapper simplemap for cells of type $dff.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $pos.
Using extmapper simplemap for cells of type $and.
No more expansions possible.
<suppressed ~953 debug messages>

2.31. Executing ICE40_OPT pass (performing simple optimizations).

2.31.1. Running ICE40 specific optimizations.

2.31.2. Executing OPT_EXPR pass (perform const folding).
Optimizing module rainbow.
<suppressed ~1001 debug messages>

2.31.3. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\rainbow'.
<suppressed ~1539 debug messages>
Removed a total of 513 cells.

2.31.4. Executing OPT_RMDFF pass (remove dff with constant values).

2.31.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \rainbow..
Removed 199 unused cells and 764 unused wires.
<suppressed ~200 debug messages>

2.31.6. Rerunning OPT passes. (Removed registers in this run.)

2.31.7. Running ICE40 specific optimizations.
Optimized away SB_CARRY cell rainbow.$auto$alumacc.cc:474:replace_alu$1001.slice[0].carry: CO=$auto$alumacc.cc:474:replace_alu$1001.BB [0]
Optimized away SB_CARRY cell rainbow.$auto$alumacc.cc:474:replace_alu$1014.slice[0].carry: CO=1'1
Optimized away SB_CARRY cell rainbow.$auto$alumacc.cc:474:replace_alu$1027.slice[0].carry: CO=\delay [0]
Optimized away SB_CARRY cell rainbow.$auto$alumacc.cc:474:replace_alu$1030.slice[0].carry: CO=\cmd_counter [0]
Optimized away SB_CARRY cell rainbow.$auto$alumacc.cc:474:replace_alu$1033.slice[0].carry: CO=\param_counter [0]
Optimized away SB_CARRY cell rainbow.$auto$alumacc.cc:474:replace_alu$1036.slice[0].carry: CO=\cmd_counter [0]
Optimized away SB_CARRY cell rainbow.$auto$alumacc.cc:474:replace_alu$1039.slice[0].carry: CO=\pixel_bit_counter [0]
Optimized away SB_CARRY cell rainbow.$auto$alumacc.cc:474:replace_alu$1042.slice[0].carry: CO=\bit_counter [0]
Optimized away SB_CARRY cell rainbow.$auto$alumacc.cc:474:replace_alu$1045.slice[0].carry: CO=\cmd_counter [0]
Optimized away SB_CARRY cell rainbow.$auto$alumacc.cc:474:replace_alu$1048.slice[0].carry: CO=1'1
Optimized away SB_CARRY cell rainbow.$auto$alumacc.cc:474:replace_alu$1051.slice[0].carry: CO=\rainbow [0]
Optimized away SB_CARRY cell rainbow.$auto$alumacc.cc:474:replace_alu$1054.slice[0].carry: CO=\params_left [0]
Optimized away SB_CARRY cell rainbow.$auto$alumacc.cc:474:replace_alu$957.slice[0].carry: CO=$auto$alumacc.cc:474:replace_alu$1001.BB [0]
Optimized away SB_CARRY cell rainbow.$auto$alumacc.cc:474:replace_alu$968.slice[0].carry: CO=$auto$alumacc.cc:474:replace_alu$1001.BB [0]
Optimized away SB_CARRY cell rainbow.$auto$alumacc.cc:474:replace_alu$979.slice[0].carry: CO=$auto$alumacc.cc:474:replace_alu$1001.BB [0]
Optimized away SB_CARRY cell rainbow.$auto$alumacc.cc:474:replace_alu$990.slice[0].carry: CO=$auto$alumacc.cc:474:replace_alu$1001.BB [0]
Mapping SB_LUT4 cell rainbow.$auto$alumacc.cc:474:replace_alu$1027.slice[1].adder back to logic.
Mapping SB_LUT4 cell rainbow.$auto$alumacc.cc:474:replace_alu$1030.slice[1].adder back to logic.
Mapping SB_LUT4 cell rainbow.$auto$alumacc.cc:474:replace_alu$1033.slice[1].adder back to logic.
Mapping SB_LUT4 cell rainbow.$auto$alumacc.cc:474:replace_alu$1036.slice[1].adder back to logic.
Mapping SB_LUT4 cell rainbow.$auto$alumacc.cc:474:replace_alu$1039.slice[1].adder back to logic.
Mapping SB_LUT4 cell rainbow.$auto$alumacc.cc:474:replace_alu$1042.slice[1].adder back to logic.
Mapping SB_LUT4 cell rainbow.$auto$alumacc.cc:474:replace_alu$1045.slice[1].adder back to logic.
Mapping SB_LUT4 cell rainbow.$auto$alumacc.cc:474:replace_alu$1048.slice[1].adder back to logic.
Mapping SB_LUT4 cell rainbow.$auto$alumacc.cc:474:replace_alu$1051.slice[1].adder back to logic.
Mapping SB_LUT4 cell rainbow.$auto$alumacc.cc:474:replace_alu$1054.slice[1].adder back to logic.

2.31.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module rainbow.
<suppressed ~128 debug messages>

2.31.9. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\rainbow'.
<suppressed ~39 debug messages>
Removed a total of 13 cells.

2.31.10. Executing OPT_RMDFF pass (remove dff with constant values).

2.31.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \rainbow..
Removed 0 unused cells and 30 unused wires.
<suppressed ~1 debug messages>

2.31.12. Rerunning OPT passes. (Removed registers in this run.)

2.31.13. Running ICE40 specific optimizations.
Optimized away SB_CARRY cell rainbow.$auto$alumacc.cc:474:replace_alu$1014.slice[1].carry: CO=$auto$alumacc.cc:474:replace_alu$1001.BB [1]
Optimized away SB_CARRY cell rainbow.$auto$alumacc.cc:474:replace_alu$1048.slice[1].carry: CO=1'1
Mapping SB_LUT4 cell rainbow.$auto$alumacc.cc:474:replace_alu$1048.slice[2].adder back to logic.

2.31.14. Executing OPT_EXPR pass (perform const folding).
Optimizing module rainbow.
<suppressed ~14 debug messages>

2.31.15. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\rainbow'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

2.31.16. Executing OPT_RMDFF pass (remove dff with constant values).

2.31.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \rainbow..
Removed 1 unused cells and 4 unused wires.
<suppressed ~2 debug messages>

2.31.18. Rerunning OPT passes. (Removed registers in this run.)

2.31.19. Running ICE40 specific optimizations.
Optimized away SB_CARRY cell rainbow.$auto$alumacc.cc:474:replace_alu$1048.slice[2].carry: CO=1'1
Mapping SB_LUT4 cell rainbow.$auto$alumacc.cc:474:replace_alu$1048.slice[3].adder back to logic.

2.31.20. Executing OPT_EXPR pass (perform const folding).
Optimizing module rainbow.
<suppressed ~13 debug messages>

2.31.21. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\rainbow'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

2.31.22. Executing OPT_RMDFF pass (remove dff with constant values).

2.31.23. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \rainbow..
Removed 0 unused cells and 3 unused wires.
<suppressed ~1 debug messages>

2.31.24. Rerunning OPT passes. (Removed registers in this run.)

2.31.25. Running ICE40 specific optimizations.
Optimized away SB_CARRY cell rainbow.$auto$alumacc.cc:474:replace_alu$1048.slice[3].carry: CO=\param_counter [3]
Mapping SB_LUT4 cell rainbow.$auto$alumacc.cc:474:replace_alu$1048.slice[4].adder back to logic.

2.31.26. Executing OPT_EXPR pass (perform const folding).
Optimizing module rainbow.
<suppressed ~12 debug messages>

2.31.27. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\rainbow'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

2.31.28. Executing OPT_RMDFF pass (remove dff with constant values).

2.31.29. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \rainbow..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

2.31.30. Rerunning OPT passes. (Removed registers in this run.)

2.31.31. Running ICE40 specific optimizations.

2.31.32. Executing OPT_EXPR pass (perform const folding).
Optimizing module rainbow.

2.31.33. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\rainbow'.
Removed a total of 0 cells.

2.31.34. Executing OPT_RMDFF pass (remove dff with constant values).

2.31.35. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \rainbow..

2.31.36. Finished OPT passes. (There is nothing left to do.)

2.32. Executing DFFSR2DFF pass (mapping DFFSR cells to simpler FFs).

2.33. Executing DFF2DFFE pass (transform $dff to $dffe where applicable).
Selected cell types for direct conversion:
  $_DFF_PP1_ -> $__DFFE_PP1
  $_DFF_PP0_ -> $__DFFE_PP0
  $_DFF_PN1_ -> $__DFFE_PN1
  $_DFF_PN0_ -> $__DFFE_PN0
  $_DFF_NP1_ -> $__DFFE_NP1
  $_DFF_NP0_ -> $__DFFE_NP0
  $_DFF_NN1_ -> $__DFFE_NN1
  $_DFF_NN0_ -> $__DFFE_NN0
  $_DFF_N_ -> $_DFFE_NP_
  $_DFF_P_ -> $_DFFE_PP_
Transforming FF to FF+Enable cells in module rainbow:
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3857 to $_DFFE_PP_ for $0\rst[0:0] -> \rst.
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3858 to $_DFFE_PP_ for $0\dc[0:0] -> \dc.
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3859 to $_DFFE_PP_ for $0\mosi[0:0] -> \mosi.
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3860 to $_DFFE_PP_ for $0\rainbow[15:0] [0] -> \rainbow [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3861 to $_DFFE_PP_ for $0\rainbow[15:0] [1] -> \rainbow [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3862 to $_DFFE_PP_ for $0\rainbow[15:0] [2] -> \rainbow [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3863 to $_DFFE_PP_ for $0\rainbow[15:0] [3] -> \rainbow [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3864 to $_DFFE_PP_ for $0\rainbow[15:0] [4] -> \rainbow [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3865 to $_DFFE_PP_ for $0\rainbow[15:0] [5] -> \rainbow [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3866 to $_DFFE_PP_ for $0\rainbow[15:0] [6] -> \rainbow [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3867 to $_DFFE_PP_ for $0\rainbow[15:0] [7] -> \rainbow [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3868 to $_DFFE_PP_ for $0\rainbow[15:0] [8] -> \rainbow [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3869 to $_DFFE_PP_ for $0\rainbow[15:0] [9] -> \rainbow [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3870 to $_DFFE_PP_ for $0\rainbow[15:0] [10] -> \rainbow [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3871 to $_DFFE_PP_ for $0\rainbow[15:0] [11] -> \rainbow [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3872 to $_DFFE_PP_ for $0\rainbow[15:0] [12] -> \rainbow [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3873 to $_DFFE_PP_ for $0\rainbow[15:0] [13] -> \rainbow [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3874 to $_DFFE_PP_ for $0\rainbow[15:0] [14] -> \rainbow [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3875 to $_DFFE_PP_ for $0\rainbow[15:0] [15] -> \rainbow [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3876 to $_DFFE_PP_ for $0\cs[0:0] -> \cs.
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3877 to $_DFFE_PP_ for $0\state[5:0] [0] -> \state [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3878 to $_DFFE_PP_ for $0\state[5:0] [1] -> \state [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3879 to $_DFFE_PP_ for $0\state[5:0] [2] -> \state [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3880 to $_DFFE_PP_ for $0\state[5:0] [3] -> \state [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3881 to $_DFFE_PP_ for $0\state[5:0] [4] -> \state [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3882 to $_DFFE_PP_ for $0\state[5:0] [5] -> \state [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3883 to $_DFFE_PP_ for $0\delay[15:0] [0] -> \delay [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3884 to $_DFFE_PP_ for $0\delay[15:0] [1] -> \delay [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3885 to $_DFFE_PP_ for $0\delay[15:0] [2] -> \delay [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3886 to $_DFFE_PP_ for $0\delay[15:0] [3] -> \delay [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3887 to $_DFFE_PP_ for $0\delay[15:0] [4] -> \delay [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3888 to $_DFFE_PP_ for $0\delay[15:0] [5] -> \delay [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3889 to $_DFFE_PP_ for $0\delay[15:0] [6] -> \delay [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3890 to $_DFFE_PP_ for $0\delay[15:0] [7] -> \delay [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3891 to $_DFFE_PP_ for $0\delay[15:0] [8] -> \delay [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3892 to $_DFFE_PP_ for $0\delay[15:0] [9] -> \delay [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3893 to $_DFFE_PP_ for $0\delay[15:0] [10] -> \delay [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3894 to $_DFFE_PP_ for $0\delay[15:0] [11] -> \delay [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3895 to $_DFFE_PP_ for $0\delay[15:0] [12] -> \delay [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3896 to $_DFFE_PP_ for $0\delay[15:0] [13] -> \delay [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3897 to $_DFFE_PP_ for $0\delay[15:0] [14] -> \delay [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3898 to $_DFFE_PP_ for $0\delay[15:0] [15] -> \delay [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3899 to $_DFFE_PP_ for $0\data[7:0] [0] -> \data [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3900 to $_DFFE_PP_ for $0\data[7:0] [1] -> \data [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3901 to $_DFFE_PP_ for $0\data[7:0] [2] -> \data [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3902 to $_DFFE_PP_ for $0\data[7:0] [3] -> \data [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3903 to $_DFFE_PP_ for $0\data[7:0] [4] -> \data [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3904 to $_DFFE_PP_ for $0\data[7:0] [5] -> \data [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3905 to $_DFFE_PP_ for $0\data[7:0] [6] -> \data [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3906 to $_DFFE_PP_ for $0\data[7:0] [7] -> \data [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3907 to $_DFFE_PP_ for $0\bit_counter[2:0] [0] -> \bit_counter [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3908 to $_DFFE_PP_ for $0\bit_counter[2:0] [1] -> \bit_counter [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3909 to $_DFFE_PP_ for $0\bit_counter[2:0] [2] -> \bit_counter [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3910 to $_DFFE_PP_ for $0\pixel_data[15:0] [0] -> \pixel_data [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3911 to $_DFFE_PP_ for $0\pixel_data[15:0] [1] -> \pixel_data [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3912 to $_DFFE_PP_ for $0\pixel_data[15:0] [2] -> \pixel_data [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3913 to $_DFFE_PP_ for $0\pixel_data[15:0] [3] -> \pixel_data [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3914 to $_DFFE_PP_ for $0\pixel_data[15:0] [4] -> \pixel_data [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3915 to $_DFFE_PP_ for $0\pixel_data[15:0] [5] -> \pixel_data [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3916 to $_DFFE_PP_ for $0\pixel_data[15:0] [6] -> \pixel_data [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3917 to $_DFFE_PP_ for $0\pixel_data[15:0] [7] -> \pixel_data [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3918 to $_DFFE_PP_ for $0\pixel_data[15:0] [8] -> \pixel_data [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3919 to $_DFFE_PP_ for $0\pixel_data[15:0] [9] -> \pixel_data [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3920 to $_DFFE_PP_ for $0\pixel_data[15:0] [10] -> \pixel_data [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3921 to $_DFFE_PP_ for $0\pixel_data[15:0] [11] -> \pixel_data [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3922 to $_DFFE_PP_ for $0\pixel_data[15:0] [12] -> \pixel_data [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3923 to $_DFFE_PP_ for $0\pixel_data[15:0] [13] -> \pixel_data [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3924 to $_DFFE_PP_ for $0\pixel_data[15:0] [14] -> \pixel_data [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3925 to $_DFFE_PP_ for $0\pixel_data[15:0] [15] -> \pixel_data [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3926 to $_DFFE_PP_ for $0\pixel_bit_counter[3:0] [0] -> \pixel_bit_counter [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3927 to $_DFFE_PP_ for $0\pixel_bit_counter[3:0] [1] -> \pixel_bit_counter [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3928 to $_DFFE_PP_ for $0\pixel_bit_counter[3:0] [2] -> \pixel_bit_counter [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3929 to $_DFFE_PP_ for $0\pixel_bit_counter[3:0] [3] -> \pixel_bit_counter [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3930 to $_DFFE_PP_ for $0\cmd_counter[4:0] [0] -> \cmd_counter [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3931 to $_DFFE_PP_ for $0\cmd_counter[4:0] [1] -> \cmd_counter [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3932 to $_DFFE_PP_ for $0\cmd_counter[4:0] [2] -> \cmd_counter [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3933 to $_DFFE_PP_ for $0\cmd_counter[4:0] [3] -> \cmd_counter [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3934 to $_DFFE_PP_ for $0\cmd_counter[4:0] [4] -> \cmd_counter [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3935 to $_DFFE_PP_ for $0\param_counter[6:0] [0] -> \param_counter [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3936 to $_DFFE_PP_ for $0\param_counter[6:0] [1] -> \param_counter [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3937 to $_DFFE_PP_ for $0\param_counter[6:0] [2] -> \param_counter [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3938 to $_DFFE_PP_ for $0\param_counter[6:0] [3] -> \param_counter [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3939 to $_DFFE_PP_ for $0\param_counter[6:0] [4] -> \param_counter [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3940 to $_DFFE_PP_ for $0\param_counter[6:0] [5] -> \param_counter [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3941 to $_DFFE_PP_ for $0\param_counter[6:0] [6] -> \param_counter [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3942 to $_DFFE_PP_ for $0\params_left[13:0] [0] -> \params_left [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3943 to $_DFFE_PP_ for $0\params_left[13:0] [1] -> \params_left [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3944 to $_DFFE_PP_ for $0\params_left[13:0] [2] -> \params_left [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3945 to $_DFFE_PP_ for $0\params_left[13:0] [3] -> \params_left [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3946 to $_DFFE_PP_ for $0\params_left[13:0] [4] -> \params_left [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3947 to $_DFFE_PP_ for $0\params_left[13:0] [5] -> \params_left [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3948 to $_DFFE_PP_ for $0\params_left[13:0] [6] -> \params_left [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3949 to $_DFFE_PP_ for $0\params_left[13:0] [7] -> \params_left [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3950 to $_DFFE_PP_ for $0\params_left[13:0] [8] -> \params_left [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3951 to $_DFFE_PP_ for $0\params_left[13:0] [9] -> \params_left [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3952 to $_DFFE_PP_ for $0\params_left[13:0] [10] -> \params_left [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3953 to $_DFFE_PP_ for $0\params_left[13:0] [11] -> \params_left [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3954 to $_DFFE_PP_ for $0\params_left[13:0] [12] -> \params_left [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3955 to $_DFFE_PP_ for $0\params_left[13:0] [13] -> \params_left [13].

2.34. Executing TECHMAP pass (map to technology primitives).

2.34.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/cells_map.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$__DFFE_NN0'.
Generating RTLIL representation for module `\$__DFFE_NN1'.
Generating RTLIL representation for module `\$__DFFE_PN0'.
Generating RTLIL representation for module `\$__DFFE_PN1'.
Generating RTLIL representation for module `\$__DFFE_NP0'.
Generating RTLIL representation for module `\$__DFFE_NP1'.
Generating RTLIL representation for module `\$__DFFE_PP0'.
Generating RTLIL representation for module `\$__DFFE_PP1'.
Successfully finished Verilog frontend.

2.34.2. Continuing TECHMAP pass.
Using template \$_DFFE_PP_ for cells of type $_DFFE_PP_.
Using template \$_DFF_P_ for cells of type $_DFF_P_.
No more expansions possible.
<suppressed ~100 debug messages>

2.35. Executing OPT_EXPR pass (perform const folding).
Optimizing module rainbow.
<suppressed ~340 debug messages>

2.36. Executing SIMPLEMAP pass (map simple cells to gate primitives).

2.37. Executing ICE40_FFINIT pass (implement FF init values).
Handling FF init values in rainbow.
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3956 (SB_DFF): \scl = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3862 (SB_DFFE): \rainbow [2] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3863 (SB_DFFE): \rainbow [3] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3865 (SB_DFFE): \rainbow [5] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3861 (SB_DFFE): \rainbow [1] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3942 (SB_DFFE): \params_left [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3864 (SB_DFFE): \rainbow [4] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3866 (SB_DFFE): \rainbow [6] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3867 (SB_DFFE): \rainbow [7] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3868 (SB_DFFE): \rainbow [8] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3869 (SB_DFFE): \rainbow [9] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3870 (SB_DFFE): \rainbow [10] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3871 (SB_DFFE): \rainbow [11] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3872 (SB_DFFE): \rainbow [12] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3873 (SB_DFFE): \rainbow [13] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3874 (SB_DFFE): \rainbow [14] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3875 (SB_DFFE): \rainbow [15] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3878 (SB_DFFE): \state [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3879 (SB_DFFE): \state [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3880 (SB_DFFE): \state [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3881 (SB_DFFE): \state [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3877 (SB_DFFE): \state [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3860 (SB_DFFE): \rainbow [0] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3882 (SB_DFFE): \state [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3899 (SB_DFFE): \data [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3900 (SB_DFFE): \data [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3901 (SB_DFFE): \data [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3902 (SB_DFFE): \data [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3903 (SB_DFFE): \data [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3904 (SB_DFFE): \data [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3905 (SB_DFFE): \data [6] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3906 (SB_DFFE): \data [7] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3908 (SB_DFFE): \bit_counter [1] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3915 (SB_DFFE): \pixel_data [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3909 (SB_DFFE): \bit_counter [2] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3911 (SB_DFFE): \pixel_data [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3912 (SB_DFFE): \pixel_data [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3913 (SB_DFFE): \pixel_data [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3907 (SB_DFFE): \bit_counter [0] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3914 (SB_DFFE): \pixel_data [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3916 (SB_DFFE): \pixel_data [6] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3917 (SB_DFFE): \pixel_data [7] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3918 (SB_DFFE): \pixel_data [8] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3919 (SB_DFFE): \pixel_data [9] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3920 (SB_DFFE): \pixel_data [10] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3921 (SB_DFFE): \pixel_data [11] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3922 (SB_DFFE): \pixel_data [12] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3923 (SB_DFFE): \pixel_data [13] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3924 (SB_DFFE): \pixel_data [14] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3925 (SB_DFFE): \pixel_data [15] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3926 (SB_DFFE): \pixel_bit_counter [0] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3927 (SB_DFFE): \pixel_bit_counter [1] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3928 (SB_DFFE): \pixel_bit_counter [2] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3934 (SB_DFFE): \cmd_counter [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3929 (SB_DFFE): \pixel_bit_counter [3] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3931 (SB_DFFE): \cmd_counter [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3932 (SB_DFFE): \cmd_counter [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3910 (SB_DFFE): \pixel_data [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3933 (SB_DFFE): \cmd_counter [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3935 (SB_DFFE): \param_counter [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3936 (SB_DFFE): \param_counter [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3937 (SB_DFFE): \param_counter [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3938 (SB_DFFE): \param_counter [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3939 (SB_DFFE): \param_counter [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3940 (SB_DFFE): \param_counter [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3943 (SB_DFFE): \params_left [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3930 (SB_DFFE): \cmd_counter [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3941 (SB_DFFE): \param_counter [6] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3944 (SB_DFFE): \params_left [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3945 (SB_DFFE): \params_left [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3946 (SB_DFFE): \params_left [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3947 (SB_DFFE): \params_left [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3948 (SB_DFFE): \params_left [6] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3949 (SB_DFFE): \params_left [7] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3950 (SB_DFFE): \params_left [8] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3951 (SB_DFFE): \params_left [9] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3952 (SB_DFFE): \params_left [10] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3953 (SB_DFFE): \params_left [11] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3954 (SB_DFFE): \params_left [12] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3955 (SB_DFFE): \params_left [13] = 0

2.38. Executing ICE40_FFSSR pass (merge synchronous set/reset into FF cells).
Merging set/reset $_MUX_ cells into SB_FFs in rainbow.

2.39. Executing ICE40_OPT pass (performing simple optimizations).

2.39.1. Running ICE40 specific optimizations.

2.39.2. Executing OPT_EXPR pass (perform const folding).
Optimizing module rainbow.
<suppressed ~134 debug messages>

2.39.3. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\rainbow'.
<suppressed ~759 debug messages>
Removed a total of 253 cells.

2.39.4. Executing OPT_RMDFF pass (remove dff with constant values).

2.39.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \rainbow..
Removed 0 unused cells and 962 unused wires.
<suppressed ~1 debug messages>

2.39.6. Rerunning OPT passes. (Removed registers in this run.)

2.39.7. Running ICE40 specific optimizations.

2.39.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module rainbow.

2.39.9. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\rainbow'.
Removed a total of 0 cells.

2.39.10. Executing OPT_RMDFF pass (remove dff with constant values).

2.39.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \rainbow..

2.39.12. Finished OPT passes. (There is nothing left to do.)

2.40. Executing TECHMAP pass (map to technology primitives).

2.40.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/latches_map.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/latches_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Successfully finished Verilog frontend.

2.40.2. Continuing TECHMAP pass.
No more expansions possible.

2.41. Executing ABC pass (technology mapping using ABC).

2.41.1. Extracting gate netlist of module `\rainbow' to `<abc-temp-dir>/input.blif'..
Extracted 1274 gates and 1449 wires to a netlist network with 173 inputs and 137 outputs.

2.41.1.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + lutpack -S 1 
ABC: + dress 
ABC: Total number of equiv classes                =     262.
ABC: Participating nodes from both networks       =     604.
ABC: Participating nodes from the first network   =     263. (  65.10 % of nodes)
ABC: Participating nodes from the second network  =     341. (  84.41 % of nodes)
ABC: Node pairs (any polarity)                    =     262. (  64.85 % of names can be moved)
ABC: Node pairs (same polarity)                   =     227. (  56.19 % of names can be moved)
ABC: Total runtime =     0.09 sec
ABC: + write_blif <abc-temp-dir>/output.blif 

2.41.1.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:      804
ABC RESULTS:        internal signals:     1139
ABC RESULTS:           input signals:      173
ABC RESULTS:          output signals:      137
Removing temp directory.
Removed 0 unused cells and 666 unused wires.

2.42. Executing TECHMAP pass (map to technology primitives).

2.42.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/cells_map.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$__DFFE_NN0'.
Generating RTLIL representation for module `\$__DFFE_NN1'.
Generating RTLIL representation for module `\$__DFFE_PN0'.
Generating RTLIL representation for module `\$__DFFE_PN1'.
Generating RTLIL representation for module `\$__DFFE_NP0'.
Generating RTLIL representation for module `\$__DFFE_NP1'.
Generating RTLIL representation for module `\$__DFFE_PP0'.
Generating RTLIL representation for module `\$__DFFE_PP1'.
Generating RTLIL representation for module `\$lut'.
Successfully finished Verilog frontend.

2.42.2. Continuing TECHMAP pass.
Using template $paramod\$lut\WIDTH=2\LUT=4'1000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00001011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000101100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1001010000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001010000000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1110101100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00001101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00011111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000011111110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1010110011001100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0101001100110011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000011111111000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00000111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00010100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000111001110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001000111110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111100000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100111110100000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111110000001010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011110001010101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1010001100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000101111111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0101011111110001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011101011110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000110111101010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111010100110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11001010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000010111000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011111100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1110111100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001011100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000001011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111000011101110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0101010011101111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00111010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000010111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000011101111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000101110111011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011000010111011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0111111100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1110110000000011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000001100001101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1110000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111000111111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0111000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011000010111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001111100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111101011001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100111111111010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000100011110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000000000000011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100001000001101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111011100101100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011101111110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100111100010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000011100001100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01001011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000000111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100111011000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11010011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011010100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011001100000011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11100000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000011111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100111111111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000111110111011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=1\LUT=2'01 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000011101110111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000001111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000010100001100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111000100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001010000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000111111101110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000110000111011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011010001000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111000011010101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000001101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111100001011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000111100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100111011100000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000011100100010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1110000011001100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100111100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01101111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011000000001011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011010111111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011000011111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111111100000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111100010001000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100000100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000110100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111010000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111110110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11111110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1010110011000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000111101010111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111101110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1110000011111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0111010110000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100101000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000001100000101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011001100110101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111010011111111 for cells of type $lut.
No more expansions possible.
<suppressed ~1766 debug messages>
Removed 0 unused cells and 804 unused wires.

2.43. Executing HIERARCHY pass (managing design hierarchy).

2.43.1. Analyzing design hierarchy..
Top module:  \rainbow

2.43.2. Analyzing design hierarchy..
Top module:  \rainbow
Removed 0 unused modules.

2.44. Printing statistics.

=== rainbow ===

   Number of wires:                535
   Number of wire bits:           1482
   Number of public wires:         111
   Number of public wire bits:     826
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                719
     SB_CARRY                      148
     SB_DFF                          1
     SB_DFFE                        99
     SB_LUT4                       471

2.45. Executing CHECK pass (checking for obvious problems).
checking module rainbow..
found and reported 0 problems.

2.46. Executing BLIF backend.

2.47. Executing JSON backend.

End of script. Logfile hash: 4c4d0d46ec
CPU: user 4.77s system 0.23s, MEM: 52.32 MB total, 46.65 MB resident
Yosys 0.9 (git sha1 1979e0b)
Time spent: 19% 27x opt_expr (0 sec), 18% 26x opt_clean (0 sec), ...
