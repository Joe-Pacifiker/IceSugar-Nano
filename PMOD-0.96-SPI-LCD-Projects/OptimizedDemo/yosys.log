
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2019  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9 (git sha1 1979e0b)


-- Parsing `demo.v' using frontend `verilog' --

1. Executing Verilog-2005 frontend: demo.v
Parsing Verilog input from `demo.v' to AST representation.
Generating RTLIL representation for module `\demo'.
Successfully finished Verilog frontend.

-- Running command `synth_ice40 -json demo.json -blif demo.blif' --

2. Executing SYNTH_ICE40 pass.

2.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/cells_sim.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\SB_IO'.
Generating RTLIL representation for module `\SB_GB_IO'.
Generating RTLIL representation for module `\SB_GB'.
Generating RTLIL representation for module `\SB_LUT4'.
Generating RTLIL representation for module `\SB_CARRY'.
Generating RTLIL representation for module `\SB_DFF'.
Generating RTLIL representation for module `\SB_DFFE'.
Generating RTLIL representation for module `\SB_DFFSR'.
Generating RTLIL representation for module `\SB_DFFR'.
Generating RTLIL representation for module `\SB_DFFSS'.
Generating RTLIL representation for module `\SB_DFFS'.
Generating RTLIL representation for module `\SB_DFFESR'.
Generating RTLIL representation for module `\SB_DFFER'.
Generating RTLIL representation for module `\SB_DFFESS'.
Generating RTLIL representation for module `\SB_DFFES'.
Generating RTLIL representation for module `\SB_DFFN'.
Generating RTLIL representation for module `\SB_DFFNE'.
Generating RTLIL representation for module `\SB_DFFNSR'.
Generating RTLIL representation for module `\SB_DFFNR'.
Generating RTLIL representation for module `\SB_DFFNSS'.
Generating RTLIL representation for module `\SB_DFFNS'.
Generating RTLIL representation for module `\SB_DFFNESR'.
Generating RTLIL representation for module `\SB_DFFNER'.
Generating RTLIL representation for module `\SB_DFFNESS'.
Generating RTLIL representation for module `\SB_DFFNES'.
Generating RTLIL representation for module `\SB_RAM40_4K'.
Generating RTLIL representation for module `\SB_RAM40_4KNR'.
Generating RTLIL representation for module `\SB_RAM40_4KNW'.
Generating RTLIL representation for module `\SB_RAM40_4KNRNW'.
Generating RTLIL representation for module `\ICESTORM_LC'.
Generating RTLIL representation for module `\SB_PLL40_CORE'.
Generating RTLIL representation for module `\SB_PLL40_PAD'.
Generating RTLIL representation for module `\SB_PLL40_2_PAD'.
Generating RTLIL representation for module `\SB_PLL40_2F_CORE'.
Generating RTLIL representation for module `\SB_PLL40_2F_PAD'.
Generating RTLIL representation for module `\SB_WARMBOOT'.
Generating RTLIL representation for module `\SB_SPRAM256KA'.
Generating RTLIL representation for module `\SB_HFOSC'.
Generating RTLIL representation for module `\SB_LFOSC'.
Generating RTLIL representation for module `\SB_RGBA_DRV'.
Generating RTLIL representation for module `\SB_LED_DRV_CUR'.
Generating RTLIL representation for module `\SB_RGB_DRV'.
Generating RTLIL representation for module `\SB_I2C'.
Generating RTLIL representation for module `\SB_SPI'.
Generating RTLIL representation for module `\SB_LEDDA_IP'.
Generating RTLIL representation for module `\SB_FILTER_50NS'.
Generating RTLIL representation for module `\SB_IO_I3C'.
Generating RTLIL representation for module `\SB_IO_OD'.
Generating RTLIL representation for module `\SB_MAC16'.
Successfully finished Verilog frontend.

2.2. Executing HIERARCHY pass (managing design hierarchy).

2.2.1. Finding top of design hierarchy..
root of   0 design levels: demo                
Automatically selected demo as design top module.

2.2.2. Analyzing design hierarchy..
Top module:  \demo

2.2.3. Analyzing design hierarchy..
Top module:  \demo
Removed 0 unused modules.

2.3. Executing PROC pass (convert processes to netlists).

2.3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

2.3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 14 switch rules as full_case in process $proc$demo.v:205$114 in module demo.
Removed a total of 0 dead cases.

2.3.3. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\demo.$proc$demo.v:69$263'.
  Set init value: \scl = 1'1
  Set init value: \state = 6'000000
  Set init value: \data = 8'00000000
  Set init value: \bit_counter = 3'111
  Set init value: \pixel_data = 16'0000000000000000
  Set init value: \pixel_bit_counter = 4'1111
  Set init value: \cmd_counter = 5'00000
  Set init value: \param_counter = 7'0000000
  Set init value: \params_left = 14'00000000000000

2.3.4. Executing PROC_ARST pass (detect async resets in processes).

2.3.5. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\demo.$proc$demo.v:69$263'.
     1/231: $1\pixel_bit_counter[3:0]
     2/231: $1\pixel_data[15:0]
     3/231: $1\bit_counter[2:0]
     4/231: $1\data[7:0]
     5/231: $1\params_left[13:0]
     6/231: $1\param_counter[6:0]
     7/231: $0$memwr$\params$demo.v:186$111_DATA[7:0]$485
     8/231: $0$memwr$\params$demo.v:186$111_ADDR[31:0]$484
     9/231: $0$memwr$\params$demo.v:185$110_DATA[7:0]$483
    10/231: $0$memwr$\params$demo.v:185$110_ADDR[31:0]$482
    11/231: $0$memwr$\params$demo.v:184$109_DATA[7:0]$481
    12/231: $0$memwr$\params$demo.v:184$109_ADDR[31:0]$480
    13/231: $0$memwr$\params$demo.v:183$108_DATA[7:0]$479
    14/231: $0$memwr$\params$demo.v:183$108_ADDR[31:0]$478
    15/231: $0$memwr$\params$demo.v:182$107_DATA[7:0]$477
    16/231: $0$memwr$\params$demo.v:182$107_ADDR[31:0]$476
    17/231: $0$memwr$\params$demo.v:181$106_DATA[7:0]$475
    18/231: $0$memwr$\params$demo.v:181$106_ADDR[31:0]$474
    19/231: $0$memwr$\params$demo.v:180$105_DATA[7:0]$473
    20/231: $0$memwr$\params$demo.v:180$105_ADDR[31:0]$472
    21/231: $0$memwr$\params$demo.v:179$104_DATA[7:0]$471
    22/231: $0$memwr$\params$demo.v:179$104_ADDR[31:0]$470
    23/231: $0$memwr$\params$demo.v:178$103_DATA[7:0]$469
    24/231: $0$memwr$\params$demo.v:178$103_ADDR[31:0]$468
    25/231: $0$memwr$\params$demo.v:177$102_DATA[7:0]$467
    26/231: $0$memwr$\params$demo.v:177$102_ADDR[31:0]$466
    27/231: $0$memwr$\params$demo.v:176$101_DATA[7:0]$465
    28/231: $0$memwr$\params$demo.v:176$101_ADDR[31:0]$464
    29/231: $0$memwr$\params$demo.v:175$100_DATA[7:0]$463
    30/231: $0$memwr$\params$demo.v:175$100_ADDR[31:0]$462
    31/231: $0$memwr$\params$demo.v:174$99_DATA[7:0]$461
    32/231: $0$memwr$\params$demo.v:174$99_ADDR[31:0]$460
    33/231: $0$memwr$\params$demo.v:173$98_DATA[7:0]$459
    34/231: $0$memwr$\params$demo.v:173$98_ADDR[31:0]$458
    35/231: $0$memwr$\params$demo.v:172$97_DATA[7:0]$457
    36/231: $0$memwr$\params$demo.v:172$97_ADDR[31:0]$456
    37/231: $0$memwr$\params$demo.v:171$96_DATA[7:0]$455
    38/231: $0$memwr$\params$demo.v:171$96_ADDR[31:0]$454
    39/231: $0$memwr$\params$demo.v:170$95_DATA[7:0]$453
    40/231: $0$memwr$\params$demo.v:170$95_ADDR[31:0]$452
    41/231: $0$memwr$\params$demo.v:169$94_DATA[7:0]$451
    42/231: $0$memwr$\params$demo.v:169$94_ADDR[31:0]$450
    43/231: $0$memwr$\params$demo.v:168$93_DATA[7:0]$449
    44/231: $0$memwr$\params$demo.v:168$93_ADDR[31:0]$448
    45/231: $0$memwr$\params$demo.v:167$92_DATA[7:0]$447
    46/231: $0$memwr$\params$demo.v:167$92_ADDR[31:0]$446
    47/231: $0$memwr$\params$demo.v:166$91_DATA[7:0]$445
    48/231: $0$memwr$\params$demo.v:166$91_ADDR[31:0]$444
    49/231: $0$memwr$\params$demo.v:165$90_DATA[7:0]$443
    50/231: $0$memwr$\params$demo.v:165$90_ADDR[31:0]$442
    51/231: $0$memwr$\params$demo.v:164$89_DATA[7:0]$441
    52/231: $0$memwr$\params$demo.v:164$89_ADDR[31:0]$440
    53/231: $0$memwr$\params$demo.v:163$88_DATA[7:0]$439
    54/231: $0$memwr$\params$demo.v:163$88_ADDR[31:0]$438
    55/231: $0$memwr$\params$demo.v:162$87_DATA[7:0]$437
    56/231: $0$memwr$\params$demo.v:162$87_ADDR[31:0]$436
    57/231: $0$memwr$\params$demo.v:161$86_DATA[7:0]$435
    58/231: $0$memwr$\params$demo.v:161$86_ADDR[31:0]$434
    59/231: $0$memwr$\params$demo.v:160$85_DATA[7:0]$433
    60/231: $0$memwr$\params$demo.v:160$85_ADDR[31:0]$432
    61/231: $0$memwr$\params$demo.v:159$84_DATA[7:0]$431
    62/231: $0$memwr$\params$demo.v:159$84_ADDR[31:0]$430
    63/231: $0$memwr$\params$demo.v:158$83_DATA[7:0]$429
    64/231: $0$memwr$\params$demo.v:158$83_ADDR[31:0]$428
    65/231: $0$memwr$\params$demo.v:157$82_DATA[7:0]$427
    66/231: $0$memwr$\params$demo.v:157$82_ADDR[31:0]$426
    67/231: $0$memwr$\params$demo.v:156$81_DATA[7:0]$425
    68/231: $0$memwr$\params$demo.v:156$81_ADDR[31:0]$424
    69/231: $0$memwr$\params$demo.v:155$80_DATA[7:0]$423
    70/231: $0$memwr$\params$demo.v:155$80_ADDR[31:0]$422
    71/231: $0$memwr$\params$demo.v:154$79_DATA[7:0]$421
    72/231: $0$memwr$\params$demo.v:154$79_ADDR[31:0]$420
    73/231: $0$memwr$\params$demo.v:153$78_DATA[7:0]$419
    74/231: $0$memwr$\params$demo.v:153$78_ADDR[31:0]$418
    75/231: $0$memwr$\params$demo.v:152$77_DATA[7:0]$417
    76/231: $0$memwr$\params$demo.v:152$77_ADDR[31:0]$416
    77/231: $0$memwr$\params$demo.v:151$76_DATA[7:0]$415
    78/231: $0$memwr$\params$demo.v:151$76_ADDR[31:0]$414
    79/231: $0$memwr$\params$demo.v:150$75_DATA[7:0]$413
    80/231: $0$memwr$\params$demo.v:150$75_ADDR[31:0]$412
    81/231: $0$memwr$\params$demo.v:149$74_DATA[7:0]$411
    82/231: $0$memwr$\params$demo.v:149$74_ADDR[31:0]$410
    83/231: $0$memwr$\params$demo.v:148$73_DATA[7:0]$409
    84/231: $0$memwr$\params$demo.v:148$73_ADDR[31:0]$408
    85/231: $0$memwr$\params$demo.v:147$72_DATA[7:0]$407
    86/231: $0$memwr$\params$demo.v:147$72_ADDR[31:0]$406
    87/231: $0$memwr$\params$demo.v:146$71_DATA[7:0]$405
    88/231: $0$memwr$\params$demo.v:146$71_ADDR[31:0]$404
    89/231: $0$memwr$\params$demo.v:145$70_DATA[7:0]$403
    90/231: $0$memwr$\params$demo.v:145$70_ADDR[31:0]$402
    91/231: $0$memwr$\params$demo.v:144$69_DATA[7:0]$401
    92/231: $0$memwr$\params$demo.v:144$69_ADDR[31:0]$400
    93/231: $0$memwr$\params$demo.v:143$68_DATA[7:0]$399
    94/231: $0$memwr$\params$demo.v:143$68_ADDR[31:0]$398
    95/231: $0$memwr$\params$demo.v:142$67_DATA[7:0]$397
    96/231: $0$memwr$\params$demo.v:142$67_ADDR[31:0]$396
    97/231: $0$memwr$\params$demo.v:141$66_DATA[7:0]$395
    98/231: $0$memwr$\params$demo.v:141$66_ADDR[31:0]$394
    99/231: $0$memwr$\params$demo.v:140$65_DATA[7:0]$393
   100/231: $0$memwr$\params$demo.v:140$65_ADDR[31:0]$392
   101/231: $0$memwr$\params$demo.v:139$64_DATA[7:0]$391
   102/231: $0$memwr$\params$demo.v:139$64_ADDR[31:0]$390
   103/231: $0$memwr$\params$demo.v:138$63_DATA[7:0]$389
   104/231: $0$memwr$\params$demo.v:138$63_ADDR[31:0]$388
   105/231: $0$memwr$\params$demo.v:137$62_DATA[7:0]$387
   106/231: $0$memwr$\params$demo.v:137$62_ADDR[31:0]$386
   107/231: $0$memwr$\params$demo.v:136$61_DATA[7:0]$385
   108/231: $0$memwr$\params$demo.v:136$61_ADDR[31:0]$384
   109/231: $0$memwr$\params$demo.v:135$60_DATA[7:0]$383
   110/231: $0$memwr$\params$demo.v:135$60_ADDR[31:0]$382
   111/231: $0$memwr$\params$demo.v:134$59_DATA[7:0]$381
   112/231: $0$memwr$\params$demo.v:134$59_ADDR[31:0]$380
   113/231: $0$memwr$\params$demo.v:133$58_DATA[7:0]$379
   114/231: $0$memwr$\params$demo.v:133$58_ADDR[31:0]$378
   115/231: $0$memwr$\params$demo.v:132$57_DATA[7:0]$377
   116/231: $0$memwr$\params$demo.v:132$57_ADDR[31:0]$376
   117/231: $0$memwr$\params$demo.v:131$56_DATA[7:0]$375
   118/231: $0$memwr$\params$demo.v:131$56_ADDR[31:0]$374
   119/231: $0$memwr$\params$demo.v:130$55_DATA[7:0]$373
   120/231: $0$memwr$\params$demo.v:130$55_ADDR[31:0]$372
   121/231: $0$memwr$\params$demo.v:129$54_DATA[7:0]$371
   122/231: $0$memwr$\params$demo.v:129$54_ADDR[31:0]$370
   123/231: $0$memwr$\params$demo.v:128$53_DATA[7:0]$369
   124/231: $0$memwr$\params$demo.v:128$53_ADDR[31:0]$368
   125/231: $0$memwr$\params$demo.v:127$52_DATA[7:0]$367
   126/231: $0$memwr$\params$demo.v:127$52_ADDR[31:0]$366
   127/231: $0$memwr$\params$demo.v:126$51_DATA[7:0]$365
   128/231: $0$memwr$\params$demo.v:126$51_ADDR[31:0]$364
   129/231: $0$memwr$\params$demo.v:125$50_DATA[7:0]$363
   130/231: $0$memwr$\params$demo.v:125$50_ADDR[31:0]$362
   131/231: $0$memwr$\params$demo.v:124$49_DATA[7:0]$361
   132/231: $0$memwr$\params$demo.v:124$49_ADDR[31:0]$360
   133/231: $0$memwr$\params$demo.v:123$48_DATA[7:0]$359
   134/231: $0$memwr$\params$demo.v:123$48_ADDR[31:0]$358
   135/231: $0$memwr$\params$demo.v:122$47_DATA[7:0]$357
   136/231: $0$memwr$\params$demo.v:122$47_ADDR[31:0]$356
   137/231: $0$memwr$\params$demo.v:121$46_DATA[7:0]$355
   138/231: $0$memwr$\params$demo.v:121$46_ADDR[31:0]$354
   139/231: $0$memwr$\params$demo.v:120$45_DATA[7:0]$353
   140/231: $0$memwr$\params$demo.v:120$45_ADDR[31:0]$352
   141/231: $0$memwr$\params$demo.v:119$44_DATA[7:0]$351
   142/231: $0$memwr$\params$demo.v:119$44_ADDR[31:0]$350
   143/231: $1\cmd_counter[4:0]
   144/231: $0$memwr$\num_params$demo.v:116$43_DATA[13:0]$349
   145/231: $0$memwr$\num_params$demo.v:116$43_ADDR[31:0]$348
   146/231: $0$memwr$\num_params$demo.v:115$42_DATA[13:0]$347
   147/231: $0$memwr$\num_params$demo.v:115$42_ADDR[31:0]$346
   148/231: $0$memwr$\num_params$demo.v:114$41_DATA[13:0]$345
   149/231: $0$memwr$\num_params$demo.v:114$41_ADDR[31:0]$344
   150/231: $0$memwr$\num_params$demo.v:113$40_DATA[13:0]$343
   151/231: $0$memwr$\num_params$demo.v:113$40_ADDR[31:0]$342
   152/231: $0$memwr$\num_params$demo.v:112$39_DATA[13:0]$341
   153/231: $0$memwr$\num_params$demo.v:112$39_ADDR[31:0]$340
   154/231: $0$memwr$\num_params$demo.v:111$38_DATA[13:0]$339
   155/231: $0$memwr$\num_params$demo.v:111$38_ADDR[31:0]$338
   156/231: $0$memwr$\num_params$demo.v:110$37_DATA[13:0]$337
   157/231: $0$memwr$\num_params$demo.v:110$37_ADDR[31:0]$336
   158/231: $0$memwr$\num_params$demo.v:109$36_DATA[13:0]$335
   159/231: $0$memwr$\num_params$demo.v:109$36_ADDR[31:0]$334
   160/231: $0$memwr$\num_params$demo.v:108$35_DATA[13:0]$333
   161/231: $0$memwr$\num_params$demo.v:108$35_ADDR[31:0]$332
   162/231: $0$memwr$\num_params$demo.v:107$34_DATA[13:0]$331
   163/231: $0$memwr$\num_params$demo.v:107$34_ADDR[31:0]$330
   164/231: $0$memwr$\num_params$demo.v:106$33_DATA[13:0]$329
   165/231: $0$memwr$\num_params$demo.v:106$33_ADDR[31:0]$328
   166/231: $0$memwr$\num_params$demo.v:105$32_DATA[13:0]$327
   167/231: $0$memwr$\num_params$demo.v:105$32_ADDR[31:0]$326
   168/231: $0$memwr$\num_params$demo.v:104$31_DATA[13:0]$325
   169/231: $0$memwr$\num_params$demo.v:104$31_ADDR[31:0]$324
   170/231: $0$memwr$\num_params$demo.v:103$30_DATA[13:0]$323
   171/231: $0$memwr$\num_params$demo.v:103$30_ADDR[31:0]$322
   172/231: $0$memwr$\num_params$demo.v:102$29_DATA[13:0]$321
   173/231: $0$memwr$\num_params$demo.v:102$29_ADDR[31:0]$320
   174/231: $0$memwr$\num_params$demo.v:101$28_DATA[13:0]$319
   175/231: $0$memwr$\num_params$demo.v:101$28_ADDR[31:0]$318
   176/231: $0$memwr$\num_params$demo.v:100$27_DATA[13:0]$317
   177/231: $0$memwr$\num_params$demo.v:100$27_ADDR[31:0]$316
   178/231: $0$memwr$\num_params$demo.v:99$26_DATA[13:0]$315
   179/231: $0$memwr$\num_params$demo.v:99$26_ADDR[31:0]$314
   180/231: $0$memwr$\num_params$demo.v:98$25_DATA[13:0]$313
   181/231: $0$memwr$\num_params$demo.v:98$25_ADDR[31:0]$312
   182/231: $0$memwr$\num_params$demo.v:97$24_DATA[13:0]$311
   183/231: $0$memwr$\num_params$demo.v:97$24_ADDR[31:0]$310
   184/231: $0$memwr$\num_params$demo.v:96$23_DATA[13:0]$309
   185/231: $0$memwr$\num_params$demo.v:96$23_ADDR[31:0]$308
   186/231: $0$memwr$\cmd$demo.v:95$22_DATA[7:0]$307
   187/231: $0$memwr$\cmd$demo.v:95$22_ADDR[31:0]$306
   188/231: $0$memwr$\cmd$demo.v:94$21_DATA[7:0]$305
   189/231: $0$memwr$\cmd$demo.v:94$21_ADDR[31:0]$304
   190/231: $0$memwr$\cmd$demo.v:93$20_DATA[7:0]$303
   191/231: $0$memwr$\cmd$demo.v:93$20_ADDR[31:0]$302
   192/231: $0$memwr$\cmd$demo.v:92$19_DATA[7:0]$301
   193/231: $0$memwr$\cmd$demo.v:92$19_ADDR[31:0]$300
   194/231: $0$memwr$\cmd$demo.v:91$18_DATA[7:0]$299
   195/231: $0$memwr$\cmd$demo.v:91$18_ADDR[31:0]$298
   196/231: $0$memwr$\cmd$demo.v:90$17_DATA[7:0]$297
   197/231: $0$memwr$\cmd$demo.v:90$17_ADDR[31:0]$296
   198/231: $0$memwr$\cmd$demo.v:89$16_DATA[7:0]$295
   199/231: $0$memwr$\cmd$demo.v:89$16_ADDR[31:0]$294
   200/231: $0$memwr$\cmd$demo.v:88$15_DATA[7:0]$293
   201/231: $0$memwr$\cmd$demo.v:88$15_ADDR[31:0]$292
   202/231: $0$memwr$\cmd$demo.v:87$14_DATA[7:0]$291
   203/231: $0$memwr$\cmd$demo.v:87$14_ADDR[31:0]$290
   204/231: $0$memwr$\cmd$demo.v:86$13_DATA[7:0]$289
   205/231: $0$memwr$\cmd$demo.v:86$13_ADDR[31:0]$288
   206/231: $0$memwr$\cmd$demo.v:85$12_DATA[7:0]$287
   207/231: $0$memwr$\cmd$demo.v:85$12_ADDR[31:0]$286
   208/231: $0$memwr$\cmd$demo.v:84$11_DATA[7:0]$285
   209/231: $0$memwr$\cmd$demo.v:84$11_ADDR[31:0]$284
   210/231: $0$memwr$\cmd$demo.v:83$10_DATA[7:0]$283
   211/231: $0$memwr$\cmd$demo.v:83$10_ADDR[31:0]$282
   212/231: $0$memwr$\cmd$demo.v:82$9_DATA[7:0]$281
   213/231: $0$memwr$\cmd$demo.v:82$9_ADDR[31:0]$280
   214/231: $0$memwr$\cmd$demo.v:81$8_DATA[7:0]$279
   215/231: $0$memwr$\cmd$demo.v:81$8_ADDR[31:0]$278
   216/231: $0$memwr$\cmd$demo.v:80$7_DATA[7:0]$277
   217/231: $0$memwr$\cmd$demo.v:80$7_ADDR[31:0]$276
   218/231: $0$memwr$\cmd$demo.v:79$6_DATA[7:0]$275
   219/231: $0$memwr$\cmd$demo.v:79$6_ADDR[31:0]$274
   220/231: $0$memwr$\cmd$demo.v:78$5_DATA[7:0]$273
   221/231: $0$memwr$\cmd$demo.v:78$5_ADDR[31:0]$272
   222/231: $0$memwr$\cmd$demo.v:77$4_DATA[7:0]$271
   223/231: $0$memwr$\cmd$demo.v:77$4_ADDR[31:0]$270
   224/231: $0$memwr$\cmd$demo.v:76$3_DATA[7:0]$269
   225/231: $0$memwr$\cmd$demo.v:76$3_ADDR[31:0]$268
   226/231: $0$memwr$\cmd$demo.v:75$2_DATA[7:0]$267
   227/231: $0$memwr$\cmd$demo.v:75$2_ADDR[31:0]$266
   228/231: $0$memwr$\cmd$demo.v:74$1_DATA[7:0]$265
   229/231: $0$memwr$\cmd$demo.v:74$1_ADDR[31:0]$264
   230/231: $1\scl[0:0]
   231/231: $1\state[5:0]
Creating decoders for process `\demo.$proc$demo.v:205$114'.
     1/14: $0\pixel_data[15:0] [15:8]
     2/14: $0\pixel_data[15:0] [7:0]
     3/14: $0\param_counter[6:0]
     4/14: $0\cmd_counter[4:0]
     5/14: $0\pixel_bit_counter[3:0]
     6/14: $0\params_left[13:0]
     7/14: $0\bit_counter[2:0]
     8/14: $0\data[7:0]
     9/14: $0\delay[15:0]
    10/14: $0\state[5:0]
    11/14: $0\cs[0:0]
    12/14: $0\mosi[0:0]
    13/14: $0\dc[0:0]
    14/14: $0\rst[0:0]
Creating decoders for process `\demo.$proc$demo.v:198$112'.
     1/1: $0\scl[0:0]

2.3.6. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:74$1_ADDR' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:74$1_DATA' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:75$2_ADDR' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:75$2_DATA' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:76$3_ADDR' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:76$3_DATA' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:77$4_ADDR' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:77$4_DATA' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:78$5_ADDR' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:78$5_DATA' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:79$6_ADDR' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:79$6_DATA' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:80$7_ADDR' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:80$7_DATA' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:81$8_ADDR' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:81$8_DATA' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:82$9_ADDR' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:82$9_DATA' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:83$10_ADDR' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:83$10_DATA' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:84$11_ADDR' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:84$11_DATA' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:85$12_ADDR' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:85$12_DATA' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:86$13_ADDR' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:86$13_DATA' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:87$14_ADDR' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:87$14_DATA' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:88$15_ADDR' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:88$15_DATA' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:89$16_ADDR' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:89$16_DATA' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:90$17_ADDR' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:90$17_DATA' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:91$18_ADDR' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:91$18_DATA' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:92$19_ADDR' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:92$19_DATA' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:93$20_ADDR' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:93$20_DATA' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:94$21_ADDR' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:94$21_DATA' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:95$22_ADDR' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:95$22_DATA' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:96$23_ADDR' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:96$23_DATA' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:97$24_ADDR' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:97$24_DATA' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:98$25_ADDR' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:98$25_DATA' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:99$26_ADDR' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:99$26_DATA' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:100$27_ADDR' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:100$27_DATA' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:101$28_ADDR' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:101$28_DATA' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:102$29_ADDR' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:102$29_DATA' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:103$30_ADDR' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:103$30_DATA' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:104$31_ADDR' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:104$31_DATA' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:105$32_ADDR' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:105$32_DATA' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:106$33_ADDR' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:106$33_DATA' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:107$34_ADDR' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:107$34_DATA' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:108$35_ADDR' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:108$35_DATA' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:109$36_ADDR' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:109$36_DATA' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:110$37_ADDR' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:110$37_DATA' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:111$38_ADDR' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:111$38_DATA' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:112$39_ADDR' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:112$39_DATA' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:113$40_ADDR' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:113$40_DATA' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:114$41_ADDR' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:114$41_DATA' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:115$42_ADDR' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:115$42_DATA' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:116$43_ADDR' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:116$43_DATA' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:119$44_ADDR' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:119$44_DATA' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:120$45_ADDR' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:120$45_DATA' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:121$46_ADDR' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:121$46_DATA' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:122$47_ADDR' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:122$47_DATA' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:123$48_ADDR' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:123$48_DATA' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:124$49_ADDR' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:124$49_DATA' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:125$50_ADDR' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:125$50_DATA' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:126$51_ADDR' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:126$51_DATA' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:127$52_ADDR' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:127$52_DATA' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:128$53_ADDR' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:128$53_DATA' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:129$54_ADDR' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:129$54_DATA' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:130$55_ADDR' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:130$55_DATA' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:131$56_ADDR' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:131$56_DATA' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:132$57_ADDR' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:132$57_DATA' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:133$58_ADDR' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:133$58_DATA' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:134$59_ADDR' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:134$59_DATA' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:135$60_ADDR' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:135$60_DATA' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:136$61_ADDR' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:136$61_DATA' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:137$62_ADDR' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:137$62_DATA' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:138$63_ADDR' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:138$63_DATA' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:139$64_ADDR' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:139$64_DATA' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:140$65_ADDR' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:140$65_DATA' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:141$66_ADDR' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:141$66_DATA' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:142$67_ADDR' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:142$67_DATA' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:143$68_ADDR' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:143$68_DATA' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:144$69_ADDR' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:144$69_DATA' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:145$70_ADDR' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:145$70_DATA' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:146$71_ADDR' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:146$71_DATA' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:147$72_ADDR' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:147$72_DATA' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:148$73_ADDR' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:148$73_DATA' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:149$74_ADDR' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:149$74_DATA' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:150$75_ADDR' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:150$75_DATA' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:151$76_ADDR' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:151$76_DATA' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:152$77_ADDR' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:152$77_DATA' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:153$78_ADDR' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:153$78_DATA' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:154$79_ADDR' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:154$79_DATA' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:155$80_ADDR' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:155$80_DATA' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:156$81_ADDR' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:156$81_DATA' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:157$82_ADDR' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:157$82_DATA' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:158$83_ADDR' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:158$83_DATA' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:159$84_ADDR' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:159$84_DATA' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:160$85_ADDR' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:160$85_DATA' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:161$86_ADDR' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:161$86_DATA' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:162$87_ADDR' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:162$87_DATA' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:163$88_ADDR' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:163$88_DATA' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:164$89_ADDR' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:164$89_DATA' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:165$90_ADDR' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:165$90_DATA' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:166$91_ADDR' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:166$91_DATA' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:167$92_ADDR' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:167$92_DATA' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:168$93_ADDR' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:168$93_DATA' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:169$94_ADDR' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:169$94_DATA' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:170$95_ADDR' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:170$95_DATA' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:171$96_ADDR' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:171$96_DATA' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:172$97_ADDR' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:172$97_DATA' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:173$98_ADDR' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:173$98_DATA' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:174$99_ADDR' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:174$99_DATA' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:175$100_ADDR' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:175$100_DATA' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:176$101_ADDR' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:176$101_DATA' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:177$102_ADDR' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:177$102_DATA' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:178$103_ADDR' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:178$103_DATA' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:179$104_ADDR' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:179$104_DATA' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:180$105_ADDR' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:180$105_DATA' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:181$106_ADDR' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:181$106_DATA' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:182$107_ADDR' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:182$107_DATA' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:183$108_ADDR' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:183$108_DATA' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:184$109_ADDR' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:184$109_DATA' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:185$110_ADDR' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:185$110_DATA' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:186$111_ADDR' from process `\demo.$proc$demo.v:69$263'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:186$111_DATA' from process `\demo.$proc$demo.v:69$263'.

2.3.7. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\demo.\rst' using process `\demo.$proc$demo.v:205$114'.
  created $dff cell `$procdff$668' with positive edge clock.
Creating register for signal `\demo.\dc' using process `\demo.$proc$demo.v:205$114'.
  created $dff cell `$procdff$669' with positive edge clock.
Creating register for signal `\demo.\mosi' using process `\demo.$proc$demo.v:205$114'.
  created $dff cell `$procdff$670' with positive edge clock.
Creating register for signal `\demo.\cs' using process `\demo.$proc$demo.v:205$114'.
  created $dff cell `$procdff$671' with positive edge clock.
Creating register for signal `\demo.\state' using process `\demo.$proc$demo.v:205$114'.
  created $dff cell `$procdff$672' with positive edge clock.
Creating register for signal `\demo.\delay' using process `\demo.$proc$demo.v:205$114'.
  created $dff cell `$procdff$673' with positive edge clock.
Creating register for signal `\demo.\data' using process `\demo.$proc$demo.v:205$114'.
  created $dff cell `$procdff$674' with positive edge clock.
Creating register for signal `\demo.\bit_counter' using process `\demo.$proc$demo.v:205$114'.
  created $dff cell `$procdff$675' with positive edge clock.
Creating register for signal `\demo.\pixel_data' using process `\demo.$proc$demo.v:205$114'.
  created $dff cell `$procdff$676' with positive edge clock.
Creating register for signal `\demo.\pixel_bit_counter' using process `\demo.$proc$demo.v:205$114'.
  created $dff cell `$procdff$677' with positive edge clock.
Creating register for signal `\demo.\cmd_counter' using process `\demo.$proc$demo.v:205$114'.
  created $dff cell `$procdff$678' with positive edge clock.
Creating register for signal `\demo.\param_counter' using process `\demo.$proc$demo.v:205$114'.
  created $dff cell `$procdff$679' with positive edge clock.
Creating register for signal `\demo.\params_left' using process `\demo.$proc$demo.v:205$114'.
  created $dff cell `$procdff$680' with positive edge clock.
Creating register for signal `\demo.\scl' using process `\demo.$proc$demo.v:198$112'.
  created $dff cell `$procdff$681' with positive edge clock.

2.3.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `demo.$proc$demo.v:69$263'.
Found and cleaned up 16 empty switches in `\demo.$proc$demo.v:205$114'.
Removing empty process `demo.$proc$demo.v:205$114'.
Removing empty process `demo.$proc$demo.v:198$112'.
Cleaned up 16 empty switches.

2.4. Executing FLATTEN pass (flatten design).
No more expansions possible.

2.5. Executing TRIBUF pass.

2.6. Executing DEMINOUT pass (demote inout ports to input or output).

2.7. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.
<suppressed ~16 debug messages>

2.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..
Removed 1 unused cells and 501 unused wires.
<suppressed ~2 debug messages>

2.9. Executing CHECK pass (checking for obvious problems).
checking module demo..
found and reported 0 problems.

2.10. Executing OPT pass (performing simple optimizations).

2.10.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.

2.10.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\demo'.
<suppressed ~99 debug messages>
Removed a total of 33 cells.

2.10.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \demo..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~14 debug messages>

2.10.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \demo.
    New ctrl vector for $pmux cell $procmux$627: { $procmux$593_CMP $auto$opt_reduce.cc:132:opt_mux$683 }
    New ctrl vector for $pmux cell $procmux$647: { $auto$opt_reduce.cc:132:opt_mux$685 $procmux$532_CMP }
  Optimizing cells in module \demo.
Performed a total of 2 changes.

2.10.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\demo'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

2.10.6. Executing OPT_RMDFF pass (remove dff with constant values).

2.10.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..
Removed 0 unused cells and 34 unused wires.
<suppressed ~1 debug messages>

2.10.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.

2.10.9. Rerunning OPT passes. (Maybe there is more to do..)

2.10.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \demo..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~14 debug messages>

2.10.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \demo.
    New ctrl vector for $pmux cell $procmux$565: { $procmux$571_CMP $auto$opt_reduce.cc:132:opt_mux$687 }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$686: { $procmux$566_CMP $procmux$570_CMP }
  Optimizing cells in module \demo.
Performed a total of 2 changes.

2.10.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\demo'.
Removed a total of 0 cells.

2.10.13. Executing OPT_RMDFF pass (remove dff with constant values).

2.10.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..

2.10.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.

2.10.16. Rerunning OPT passes. (Maybe there is more to do..)

2.10.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \demo..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~14 debug messages>

2.10.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \demo.
Performed a total of 0 changes.

2.10.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\demo'.
Removed a total of 0 cells.

2.10.20. Executing OPT_RMDFF pass (remove dff with constant values).

2.10.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..

2.10.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.

2.10.23. Finished OPT passes. (There is nothing left to do.)

2.11. Executing WREDUCE pass (reducing word size of cells).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:74$152 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:75$153 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:76$154 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:77$155 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:78$156 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:79$157 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:80$158 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:81$159 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:82$160 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:83$161 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:84$162 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:85$163 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:86$164 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:87$165 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:88$166 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:89$167 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:90$168 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:91$169 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:92$170 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:93$171 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:94$172 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:95$173 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\num_params$demo.v:100$178 (num_params).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\num_params$demo.v:101$179 (num_params).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\num_params$demo.v:102$180 (num_params).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\num_params$demo.v:103$181 (num_params).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\num_params$demo.v:104$182 (num_params).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\num_params$demo.v:105$183 (num_params).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\num_params$demo.v:106$184 (num_params).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\num_params$demo.v:107$185 (num_params).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\num_params$demo.v:108$186 (num_params).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\num_params$demo.v:109$187 (num_params).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\num_params$demo.v:110$188 (num_params).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\num_params$demo.v:111$189 (num_params).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\num_params$demo.v:112$190 (num_params).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\num_params$demo.v:113$191 (num_params).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\num_params$demo.v:114$192 (num_params).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\num_params$demo.v:115$193 (num_params).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\num_params$demo.v:116$194 (num_params).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\num_params$demo.v:96$174 (num_params).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\num_params$demo.v:97$175 (num_params).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\num_params$demo.v:98$176 (num_params).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\num_params$demo.v:99$177 (num_params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:119$195 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:120$196 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:121$197 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:122$198 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:123$199 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:124$200 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:125$201 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:126$202 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:127$203 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:128$204 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:129$205 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:130$206 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:131$207 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:132$208 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:133$209 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:134$210 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:135$211 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:136$212 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:137$213 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:138$214 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:139$215 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:140$216 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:141$217 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:142$218 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:143$219 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:144$220 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:145$221 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:146$222 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:147$223 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:148$224 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:149$225 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:150$226 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:151$227 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:152$228 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:153$229 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:154$230 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:155$231 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:156$232 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:157$233 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:158$234 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:159$235 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:160$236 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:161$237 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:162$238 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:163$239 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:164$240 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:165$241 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:166$242 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:167$243 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:168$244 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:169$245 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:170$246 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:171$247 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:172$248 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:173$249 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:174$250 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:175$251 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:176$252 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:177$253 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:178$254 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:179$255 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:180$256 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:181$257 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:182$258 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:183$259 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:184$260 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:185$261 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:186$262 (params).
Removed top 7 bits (of 16) from port B of cell demo.$le$demo.v:233$115 ($le).
Removed top 15 bits (of 16) from port B of cell demo.$add$demo.v:235$116 ($add).
Removed top 4 bits (of 5) from port B of cell demo.$add$demo.v:271$122 ($add).
Removed top 4 bits (of 5) from port B of cell demo.$sub$demo.v:288$125 ($sub).
Removed top 2 bits (of 8) from port B of cell demo.$eq$demo.v:288$126 ($eq).
Removed top 3 bits (of 4) from port B of cell demo.$sub$demo.v:305$131 ($sub).
Removed top 2 bits (of 3) from port B of cell demo.$sub$demo.v:324$135 ($sub).
Removed top 6 bits (of 7) from port B of cell demo.$add$demo.v:417$150 ($add).
Removed top 13 bits (of 14) from port B of cell demo.$sub$demo.v:419$151 ($sub).
Removed top 2 bits (of 6) from port B of cell demo.$procmux$490_CMP0 ($eq).
Removed top 3 bits (of 6) from port B of cell demo.$procmux$515_CMP0 ($eq).
Removed top 3 bits (of 6) from port B of cell demo.$procmux$526_CMP0 ($eq).
Removed top 2 bits (of 6) from port B of cell demo.$procmux$532_CMP0 ($eq).
Removed top 4 bits (of 6) from port B of cell demo.$procmux$566_CMP0 ($eq).
Removed top 4 bits (of 6) from port B of cell demo.$procmux$570_CMP0 ($eq).
Removed top 4 bits (of 6) from mux cell demo.$procmux$573 ($mux).
Removed top 3 bits (of 6) from mux cell demo.$procmux$579 ($mux).
Removed top 2 bits (of 6) from port B of cell demo.$procmux$581_CMP0 ($eq).
Removed top 5 bits (of 6) from mux cell demo.$procmux$583 ($mux).
Removed top 2 bits (of 6) from port B of cell demo.$procmux$585_CMP0 ($eq).
Removed top 2 bits (of 6) from mux cell demo.$procmux$587 ($mux).
Removed top 2 bits (of 6) from port B of cell demo.$procmux$589_CMP0 ($eq).
Removed top 2 bits (of 6) from mux cell demo.$procmux$591 ($mux).
Removed top 3 bits (of 6) from port B of cell demo.$procmux$593_CMP0 ($eq).
Removed top 4 bits (of 6) from mux cell demo.$procmux$602 ($mux).
Removed top 4 bits (of 6) from mux cell demo.$procmux$595 ($mux).
Removed top 2 bits (of 6) from mux cell demo.$procmux$598 ($mux).
Removed top 2 bits (of 6) from mux cell demo.$procmux$605 ($mux).
Removed top 2 bits (of 6) from mux cell demo.$procmux$607 ($mux).
Removed top 3 bits (of 6) from port B of cell demo.$procmux$610_CMP0 ($eq).
Removed top 5 bits (of 6) from mux cell demo.$procmux$612 ($mux).
Removed top 5 bits (of 6) from port B of cell demo.$procmux$623_CMP0 ($eq).
Removed top 4 bits (of 6) from wire demo.$procmux$573_Y.
Removed top 3 bits (of 6) from wire demo.$procmux$579_Y.
Removed top 5 bits (of 6) from wire demo.$procmux$583_Y.
Removed top 2 bits (of 6) from wire demo.$procmux$587_Y.
Removed top 2 bits (of 6) from wire demo.$procmux$591_Y.
Removed top 4 bits (of 6) from wire demo.$procmux$595_Y.
Removed top 2 bits (of 6) from wire demo.$procmux$598_Y.
Removed top 4 bits (of 6) from wire demo.$procmux$602_Y.
Removed top 2 bits (of 6) from wire demo.$procmux$605_Y.
Removed top 2 bits (of 6) from wire demo.$procmux$607_Y.
Removed top 5 bits (of 6) from wire demo.$procmux$612_Y.

2.12. Executing PEEPOPT pass (run peephole optimizers).

2.13. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..
Removed 0 unused cells and 11 unused wires.
<suppressed ~1 debug messages>

2.14. Executing SHARE pass (SAT-based resource sharing).
Found 4 cells in module demo that may be considered for resource sharing.
  Analyzing resource sharing options for $memrd$\params$demo.v:401$145 ($memrd):
    Found 1 activation_patterns using ctrl signal $procmux$490_CMP.
    No candidates found.
  Analyzing resource sharing options for $memrd$\num_params$demo.v:391$140 ($memrd):
    Found 1 activation_patterns using ctrl signal $procmux$532_CMP.
    No candidates found.
  Analyzing resource sharing options for $memrd$\cmd$demo.v:288$124 ($memrd):
    Found 2 activation_patterns using ctrl signal { $procmux$526_CMP $procmux$490_CMP }.
    Found 1 candidates: $memrd$\cmd$demo.v:264$119
    Analyzing resource sharing with $memrd$\cmd$demo.v:264$119 ($memrd):
      Found 2 activation_patterns using ctrl signal { $procmux$515_CMP $eq$demo.v:264$120_Y }.
      Forbidden control signals for this pair of cells: { $logic_and$demo.v:288$127_Y $eq$demo.v:288$126_Y $eq$demo.v:264$120_Y }
      Activation pattern for cell $memrd$\cmd$demo.v:288$124: $procmux$490_CMP = 1'1
      Activation pattern for cell $memrd$\cmd$demo.v:288$124: $procmux$526_CMP = 1'1
      Activation pattern for cell $memrd$\cmd$demo.v:264$119: $procmux$515_CMP = 1'1
      Adding exclusive control bits: $procmux$490_CMP vs. $procmux$515_CMP
      Adding exclusive control bits: $procmux$490_CMP vs. $procmux$526_CMP
      Adding exclusive control bits: $procmux$490_CMP vs. $procmux$515_CMP
      Adding exclusive control bits: $procmux$515_CMP vs. $procmux$526_CMP
      Size of SAT problem: 4 cells, 65 variables, 165 clauses
      According to the SAT solver this pair of cells can be shared.
      Activation signal for $memrd$\cmd$demo.v:264$119: $auto$share.cc:976:make_cell_activation_logic$699
      New cell: $auto$share.cc:710:make_supercell$701 ($memrd)
  Analyzing resource sharing options for $auto$share.cc:710:make_supercell$701 ($memrd):
    Found 3 activation_patterns using ctrl signal { $procmux$526_CMP $procmux$515_CMP $procmux$490_CMP }.
    No candidates found.
Removing 2 cells in module demo:
  Removing cell $memrd$\cmd$demo.v:264$119 ($memrd).
  Removing cell $memrd$\cmd$demo.v:288$124 ($memrd).

2.15. Executing TECHMAP pass (map to technology primitives).

2.15.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/cmp2lut.v
Parsing Verilog input from `/usr/bin/../share/yosys/cmp2lut.v' to AST representation.
Generating RTLIL representation for module `\_90_lut_cmp_'.
Successfully finished Verilog frontend.

2.15.2. Continuing TECHMAP pass.
Using template $paramod$968c93632f950ce0f306709fa121c1e7a868940c\_90_lut_cmp_ for cells of type $eq.
Using template $paramod$77ad031fce233083715243f95e3cd2547d931e42\_90_lut_cmp_ for cells of type $eq.
Using template $paramod$b014af9c344b7c6e328d7df54af43048a86ccf04\_90_lut_cmp_ for cells of type $eq.
No more expansions possible.
<suppressed ~304 debug messages>

2.16. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.

2.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..
Removed 0 unused cells and 10 unused wires.
<suppressed ~2 debug messages>

2.18. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module demo:
  creating $macc model for $add$demo.v:235$116 ($add).
  creating $macc model for $add$demo.v:271$122 ($add).
  creating $macc model for $add$demo.v:417$150 ($add).
  creating $macc model for $sub$demo.v:288$125 ($sub).
  creating $macc model for $sub$demo.v:305$131 ($sub).
  creating $macc model for $sub$demo.v:324$135 ($sub).
  creating $macc model for $sub$demo.v:419$151 ($sub).
  creating $alu model for $macc $sub$demo.v:419$151.
  creating $alu model for $macc $sub$demo.v:324$135.
  creating $alu model for $macc $sub$demo.v:305$131.
  creating $alu model for $macc $sub$demo.v:288$125.
  creating $alu model for $macc $add$demo.v:417$150.
  creating $alu model for $macc $add$demo.v:271$122.
  creating $alu model for $macc $add$demo.v:235$116.
  creating $alu model for $le$demo.v:233$115 ($le): new $alu
  creating $alu cell for $le$demo.v:233$115: $auto$alumacc.cc:474:replace_alu$712
  creating $alu cell for $add$demo.v:235$116: $auto$alumacc.cc:474:replace_alu$725
  creating $alu cell for $add$demo.v:271$122: $auto$alumacc.cc:474:replace_alu$728
  creating $alu cell for $add$demo.v:417$150: $auto$alumacc.cc:474:replace_alu$731
  creating $alu cell for $sub$demo.v:288$125: $auto$alumacc.cc:474:replace_alu$734
  creating $alu cell for $sub$demo.v:305$131: $auto$alumacc.cc:474:replace_alu$737
  creating $alu cell for $sub$demo.v:324$135: $auto$alumacc.cc:474:replace_alu$740
  creating $alu cell for $sub$demo.v:419$151: $auto$alumacc.cc:474:replace_alu$743
  created 8 $alu and 0 $macc cells.

2.19. Executing OPT pass (performing simple optimizations).

2.19.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.

2.19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\demo'.
Removed a total of 0 cells.

2.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \demo..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~15 debug messages>

2.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \demo.
    New input vector for $reduce_or cell $auto$alumacc.cc:509:replace_alu$723: { $auto$rtlil.cc:1832:Not$722 $auto$rtlil.cc:1835:ReduceAnd$716 }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$715: { $auto$alumacc.cc:490:replace_alu$713 [0] $auto$alumacc.cc:490:replace_alu$713 [1] $auto$alumacc.cc:490:replace_alu$713 [2] $auto$alumacc.cc:490:replace_alu$713 [3] $auto$alumacc.cc:490:replace_alu$713 [4] $auto$alumacc.cc:490:replace_alu$713 [5] $auto$alumacc.cc:490:replace_alu$713 [6] $auto$alumacc.cc:490:replace_alu$713 [7] $auto$alumacc.cc:490:replace_alu$713 [8] $auto$alumacc.cc:490:replace_alu$713 [9] $auto$alumacc.cc:490:replace_alu$713 [10] $auto$alumacc.cc:490:replace_alu$713 [11] $auto$alumacc.cc:490:replace_alu$713 [12] $auto$alumacc.cc:490:replace_alu$713 [13] $auto$alumacc.cc:490:replace_alu$713 [14] $auto$alumacc.cc:490:replace_alu$713 [15] }
  Optimizing cells in module \demo.
Performed a total of 2 changes.

2.19.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\demo'.
Removed a total of 0 cells.

2.19.6. Executing OPT_RMDFF pass (remove dff with constant values).

2.19.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

2.19.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.

2.19.9. Rerunning OPT passes. (Maybe there is more to do..)

2.19.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \demo..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~15 debug messages>

2.19.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \demo.
Performed a total of 0 changes.

2.19.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\demo'.
Removed a total of 0 cells.

2.19.13. Executing OPT_RMDFF pass (remove dff with constant values).

2.19.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..

2.19.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.

2.19.16. Finished OPT passes. (There is nothing left to do.)

2.20. Executing FSM pass (extract and optimize FSM).

2.20.1. Executing FSM_DETECT pass (finding FSMs in design).
Not marking demo.state as FSM state register:
    Register has an initialization value.

2.20.2. Executing FSM_EXTRACT pass (extracting FSM from design).

2.20.3. Executing FSM_OPT pass (simple optimizations of FSMs).

2.20.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..

2.20.5. Executing FSM_OPT pass (simple optimizations of FSMs).

2.20.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

2.20.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

2.20.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

2.21. Executing OPT pass (performing simple optimizations).

2.21.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.

2.21.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\demo'.
Removed a total of 0 cells.

2.21.3. Executing OPT_RMDFF pass (remove dff with constant values).

2.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..

2.21.5. Finished fast OPT passes.

2.22. Executing MEMORY pass.

2.22.1. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).
Checking cell `$auto$share.cc:710:make_supercell$701' in module `\demo': no (compatible) $dff found.
Checking cell `$memrd$\num_params$demo.v:391$140' in module `\demo': no (compatible) $dff found.
Checking cell `$memrd$\params$demo.v:401$145' in module `\demo': no (compatible) $dff found.

2.22.2. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..

2.22.3. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

2.22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..

2.22.5. Executing MEMORY_COLLECT pass (generating $mem cells).
Collecting $memrd, $memwr and $meminit for memory `\cmd' in module `\demo':
  $meminit$\cmd$demo.v:74$152 ($meminit)
  $meminit$\cmd$demo.v:75$153 ($meminit)
  $meminit$\cmd$demo.v:76$154 ($meminit)
  $meminit$\cmd$demo.v:77$155 ($meminit)
  $meminit$\cmd$demo.v:78$156 ($meminit)
  $meminit$\cmd$demo.v:79$157 ($meminit)
  $meminit$\cmd$demo.v:80$158 ($meminit)
  $meminit$\cmd$demo.v:81$159 ($meminit)
  $meminit$\cmd$demo.v:82$160 ($meminit)
  $meminit$\cmd$demo.v:83$161 ($meminit)
  $meminit$\cmd$demo.v:84$162 ($meminit)
  $meminit$\cmd$demo.v:85$163 ($meminit)
  $meminit$\cmd$demo.v:86$164 ($meminit)
  $meminit$\cmd$demo.v:87$165 ($meminit)
  $meminit$\cmd$demo.v:88$166 ($meminit)
  $meminit$\cmd$demo.v:89$167 ($meminit)
  $meminit$\cmd$demo.v:90$168 ($meminit)
  $meminit$\cmd$demo.v:91$169 ($meminit)
  $meminit$\cmd$demo.v:92$170 ($meminit)
  $meminit$\cmd$demo.v:93$171 ($meminit)
  $meminit$\cmd$demo.v:94$172 ($meminit)
  $meminit$\cmd$demo.v:95$173 ($meminit)
  $auto$share.cc:710:make_supercell$701 ($memrd)
Collecting $memrd, $memwr and $meminit for memory `\num_params' in module `\demo':
  $meminit$\num_params$demo.v:96$174 ($meminit)
  $meminit$\num_params$demo.v:97$175 ($meminit)
  $meminit$\num_params$demo.v:98$176 ($meminit)
  $meminit$\num_params$demo.v:99$177 ($meminit)
  $meminit$\num_params$demo.v:100$178 ($meminit)
  $meminit$\num_params$demo.v:101$179 ($meminit)
  $meminit$\num_params$demo.v:102$180 ($meminit)
  $meminit$\num_params$demo.v:103$181 ($meminit)
  $meminit$\num_params$demo.v:104$182 ($meminit)
  $meminit$\num_params$demo.v:105$183 ($meminit)
  $meminit$\num_params$demo.v:106$184 ($meminit)
  $meminit$\num_params$demo.v:107$185 ($meminit)
  $meminit$\num_params$demo.v:108$186 ($meminit)
  $meminit$\num_params$demo.v:109$187 ($meminit)
  $meminit$\num_params$demo.v:110$188 ($meminit)
  $meminit$\num_params$demo.v:111$189 ($meminit)
  $meminit$\num_params$demo.v:112$190 ($meminit)
  $meminit$\num_params$demo.v:113$191 ($meminit)
  $meminit$\num_params$demo.v:114$192 ($meminit)
  $meminit$\num_params$demo.v:115$193 ($meminit)
  $meminit$\num_params$demo.v:116$194 ($meminit)
  $memrd$\num_params$demo.v:391$140 ($memrd)
Collecting $memrd, $memwr and $meminit for memory `\params' in module `\demo':
  $meminit$\params$demo.v:119$195 ($meminit)
  $meminit$\params$demo.v:120$196 ($meminit)
  $meminit$\params$demo.v:121$197 ($meminit)
  $meminit$\params$demo.v:122$198 ($meminit)
  $meminit$\params$demo.v:123$199 ($meminit)
  $meminit$\params$demo.v:124$200 ($meminit)
  $meminit$\params$demo.v:125$201 ($meminit)
  $meminit$\params$demo.v:126$202 ($meminit)
  $meminit$\params$demo.v:127$203 ($meminit)
  $meminit$\params$demo.v:128$204 ($meminit)
  $meminit$\params$demo.v:129$205 ($meminit)
  $meminit$\params$demo.v:130$206 ($meminit)
  $meminit$\params$demo.v:131$207 ($meminit)
  $meminit$\params$demo.v:132$208 ($meminit)
  $meminit$\params$demo.v:133$209 ($meminit)
  $meminit$\params$demo.v:134$210 ($meminit)
  $meminit$\params$demo.v:135$211 ($meminit)
  $meminit$\params$demo.v:136$212 ($meminit)
  $meminit$\params$demo.v:137$213 ($meminit)
  $meminit$\params$demo.v:138$214 ($meminit)
  $meminit$\params$demo.v:139$215 ($meminit)
  $meminit$\params$demo.v:140$216 ($meminit)
  $meminit$\params$demo.v:141$217 ($meminit)
  $meminit$\params$demo.v:142$218 ($meminit)
  $meminit$\params$demo.v:143$219 ($meminit)
  $meminit$\params$demo.v:144$220 ($meminit)
  $meminit$\params$demo.v:145$221 ($meminit)
  $meminit$\params$demo.v:146$222 ($meminit)
  $meminit$\params$demo.v:147$223 ($meminit)
  $meminit$\params$demo.v:148$224 ($meminit)
  $meminit$\params$demo.v:149$225 ($meminit)
  $meminit$\params$demo.v:150$226 ($meminit)
  $meminit$\params$demo.v:151$227 ($meminit)
  $meminit$\params$demo.v:152$228 ($meminit)
  $meminit$\params$demo.v:153$229 ($meminit)
  $meminit$\params$demo.v:154$230 ($meminit)
  $meminit$\params$demo.v:155$231 ($meminit)
  $meminit$\params$demo.v:156$232 ($meminit)
  $meminit$\params$demo.v:157$233 ($meminit)
  $meminit$\params$demo.v:158$234 ($meminit)
  $meminit$\params$demo.v:159$235 ($meminit)
  $meminit$\params$demo.v:160$236 ($meminit)
  $meminit$\params$demo.v:161$237 ($meminit)
  $meminit$\params$demo.v:162$238 ($meminit)
  $meminit$\params$demo.v:163$239 ($meminit)
  $meminit$\params$demo.v:164$240 ($meminit)
  $meminit$\params$demo.v:165$241 ($meminit)
  $meminit$\params$demo.v:166$242 ($meminit)
  $meminit$\params$demo.v:167$243 ($meminit)
  $meminit$\params$demo.v:168$244 ($meminit)
  $meminit$\params$demo.v:169$245 ($meminit)
  $meminit$\params$demo.v:170$246 ($meminit)
  $meminit$\params$demo.v:171$247 ($meminit)
  $meminit$\params$demo.v:172$248 ($meminit)
  $meminit$\params$demo.v:173$249 ($meminit)
  $meminit$\params$demo.v:174$250 ($meminit)
  $meminit$\params$demo.v:175$251 ($meminit)
  $meminit$\params$demo.v:176$252 ($meminit)
  $meminit$\params$demo.v:177$253 ($meminit)
  $meminit$\params$demo.v:178$254 ($meminit)
  $meminit$\params$demo.v:179$255 ($meminit)
  $meminit$\params$demo.v:180$256 ($meminit)
  $meminit$\params$demo.v:181$257 ($meminit)
  $meminit$\params$demo.v:182$258 ($meminit)
  $meminit$\params$demo.v:183$259 ($meminit)
  $meminit$\params$demo.v:184$260 ($meminit)
  $meminit$\params$demo.v:185$261 ($meminit)
  $meminit$\params$demo.v:186$262 ($meminit)
  $memrd$\params$demo.v:401$145 ($memrd)

2.23. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..

2.24. Executing MEMORY_BRAM pass (mapping $mem cells to block memories).
Processing demo.cmd:
  Properties: ports=1 bits=176 rports=1 wports=0 dbits=8 abits=5 words=22
  Checking rule #1 for bram type $__ICE40_RAM4K_M0 (variant 1):
    Bram geometry: abits=8 dbits=16 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M0: awaste=234 dwaste=8 bwaste=3920 waste=3920 efficiency=4
    Rule #1 for bram type $__ICE40_RAM4K_M0 (variant 1) accepted.
    Mapping to bram type $__ICE40_RAM4K_M0 (variant 1):
      Read port #0 is in clock domain !~async~.
        Bram port A1.1 has incompatible clock type.
        Failed to map read port #0.
    Mapping to bram type $__ICE40_RAM4K_M0 failed.
  Checking rule #2 for bram type $__ICE40_RAM4K_M123 (variant 1):
    Bram geometry: abits=9 dbits=8 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=490 dwaste=0 bwaste=3920 waste=3920 efficiency=4
    Rule #2 for bram type $__ICE40_RAM4K_M123 (variant 1) accepted.
    Mapping to bram type $__ICE40_RAM4K_M123 (variant 1):
      Read port #0 is in clock domain !~async~.
        Bram port A1.1 has incompatible clock type.
        Failed to map read port #0.
    Mapping to bram type $__ICE40_RAM4K_M123 failed.
  Checking rule #2 for bram type $__ICE40_RAM4K_M123 (variant 2):
    Bram geometry: abits=10 dbits=4 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=1002 dwaste=0 bwaste=4008 waste=4008 efficiency=2
    Rule #2 for bram type $__ICE40_RAM4K_M123 (variant 2) accepted.
    Mapping to bram type $__ICE40_RAM4K_M123 (variant 2):
      Read port #0 is in clock domain !~async~.
        Bram port A1.1 has incompatible clock type.
        Failed to map read port #0.
    Mapping to bram type $__ICE40_RAM4K_M123 failed.
  Checking rule #2 for bram type $__ICE40_RAM4K_M123 (variant 3):
    Bram geometry: abits=11 dbits=2 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=2026 dwaste=0 bwaste=4052 waste=4052 efficiency=1
    Rule #2 for bram type $__ICE40_RAM4K_M123 (variant 3) rejected: requirement 'min efficiency 2' not met.
  No acceptable bram resources found.
Processing demo.num_params:
  Properties: ports=1 bits=294 rports=1 wports=0 dbits=14 abits=5 words=21
  Checking rule #1 for bram type $__ICE40_RAM4K_M0 (variant 1):
    Bram geometry: abits=8 dbits=16 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M0: awaste=235 dwaste=2 bwaste=3802 waste=3802 efficiency=7
    Rule #1 for bram type $__ICE40_RAM4K_M0 (variant 1) accepted.
    Mapping to bram type $__ICE40_RAM4K_M0 (variant 1):
      Read port #0 is in clock domain !~async~.
        Bram port A1.1 has incompatible clock type.
        Failed to map read port #0.
    Mapping to bram type $__ICE40_RAM4K_M0 failed.
  Checking rule #2 for bram type $__ICE40_RAM4K_M123 (variant 1):
    Bram geometry: abits=9 dbits=8 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=491 dwaste=2 bwaste=3970 waste=3970 efficiency=3
    Rule #2 for bram type $__ICE40_RAM4K_M123 (variant 1) accepted.
    Mapping to bram type $__ICE40_RAM4K_M123 (variant 1):
      Read port #0 is in clock domain !~async~.
        Bram port A1.1 has incompatible clock type.
        Failed to map read port #0.
    Mapping to bram type $__ICE40_RAM4K_M123 failed.
  Checking rule #2 for bram type $__ICE40_RAM4K_M123 (variant 2):
    Bram geometry: abits=10 dbits=4 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=1003 dwaste=2 bwaste=4054 waste=4054 efficiency=1
    Rule #2 for bram type $__ICE40_RAM4K_M123 (variant 2) rejected: requirement 'min efficiency 2' not met.
  Checking rule #2 for bram type $__ICE40_RAM4K_M123 (variant 3):
    Bram geometry: abits=11 dbits=2 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=2027 dwaste=0 bwaste=4054 waste=4054 efficiency=1
    Rule #2 for bram type $__ICE40_RAM4K_M123 (variant 3) rejected: requirement 'min efficiency 2' not met.
  No acceptable bram resources found.
Processing demo.params:
  Properties: ports=1 bits=520 rports=1 wports=0 dbits=8 abits=7 words=65
  Checking rule #1 for bram type $__ICE40_RAM4K_M0 (variant 1):
    Bram geometry: abits=8 dbits=16 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M0: awaste=191 dwaste=8 bwaste=3576 waste=3576 efficiency=12
    Rule #1 for bram type $__ICE40_RAM4K_M0 (variant 1) accepted.
    Mapping to bram type $__ICE40_RAM4K_M0 (variant 1):
      Read port #0 is in clock domain !~async~.
        Bram port A1.1 has incompatible clock type.
        Failed to map read port #0.
    Mapping to bram type $__ICE40_RAM4K_M0 failed.
  Checking rule #2 for bram type $__ICE40_RAM4K_M123 (variant 1):
    Bram geometry: abits=9 dbits=8 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=447 dwaste=0 bwaste=3576 waste=3576 efficiency=12
    Rule #2 for bram type $__ICE40_RAM4K_M123 (variant 1) accepted.
    Mapping to bram type $__ICE40_RAM4K_M123 (variant 1):
      Read port #0 is in clock domain !~async~.
        Bram port A1.1 has incompatible clock type.
        Failed to map read port #0.
    Mapping to bram type $__ICE40_RAM4K_M123 failed.
  Checking rule #2 for bram type $__ICE40_RAM4K_M123 (variant 2):
    Bram geometry: abits=10 dbits=4 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=959 dwaste=0 bwaste=3836 waste=3836 efficiency=6
    Rule #2 for bram type $__ICE40_RAM4K_M123 (variant 2) accepted.
    Mapping to bram type $__ICE40_RAM4K_M123 (variant 2):
      Read port #0 is in clock domain !~async~.
        Bram port A1.1 has incompatible clock type.
        Failed to map read port #0.
    Mapping to bram type $__ICE40_RAM4K_M123 failed.
  Checking rule #2 for bram type $__ICE40_RAM4K_M123 (variant 3):
    Bram geometry: abits=11 dbits=2 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=1983 dwaste=0 bwaste=3966 waste=3966 efficiency=3
    Rule #2 for bram type $__ICE40_RAM4K_M123 (variant 3) accepted.
    Mapping to bram type $__ICE40_RAM4K_M123 (variant 3):
      Read port #0 is in clock domain !~async~.
        Bram port A1.1 has incompatible clock type.
        Failed to map read port #0.
    Mapping to bram type $__ICE40_RAM4K_M123 failed.
  No acceptable bram resources found.

2.25. Executing TECHMAP pass (map to technology primitives).

2.25.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/brams_map.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/brams_map.v' to AST representation.
Generating RTLIL representation for module `\$__ICE40_RAM4K'.
Generating RTLIL representation for module `\$__ICE40_RAM4K_M0'.
Generating RTLIL representation for module `\$__ICE40_RAM4K_M123'.
Successfully finished Verilog frontend.

2.25.2. Continuing TECHMAP pass.
No more expansions possible.

2.26. Executing ICE40_BRAMINIT pass.

2.27. Executing OPT pass (performing simple optimizations).

2.27.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.
<suppressed ~1 debug messages>

2.27.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\demo'.
Removed a total of 0 cells.

2.27.3. Executing OPT_RMDFF pass (remove dff with constant values).

2.27.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

2.27.5. Finished fast OPT passes.

2.28. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).
Mapping memory cell \cmd in module \demo:
  created 22 $dff cells and 0 static cells of width 8.
  read interface: 0 $dff and 31 $mux cells.
  write interface: 0 write mux blocks.
Mapping memory cell \num_params in module \demo:
  created 21 $dff cells and 0 static cells of width 14.
  read interface: 0 $dff and 31 $mux cells.
  write interface: 0 write mux blocks.
Mapping memory cell \params in module \demo:
  created 65 $dff cells and 0 static cells of width 8.
  read interface: 0 $dff and 127 $mux cells.
  write interface: 0 write mux blocks.

2.29. Executing OPT pass (performing simple optimizations).

2.29.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.
<suppressed ~175 debug messages>

2.29.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\demo'.
Removed a total of 0 cells.

2.29.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \demo..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~17 debug messages>

2.29.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \demo.
    Consolidated identical input bits for $mux cell $procmux$573:
      Old ports: A=2'10, B=2'00, Y=$auto$wreduce.cc:455:run$688 [1:0]
      New ports: A=1'1, B=1'0, Y=$auto$wreduce.cc:455:run$688 [1]
      New connections: $auto$wreduce.cc:455:run$688 [0] = 1'0
    Consolidated identical input bits for $mux cell $procmux$579:
      Old ports: A=3'011, B=3'100, Y=$auto$wreduce.cc:455:run$689 [2:0]
      New ports: A=2'01, B=2'10, Y={ $auto$wreduce.cc:455:run$689 [2] $auto$wreduce.cc:455:run$689 [0] }
      New connections: $auto$wreduce.cc:455:run$689 [1] = $auto$wreduce.cc:455:run$689 [0]
    Consolidated identical input bits for $mux cell $procmux$587:
      Old ports: A=4'1010, B=4'0110, Y=$auto$wreduce.cc:455:run$691 [3:0]
      New ports: A=2'10, B=2'01, Y=$auto$wreduce.cc:455:run$691 [3:2]
      New connections: $auto$wreduce.cc:455:run$691 [1:0] = 2'10
    Consolidated identical input bits for $mux cell $procmux$591:
      Old ports: A=4'0111, B=4'1010, Y=$auto$wreduce.cc:455:run$692 [3:0]
      New ports: A=2'01, B=2'10, Y={ $auto$wreduce.cc:455:run$692 [3] $auto$wreduce.cc:455:run$692 [0] }
      New connections: $auto$wreduce.cc:455:run$692 [2:1] = { $auto$wreduce.cc:455:run$692 [0] 1'1 }
    Consolidated identical input bits for $mux cell $procmux$595:
      Old ports: A=2'10, B=2'00, Y=$auto$wreduce.cc:455:run$693 [1:0]
      New ports: A=1'1, B=1'0, Y=$auto$wreduce.cc:455:run$693 [1]
      New connections: $auto$wreduce.cc:455:run$693 [0] = 1'0
    Consolidated identical input bits for $mux cell $procmux$602:
      Old ports: A=2'10, B=2'00, Y=$auto$wreduce.cc:455:run$695 [1:0]
      New ports: A=1'1, B=1'0, Y=$auto$wreduce.cc:455:run$695 [1]
      New connections: $auto$wreduce.cc:455:run$695 [0] = 1'0
  Optimizing cells in module \demo.
    Consolidated identical input bits for $mux cell $procmux$598:
      Old ports: A={ 2'10 $auto$wreduce.cc:455:run$693 [1:0] }, B=4'0111, Y=$auto$wreduce.cc:455:run$694 [3:0]
      New ports: A={ 1'1 $auto$wreduce.cc:455:run$693 [1] 1'0 }, B=3'011, Y={ $auto$wreduce.cc:455:run$694 [3] $auto$wreduce.cc:455:run$694 [1:0] }
      New connections: $auto$wreduce.cc:455:run$694 [2] = $auto$wreduce.cc:455:run$694 [0]
    Consolidated identical input bits for $mux cell $procmux$605:
      Old ports: A={ 2'10 $auto$wreduce.cc:455:run$695 [1:0] }, B=4'0111, Y=$auto$wreduce.cc:455:run$696 [3:0]
      New ports: A={ 1'1 $auto$wreduce.cc:455:run$695 [1] 1'0 }, B=3'011, Y={ $auto$wreduce.cc:455:run$696 [3] $auto$wreduce.cc:455:run$696 [1:0] }
      New connections: $auto$wreduce.cc:455:run$696 [2] = $auto$wreduce.cc:455:run$696 [0]
  Optimizing cells in module \demo.
    Consolidated identical input bits for $mux cell $procmux$607:
      Old ports: A=$auto$wreduce.cc:455:run$694 [3:0], B=$auto$wreduce.cc:455:run$696 [3:0], Y=$auto$wreduce.cc:455:run$697 [3:0]
      New ports: A={ $auto$wreduce.cc:455:run$694 [3] $auto$wreduce.cc:455:run$694 [1:0] }, B={ $auto$wreduce.cc:455:run$696 [3] $auto$wreduce.cc:455:run$696 [1:0] }, Y={ $auto$wreduce.cc:455:run$697 [3] $auto$wreduce.cc:455:run$697 [1:0] }
      New connections: $auto$wreduce.cc:455:run$697 [2] = $auto$wreduce.cc:455:run$697 [0]
  Optimizing cells in module \demo.
Performed a total of 9 changes.

2.29.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\demo'.
Removed a total of 0 cells.

2.29.6. Executing OPT_RMDFF pass (remove dff with constant values).
Removing $memory\params[64]$1152 ($dff) from module demo.
Removing $memory\params[63]$1150 ($dff) from module demo.
Removing $memory\params[62]$1148 ($dff) from module demo.
Removing $memory\params[61]$1146 ($dff) from module demo.
Removing $memory\params[60]$1144 ($dff) from module demo.
Removing $memory\params[59]$1142 ($dff) from module demo.
Removing $memory\params[58]$1140 ($dff) from module demo.
Removing $memory\params[57]$1138 ($dff) from module demo.
Removing $memory\params[56]$1136 ($dff) from module demo.
Removing $memory\params[55]$1134 ($dff) from module demo.
Removing $memory\params[54]$1132 ($dff) from module demo.
Removing $memory\params[53]$1130 ($dff) from module demo.
Removing $memory\params[52]$1128 ($dff) from module demo.
Removing $memory\params[51]$1126 ($dff) from module demo.
Removing $memory\params[50]$1124 ($dff) from module demo.
Removing $memory\params[49]$1122 ($dff) from module demo.
Removing $memory\params[48]$1120 ($dff) from module demo.
Removing $memory\params[47]$1118 ($dff) from module demo.
Removing $memory\params[46]$1116 ($dff) from module demo.
Removing $memory\params[45]$1114 ($dff) from module demo.
Removing $memory\params[44]$1112 ($dff) from module demo.
Removing $memory\params[43]$1110 ($dff) from module demo.
Removing $memory\params[42]$1108 ($dff) from module demo.
Removing $memory\params[41]$1106 ($dff) from module demo.
Removing $memory\params[40]$1104 ($dff) from module demo.
Removing $memory\params[39]$1102 ($dff) from module demo.
Removing $memory\params[38]$1100 ($dff) from module demo.
Removing $memory\params[37]$1098 ($dff) from module demo.
Removing $memory\params[36]$1096 ($dff) from module demo.
Removing $memory\params[35]$1094 ($dff) from module demo.
Removing $memory\params[34]$1092 ($dff) from module demo.
Removing $memory\params[33]$1090 ($dff) from module demo.
Removing $memory\params[32]$1088 ($dff) from module demo.
Removing $memory\params[31]$1086 ($dff) from module demo.
Removing $memory\params[30]$1084 ($dff) from module demo.
Removing $memory\params[29]$1082 ($dff) from module demo.
Removing $memory\params[28]$1080 ($dff) from module demo.
Removing $memory\params[27]$1078 ($dff) from module demo.
Removing $memory\params[26]$1076 ($dff) from module demo.
Removing $memory\params[25]$1074 ($dff) from module demo.
Removing $memory\params[24]$1072 ($dff) from module demo.
Removing $memory\params[23]$1070 ($dff) from module demo.
Removing $memory\params[22]$1068 ($dff) from module demo.
Removing $memory\params[21]$1066 ($dff) from module demo.
Removing $memory\params[20]$1064 ($dff) from module demo.
Removing $memory\params[19]$1062 ($dff) from module demo.
Removing $memory\params[18]$1060 ($dff) from module demo.
Removing $memory\params[17]$1058 ($dff) from module demo.
Removing $memory\params[16]$1056 ($dff) from module demo.
Removing $memory\params[15]$1054 ($dff) from module demo.
Removing $memory\params[14]$1052 ($dff) from module demo.
Removing $memory\params[13]$1050 ($dff) from module demo.
Removing $memory\params[12]$1048 ($dff) from module demo.
Removing $memory\params[11]$1046 ($dff) from module demo.
Removing $memory\params[10]$1044 ($dff) from module demo.
Removing $memory\params[9]$1042 ($dff) from module demo.
Removing $memory\params[8]$1040 ($dff) from module demo.
Removing $memory\params[7]$1038 ($dff) from module demo.
Removing $memory\params[6]$1036 ($dff) from module demo.
Removing $memory\params[5]$1034 ($dff) from module demo.
Removing $memory\params[4]$1032 ($dff) from module demo.
Removing $memory\params[3]$1030 ($dff) from module demo.
Removing $memory\params[2]$1028 ($dff) from module demo.
Removing $memory\params[1]$1026 ($dff) from module demo.
Removing $memory\params[0]$1024 ($dff) from module demo.
Removing $memory\num_params[20]$929 ($dff) from module demo.
Removing $memory\num_params[19]$927 ($dff) from module demo.
Removing $memory\num_params[18]$925 ($dff) from module demo.
Removing $memory\num_params[17]$923 ($dff) from module demo.
Removing $memory\num_params[16]$921 ($dff) from module demo.
Removing $memory\num_params[15]$919 ($dff) from module demo.
Removing $memory\num_params[14]$917 ($dff) from module demo.
Removing $memory\num_params[13]$915 ($dff) from module demo.
Removing $memory\num_params[12]$913 ($dff) from module demo.
Removing $memory\num_params[11]$911 ($dff) from module demo.
Removing $memory\num_params[10]$909 ($dff) from module demo.
Removing $memory\num_params[9]$907 ($dff) from module demo.
Removing $memory\num_params[8]$905 ($dff) from module demo.
Removing $memory\num_params[7]$903 ($dff) from module demo.
Removing $memory\num_params[6]$901 ($dff) from module demo.
Removing $memory\num_params[5]$899 ($dff) from module demo.
Removing $memory\num_params[4]$897 ($dff) from module demo.
Removing $memory\num_params[3]$895 ($dff) from module demo.
Removing $memory\num_params[2]$893 ($dff) from module demo.
Removing $memory\num_params[1]$891 ($dff) from module demo.
Removing $memory\num_params[0]$889 ($dff) from module demo.
Removing $memory\cmd[21]$794 ($dff) from module demo.
Removing $memory\cmd[20]$792 ($dff) from module demo.
Removing $memory\cmd[19]$790 ($dff) from module demo.
Removing $memory\cmd[18]$788 ($dff) from module demo.
Removing $memory\cmd[17]$786 ($dff) from module demo.
Removing $memory\cmd[16]$784 ($dff) from module demo.
Removing $memory\cmd[15]$782 ($dff) from module demo.
Removing $memory\cmd[14]$780 ($dff) from module demo.
Removing $memory\cmd[13]$778 ($dff) from module demo.
Removing $memory\cmd[12]$776 ($dff) from module demo.
Removing $memory\cmd[11]$774 ($dff) from module demo.
Removing $memory\cmd[10]$772 ($dff) from module demo.
Removing $memory\cmd[9]$770 ($dff) from module demo.
Removing $memory\cmd[8]$768 ($dff) from module demo.
Removing $memory\cmd[7]$766 ($dff) from module demo.
Removing $memory\cmd[6]$764 ($dff) from module demo.
Removing $memory\cmd[5]$762 ($dff) from module demo.
Removing $memory\cmd[4]$760 ($dff) from module demo.
Removing $memory\cmd[3]$758 ($dff) from module demo.
Removing $memory\cmd[2]$756 ($dff) from module demo.
Removing $memory\cmd[1]$754 ($dff) from module demo.
Removing $memory\cmd[0]$752 ($dff) from module demo.
Replaced 108 DFF cells.

2.29.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..
Removed 0 unused cells and 373 unused wires.
<suppressed ~1 debug messages>

2.29.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.
<suppressed ~6 debug messages>

2.29.9. Rerunning OPT passes. (Maybe there is more to do..)

2.29.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \demo..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~17 debug messages>

2.29.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \demo.
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][4][0]$841:
      Old ports: A=8'00010001, B=8'10110001, Y=$memory\cmd$rdmux[0][3][0]$a$818
      New ports: A=1'0, B=1'1, Y=$memory\cmd$rdmux[0][3][0]$a$818 [5]
      New connections: { $memory\cmd$rdmux[0][3][0]$a$818 [7:6] $memory\cmd$rdmux[0][3][0]$a$818 [4:0] } = { $memory\cmd$rdmux[0][3][0]$a$818 [5] 6'010001 }
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][4][10]$871:
      Old ports: A=8'00101100, B=8'00000000, Y=$memory\cmd$rdmux[0][3][5]$a$833
      New ports: A=1'1, B=1'0, Y=$memory\cmd$rdmux[0][3][5]$a$833 [2]
      New connections: { $memory\cmd$rdmux[0][3][5]$a$833 [7:3] $memory\cmd$rdmux[0][3][5]$a$833 [1:0] } = { 2'00 $memory\cmd$rdmux[0][3][5]$a$833 [2] 1'0 $memory\cmd$rdmux[0][3][5]$a$833 [2] 2'00 }
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][4][1]$844:
      Old ports: A=8'10110010, B=8'10110011, Y=$memory\cmd$rdmux[0][3][0]$b$819
      New ports: A=1'0, B=1'1, Y=$memory\cmd$rdmux[0][3][0]$b$819 [0]
      New connections: $memory\cmd$rdmux[0][3][0]$b$819 [7:1] = 7'1011001
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][4][2]$847:
      Old ports: A=8'10110100, B=8'11000000, Y=$memory\cmd$rdmux[0][3][1]$a$821
      New ports: A=2'01, B=2'10, Y={ $memory\cmd$rdmux[0][3][1]$a$821 [6] $memory\cmd$rdmux[0][3][1]$a$821 [2] }
      New connections: { $memory\cmd$rdmux[0][3][1]$a$821 [7] $memory\cmd$rdmux[0][3][1]$a$821 [5:3] $memory\cmd$rdmux[0][3][1]$a$821 [1:0] } = { 1'1 $memory\cmd$rdmux[0][3][1]$a$821 [2] $memory\cmd$rdmux[0][3][1]$a$821 [2] 3'000 }
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][4][3]$850:
      Old ports: A=8'11000001, B=8'11000010, Y=$memory\cmd$rdmux[0][3][1]$b$822
      New ports: A=2'01, B=2'10, Y=$memory\cmd$rdmux[0][3][1]$b$822 [1:0]
      New connections: $memory\cmd$rdmux[0][3][1]$b$822 [7:2] = 6'110000
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][4][4]$853:
      Old ports: A=8'11000011, B=8'11000100, Y=$memory\cmd$rdmux[0][3][2]$a$824
      New ports: A=2'01, B=2'10, Y={ $memory\cmd$rdmux[0][3][2]$a$824 [2] $memory\cmd$rdmux[0][3][2]$a$824 [0] }
      New connections: { $memory\cmd$rdmux[0][3][2]$a$824 [7:3] $memory\cmd$rdmux[0][3][2]$a$824 [1] } = { 5'11000 $memory\cmd$rdmux[0][3][2]$a$824 [0] }
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][4][5]$856:
      Old ports: A=8'11000101, B=8'11100000, Y=$memory\cmd$rdmux[0][3][2]$b$825
      New ports: A=2'01, B=2'10, Y={ $memory\cmd$rdmux[0][3][2]$b$825 [5] $memory\cmd$rdmux[0][3][2]$b$825 [0] }
      New connections: { $memory\cmd$rdmux[0][3][2]$b$825 [7:6] $memory\cmd$rdmux[0][3][2]$b$825 [4:1] } = { 4'1100 $memory\cmd$rdmux[0][3][2]$b$825 [0] 1'0 }
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][4][6]$859:
      Old ports: A=8'11100001, B=8'11111100, Y=$memory\cmd$rdmux[0][3][3]$a$827
      New ports: A=2'01, B=2'10, Y={ $memory\cmd$rdmux[0][3][3]$a$827 [2] $memory\cmd$rdmux[0][3][3]$a$827 [0] }
      New connections: { $memory\cmd$rdmux[0][3][3]$a$827 [7:3] $memory\cmd$rdmux[0][3][3]$a$827 [1] } = { 3'111 $memory\cmd$rdmux[0][3][3]$a$827 [2] $memory\cmd$rdmux[0][3][3]$a$827 [2] 1'0 }
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][4][7]$862:
      Old ports: A=8'00111010, B=8'00110110, Y=$memory\cmd$rdmux[0][3][3]$b$828
      New ports: A=2'10, B=2'01, Y=$memory\cmd$rdmux[0][3][3]$b$828 [3:2]
      New connections: { $memory\cmd$rdmux[0][3][3]$b$828 [7:4] $memory\cmd$rdmux[0][3][3]$b$828 [1:0] } = 6'001110
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][4][8]$865:
      Old ports: A=8'00100001, B=8'00101001, Y=$memory\cmd$rdmux[0][3][4]$a$830
      New ports: A=1'0, B=1'1, Y=$memory\cmd$rdmux[0][3][4]$a$830 [3]
      New connections: { $memory\cmd$rdmux[0][3][4]$a$830 [7:4] $memory\cmd$rdmux[0][3][4]$a$830 [2:0] } = 7'0010001
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][4][9]$868:
      Old ports: A=8'00101010, B=8'00101011, Y=$memory\cmd$rdmux[0][3][4]$b$831
      New ports: A=1'0, B=1'1, Y=$memory\cmd$rdmux[0][3][4]$b$831 [0]
      New connections: $memory\cmd$rdmux[0][3][4]$b$831 [7:1] = 7'0010101
    Consolidated identical input bits for $mux cell $memory\num_params$rdmux[0][3][4]$964:
      Old ports: A=$memory\num_params$rdmux[0][3][4]$a$965, B=$memory\num_params$rdmux[0][3][4]$b$966, Y=$memory\num_params$rdmux[0][2][2]$a$947
      New ports: A=1'0, B=1'1, Y=$memory\num_params$rdmux[0][2][2]$a$947 [2]
      New connections: { $memory\num_params$rdmux[0][2][2]$a$947 [13:3] $memory\num_params$rdmux[0][2][2]$a$947 [1:0] } = 13'0000000000000
    Consolidated identical input bits for $mux cell $memory\num_params$rdmux[0][4][0]$976:
      Old ports: A=14'00000000000000, B=14'00000000000011, Y=$memory\num_params$rdmux[0][3][0]$a$953
      New ports: A=1'0, B=1'1, Y=$memory\num_params$rdmux[0][3][0]$a$953 [0]
      New connections: $memory\num_params$rdmux[0][3][0]$a$953 [13:1] = { 12'000000000000 $memory\num_params$rdmux[0][3][0]$a$953 [0] }
    Consolidated identical input bits for $mux cell $memory\num_params$rdmux[0][4][10]$1006:
      Old ports: A=14'11001000000000, B=14'xxxxxxxxxxxxxx, Y=$memory\num_params$rdmux[0][3][5]$a$968
      New ports: A=2'10, B=2'xx, Y={ $memory\num_params$rdmux[0][3][5]$a$968 [9] $memory\num_params$rdmux[0][3][5]$a$968 [0] }
      New connections: { $memory\num_params$rdmux[0][3][5]$a$968 [13:10] $memory\num_params$rdmux[0][3][5]$a$968 [8:1] } = { $memory\num_params$rdmux[0][3][5]$a$968 [9] $memory\num_params$rdmux[0][3][5]$a$968 [9] $memory\num_params$rdmux[0][3][5]$a$968 [0] $memory\num_params$rdmux[0][3][5]$a$968 [0] $memory\num_params$rdmux[0][3][5]$a$968 [0] $memory\num_params$rdmux[0][3][5]$a$968 [0] $memory\num_params$rdmux[0][3][5]$a$968 [0] $memory\num_params$rdmux[0][3][5]$a$968 [0] $memory\num_params$rdmux[0][3][5]$a$968 [0] $memory\num_params$rdmux[0][3][5]$a$968 [0] $memory\num_params$rdmux[0][3][5]$a$968 [0] $memory\num_params$rdmux[0][3][5]$a$968 [0] }
    Consolidated identical input bits for $mux cell $memory\num_params$rdmux[0][4][1]$979:
      Old ports: A=14'00000000000011, B=14'00000000000110, Y=$memory\num_params$rdmux[0][3][0]$b$954
      New ports: A=2'01, B=2'10, Y={ $memory\num_params$rdmux[0][3][0]$b$954 [2] $memory\num_params$rdmux[0][3][0]$b$954 [0] }
      New connections: { $memory\num_params$rdmux[0][3][0]$b$954 [13:3] $memory\num_params$rdmux[0][3][0]$b$954 [1] } = 12'000000000001
    Consolidated identical input bits for $mux cell $memory\num_params$rdmux[0][4][2]$982:
      Old ports: A=14'00000000000001, B=14'00000000000011, Y=$memory\num_params$rdmux[0][3][1]$a$956
      New ports: A=1'0, B=1'1, Y=$memory\num_params$rdmux[0][3][1]$a$956 [1]
      New connections: { $memory\num_params$rdmux[0][3][1]$a$956 [13:2] $memory\num_params$rdmux[0][3][1]$a$956 [0] } = 13'0000000000001
    Consolidated identical input bits for $mux cell $memory\num_params$rdmux[0][4][3]$985:
      Old ports: A=14'00000000000001, B=14'00000000000010, Y=$memory\num_params$rdmux[0][3][1]$b$957
      New ports: A=2'01, B=2'10, Y=$memory\num_params$rdmux[0][3][1]$b$957 [1:0]
      New connections: $memory\num_params$rdmux[0][3][1]$b$957 [13:2] = 12'000000000000
    Consolidated identical input bits for $mux cell $memory\num_params$rdmux[0][4][5]$991:
      Old ports: A=14'00000000000001, B=14'00000000010000, Y=$memory\num_params$rdmux[0][3][2]$b$960
      New ports: A=2'01, B=2'10, Y={ $memory\num_params$rdmux[0][3][2]$b$960 [4] $memory\num_params$rdmux[0][3][2]$b$960 [0] }
      New connections: { $memory\num_params$rdmux[0][3][2]$b$960 [13:5] $memory\num_params$rdmux[0][3][2]$b$960 [3:1] } = 12'000000000000
    Consolidated identical input bits for $mux cell $memory\num_params$rdmux[0][4][6]$994:
      Old ports: A=14'00000000010000, B=14'00000000000001, Y=$memory\num_params$rdmux[0][3][3]$a$962
      New ports: A=2'10, B=2'01, Y={ $memory\num_params$rdmux[0][3][3]$a$962 [4] $memory\num_params$rdmux[0][3][3]$a$962 [0] }
      New connections: { $memory\num_params$rdmux[0][3][3]$a$962 [13:5] $memory\num_params$rdmux[0][3][3]$a$962 [3:1] } = 12'000000000000
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][0]$1343:
      Old ports: A=8'00000101, B=8'00111100, Y=$memory\params$rdmux[0][5][0]$a$1248
      New ports: A=2'01, B=2'10, Y={ $memory\params$rdmux[0][5][0]$a$1248 [3] $memory\params$rdmux[0][5][0]$a$1248 [0] }
      New connections: { $memory\params$rdmux[0][5][0]$a$1248 [7:4] $memory\params$rdmux[0][5][0]$a$1248 [2:1] } = { 2'00 $memory\params$rdmux[0][5][0]$a$1248 [3] $memory\params$rdmux[0][5][0]$a$1248 [3] 2'10 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][10]$1373:
      Old ports: A=8'00001111, B=8'00000111, Y=$memory\params$rdmux[0][5][5]$a$1263
      New ports: A=1'1, B=1'0, Y=$memory\params$rdmux[0][5][5]$a$1263 [3]
      New connections: { $memory\params$rdmux[0][5][5]$a$1263 [7:4] $memory\params$rdmux[0][5][5]$a$1263 [2:0] } = 7'0000111
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][11]$1376:
      Old ports: A=8'00001110, B=8'00001000, Y=$memory\params$rdmux[0][5][5]$b$1264
      New ports: A=1'1, B=1'0, Y=$memory\params$rdmux[0][5][5]$b$1264 [1]
      New connections: { $memory\params$rdmux[0][5][5]$b$1264 [7:2] $memory\params$rdmux[0][5][5]$b$1264 [0] } = { 5'00001 $memory\params$rdmux[0][5][5]$b$1264 [1] 1'0 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][12]$1379:
      Old ports: A=8'00000111, B=8'00010000, Y=$memory\params$rdmux[0][5][6]$a$1266
      New ports: A=2'01, B=2'10, Y={ $memory\params$rdmux[0][5][6]$a$1266 [4] $memory\params$rdmux[0][5][6]$a$1266 [0] }
      New connections: { $memory\params$rdmux[0][5][6]$a$1266 [7:5] $memory\params$rdmux[0][5][6]$a$1266 [3:1] } = { 4'0000 $memory\params$rdmux[0][5][6]$a$1266 [0] $memory\params$rdmux[0][5][6]$a$1266 [0] }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][13]$1382:
      Old ports: A=8'00000111, B=8'00000010, Y=$memory\params$rdmux[0][5][6]$b$1267
      New ports: A=1'1, B=1'0, Y=$memory\params$rdmux[0][5][6]$b$1267 [0]
      New connections: $memory\params$rdmux[0][5][6]$b$1267 [7:1] = { 5'00000 $memory\params$rdmux[0][5][6]$b$1267 [0] 1'1 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][14]$1385:
      Old ports: A=8'00000111, B=8'00001001, Y=$memory\params$rdmux[0][5][7]$a$1269
      New ports: A=2'01, B=2'10, Y={ $memory\params$rdmux[0][5][7]$a$1269 [3] $memory\params$rdmux[0][5][7]$a$1269 [1] }
      New connections: { $memory\params$rdmux[0][5][7]$a$1269 [7:4] $memory\params$rdmux[0][5][7]$a$1269 [2] $memory\params$rdmux[0][5][7]$a$1269 [0] } = { 4'0000 $memory\params$rdmux[0][5][7]$a$1269 [1] 1'1 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][15]$1388:
      Old ports: A=8'00001111, B=8'00100101, Y=$memory\params$rdmux[0][5][7]$b$1270
      New ports: A=2'01, B=2'10, Y={ $memory\params$rdmux[0][5][7]$b$1270 [5] $memory\params$rdmux[0][5][7]$b$1270 [1] }
      New connections: { $memory\params$rdmux[0][5][7]$b$1270 [7:6] $memory\params$rdmux[0][5][7]$b$1270 [4:2] $memory\params$rdmux[0][5][7]$b$1270 [0] } = { 3'000 $memory\params$rdmux[0][5][7]$b$1270 [1] 2'11 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][16]$1391:
      Old ports: A=8'00110110, B=8'00000000, Y=$memory\params$rdmux[0][5][8]$a$1272
      New ports: A=1'1, B=1'0, Y=$memory\params$rdmux[0][5][8]$a$1272 [1]
      New connections: { $memory\params$rdmux[0][5][8]$a$1272 [7:2] $memory\params$rdmux[0][5][8]$a$1272 [0] } = { 2'00 $memory\params$rdmux[0][5][8]$a$1272 [1] $memory\params$rdmux[0][5][8]$a$1272 [1] 1'0 $memory\params$rdmux[0][5][8]$a$1272 [1] 1'0 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][17]$1394:
      Old ports: A=8'00001000, B=8'00000100, Y=$memory\params$rdmux[0][5][8]$b$1273
      New ports: A=2'10, B=2'01, Y=$memory\params$rdmux[0][5][8]$b$1273 [3:2]
      New connections: { $memory\params$rdmux[0][5][8]$b$1273 [7:4] $memory\params$rdmux[0][5][8]$b$1273 [1:0] } = 6'000000
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][18]$1397:
      Old ports: A=8'00010000, B=8'00001010, Y=$memory\params$rdmux[0][5][9]$a$1275
      New ports: A=2'10, B=2'01, Y={ $memory\params$rdmux[0][5][9]$a$1275 [4] $memory\params$rdmux[0][5][9]$a$1275 [1] }
      New connections: { $memory\params$rdmux[0][5][9]$a$1275 [7:5] $memory\params$rdmux[0][5][9]$a$1275 [3:2] $memory\params$rdmux[0][5][9]$a$1275 [0] } = { 3'000 $memory\params$rdmux[0][5][9]$a$1275 [1] 2'00 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][19]$1400:
      Old ports: A=8'00001101, B=8'00001000, Y=$memory\params$rdmux[0][5][9]$b$1276
      New ports: A=1'1, B=1'0, Y=$memory\params$rdmux[0][5][9]$b$1276 [0]
      New connections: $memory\params$rdmux[0][5][9]$b$1276 [7:1] = { 5'00001 $memory\params$rdmux[0][5][9]$b$1276 [0] 1'0 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][1]$1346:
      Old ports: A=8'00111100, B=8'00000101, Y=$memory\params$rdmux[0][5][0]$b$1249
      New ports: A=2'10, B=2'01, Y={ $memory\params$rdmux[0][5][0]$b$1249 [3] $memory\params$rdmux[0][5][0]$b$1249 [0] }
      New connections: { $memory\params$rdmux[0][5][0]$b$1249 [7:4] $memory\params$rdmux[0][5][0]$b$1249 [2:1] } = { 2'00 $memory\params$rdmux[0][5][0]$b$1249 [3] $memory\params$rdmux[0][5][0]$b$1249 [3] 2'10 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][20]$1403:
      Old ports: A=8'00000111, B=8'00001111, Y=$memory\params$rdmux[0][5][10]$a$1278
      New ports: A=1'0, B=1'1, Y=$memory\params$rdmux[0][5][10]$a$1278 [3]
      New connections: { $memory\params$rdmux[0][5][10]$a$1278 [7:4] $memory\params$rdmux[0][5][10]$a$1278 [2:0] } = 7'0000111
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][21]$1406:
      Old ports: A=8'00000111, B=8'00000010, Y=$memory\params$rdmux[0][5][10]$b$1279
      New ports: A=1'1, B=1'0, Y=$memory\params$rdmux[0][5][10]$b$1279 [0]
      New connections: $memory\params$rdmux[0][5][10]$b$1279 [7:1] = { 5'00000 $memory\params$rdmux[0][5][10]$b$1279 [0] 1'1 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][22]$1409:
      Old ports: A=8'00000111, B=8'00001001, Y=$memory\params$rdmux[0][5][11]$a$1281
      New ports: A=2'01, B=2'10, Y={ $memory\params$rdmux[0][5][11]$a$1281 [3] $memory\params$rdmux[0][5][11]$a$1281 [1] }
      New connections: { $memory\params$rdmux[0][5][11]$a$1281 [7:4] $memory\params$rdmux[0][5][11]$a$1281 [2] $memory\params$rdmux[0][5][11]$a$1281 [0] } = { 4'0000 $memory\params$rdmux[0][5][11]$a$1281 [1] 1'1 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][23]$1412:
      Old ports: A=8'00001111, B=8'00100101, Y=$memory\params$rdmux[0][5][11]$b$1282
      New ports: A=2'01, B=2'10, Y={ $memory\params$rdmux[0][5][11]$b$1282 [5] $memory\params$rdmux[0][5][11]$b$1282 [1] }
      New connections: { $memory\params$rdmux[0][5][11]$b$1282 [7:6] $memory\params$rdmux[0][5][11]$b$1282 [4:2] $memory\params$rdmux[0][5][11]$b$1282 [0] } = { 3'000 $memory\params$rdmux[0][5][11]$b$1282 [1] 2'11 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][24]$1415:
      Old ports: A=8'00110101, B=8'00000000, Y=$memory\params$rdmux[0][5][12]$a$1284
      New ports: A=1'1, B=1'0, Y=$memory\params$rdmux[0][5][12]$a$1284 [0]
      New connections: $memory\params$rdmux[0][5][12]$a$1284 [7:1] = { 2'00 $memory\params$rdmux[0][5][12]$a$1284 [0] $memory\params$rdmux[0][5][12]$a$1284 [0] 1'0 $memory\params$rdmux[0][5][12]$a$1284 [0] 1'0 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][25]$1418:
      Old ports: A=8'00001001, B=8'00000100, Y=$memory\params$rdmux[0][5][12]$b$1285
      New ports: A=2'01, B=2'10, Y={ $memory\params$rdmux[0][5][12]$b$1285 [2] $memory\params$rdmux[0][5][12]$b$1285 [0] }
      New connections: { $memory\params$rdmux[0][5][12]$b$1285 [7:3] $memory\params$rdmux[0][5][12]$b$1285 [1] } = { 4'0000 $memory\params$rdmux[0][5][12]$b$1285 [0] 1'0 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][26]$1421:
      Old ports: A=8'00010000, B=8'10000000, Y=$memory\params$rdmux[0][5][13]$a$1287
      New ports: A=2'01, B=2'10, Y={ $memory\params$rdmux[0][5][13]$a$1287 [7] $memory\params$rdmux[0][5][13]$a$1287 [4] }
      New connections: { $memory\params$rdmux[0][5][13]$a$1287 [6:5] $memory\params$rdmux[0][5][13]$a$1287 [3:0] } = 6'000000
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][27]$1424:
      Old ports: A=8'00000101, B=8'01111000, Y=$memory\params$rdmux[0][5][13]$b$1288
      New ports: A=2'01, B=2'10, Y={ $memory\params$rdmux[0][5][13]$b$1288 [3] $memory\params$rdmux[0][5][13]$b$1288 [0] }
      New connections: { $memory\params$rdmux[0][5][13]$b$1288 [7:4] $memory\params$rdmux[0][5][13]$b$1288 [2:1] } = { 1'0 $memory\params$rdmux[0][5][13]$b$1288 [3] $memory\params$rdmux[0][5][13]$b$1288 [3] $memory\params$rdmux[0][5][13]$b$1288 [3] $memory\params$rdmux[0][5][13]$b$1288 [0] 1'0 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][28]$1427:
      Old ports: A=8'00000000, B=8'00000001, Y=$memory\params$rdmux[0][5][14]$a$1290
      New ports: A=1'0, B=1'1, Y=$memory\params$rdmux[0][5][14]$a$1290 [0]
      New connections: $memory\params$rdmux[0][5][14]$a$1290 [7:1] = 7'0000000
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][29]$1430:
      Old ports: A=8'00000000, B=8'10100000, Y=$memory\params$rdmux[0][5][14]$b$1291
      New ports: A=1'0, B=1'1, Y=$memory\params$rdmux[0][5][14]$b$1291 [5]
      New connections: { $memory\params$rdmux[0][5][14]$b$1291 [7:6] $memory\params$rdmux[0][5][14]$b$1291 [4:0] } = { $memory\params$rdmux[0][5][14]$b$1291 [5] 6'000000 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][30]$1433:
      Old ports: A=8'00000000, B=8'00011010, Y=$memory\params$rdmux[0][5][15]$a$1293
      New ports: A=1'0, B=1'1, Y=$memory\params$rdmux[0][5][15]$a$1293 [1]
      New connections: { $memory\params$rdmux[0][5][15]$a$1293 [7:2] $memory\params$rdmux[0][5][15]$a$1293 [0] } = { 3'000 $memory\params$rdmux[0][5][15]$a$1293 [1] $memory\params$rdmux[0][5][15]$a$1293 [1] 2'00 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][31]$1436:
      Old ports: A=8'00000000, B=8'01101001, Y=$memory\params$rdmux[0][5][15]$b$1294
      New ports: A=1'0, B=1'1, Y=$memory\params$rdmux[0][5][15]$b$1294 [0]
      New connections: $memory\params$rdmux[0][5][15]$b$1294 [7:1] = { 1'0 $memory\params$rdmux[0][5][15]$b$1294 [0] $memory\params$rdmux[0][5][15]$b$1294 [0] 1'0 $memory\params$rdmux[0][5][15]$b$1294 [0] 2'00 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][32]$1439:
      Old ports: A=8'11111111, B=8'xxxxxxxx, Y=$memory\params$rdmux[0][5][16]$a$1296
      New ports: A=1'1, B=1'x, Y=$memory\params$rdmux[0][5][16]$a$1296 [0]
      New connections: $memory\params$rdmux[0][5][16]$a$1296 [7:1] = { $memory\params$rdmux[0][5][16]$a$1296 [0] $memory\params$rdmux[0][5][16]$a$1296 [0] $memory\params$rdmux[0][5][16]$a$1296 [0] $memory\params$rdmux[0][5][16]$a$1296 [0] $memory\params$rdmux[0][5][16]$a$1296 [0] $memory\params$rdmux[0][5][16]$a$1296 [0] $memory\params$rdmux[0][5][16]$a$1296 [0] }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][3]$1352:
      Old ports: A=8'00000101, B=8'00111100, Y=$memory\params$rdmux[0][5][1]$b$1252
      New ports: A=2'01, B=2'10, Y={ $memory\params$rdmux[0][5][1]$b$1252 [3] $memory\params$rdmux[0][5][1]$b$1252 [0] }
      New connections: { $memory\params$rdmux[0][5][1]$b$1252 [7:4] $memory\params$rdmux[0][5][1]$b$1252 [2:1] } = { 2'00 $memory\params$rdmux[0][5][1]$b$1252 [3] $memory\params$rdmux[0][5][1]$b$1252 [3] 2'10 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][4]$1355:
      Old ports: A=8'00111100, B=8'00000101, Y=$memory\params$rdmux[0][5][2]$a$1254
      New ports: A=2'10, B=2'01, Y={ $memory\params$rdmux[0][5][2]$a$1254 [3] $memory\params$rdmux[0][5][2]$a$1254 [0] }
      New connections: { $memory\params$rdmux[0][5][2]$a$1254 [7:4] $memory\params$rdmux[0][5][2]$a$1254 [2:1] } = { 2'00 $memory\params$rdmux[0][5][2]$a$1254 [3] $memory\params$rdmux[0][5][2]$a$1254 [3] 2'10 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][6]$1361:
      Old ports: A=8'00000011, B=8'10101011, Y=$memory\params$rdmux[0][5][3]$a$1257
      New ports: A=1'0, B=1'1, Y=$memory\params$rdmux[0][5][3]$a$1257 [3]
      New connections: { $memory\params$rdmux[0][5][3]$a$1257 [7:4] $memory\params$rdmux[0][5][3]$a$1257 [2:0] } = { $memory\params$rdmux[0][5][3]$a$1257 [3] 1'0 $memory\params$rdmux[0][5][3]$a$1257 [3] 4'0011 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][7]$1364:
      Old ports: A=8'00001011, B=8'00000000, Y=$memory\params$rdmux[0][5][3]$b$1258
      New ports: A=1'1, B=1'0, Y=$memory\params$rdmux[0][5][3]$b$1258 [0]
      New connections: $memory\params$rdmux[0][5][3]$b$1258 [7:1] = { 4'0000 $memory\params$rdmux[0][5][3]$b$1258 [0] 1'0 $memory\params$rdmux[0][5][3]$b$1258 [0] }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][8]$1367:
      Old ports: A=8'10001101, B=8'01101010, Y=$memory\params$rdmux[0][5][4]$a$1260
      New ports: A=2'01, B=2'10, Y=$memory\params$rdmux[0][5][4]$a$1260 [1:0]
      New connections: $memory\params$rdmux[0][5][4]$a$1260 [7:2] = { $memory\params$rdmux[0][5][4]$a$1260 [0] $memory\params$rdmux[0][5][4]$a$1260 [1] $memory\params$rdmux[0][5][4]$a$1260 [1] 2'01 $memory\params$rdmux[0][5][4]$a$1260 [0] }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][9]$1370:
      Old ports: A=8'10001101, B=8'11101110, Y=$memory\params$rdmux[0][5][4]$b$1261
      New ports: A=2'01, B=2'10, Y=$memory\params$rdmux[0][5][4]$b$1261 [1:0]
      New connections: $memory\params$rdmux[0][5][4]$b$1261 [7:2] = { 1'1 $memory\params$rdmux[0][5][4]$b$1261 [1] $memory\params$rdmux[0][5][4]$b$1261 [1] 3'011 }
  Optimizing cells in module \demo.
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][3][0]$817:
      Old ports: A=$memory\cmd$rdmux[0][3][0]$a$818, B=$memory\cmd$rdmux[0][3][0]$b$819, Y=$memory\cmd$rdmux[0][2][0]$a$806
      New ports: A={ $memory\cmd$rdmux[0][3][0]$a$818 [5] 2'01 }, B={ 2'11 $memory\cmd$rdmux[0][3][0]$b$819 [0] }, Y={ $memory\cmd$rdmux[0][2][0]$a$806 [5] $memory\cmd$rdmux[0][2][0]$a$806 [1:0] }
      New connections: { $memory\cmd$rdmux[0][2][0]$a$806 [7:6] $memory\cmd$rdmux[0][2][0]$a$806 [4:2] } = { $memory\cmd$rdmux[0][2][0]$a$806 [5] 4'0100 }
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][3][1]$820:
      Old ports: A=$memory\cmd$rdmux[0][3][1]$a$821, B=$memory\cmd$rdmux[0][3][1]$b$822, Y=$memory\cmd$rdmux[0][2][0]$b$807
      New ports: A={ $memory\cmd$rdmux[0][3][1]$a$821 [6] $memory\cmd$rdmux[0][3][1]$a$821 [2] 2'00 }, B={ 2'10 $memory\cmd$rdmux[0][3][1]$b$822 [1:0] }, Y={ $memory\cmd$rdmux[0][2][0]$b$807 [6] $memory\cmd$rdmux[0][2][0]$b$807 [2:0] }
      New connections: { $memory\cmd$rdmux[0][2][0]$b$807 [7] $memory\cmd$rdmux[0][2][0]$b$807 [5:3] } = { 1'1 $memory\cmd$rdmux[0][2][0]$b$807 [2] $memory\cmd$rdmux[0][2][0]$b$807 [2] 1'0 }
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][3][2]$823:
      Old ports: A=$memory\cmd$rdmux[0][3][2]$a$824, B=$memory\cmd$rdmux[0][3][2]$b$825, Y=$memory\cmd$rdmux[0][2][1]$a$809
      New ports: A={ 1'0 $memory\cmd$rdmux[0][3][2]$a$824 [2] $memory\cmd$rdmux[0][3][2]$a$824 [0] $memory\cmd$rdmux[0][3][2]$a$824 [0] }, B={ $memory\cmd$rdmux[0][3][2]$b$825 [5] $memory\cmd$rdmux[0][3][2]$b$825 [0] 1'0 $memory\cmd$rdmux[0][3][2]$b$825 [0] }, Y={ $memory\cmd$rdmux[0][2][1]$a$809 [5] $memory\cmd$rdmux[0][2][1]$a$809 [2:0] }
      New connections: { $memory\cmd$rdmux[0][2][1]$a$809 [7:6] $memory\cmd$rdmux[0][2][1]$a$809 [4:3] } = 4'1100
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][3][3]$826:
      Old ports: A=$memory\cmd$rdmux[0][3][3]$a$827, B=$memory\cmd$rdmux[0][3][3]$b$828, Y=$memory\cmd$rdmux[0][2][1]$b$810
      New ports: A={ 1'1 $memory\cmd$rdmux[0][3][3]$a$827 [2] $memory\cmd$rdmux[0][3][3]$a$827 [2] $memory\cmd$rdmux[0][3][3]$a$827 [2] 1'0 $memory\cmd$rdmux[0][3][3]$a$827 [0] }, B={ 2'01 $memory\cmd$rdmux[0][3][3]$b$828 [3:2] 2'10 }, Y={ $memory\cmd$rdmux[0][2][1]$b$810 [6] $memory\cmd$rdmux[0][2][1]$b$810 [4:0] }
      New connections: { $memory\cmd$rdmux[0][2][1]$b$810 [7] $memory\cmd$rdmux[0][2][1]$b$810 [5] } = { $memory\cmd$rdmux[0][2][1]$b$810 [6] 1'1 }
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][3][4]$829:
      Old ports: A=$memory\cmd$rdmux[0][3][4]$a$830, B=$memory\cmd$rdmux[0][3][4]$b$831, Y=$memory\cmd$rdmux[0][2][2]$a$812
      New ports: A={ $memory\cmd$rdmux[0][3][4]$a$830 [3] 2'01 }, B={ 2'11 $memory\cmd$rdmux[0][3][4]$b$831 [0] }, Y={ $memory\cmd$rdmux[0][2][2]$a$812 [3] $memory\cmd$rdmux[0][2][2]$a$812 [1:0] }
      New connections: { $memory\cmd$rdmux[0][2][2]$a$812 [7:4] $memory\cmd$rdmux[0][2][2]$a$812 [2] } = 5'00100
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][3][5]$832:
      Old ports: A=$memory\cmd$rdmux[0][3][5]$a$833, B=8'xxxxxxxx, Y=$memory\cmd$rdmux[0][2][2]$b$813
      New ports: A={ $memory\cmd$rdmux[0][3][5]$a$833 [2] 1'0 }, B=2'xx, Y={ $memory\cmd$rdmux[0][2][2]$b$813 [2] $memory\cmd$rdmux[0][2][2]$b$813 [0] }
      New connections: { $memory\cmd$rdmux[0][2][2]$b$813 [7:3] $memory\cmd$rdmux[0][2][2]$b$813 [1] } = { $memory\cmd$rdmux[0][2][2]$b$813 [0] $memory\cmd$rdmux[0][2][2]$b$813 [0] $memory\cmd$rdmux[0][2][2]$b$813 [2] $memory\cmd$rdmux[0][2][2]$b$813 [0] $memory\cmd$rdmux[0][2][2]$b$813 [2] $memory\cmd$rdmux[0][2][2]$b$813 [0] }
    Consolidated identical input bits for $mux cell $memory\num_params$rdmux[0][3][0]$952:
      Old ports: A=$memory\num_params$rdmux[0][3][0]$a$953, B=$memory\num_params$rdmux[0][3][0]$b$954, Y=$memory\num_params$rdmux[0][2][0]$a$941
      New ports: A={ 1'0 $memory\num_params$rdmux[0][3][0]$a$953 [0] $memory\num_params$rdmux[0][3][0]$a$953 [0] }, B={ $memory\num_params$rdmux[0][3][0]$b$954 [2] 1'1 $memory\num_params$rdmux[0][3][0]$b$954 [0] }, Y=$memory\num_params$rdmux[0][2][0]$a$941 [2:0]
      New connections: $memory\num_params$rdmux[0][2][0]$a$941 [13:3] = 11'00000000000
    Consolidated identical input bits for $mux cell $memory\num_params$rdmux[0][3][1]$955:
      Old ports: A=$memory\num_params$rdmux[0][3][1]$a$956, B=$memory\num_params$rdmux[0][3][1]$b$957, Y=$memory\num_params$rdmux[0][2][0]$b$942
      New ports: A={ $memory\num_params$rdmux[0][3][1]$a$956 [1] 1'1 }, B=$memory\num_params$rdmux[0][3][1]$b$957 [1:0], Y=$memory\num_params$rdmux[0][2][0]$b$942 [1:0]
      New connections: $memory\num_params$rdmux[0][2][0]$b$942 [13:2] = 12'000000000000
    Consolidated identical input bits for $mux cell $memory\num_params$rdmux[0][3][2]$958:
      Old ports: A=$memory\num_params$rdmux[0][3][2]$a$959, B=$memory\num_params$rdmux[0][3][2]$b$960, Y=$memory\num_params$rdmux[0][2][1]$a$944
      New ports: A=3'010, B={ $memory\num_params$rdmux[0][3][2]$b$960 [4] 1'0 $memory\num_params$rdmux[0][3][2]$b$960 [0] }, Y={ $memory\num_params$rdmux[0][2][1]$a$944 [4] $memory\num_params$rdmux[0][2][1]$a$944 [1:0] }
      New connections: { $memory\num_params$rdmux[0][2][1]$a$944 [13:5] $memory\num_params$rdmux[0][2][1]$a$944 [3:2] } = 11'00000000000
    Consolidated identical input bits for $mux cell $memory\num_params$rdmux[0][3][3]$961:
      Old ports: A=$memory\num_params$rdmux[0][3][3]$a$962, B=14'00000000000001, Y=$memory\num_params$rdmux[0][2][1]$b$945
      New ports: A={ $memory\num_params$rdmux[0][3][3]$a$962 [4] $memory\num_params$rdmux[0][3][3]$a$962 [0] }, B=2'01, Y={ $memory\num_params$rdmux[0][2][1]$b$945 [4] $memory\num_params$rdmux[0][2][1]$b$945 [0] }
      New connections: { $memory\num_params$rdmux[0][2][1]$b$945 [13:5] $memory\num_params$rdmux[0][2][1]$b$945 [3:1] } = 12'000000000000
    Consolidated identical input bits for $mux cell $memory\num_params$rdmux[0][3][5]$967:
      Old ports: A=$memory\num_params$rdmux[0][3][5]$a$968, B=14'xxxxxxxxxxxxxx, Y=$memory\num_params$rdmux[0][2][2]$b$948
      New ports: A={ $memory\num_params$rdmux[0][3][5]$a$968 [9] $memory\num_params$rdmux[0][3][5]$a$968 [0] }, B=2'xx, Y={ $memory\num_params$rdmux[0][2][2]$b$948 [9] $memory\num_params$rdmux[0][2][2]$b$948 [0] }
      New connections: { $memory\num_params$rdmux[0][2][2]$b$948 [13:10] $memory\num_params$rdmux[0][2][2]$b$948 [8:1] } = { $memory\num_params$rdmux[0][2][2]$b$948 [9] $memory\num_params$rdmux[0][2][2]$b$948 [9] $memory\num_params$rdmux[0][2][2]$b$948 [0] $memory\num_params$rdmux[0][2][2]$b$948 [0] $memory\num_params$rdmux[0][2][2]$b$948 [0] $memory\num_params$rdmux[0][2][2]$b$948 [0] $memory\num_params$rdmux[0][2][2]$b$948 [0] $memory\num_params$rdmux[0][2][2]$b$948 [0] $memory\num_params$rdmux[0][2][2]$b$948 [0] $memory\num_params$rdmux[0][2][2]$b$948 [0] $memory\num_params$rdmux[0][2][2]$b$948 [0] $memory\num_params$rdmux[0][2][2]$b$948 [0] }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][0]$1247:
      Old ports: A=$memory\params$rdmux[0][5][0]$a$1248, B=$memory\params$rdmux[0][5][0]$b$1249, Y=$memory\params$rdmux[0][4][0]$a$1200
      New ports: A={ $memory\params$rdmux[0][5][0]$a$1248 [3] $memory\params$rdmux[0][5][0]$a$1248 [0] }, B={ $memory\params$rdmux[0][5][0]$b$1249 [3] $memory\params$rdmux[0][5][0]$b$1249 [0] }, Y={ $memory\params$rdmux[0][4][0]$a$1200 [3] $memory\params$rdmux[0][4][0]$a$1200 [0] }
      New connections: { $memory\params$rdmux[0][4][0]$a$1200 [7:4] $memory\params$rdmux[0][4][0]$a$1200 [2:1] } = { 2'00 $memory\params$rdmux[0][4][0]$a$1200 [3] $memory\params$rdmux[0][4][0]$a$1200 [3] 2'10 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][10]$1277:
      Old ports: A=$memory\params$rdmux[0][5][10]$a$1278, B=$memory\params$rdmux[0][5][10]$b$1279, Y=$memory\params$rdmux[0][4][5]$a$1215
      New ports: A={ $memory\params$rdmux[0][5][10]$a$1278 [3] 1'1 }, B={ 1'0 $memory\params$rdmux[0][5][10]$b$1279 [0] }, Y={ $memory\params$rdmux[0][4][5]$a$1215 [3] $memory\params$rdmux[0][4][5]$a$1215 [0] }
      New connections: { $memory\params$rdmux[0][4][5]$a$1215 [7:4] $memory\params$rdmux[0][4][5]$a$1215 [2:1] } = { 4'0000 $memory\params$rdmux[0][4][5]$a$1215 [0] 1'1 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][11]$1280:
      Old ports: A=$memory\params$rdmux[0][5][11]$a$1281, B=$memory\params$rdmux[0][5][11]$b$1282, Y=$memory\params$rdmux[0][4][5]$b$1216
      New ports: A={ 1'0 $memory\params$rdmux[0][5][11]$a$1281 [3] $memory\params$rdmux[0][5][11]$a$1281 [1] $memory\params$rdmux[0][5][11]$a$1281 [1] }, B={ $memory\params$rdmux[0][5][11]$b$1282 [5] $memory\params$rdmux[0][5][11]$b$1282 [1] 1'1 $memory\params$rdmux[0][5][11]$b$1282 [1] }, Y={ $memory\params$rdmux[0][4][5]$b$1216 [5] $memory\params$rdmux[0][4][5]$b$1216 [3:1] }
      New connections: { $memory\params$rdmux[0][4][5]$b$1216 [7:6] $memory\params$rdmux[0][4][5]$b$1216 [4] $memory\params$rdmux[0][4][5]$b$1216 [0] } = 4'0001
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][12]$1283:
      Old ports: A=$memory\params$rdmux[0][5][12]$a$1284, B=$memory\params$rdmux[0][5][12]$b$1285, Y=$memory\params$rdmux[0][4][6]$a$1218
      New ports: A={ $memory\params$rdmux[0][5][12]$a$1284 [0] 1'0 $memory\params$rdmux[0][5][12]$a$1284 [0] $memory\params$rdmux[0][5][12]$a$1284 [0] }, B={ 1'0 $memory\params$rdmux[0][5][12]$b$1285 [0] $memory\params$rdmux[0][5][12]$b$1285 [2] $memory\params$rdmux[0][5][12]$b$1285 [0] }, Y={ $memory\params$rdmux[0][4][6]$a$1218 [4:2] $memory\params$rdmux[0][4][6]$a$1218 [0] }
      New connections: { $memory\params$rdmux[0][4][6]$a$1218 [7:5] $memory\params$rdmux[0][4][6]$a$1218 [1] } = { 2'00 $memory\params$rdmux[0][4][6]$a$1218 [4] 1'0 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][13]$1286:
      Old ports: A=$memory\params$rdmux[0][5][13]$a$1287, B=$memory\params$rdmux[0][5][13]$b$1288, Y=$memory\params$rdmux[0][4][6]$b$1219
      New ports: A={ $memory\params$rdmux[0][5][13]$a$1287 [7] $memory\params$rdmux[0][5][13]$a$1287 [4] 2'00 }, B={ 1'0 $memory\params$rdmux[0][5][13]$b$1288 [3] $memory\params$rdmux[0][5][13]$b$1288 [3] $memory\params$rdmux[0][5][13]$b$1288 [0] }, Y={ $memory\params$rdmux[0][4][6]$b$1219 [7] $memory\params$rdmux[0][4][6]$b$1219 [4:3] $memory\params$rdmux[0][4][6]$b$1219 [0] }
      New connections: { $memory\params$rdmux[0][4][6]$b$1219 [6:5] $memory\params$rdmux[0][4][6]$b$1219 [2:1] } = { $memory\params$rdmux[0][4][6]$b$1219 [3] $memory\params$rdmux[0][4][6]$b$1219 [3] $memory\params$rdmux[0][4][6]$b$1219 [0] 1'0 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][14]$1289:
      Old ports: A=$memory\params$rdmux[0][5][14]$a$1290, B=$memory\params$rdmux[0][5][14]$b$1291, Y=$memory\params$rdmux[0][4][7]$a$1221
      New ports: A={ 1'0 $memory\params$rdmux[0][5][14]$a$1290 [0] }, B={ $memory\params$rdmux[0][5][14]$b$1291 [5] 1'0 }, Y={ $memory\params$rdmux[0][4][7]$a$1221 [5] $memory\params$rdmux[0][4][7]$a$1221 [0] }
      New connections: { $memory\params$rdmux[0][4][7]$a$1221 [7:6] $memory\params$rdmux[0][4][7]$a$1221 [4:1] } = { $memory\params$rdmux[0][4][7]$a$1221 [5] 5'00000 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][15]$1292:
      Old ports: A=$memory\params$rdmux[0][5][15]$a$1293, B=$memory\params$rdmux[0][5][15]$b$1294, Y=$memory\params$rdmux[0][4][7]$b$1222
      New ports: A={ $memory\params$rdmux[0][5][15]$a$1293 [1] $memory\params$rdmux[0][5][15]$a$1293 [1] 1'0 }, B={ $memory\params$rdmux[0][5][15]$b$1294 [0] 1'0 $memory\params$rdmux[0][5][15]$b$1294 [0] }, Y={ $memory\params$rdmux[0][4][7]$b$1222 [3] $memory\params$rdmux[0][4][7]$b$1222 [1:0] }
      New connections: { $memory\params$rdmux[0][4][7]$b$1222 [7:4] $memory\params$rdmux[0][4][7]$b$1222 [2] } = { 1'0 $memory\params$rdmux[0][4][7]$b$1222 [0] $memory\params$rdmux[0][4][7]$b$1222 [0] $memory\params$rdmux[0][4][7]$b$1222 [1] 1'0 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][16]$1295:
      Old ports: A=$memory\params$rdmux[0][5][16]$a$1296, B=8'xxxxxxxx, Y=$memory\params$rdmux[0][4][8]$a$1224
      New ports: A=$memory\params$rdmux[0][5][16]$a$1296 [0], B=1'x, Y=$memory\params$rdmux[0][4][8]$a$1224 [0]
      New connections: $memory\params$rdmux[0][4][8]$a$1224 [7:1] = { $memory\params$rdmux[0][4][8]$a$1224 [0] $memory\params$rdmux[0][4][8]$a$1224 [0] $memory\params$rdmux[0][4][8]$a$1224 [0] $memory\params$rdmux[0][4][8]$a$1224 [0] $memory\params$rdmux[0][4][8]$a$1224 [0] $memory\params$rdmux[0][4][8]$a$1224 [0] $memory\params$rdmux[0][4][8]$a$1224 [0] }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][1]$1250:
      Old ports: A=$memory\params$rdmux[0][5][1]$a$1251, B=$memory\params$rdmux[0][5][1]$b$1252, Y=$memory\params$rdmux[0][4][0]$b$1201
      New ports: A=2'10, B={ $memory\params$rdmux[0][5][1]$b$1252 [3] $memory\params$rdmux[0][5][1]$b$1252 [0] }, Y={ $memory\params$rdmux[0][4][0]$b$1201 [3] $memory\params$rdmux[0][4][0]$b$1201 [0] }
      New connections: { $memory\params$rdmux[0][4][0]$b$1201 [7:4] $memory\params$rdmux[0][4][0]$b$1201 [2:1] } = { 2'00 $memory\params$rdmux[0][4][0]$b$1201 [3] $memory\params$rdmux[0][4][0]$b$1201 [3] 2'10 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][2]$1253:
      Old ports: A=$memory\params$rdmux[0][5][2]$a$1254, B=8'00111100, Y=$memory\params$rdmux[0][4][1]$a$1203
      New ports: A={ $memory\params$rdmux[0][5][2]$a$1254 [3] $memory\params$rdmux[0][5][2]$a$1254 [0] }, B=2'10, Y={ $memory\params$rdmux[0][4][1]$a$1203 [3] $memory\params$rdmux[0][4][1]$a$1203 [0] }
      New connections: { $memory\params$rdmux[0][4][1]$a$1203 [7:4] $memory\params$rdmux[0][4][1]$a$1203 [2:1] } = { 2'00 $memory\params$rdmux[0][4][1]$a$1203 [3] $memory\params$rdmux[0][4][1]$a$1203 [3] 2'10 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][3]$1256:
      Old ports: A=$memory\params$rdmux[0][5][3]$a$1257, B=$memory\params$rdmux[0][5][3]$b$1258, Y=$memory\params$rdmux[0][4][1]$b$1204
      New ports: A={ $memory\params$rdmux[0][5][3]$a$1257 [3] $memory\params$rdmux[0][5][3]$a$1257 [3] 1'1 }, B={ 1'0 $memory\params$rdmux[0][5][3]$b$1258 [0] $memory\params$rdmux[0][5][3]$b$1258 [0] }, Y={ $memory\params$rdmux[0][4][1]$b$1204 [5] $memory\params$rdmux[0][4][1]$b$1204 [3] $memory\params$rdmux[0][4][1]$b$1204 [0] }
      New connections: { $memory\params$rdmux[0][4][1]$b$1204 [7:6] $memory\params$rdmux[0][4][1]$b$1204 [4] $memory\params$rdmux[0][4][1]$b$1204 [2:1] } = { $memory\params$rdmux[0][4][1]$b$1204 [5] 3'000 $memory\params$rdmux[0][4][1]$b$1204 [0] }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][4]$1259:
      Old ports: A=$memory\params$rdmux[0][5][4]$a$1260, B=$memory\params$rdmux[0][5][4]$b$1261, Y=$memory\params$rdmux[0][4][2]$a$1206
      New ports: A={ $memory\params$rdmux[0][5][4]$a$1260 [0] $memory\params$rdmux[0][5][4]$a$1260 [1:0] }, B={ 1'1 $memory\params$rdmux[0][5][4]$b$1261 [1:0] }, Y=$memory\params$rdmux[0][4][2]$a$1206 [2:0]
      New connections: $memory\params$rdmux[0][4][2]$a$1206 [7:3] = { $memory\params$rdmux[0][4][2]$a$1206 [2:1] $memory\params$rdmux[0][4][2]$a$1206 [1] 2'01 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][5]$1262:
      Old ports: A=$memory\params$rdmux[0][5][5]$a$1263, B=$memory\params$rdmux[0][5][5]$b$1264, Y=$memory\params$rdmux[0][4][2]$b$1207
      New ports: A={ $memory\params$rdmux[0][5][5]$a$1263 [3] 2'11 }, B={ 1'1 $memory\params$rdmux[0][5][5]$b$1264 [1] 1'0 }, Y={ $memory\params$rdmux[0][4][2]$b$1207 [3] $memory\params$rdmux[0][4][2]$b$1207 [1:0] }
      New connections: { $memory\params$rdmux[0][4][2]$b$1207 [7:4] $memory\params$rdmux[0][4][2]$b$1207 [2] } = { 4'0000 $memory\params$rdmux[0][4][2]$b$1207 [1] }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][6]$1265:
      Old ports: A=$memory\params$rdmux[0][5][6]$a$1266, B=$memory\params$rdmux[0][5][6]$b$1267, Y=$memory\params$rdmux[0][4][3]$a$1209
      New ports: A={ $memory\params$rdmux[0][5][6]$a$1266 [4] $memory\params$rdmux[0][5][6]$a$1266 [0] $memory\params$rdmux[0][5][6]$a$1266 [0] }, B={ 2'01 $memory\params$rdmux[0][5][6]$b$1267 [0] }, Y={ $memory\params$rdmux[0][4][3]$a$1209 [4] $memory\params$rdmux[0][4][3]$a$1209 [1:0] }
      New connections: { $memory\params$rdmux[0][4][3]$a$1209 [7:5] $memory\params$rdmux[0][4][3]$a$1209 [3:2] } = { 4'0000 $memory\params$rdmux[0][4][3]$a$1209 [0] }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][7]$1268:
      Old ports: A=$memory\params$rdmux[0][5][7]$a$1269, B=$memory\params$rdmux[0][5][7]$b$1270, Y=$memory\params$rdmux[0][4][3]$b$1210
      New ports: A={ 1'0 $memory\params$rdmux[0][5][7]$a$1269 [3] $memory\params$rdmux[0][5][7]$a$1269 [1] $memory\params$rdmux[0][5][7]$a$1269 [1] }, B={ $memory\params$rdmux[0][5][7]$b$1270 [5] $memory\params$rdmux[0][5][7]$b$1270 [1] 1'1 $memory\params$rdmux[0][5][7]$b$1270 [1] }, Y={ $memory\params$rdmux[0][4][3]$b$1210 [5] $memory\params$rdmux[0][4][3]$b$1210 [3:1] }
      New connections: { $memory\params$rdmux[0][4][3]$b$1210 [7:6] $memory\params$rdmux[0][4][3]$b$1210 [4] $memory\params$rdmux[0][4][3]$b$1210 [0] } = 4'0001
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][8]$1271:
      Old ports: A=$memory\params$rdmux[0][5][8]$a$1272, B=$memory\params$rdmux[0][5][8]$b$1273, Y=$memory\params$rdmux[0][4][4]$a$1212
      New ports: A={ 1'0 $memory\params$rdmux[0][5][8]$a$1272 [1] $memory\params$rdmux[0][5][8]$a$1272 [1] }, B={ $memory\params$rdmux[0][5][8]$b$1273 [3:2] 1'0 }, Y=$memory\params$rdmux[0][4][4]$a$1212 [3:1]
      New connections: { $memory\params$rdmux[0][4][4]$a$1212 [7:4] $memory\params$rdmux[0][4][4]$a$1212 [0] } = { 2'00 $memory\params$rdmux[0][4][4]$a$1212 [1] $memory\params$rdmux[0][4][4]$a$1212 [1] 1'0 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][9]$1274:
      Old ports: A=$memory\params$rdmux[0][5][9]$a$1275, B=$memory\params$rdmux[0][5][9]$b$1276, Y=$memory\params$rdmux[0][4][4]$b$1213
      New ports: A={ $memory\params$rdmux[0][5][9]$a$1275 [4] $memory\params$rdmux[0][5][9]$a$1275 [1] $memory\params$rdmux[0][5][9]$a$1275 [1] 1'0 }, B={ 3'010 $memory\params$rdmux[0][5][9]$b$1276 [0] }, Y={ $memory\params$rdmux[0][4][4]$b$1213 [4:3] $memory\params$rdmux[0][4][4]$b$1213 [1:0] }
      New connections: { $memory\params$rdmux[0][4][4]$b$1213 [7:5] $memory\params$rdmux[0][4][4]$b$1213 [2] } = { 3'000 $memory\params$rdmux[0][4][4]$b$1213 [0] }
  Optimizing cells in module \demo.
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][2][0]$805:
      Old ports: A=$memory\cmd$rdmux[0][2][0]$a$806, B=$memory\cmd$rdmux[0][2][0]$b$807, Y=$memory\cmd$rdmux[0][1][0]$a$800
      New ports: A={ $memory\cmd$rdmux[0][2][0]$a$806 [5] 1'0 $memory\cmd$rdmux[0][2][0]$a$806 [5] 2'10 $memory\cmd$rdmux[0][2][0]$a$806 [1:0] }, B={ 1'1 $memory\cmd$rdmux[0][2][0]$b$807 [6] $memory\cmd$rdmux[0][2][0]$b$807 [2] $memory\cmd$rdmux[0][2][0]$b$807 [2] $memory\cmd$rdmux[0][2][0]$b$807 [2:0] }, Y={ $memory\cmd$rdmux[0][1][0]$a$800 [7:4] $memory\cmd$rdmux[0][1][0]$a$800 [2:0] }
      New connections: $memory\cmd$rdmux[0][1][0]$a$800 [3] = 1'0
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][2][1]$808:
      Old ports: A=$memory\cmd$rdmux[0][2][1]$a$809, B=$memory\cmd$rdmux[0][2][1]$b$810, Y=$memory\cmd$rdmux[0][1][0]$b$801
      New ports: A={ 1'1 $memory\cmd$rdmux[0][2][1]$a$809 [5] 2'00 $memory\cmd$rdmux[0][2][1]$a$809 [2:0] }, B={ $memory\cmd$rdmux[0][2][1]$b$810 [6] 1'1 $memory\cmd$rdmux[0][2][1]$b$810 [4:0] }, Y=$memory\cmd$rdmux[0][1][0]$b$801 [6:0]
      New connections: $memory\cmd$rdmux[0][1][0]$b$801 [7] = $memory\cmd$rdmux[0][1][0]$b$801 [6]
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][2][2]$811:
      Old ports: A=$memory\cmd$rdmux[0][2][2]$a$812, B=$memory\cmd$rdmux[0][2][2]$b$813, Y=$memory\cmd$rdmux[0][1][1]$a$803
      New ports: A={ 2'10 $memory\cmd$rdmux[0][2][2]$a$812 [3] 1'0 $memory\cmd$rdmux[0][2][2]$a$812 [1:0] }, B={ $memory\cmd$rdmux[0][2][2]$b$813 [2] $memory\cmd$rdmux[0][2][2]$b$813 [0] $memory\cmd$rdmux[0][2][2]$b$813 [2] $memory\cmd$rdmux[0][2][2]$b$813 [2] $memory\cmd$rdmux[0][2][2]$b$813 [0] $memory\cmd$rdmux[0][2][2]$b$813 [0] }, Y=$memory\cmd$rdmux[0][1][1]$a$803 [5:0]
      New connections: $memory\cmd$rdmux[0][1][1]$a$803 [7:6] = { $memory\cmd$rdmux[0][1][1]$a$803 [4] $memory\cmd$rdmux[0][1][1]$a$803 [4] }
    Consolidated identical input bits for $mux cell $memory\num_params$rdmux[0][2][0]$940:
      Old ports: A=$memory\num_params$rdmux[0][2][0]$a$941, B=$memory\num_params$rdmux[0][2][0]$b$942, Y=$memory\num_params$rdmux[0][1][0]$a$935
      New ports: A=$memory\num_params$rdmux[0][2][0]$a$941 [2:0], B={ 1'0 $memory\num_params$rdmux[0][2][0]$b$942 [1:0] }, Y=$memory\num_params$rdmux[0][1][0]$a$935 [2:0]
      New connections: $memory\num_params$rdmux[0][1][0]$a$935 [13:3] = 11'00000000000
    Consolidated identical input bits for $mux cell $memory\num_params$rdmux[0][2][1]$943:
      Old ports: A=$memory\num_params$rdmux[0][2][1]$a$944, B=$memory\num_params$rdmux[0][2][1]$b$945, Y=$memory\num_params$rdmux[0][1][0]$b$936
      New ports: A={ $memory\num_params$rdmux[0][2][1]$a$944 [4] $memory\num_params$rdmux[0][2][1]$a$944 [1:0] }, B={ $memory\num_params$rdmux[0][2][1]$b$945 [4] 1'0 $memory\num_params$rdmux[0][2][1]$b$945 [0] }, Y={ $memory\num_params$rdmux[0][1][0]$b$936 [4] $memory\num_params$rdmux[0][1][0]$b$936 [1:0] }
      New connections: { $memory\num_params$rdmux[0][1][0]$b$936 [13:5] $memory\num_params$rdmux[0][1][0]$b$936 [3:2] } = 11'00000000000
    Consolidated identical input bits for $mux cell $memory\num_params$rdmux[0][2][2]$946:
      Old ports: A=$memory\num_params$rdmux[0][2][2]$a$947, B=$memory\num_params$rdmux[0][2][2]$b$948, Y=$memory\num_params$rdmux[0][1][1]$a$938
      New ports: A={ 1'0 $memory\num_params$rdmux[0][2][2]$a$947 [2] 1'0 }, B={ $memory\num_params$rdmux[0][2][2]$b$948 [9] $memory\num_params$rdmux[0][2][2]$b$948 [0] $memory\num_params$rdmux[0][2][2]$b$948 [0] }, Y={ $memory\num_params$rdmux[0][1][1]$a$938 [9] $memory\num_params$rdmux[0][1][1]$a$938 [2] $memory\num_params$rdmux[0][1][1]$a$938 [0] }
      New connections: { $memory\num_params$rdmux[0][1][1]$a$938 [13:10] $memory\num_params$rdmux[0][1][1]$a$938 [8:3] $memory\num_params$rdmux[0][1][1]$a$938 [1] } = { $memory\num_params$rdmux[0][1][1]$a$938 [9] $memory\num_params$rdmux[0][1][1]$a$938 [9] $memory\num_params$rdmux[0][1][1]$a$938 [0] $memory\num_params$rdmux[0][1][1]$a$938 [0] $memory\num_params$rdmux[0][1][1]$a$938 [0] $memory\num_params$rdmux[0][1][1]$a$938 [0] $memory\num_params$rdmux[0][1][1]$a$938 [0] $memory\num_params$rdmux[0][1][1]$a$938 [0] $memory\num_params$rdmux[0][1][1]$a$938 [0] $memory\num_params$rdmux[0][1][1]$a$938 [0] $memory\num_params$rdmux[0][1][1]$a$938 [0] }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][4][0]$1199:
      Old ports: A=$memory\params$rdmux[0][4][0]$a$1200, B=$memory\params$rdmux[0][4][0]$b$1201, Y=$memory\params$rdmux[0][3][0]$a$1176
      New ports: A={ $memory\params$rdmux[0][4][0]$a$1200 [3] $memory\params$rdmux[0][4][0]$a$1200 [0] }, B={ $memory\params$rdmux[0][4][0]$b$1201 [3] $memory\params$rdmux[0][4][0]$b$1201 [0] }, Y={ $memory\params$rdmux[0][3][0]$a$1176 [3] $memory\params$rdmux[0][3][0]$a$1176 [0] }
      New connections: { $memory\params$rdmux[0][3][0]$a$1176 [7:4] $memory\params$rdmux[0][3][0]$a$1176 [2:1] } = { 2'00 $memory\params$rdmux[0][3][0]$a$1176 [3] $memory\params$rdmux[0][3][0]$a$1176 [3] 2'10 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][4][1]$1202:
      Old ports: A=$memory\params$rdmux[0][4][1]$a$1203, B=$memory\params$rdmux[0][4][1]$b$1204, Y=$memory\params$rdmux[0][3][0]$b$1177
      New ports: A={ 1'0 $memory\params$rdmux[0][4][1]$a$1203 [3] $memory\params$rdmux[0][4][1]$a$1203 [3] $memory\params$rdmux[0][4][1]$a$1203 [3] 2'10 $memory\params$rdmux[0][4][1]$a$1203 [0] }, B={ $memory\params$rdmux[0][4][1]$b$1204 [5] $memory\params$rdmux[0][4][1]$b$1204 [5] 1'0 $memory\params$rdmux[0][4][1]$b$1204 [3] 1'0 $memory\params$rdmux[0][4][1]$b$1204 [0] $memory\params$rdmux[0][4][1]$b$1204 [0] }, Y={ $memory\params$rdmux[0][3][0]$b$1177 [7] $memory\params$rdmux[0][3][0]$b$1177 [5:0] }
      New connections: $memory\params$rdmux[0][3][0]$b$1177 [6] = 1'0
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][4][2]$1205:
      Old ports: A=$memory\params$rdmux[0][4][2]$a$1206, B=$memory\params$rdmux[0][4][2]$b$1207, Y=$memory\params$rdmux[0][3][1]$a$1179
      New ports: A={ $memory\params$rdmux[0][4][2]$a$1206 [2:1] 1'1 $memory\params$rdmux[0][4][2]$a$1206 [2:0] }, B={ 2'00 $memory\params$rdmux[0][4][2]$b$1207 [3] $memory\params$rdmux[0][4][2]$b$1207 [1] $memory\params$rdmux[0][4][2]$b$1207 [1:0] }, Y={ $memory\params$rdmux[0][3][1]$a$1179 [7] $memory\params$rdmux[0][3][1]$a$1179 [5] $memory\params$rdmux[0][3][1]$a$1179 [3:0] }
      New connections: { $memory\params$rdmux[0][3][1]$a$1179 [6] $memory\params$rdmux[0][3][1]$a$1179 [4] } = { $memory\params$rdmux[0][3][1]$a$1179 [5] 1'0 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][4][3]$1208:
      Old ports: A=$memory\params$rdmux[0][4][3]$a$1209, B=$memory\params$rdmux[0][4][3]$b$1210, Y=$memory\params$rdmux[0][3][1]$b$1180
      New ports: A={ 1'0 $memory\params$rdmux[0][4][3]$a$1209 [4] 1'0 $memory\params$rdmux[0][4][3]$a$1209 [0] $memory\params$rdmux[0][4][3]$a$1209 [1:0] }, B={ $memory\params$rdmux[0][4][3]$b$1210 [5] 1'0 $memory\params$rdmux[0][4][3]$b$1210 [3:1] 1'1 }, Y=$memory\params$rdmux[0][3][1]$b$1180 [5:0]
      New connections: $memory\params$rdmux[0][3][1]$b$1180 [7:6] = 2'00
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][4][4]$1211:
      Old ports: A=$memory\params$rdmux[0][4][4]$a$1212, B=$memory\params$rdmux[0][4][4]$b$1213, Y=$memory\params$rdmux[0][3][2]$a$1182
      New ports: A={ $memory\params$rdmux[0][4][4]$a$1212 [1] $memory\params$rdmux[0][4][4]$a$1212 [1] $memory\params$rdmux[0][4][4]$a$1212 [3:1] 1'0 }, B={ 1'0 $memory\params$rdmux[0][4][4]$b$1213 [4:3] $memory\params$rdmux[0][4][4]$b$1213 [0] $memory\params$rdmux[0][4][4]$b$1213 [1:0] }, Y=$memory\params$rdmux[0][3][2]$a$1182 [5:0]
      New connections: $memory\params$rdmux[0][3][2]$a$1182 [7:6] = 2'00
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][4][5]$1214:
      Old ports: A=$memory\params$rdmux[0][4][5]$a$1215, B=$memory\params$rdmux[0][4][5]$b$1216, Y=$memory\params$rdmux[0][3][2]$b$1183
      New ports: A={ 1'0 $memory\params$rdmux[0][4][5]$a$1215 [3] $memory\params$rdmux[0][4][5]$a$1215 [0] 1'1 $memory\params$rdmux[0][4][5]$a$1215 [0] }, B={ $memory\params$rdmux[0][4][5]$b$1216 [5] $memory\params$rdmux[0][4][5]$b$1216 [3:1] 1'1 }, Y={ $memory\params$rdmux[0][3][2]$b$1183 [5] $memory\params$rdmux[0][3][2]$b$1183 [3:0] }
      New connections: { $memory\params$rdmux[0][3][2]$b$1183 [7:6] $memory\params$rdmux[0][3][2]$b$1183 [4] } = 3'000
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][4][6]$1217:
      Old ports: A=$memory\params$rdmux[0][4][6]$a$1218, B=$memory\params$rdmux[0][4][6]$b$1219, Y=$memory\params$rdmux[0][3][3]$a$1185
      New ports: A={ 2'00 $memory\params$rdmux[0][4][6]$a$1218 [4] $memory\params$rdmux[0][4][6]$a$1218 [4:2] $memory\params$rdmux[0][4][6]$a$1218 [0] }, B={ $memory\params$rdmux[0][4][6]$b$1219 [7] $memory\params$rdmux[0][4][6]$b$1219 [3] $memory\params$rdmux[0][4][6]$b$1219 [3] $memory\params$rdmux[0][4][6]$b$1219 [4:3] $memory\params$rdmux[0][4][6]$b$1219 [0] $memory\params$rdmux[0][4][6]$b$1219 [0] }, Y={ $memory\params$rdmux[0][3][3]$a$1185 [7:2] $memory\params$rdmux[0][3][3]$a$1185 [0] }
      New connections: $memory\params$rdmux[0][3][3]$a$1185 [1] = 1'0
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][4][7]$1220:
      Old ports: A=$memory\params$rdmux[0][4][7]$a$1221, B=$memory\params$rdmux[0][4][7]$b$1222, Y=$memory\params$rdmux[0][3][3]$b$1186
      New ports: A={ $memory\params$rdmux[0][4][7]$a$1221 [5] 1'0 $memory\params$rdmux[0][4][7]$a$1221 [5] 2'00 $memory\params$rdmux[0][4][7]$a$1221 [0] }, B={ 1'0 $memory\params$rdmux[0][4][7]$b$1222 [0] $memory\params$rdmux[0][4][7]$b$1222 [0] $memory\params$rdmux[0][4][7]$b$1222 [3] $memory\params$rdmux[0][4][7]$b$1222 [1:0] }, Y={ $memory\params$rdmux[0][3][3]$b$1186 [7:5] $memory\params$rdmux[0][3][3]$b$1186 [3] $memory\params$rdmux[0][3][3]$b$1186 [1:0] }
      New connections: { $memory\params$rdmux[0][3][3]$b$1186 [4] $memory\params$rdmux[0][3][3]$b$1186 [2] } = { $memory\params$rdmux[0][3][3]$b$1186 [1] 1'0 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][4][8]$1223:
      Old ports: A=$memory\params$rdmux[0][4][8]$a$1224, B=8'xxxxxxxx, Y=$memory\params$rdmux[0][3][4]$a$1188
      New ports: A=$memory\params$rdmux[0][4][8]$a$1224 [0], B=1'x, Y=$memory\params$rdmux[0][3][4]$a$1188 [0]
      New connections: $memory\params$rdmux[0][3][4]$a$1188 [7:1] = { $memory\params$rdmux[0][3][4]$a$1188 [0] $memory\params$rdmux[0][3][4]$a$1188 [0] $memory\params$rdmux[0][3][4]$a$1188 [0] $memory\params$rdmux[0][3][4]$a$1188 [0] $memory\params$rdmux[0][3][4]$a$1188 [0] $memory\params$rdmux[0][3][4]$a$1188 [0] $memory\params$rdmux[0][3][4]$a$1188 [0] }
  Optimizing cells in module \demo.
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][1][1]$802:
      Old ports: A=$memory\cmd$rdmux[0][1][1]$a$803, B=8'xxxxxxxx, Y=$memory\cmd$rdmux[0][0][0]$b$798
      New ports: A=$memory\cmd$rdmux[0][1][1]$a$803 [5:0], B=6'xxxxxx, Y=$memory\cmd$rdmux[0][0][0]$b$798 [5:0]
      New connections: $memory\cmd$rdmux[0][0][0]$b$798 [7:6] = { $memory\cmd$rdmux[0][0][0]$b$798 [4] $memory\cmd$rdmux[0][0][0]$b$798 [4] }
    Consolidated identical input bits for $mux cell $memory\num_params$rdmux[0][1][0]$934:
      Old ports: A=$memory\num_params$rdmux[0][1][0]$a$935, B=$memory\num_params$rdmux[0][1][0]$b$936, Y=$memory\num_params$rdmux[0][0][0]$a$932
      New ports: A={ 1'0 $memory\num_params$rdmux[0][1][0]$a$935 [2:0] }, B={ $memory\num_params$rdmux[0][1][0]$b$936 [4] 1'0 $memory\num_params$rdmux[0][1][0]$b$936 [1:0] }, Y={ $memory\num_params$rdmux[0][0][0]$a$932 [4] $memory\num_params$rdmux[0][0][0]$a$932 [2:0] }
      New connections: { $memory\num_params$rdmux[0][0][0]$a$932 [13:5] $memory\num_params$rdmux[0][0][0]$a$932 [3] } = 10'0000000000
    Consolidated identical input bits for $mux cell $memory\num_params$rdmux[0][1][1]$937:
      Old ports: A=$memory\num_params$rdmux[0][1][1]$a$938, B=14'xxxxxxxxxxxxxx, Y=$memory\num_params$rdmux[0][0][0]$b$933
      New ports: A={ $memory\num_params$rdmux[0][1][1]$a$938 [9] $memory\num_params$rdmux[0][1][1]$a$938 [2] $memory\num_params$rdmux[0][1][1]$a$938 [0] }, B=3'xxx, Y={ $memory\num_params$rdmux[0][0][0]$b$933 [9] $memory\num_params$rdmux[0][0][0]$b$933 [2] $memory\num_params$rdmux[0][0][0]$b$933 [0] }
      New connections: { $memory\num_params$rdmux[0][0][0]$b$933 [13:10] $memory\num_params$rdmux[0][0][0]$b$933 [8:3] $memory\num_params$rdmux[0][0][0]$b$933 [1] } = { $memory\num_params$rdmux[0][0][0]$b$933 [9] $memory\num_params$rdmux[0][0][0]$b$933 [9] $memory\num_params$rdmux[0][0][0]$b$933 [0] $memory\num_params$rdmux[0][0][0]$b$933 [0] $memory\num_params$rdmux[0][0][0]$b$933 [0] $memory\num_params$rdmux[0][0][0]$b$933 [0] $memory\num_params$rdmux[0][0][0]$b$933 [0] $memory\num_params$rdmux[0][0][0]$b$933 [0] $memory\num_params$rdmux[0][0][0]$b$933 [0] $memory\num_params$rdmux[0][0][0]$b$933 [0] $memory\num_params$rdmux[0][0][0]$b$933 [0] }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][3][0]$1175:
      Old ports: A=$memory\params$rdmux[0][3][0]$a$1176, B=$memory\params$rdmux[0][3][0]$b$1177, Y=$memory\params$rdmux[0][2][0]$a$1164
      New ports: A={ 1'0 $memory\params$rdmux[0][3][0]$a$1176 [3] $memory\params$rdmux[0][3][0]$a$1176 [3] $memory\params$rdmux[0][3][0]$a$1176 [3] 2'10 $memory\params$rdmux[0][3][0]$a$1176 [0] }, B={ $memory\params$rdmux[0][3][0]$b$1177 [7] $memory\params$rdmux[0][3][0]$b$1177 [5:0] }, Y={ $memory\params$rdmux[0][2][0]$a$1164 [7] $memory\params$rdmux[0][2][0]$a$1164 [5:0] }
      New connections: $memory\params$rdmux[0][2][0]$a$1164 [6] = 1'0
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][3][2]$1181:
      Old ports: A=$memory\params$rdmux[0][3][2]$a$1182, B=$memory\params$rdmux[0][3][2]$b$1183, Y=$memory\params$rdmux[0][2][1]$a$1167
      New ports: A=$memory\params$rdmux[0][3][2]$a$1182 [5:0], B={ $memory\params$rdmux[0][3][2]$b$1183 [5] 1'0 $memory\params$rdmux[0][3][2]$b$1183 [3:0] }, Y=$memory\params$rdmux[0][2][1]$a$1167 [5:0]
      New connections: $memory\params$rdmux[0][2][1]$a$1167 [7:6] = 2'00
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][3][4]$1187:
      Old ports: A=$memory\params$rdmux[0][3][4]$a$1188, B=8'xxxxxxxx, Y=$memory\params$rdmux[0][2][2]$a$1170
      New ports: A=$memory\params$rdmux[0][3][4]$a$1188 [0], B=1'x, Y=$memory\params$rdmux[0][2][2]$a$1170 [0]
      New connections: $memory\params$rdmux[0][2][2]$a$1170 [7:1] = { $memory\params$rdmux[0][2][2]$a$1170 [0] $memory\params$rdmux[0][2][2]$a$1170 [0] $memory\params$rdmux[0][2][2]$a$1170 [0] $memory\params$rdmux[0][2][2]$a$1170 [0] $memory\params$rdmux[0][2][2]$a$1170 [0] $memory\params$rdmux[0][2][2]$a$1170 [0] $memory\params$rdmux[0][2][2]$a$1170 [0] }
  Optimizing cells in module \demo.
    Consolidated identical input bits for $mux cell $memory\num_params$rdmux[0][0][0]$931:
      Old ports: A=$memory\num_params$rdmux[0][0][0]$a$932, B=$memory\num_params$rdmux[0][0][0]$b$933, Y=$memrd$\num_params$demo.v:391$140_DATA
      New ports: A={ 1'0 $memory\num_params$rdmux[0][0][0]$a$932 [4] 1'0 $memory\num_params$rdmux[0][0][0]$a$932 [2:0] }, B={ $memory\num_params$rdmux[0][0][0]$b$933 [9] $memory\num_params$rdmux[0][0][0]$b$933 [0] $memory\num_params$rdmux[0][0][0]$b$933 [0] $memory\num_params$rdmux[0][0][0]$b$933 [2] $memory\num_params$rdmux[0][0][0]$b$933 [0] $memory\num_params$rdmux[0][0][0]$b$933 [0] }, Y={ $memrd$\num_params$demo.v:391$140_DATA [9] $memrd$\num_params$demo.v:391$140_DATA [4:0] }
      New connections: { $memrd$\num_params$demo.v:391$140_DATA [13:10] $memrd$\num_params$demo.v:391$140_DATA [8:5] } = { $memrd$\num_params$demo.v:391$140_DATA [9] $memrd$\num_params$demo.v:391$140_DATA [9] $memrd$\num_params$demo.v:391$140_DATA [3] $memrd$\num_params$demo.v:391$140_DATA [3] $memrd$\num_params$demo.v:391$140_DATA [3] $memrd$\num_params$demo.v:391$140_DATA [3] $memrd$\num_params$demo.v:391$140_DATA [3] $memrd$\num_params$demo.v:391$140_DATA [3] }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][2][2]$1169:
      Old ports: A=$memory\params$rdmux[0][2][2]$a$1170, B=8'xxxxxxxx, Y=$memory\params$rdmux[0][1][1]$a$1161
      New ports: A=$memory\params$rdmux[0][2][2]$a$1170 [0], B=1'x, Y=$memory\params$rdmux[0][1][1]$a$1161 [0]
      New connections: $memory\params$rdmux[0][1][1]$a$1161 [7:1] = { $memory\params$rdmux[0][1][1]$a$1161 [0] $memory\params$rdmux[0][1][1]$a$1161 [0] $memory\params$rdmux[0][1][1]$a$1161 [0] $memory\params$rdmux[0][1][1]$a$1161 [0] $memory\params$rdmux[0][1][1]$a$1161 [0] $memory\params$rdmux[0][1][1]$a$1161 [0] $memory\params$rdmux[0][1][1]$a$1161 [0] }
  Optimizing cells in module \demo.
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][1][1]$1160:
      Old ports: A=$memory\params$rdmux[0][1][1]$a$1161, B=8'xxxxxxxx, Y=$memory\params$rdmux[0][0][0]$b$1156
      New ports: A=$memory\params$rdmux[0][1][1]$a$1161 [0], B=1'x, Y=$memory\params$rdmux[0][0][0]$b$1156 [0]
      New connections: $memory\params$rdmux[0][0][0]$b$1156 [7:1] = { $memory\params$rdmux[0][0][0]$b$1156 [0] $memory\params$rdmux[0][0][0]$b$1156 [0] $memory\params$rdmux[0][0][0]$b$1156 [0] $memory\params$rdmux[0][0][0]$b$1156 [0] $memory\params$rdmux[0][0][0]$b$1156 [0] $memory\params$rdmux[0][0][0]$b$1156 [0] $memory\params$rdmux[0][0][0]$b$1156 [0] }
  Optimizing cells in module \demo.
Performed a total of 102 changes.

2.29.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\demo'.
<suppressed ~114 debug messages>
Removed a total of 38 cells.

2.29.13. Executing OPT_RMDFF pass (remove dff with constant values).

2.29.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..
Removed 0 unused cells and 44 unused wires.
<suppressed ~1 debug messages>

2.29.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.

2.29.16. Rerunning OPT passes. (Maybe there is more to do..)

2.29.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \demo..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~26 debug messages>

2.29.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \demo.
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][3][2]$823:
      Old ports: A={ 1'0 $memory\cmd$rdmux[0][3][1]$a$821 [6:5] $memory\cmd$rdmux[0][3][1]$a$821 [5] }, B={ $memory\cmd$rdmux[0][3][1]$a$821 [6:5] 1'0 $memory\cmd$rdmux[0][3][1]$a$821 [5] }, Y={ $memory\cmd$rdmux[0][2][1]$a$809 [5] $memory\cmd$rdmux[0][2][1]$a$809 [2:0] }
      New ports: A={ 1'0 $memory\cmd$rdmux[0][3][1]$a$821 [6:5] }, B={ $memory\cmd$rdmux[0][3][1]$a$821 [6:5] 1'0 }, Y={ $memory\cmd$rdmux[0][2][1]$a$809 [5] $memory\cmd$rdmux[0][2][1]$a$809 [2:1] }
      New connections: $memory\cmd$rdmux[0][2][1]$a$809 [0] = $memory\cmd$rdmux[0][3][1]$a$821 [5]
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][11]$1280:
      Old ports: A={ 1'0 $memory\params$rdmux[0][5][0]$a$1248 [5] $memory\params$rdmux[0][5][0]$a$1248 [0] $memory\params$rdmux[0][5][0]$a$1248 [0] }, B={ $memory\params$rdmux[0][5][0]$a$1248 [5] $memory\params$rdmux[0][5][0]$a$1248 [0] 1'1 $memory\params$rdmux[0][5][0]$a$1248 [0] }, Y={ $memory\params$rdmux[0][4][3]$b$1210 [5] $memory\params$rdmux[0][4][3]$b$1210 [3:1] }
      New ports: A={ 1'0 $memory\params$rdmux[0][5][0]$a$1248 [5] $memory\params$rdmux[0][5][0]$a$1248 [0] }, B={ $memory\params$rdmux[0][5][0]$a$1248 [5] $memory\params$rdmux[0][5][0]$a$1248 [0] 1'1 }, Y={ $memory\params$rdmux[0][4][3]$b$1210 [5] $memory\params$rdmux[0][4][3]$b$1210 [3:2] }
      New connections: $memory\params$rdmux[0][4][3]$b$1210 [1] = $memory\params$rdmux[0][5][0]$a$1248 [0]
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][15]$1292:
      Old ports: A={ $memory\params$rdmux[0][5][10]$a$1278 [3] $memory\params$rdmux[0][5][10]$a$1278 [3] 1'0 }, B={ $memory\params$rdmux[0][5][10]$a$1278 [3] 1'0 $memory\params$rdmux[0][5][10]$a$1278 [3] }, Y={ $memory\params$rdmux[0][4][7]$b$1222 [3] $memory\params$rdmux[0][4][7]$b$1222 [4] $memory\params$rdmux[0][4][7]$b$1222 [6] }
      New ports: A={ $memory\params$rdmux[0][5][10]$a$1278 [3] 1'0 }, B={ 1'0 $memory\params$rdmux[0][5][10]$a$1278 [3] }, Y={ $memory\params$rdmux[0][4][7]$b$1222 [4] $memory\params$rdmux[0][4][7]$b$1222 [6] }
      New connections: $memory\params$rdmux[0][4][7]$b$1222 [3] = $memory\params$rdmux[0][5][10]$a$1278 [3]
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][4]$1259:
      Old ports: A={ $memory\params$rdmux[0][5][0]$a$1248 [0] $memory\params$rdmux[0][5][0]$a$1248 [5] $memory\params$rdmux[0][5][0]$a$1248 [0] }, B={ 1'1 $memory\params$rdmux[0][5][0]$a$1248 [5] $memory\params$rdmux[0][5][0]$a$1248 [0] }, Y={ $memory\params$rdmux[0][4][2]$a$1206 [7:6] $memory\params$rdmux[0][4][2]$a$1206 [0] }
      New ports: A=$memory\params$rdmux[0][5][0]$a$1248 [0], B=1'1, Y=$memory\params$rdmux[0][4][2]$a$1206 [7]
      New connections: { $memory\params$rdmux[0][4][2]$a$1206 [6] $memory\params$rdmux[0][4][2]$a$1206 [0] } = { $memory\params$rdmux[0][5][0]$a$1248 [5] $memory\params$rdmux[0][5][0]$a$1248 [0] }
  Optimizing cells in module \demo.
Performed a total of 4 changes.

2.29.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\demo'.
Removed a total of 0 cells.

2.29.20. Executing OPT_RMDFF pass (remove dff with constant values).

2.29.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

2.29.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.

2.29.23. Rerunning OPT passes. (Maybe there is more to do..)

2.29.24. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \demo..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~26 debug messages>

2.29.25. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \demo.
Performed a total of 0 changes.

2.29.26. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\demo'.
Removed a total of 0 cells.

2.29.27. Executing OPT_RMDFF pass (remove dff with constant values).

2.29.28. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..

2.29.29. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.

2.29.30. Finished OPT passes. (There is nothing left to do.)

2.30. Executing TECHMAP pass (map to technology primitives).

2.30.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

2.30.2. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/arith_map.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/arith_map.v' to AST representation.
Generating RTLIL representation for module `\_80_ice40_alu'.
Successfully finished Verilog frontend.

2.30.3. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $not.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=3\B_WIDTH=1\Y_WIDTH=3 for cells of type $alu.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $logic_and.
Using template $paramod$constmap:446553370afc6c2aa6cc0b8f657b7f64b237ff7c$paramod$55f49a009a975a30a28fdd971adb6110903d4740\_90_shift_shiftx for cells of type $shiftx.
Using template $paramod$constmap:ee5af906ae0d3d414c6a0471604c553ef70c8e09$paramod$1297efc30c1e19551d1f4e269f2cbfa7dd15f801\_90_shift_shiftx for cells of type $shiftx.
Using extmapper simplemap for cells of type $lut.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $ne.
Using template $paramod\_90_pmux\WIDTH=14\S_WIDTH=2 for cells of type $pmux.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=16\Y_WIDTH=16 for cells of type $alu.
Using template $paramod\_90_pmux\WIDTH=8\S_WIDTH=2 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=16\S_WIDTH=2 for cells of type $pmux.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=7\Y_WIDTH=7 for cells of type $alu.
Using template $paramod\_90_pmux\WIDTH=6\S_WIDTH=13 for cells of type $pmux.
Using extmapper simplemap for cells of type $or.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=5\B_WIDTH=1\Y_WIDTH=5 for cells of type $alu.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=5\Y_WIDTH=5 for cells of type $alu.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=4\B_WIDTH=1\Y_WIDTH=4 for cells of type $alu.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=14\B_WIDTH=1\Y_WIDTH=14 for cells of type $alu.
Using template $paramod\_90_pmux\WIDTH=1\S_WIDTH=2 for cells of type $pmux.
Using extmapper simplemap for cells of type $reduce_and.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=9\B_WIDTH=16\Y_WIDTH=16 for cells of type $alu.
Using template $paramod\_90_pmux\WIDTH=1\S_WIDTH=3 for cells of type $pmux.
Using extmapper simplemap for cells of type $dff.
Using extmapper simplemap for cells of type $pos.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $and.
No more expansions possible.
<suppressed ~694 debug messages>

2.31. Executing ICE40_OPT pass (performing simple optimizations).

2.31.1. Running ICE40 specific optimizations.

2.31.2. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.
<suppressed ~531 debug messages>

2.31.3. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\demo'.
<suppressed ~411 debug messages>
Removed a total of 137 cells.

2.31.4. Executing OPT_RMDFF pass (remove dff with constant values).

2.31.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..
Removed 104 unused cells and 456 unused wires.
<suppressed ~105 debug messages>

2.31.6. Rerunning OPT passes. (Removed registers in this run.)

2.31.7. Running ICE40 specific optimizations.
Optimized away SB_CARRY cell demo.$auto$alumacc.cc:474:replace_alu$712.slice[0].carry: CO=$auto$alumacc.cc:474:replace_alu$712.BB [0]
Optimized away SB_CARRY cell demo.$auto$alumacc.cc:474:replace_alu$725.slice[0].carry: CO=\delay [0]
Optimized away SB_CARRY cell demo.$auto$alumacc.cc:474:replace_alu$728.slice[0].carry: CO=\cmd_counter [0]
Optimized away SB_CARRY cell demo.$auto$alumacc.cc:474:replace_alu$731.slice[0].carry: CO=\param_counter [0]
Optimized away SB_CARRY cell demo.$auto$alumacc.cc:474:replace_alu$734.slice[0].carry: CO=\cmd_counter [0]
Optimized away SB_CARRY cell demo.$auto$alumacc.cc:474:replace_alu$737.slice[0].carry: CO=\pixel_bit_counter [0]
Optimized away SB_CARRY cell demo.$auto$alumacc.cc:474:replace_alu$740.slice[0].carry: CO=\bit_counter [0]
Optimized away SB_CARRY cell demo.$auto$alumacc.cc:474:replace_alu$743.slice[0].carry: CO=\params_left [0]
Mapping SB_LUT4 cell demo.$auto$alumacc.cc:474:replace_alu$725.slice[1].adder back to logic.
Mapping SB_LUT4 cell demo.$auto$alumacc.cc:474:replace_alu$728.slice[1].adder back to logic.
Mapping SB_LUT4 cell demo.$auto$alumacc.cc:474:replace_alu$731.slice[1].adder back to logic.
Mapping SB_LUT4 cell demo.$auto$alumacc.cc:474:replace_alu$734.slice[1].adder back to logic.
Mapping SB_LUT4 cell demo.$auto$alumacc.cc:474:replace_alu$737.slice[1].adder back to logic.
Mapping SB_LUT4 cell demo.$auto$alumacc.cc:474:replace_alu$740.slice[1].adder back to logic.
Mapping SB_LUT4 cell demo.$auto$alumacc.cc:474:replace_alu$743.slice[1].adder back to logic.

2.31.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.
<suppressed ~91 debug messages>

2.31.9. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\demo'.
<suppressed ~21 debug messages>
Removed a total of 7 cells.

2.31.10. Executing OPT_RMDFF pass (remove dff with constant values).

2.31.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..
Removed 0 unused cells and 24 unused wires.
<suppressed ~1 debug messages>

2.31.12. Rerunning OPT passes. (Removed registers in this run.)

2.31.13. Running ICE40 specific optimizations.

2.31.14. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.

2.31.15. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\demo'.
Removed a total of 0 cells.

2.31.16. Executing OPT_RMDFF pass (remove dff with constant values).

2.31.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..

2.31.18. Finished OPT passes. (There is nothing left to do.)

2.32. Executing DFFSR2DFF pass (mapping DFFSR cells to simpler FFs).

2.33. Executing DFF2DFFE pass (transform $dff to $dffe where applicable).
Selected cell types for direct conversion:
  $_DFF_PP1_ -> $__DFFE_PP1
  $_DFF_PP0_ -> $__DFFE_PP0
  $_DFF_PN1_ -> $__DFFE_PN1
  $_DFF_PN0_ -> $__DFFE_PN0
  $_DFF_NP1_ -> $__DFFE_NP1
  $_DFF_NP0_ -> $__DFFE_NP0
  $_DFF_NN1_ -> $__DFFE_NN1
  $_DFF_NN0_ -> $__DFFE_NN0
  $_DFF_N_ -> $_DFFE_NP_
  $_DFF_P_ -> $_DFFE_PP_
Transforming FF to FF+Enable cells in module demo:
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2580 to $_DFFE_PP_ for $0\rst[0:0] -> \rst.
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2581 to $_DFFE_PP_ for $0\dc[0:0] -> \dc.
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2582 to $_DFFE_PP_ for $0\mosi[0:0] -> \mosi.
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2583 to $_DFFE_PP_ for $0\cs[0:0] -> \cs.
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2584 to $_DFFE_PP_ for $0\state[5:0] [0] -> \state [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2585 to $_DFFE_PP_ for $0\state[5:0] [1] -> \state [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2586 to $_DFFE_PP_ for $0\state[5:0] [2] -> \state [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2587 to $_DFFE_PP_ for $0\state[5:0] [3] -> \state [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2588 to $_DFFE_PP_ for $0\state[5:0] [4] -> \state [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2589 to $_DFFE_PP_ for $0\state[5:0] [5] -> \state [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2590 to $_DFFE_PP_ for $0\delay[15:0] [0] -> \delay [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2591 to $_DFFE_PP_ for $0\delay[15:0] [1] -> \delay [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2592 to $_DFFE_PP_ for $0\delay[15:0] [2] -> \delay [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2593 to $_DFFE_PP_ for $0\delay[15:0] [3] -> \delay [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2594 to $_DFFE_PP_ for $0\delay[15:0] [4] -> \delay [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2595 to $_DFFE_PP_ for $0\delay[15:0] [5] -> \delay [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2596 to $_DFFE_PP_ for $0\delay[15:0] [6] -> \delay [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2597 to $_DFFE_PP_ for $0\delay[15:0] [7] -> \delay [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2598 to $_DFFE_PP_ for $0\delay[15:0] [8] -> \delay [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2599 to $_DFFE_PP_ for $0\delay[15:0] [9] -> \delay [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2600 to $_DFFE_PP_ for $0\delay[15:0] [10] -> \delay [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2601 to $_DFFE_PP_ for $0\delay[15:0] [11] -> \delay [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2602 to $_DFFE_PP_ for $0\delay[15:0] [12] -> \delay [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2603 to $_DFFE_PP_ for $0\delay[15:0] [13] -> \delay [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2604 to $_DFFE_PP_ for $0\delay[15:0] [14] -> \delay [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2605 to $_DFFE_PP_ for $0\delay[15:0] [15] -> \delay [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2606 to $_DFFE_PP_ for $0\data[7:0] [0] -> \data [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2607 to $_DFFE_PP_ for $0\data[7:0] [1] -> \data [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2608 to $_DFFE_PP_ for $0\data[7:0] [2] -> \data [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2609 to $_DFFE_PP_ for $0\data[7:0] [3] -> \data [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2610 to $_DFFE_PP_ for $0\data[7:0] [4] -> \data [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2611 to $_DFFE_PP_ for $0\data[7:0] [5] -> \data [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2612 to $_DFFE_PP_ for $0\data[7:0] [6] -> \data [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2613 to $_DFFE_PP_ for $0\data[7:0] [7] -> \data [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2614 to $_DFFE_PP_ for $0\bit_counter[2:0] [0] -> \bit_counter [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2615 to $_DFFE_PP_ for $0\bit_counter[2:0] [1] -> \bit_counter [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2616 to $_DFFE_PP_ for $0\bit_counter[2:0] [2] -> \bit_counter [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2617 to $_DFFE_PP_ for $0\pixel_data[15:0] [0] -> \pixel_data [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2618 to $_DFFE_PP_ for $0\pixel_data[15:0] [1] -> \pixel_data [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2619 to $_DFFE_PP_ for $0\pixel_data[15:0] [2] -> \pixel_data [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2620 to $_DFFE_PP_ for $0\pixel_data[15:0] [3] -> \pixel_data [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2621 to $_DFFE_PP_ for $0\pixel_data[15:0] [4] -> \pixel_data [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2622 to $_DFFE_PP_ for $0\pixel_data[15:0] [5] -> \pixel_data [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2623 to $_DFFE_PP_ for $0\pixel_data[15:0] [6] -> \pixel_data [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2624 to $_DFFE_PP_ for $0\pixel_data[15:0] [7] -> \pixel_data [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2625 to $_DFFE_PP_ for $0\pixel_data[15:0] [8] -> \pixel_data [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2626 to $_DFFE_PP_ for $0\pixel_data[15:0] [9] -> \pixel_data [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2627 to $_DFFE_PP_ for $0\pixel_data[15:0] [10] -> \pixel_data [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2628 to $_DFFE_PP_ for $0\pixel_data[15:0] [11] -> \pixel_data [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2629 to $_DFFE_PP_ for $0\pixel_data[15:0] [12] -> \pixel_data [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2630 to $_DFFE_PP_ for $0\pixel_data[15:0] [13] -> \pixel_data [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2631 to $_DFFE_PP_ for $0\pixel_data[15:0] [14] -> \pixel_data [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2632 to $_DFFE_PP_ for $0\pixel_data[15:0] [15] -> \pixel_data [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2633 to $_DFFE_PP_ for $0\pixel_bit_counter[3:0] [0] -> \pixel_bit_counter [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2634 to $_DFFE_PP_ for $0\pixel_bit_counter[3:0] [1] -> \pixel_bit_counter [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2635 to $_DFFE_PP_ for $0\pixel_bit_counter[3:0] [2] -> \pixel_bit_counter [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2636 to $_DFFE_PP_ for $0\pixel_bit_counter[3:0] [3] -> \pixel_bit_counter [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2637 to $_DFFE_PP_ for $0\cmd_counter[4:0] [0] -> \cmd_counter [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2638 to $_DFFE_PP_ for $0\cmd_counter[4:0] [1] -> \cmd_counter [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2639 to $_DFFE_PP_ for $0\cmd_counter[4:0] [2] -> \cmd_counter [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2640 to $_DFFE_PP_ for $0\cmd_counter[4:0] [3] -> \cmd_counter [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2641 to $_DFFE_PP_ for $0\cmd_counter[4:0] [4] -> \cmd_counter [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2642 to $_DFFE_PP_ for $0\param_counter[6:0] [0] -> \param_counter [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2643 to $_DFFE_PP_ for $0\param_counter[6:0] [1] -> \param_counter [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2644 to $_DFFE_PP_ for $0\param_counter[6:0] [2] -> \param_counter [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2645 to $_DFFE_PP_ for $0\param_counter[6:0] [3] -> \param_counter [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2646 to $_DFFE_PP_ for $0\param_counter[6:0] [4] -> \param_counter [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2647 to $_DFFE_PP_ for $0\param_counter[6:0] [5] -> \param_counter [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2648 to $_DFFE_PP_ for $0\param_counter[6:0] [6] -> \param_counter [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2649 to $_DFFE_PP_ for $0\params_left[13:0] [0] -> \params_left [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2650 to $_DFFE_PP_ for $0\params_left[13:0] [1] -> \params_left [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2651 to $_DFFE_PP_ for $0\params_left[13:0] [2] -> \params_left [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2652 to $_DFFE_PP_ for $0\params_left[13:0] [3] -> \params_left [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2653 to $_DFFE_PP_ for $0\params_left[13:0] [4] -> \params_left [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2654 to $_DFFE_PP_ for $0\params_left[13:0] [5] -> \params_left [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2655 to $_DFFE_PP_ for $0\params_left[13:0] [6] -> \params_left [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2656 to $_DFFE_PP_ for $0\params_left[13:0] [7] -> \params_left [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2657 to $_DFFE_PP_ for $0\params_left[13:0] [8] -> \params_left [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2658 to $_DFFE_PP_ for $0\params_left[13:0] [9] -> \params_left [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2659 to $_DFFE_PP_ for $0\params_left[13:0] [10] -> \params_left [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2660 to $_DFFE_PP_ for $0\params_left[13:0] [11] -> \params_left [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2661 to $_DFFE_PP_ for $0\params_left[13:0] [12] -> \params_left [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2662 to $_DFFE_PP_ for $0\params_left[13:0] [13] -> \params_left [13].

2.34. Executing TECHMAP pass (map to technology primitives).

2.34.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/cells_map.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$__DFFE_NN0'.
Generating RTLIL representation for module `\$__DFFE_NN1'.
Generating RTLIL representation for module `\$__DFFE_PN0'.
Generating RTLIL representation for module `\$__DFFE_PN1'.
Generating RTLIL representation for module `\$__DFFE_NP0'.
Generating RTLIL representation for module `\$__DFFE_NP1'.
Generating RTLIL representation for module `\$__DFFE_PP0'.
Generating RTLIL representation for module `\$__DFFE_PP1'.
Successfully finished Verilog frontend.

2.34.2. Continuing TECHMAP pass.
Using template \$_DFFE_PP_ for cells of type $_DFFE_PP_.
Using template \$_DFF_P_ for cells of type $_DFF_P_.
No more expansions possible.
<suppressed ~84 debug messages>

2.35. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.
<suppressed ~249 debug messages>

2.36. Executing SIMPLEMAP pass (map simple cells to gate primitives).

2.37. Executing ICE40_FFINIT pass (implement FF init values).
Handling FF init values in demo.
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2663 (SB_DFF): \scl = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2586 (SB_DFFE): \state [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2587 (SB_DFFE): \state [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2588 (SB_DFFE): \state [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2585 (SB_DFFE): \state [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2649 (SB_DFFE): \params_left [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2589 (SB_DFFE): \state [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2584 (SB_DFFE): \state [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2606 (SB_DFFE): \data [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2607 (SB_DFFE): \data [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2608 (SB_DFFE): \data [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2609 (SB_DFFE): \data [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2610 (SB_DFFE): \data [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2611 (SB_DFFE): \data [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2612 (SB_DFFE): \data [6] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2613 (SB_DFFE): \data [7] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2615 (SB_DFFE): \bit_counter [1] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2622 (SB_DFFE): \pixel_data [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2616 (SB_DFFE): \bit_counter [2] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2618 (SB_DFFE): \pixel_data [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2619 (SB_DFFE): \pixel_data [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2620 (SB_DFFE): \pixel_data [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2614 (SB_DFFE): \bit_counter [0] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2621 (SB_DFFE): \pixel_data [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2623 (SB_DFFE): \pixel_data [6] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2624 (SB_DFFE): \pixel_data [7] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2625 (SB_DFFE): \pixel_data [8] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2626 (SB_DFFE): \pixel_data [9] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2627 (SB_DFFE): \pixel_data [10] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2628 (SB_DFFE): \pixel_data [11] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2629 (SB_DFFE): \pixel_data [12] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2630 (SB_DFFE): \pixel_data [13] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2631 (SB_DFFE): \pixel_data [14] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2632 (SB_DFFE): \pixel_data [15] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2633 (SB_DFFE): \pixel_bit_counter [0] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2634 (SB_DFFE): \pixel_bit_counter [1] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2635 (SB_DFFE): \pixel_bit_counter [2] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2641 (SB_DFFE): \cmd_counter [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2636 (SB_DFFE): \pixel_bit_counter [3] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2638 (SB_DFFE): \cmd_counter [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2639 (SB_DFFE): \cmd_counter [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2617 (SB_DFFE): \pixel_data [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2640 (SB_DFFE): \cmd_counter [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2642 (SB_DFFE): \param_counter [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2643 (SB_DFFE): \param_counter [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2644 (SB_DFFE): \param_counter [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2645 (SB_DFFE): \param_counter [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2646 (SB_DFFE): \param_counter [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2647 (SB_DFFE): \param_counter [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2650 (SB_DFFE): \params_left [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2637 (SB_DFFE): \cmd_counter [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2648 (SB_DFFE): \param_counter [6] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2651 (SB_DFFE): \params_left [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2652 (SB_DFFE): \params_left [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2653 (SB_DFFE): \params_left [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2654 (SB_DFFE): \params_left [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2655 (SB_DFFE): \params_left [6] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2656 (SB_DFFE): \params_left [7] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2657 (SB_DFFE): \params_left [8] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2658 (SB_DFFE): \params_left [9] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2659 (SB_DFFE): \params_left [10] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2660 (SB_DFFE): \params_left [11] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2661 (SB_DFFE): \params_left [12] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2662 (SB_DFFE): \params_left [13] = 0

2.38. Executing ICE40_FFSSR pass (merge synchronous set/reset into FF cells).
Merging set/reset $_MUX_ cells into SB_FFs in demo.
  Merging $auto$simplemap.cc:277:simplemap_mux$1727 (A=$memory\params$rdmux[0][0][0]$a$1155 [5], B=1'1, S=\param_counter [6]) into $auto$simplemap.cc:420:simplemap_dff$2622 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1723 (A=$memory\params$rdmux[0][0][0]$a$1155 [1], B=1'1, S=\param_counter [6]) into $auto$simplemap.cc:420:simplemap_dff$2618 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1724 (A=$memory\params$rdmux[0][0][0]$a$1155 [2], B=1'1, S=\param_counter [6]) into $auto$simplemap.cc:420:simplemap_dff$2619 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1725 (A=$memory\params$rdmux[0][0][0]$a$1155 [3], B=1'1, S=\param_counter [6]) into $auto$simplemap.cc:420:simplemap_dff$2620 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1726 (A=$memory\params$rdmux[0][0][0]$a$1155 [4], B=1'1, S=\param_counter [6]) into $auto$simplemap.cc:420:simplemap_dff$2621 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1728 (A=$memory\params$rdmux[0][0][0]$a$1155 [6], B=1'1, S=\param_counter [6]) into $auto$simplemap.cc:420:simplemap_dff$2623 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1729 (A=$memory\params$rdmux[0][0][0]$a$1155 [7], B=1'1, S=\param_counter [6]) into $auto$simplemap.cc:420:simplemap_dff$2624 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1722 (A=$memory\params$rdmux[0][0][0]$a$1155 [0], B=1'1, S=\param_counter [6]) into $auto$simplemap.cc:420:simplemap_dff$2625 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1723 (A=$memory\params$rdmux[0][0][0]$a$1155 [1], B=1'1, S=\param_counter [6]) into $auto$simplemap.cc:420:simplemap_dff$2626 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1724 (A=$memory\params$rdmux[0][0][0]$a$1155 [2], B=1'1, S=\param_counter [6]) into $auto$simplemap.cc:420:simplemap_dff$2627 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1725 (A=$memory\params$rdmux[0][0][0]$a$1155 [3], B=1'1, S=\param_counter [6]) into $auto$simplemap.cc:420:simplemap_dff$2628 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1726 (A=$memory\params$rdmux[0][0][0]$a$1155 [4], B=1'1, S=\param_counter [6]) into $auto$simplemap.cc:420:simplemap_dff$2629 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1727 (A=$memory\params$rdmux[0][0][0]$a$1155 [5], B=1'1, S=\param_counter [6]) into $auto$simplemap.cc:420:simplemap_dff$2630 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1728 (A=$memory\params$rdmux[0][0][0]$a$1155 [6], B=1'1, S=\param_counter [6]) into $auto$simplemap.cc:420:simplemap_dff$2631 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1729 (A=$memory\params$rdmux[0][0][0]$a$1155 [7], B=1'1, S=\param_counter [6]) into $auto$simplemap.cc:420:simplemap_dff$2632 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1722 (A=$memory\params$rdmux[0][0][0]$a$1155 [0], B=1'1, S=\param_counter [6]) into $auto$simplemap.cc:420:simplemap_dff$2617 (SB_DFFE).

2.39. Executing ICE40_OPT pass (performing simple optimizations).

2.39.1. Running ICE40 specific optimizations.

2.39.2. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.
<suppressed ~97 debug messages>

2.39.3. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\demo'.
<suppressed ~399 debug messages>
Removed a total of 133 cells.

2.39.4. Executing OPT_RMDFF pass (remove dff with constant values).

2.39.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..
Removed 0 unused cells and 727 unused wires.
<suppressed ~1 debug messages>

2.39.6. Rerunning OPT passes. (Removed registers in this run.)

2.39.7. Running ICE40 specific optimizations.

2.39.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.

2.39.9. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\demo'.
Removed a total of 0 cells.

2.39.10. Executing OPT_RMDFF pass (remove dff with constant values).

2.39.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..

2.39.12. Finished OPT passes. (There is nothing left to do.)

2.40. Executing TECHMAP pass (map to technology primitives).

2.40.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/latches_map.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/latches_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Successfully finished Verilog frontend.

2.40.2. Continuing TECHMAP pass.
No more expansions possible.

2.41. Executing ABC pass (technology mapping using ABC).

2.41.1. Extracting gate netlist of module `\demo' to `<abc-temp-dir>/input.blif'..
Extracted 610 gates and 733 wires to a netlist network with 121 inputs and 104 outputs.

2.41.1.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + lutpack -S 1 
ABC: + dress 
ABC: Total number of equiv classes                =     183.
ABC: Participating nodes from both networks       =     409.
ABC: Participating nodes from the first network   =     184. (  69.43 % of nodes)
ABC: Participating nodes from the second network  =     225. (  84.91 % of nodes)
ABC: Node pairs (any polarity)                    =     184. (  69.43 % of names can be moved)
ABC: Node pairs (same polarity)                   =     154. (  58.11 % of names can be moved)
ABC: Total runtime =     0.09 sec
ABC: + write_blif <abc-temp-dir>/output.blif 

2.41.1.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:      524
ABC RESULTS:        internal signals:      508
ABC RESULTS:           input signals:      121
ABC RESULTS:          output signals:      104
Removing temp directory.
Removed 0 unused cells and 367 unused wires.

2.42. Executing TECHMAP pass (map to technology primitives).

2.42.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/cells_map.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$__DFFE_NN0'.
Generating RTLIL representation for module `\$__DFFE_NN1'.
Generating RTLIL representation for module `\$__DFFE_PN0'.
Generating RTLIL representation for module `\$__DFFE_PN1'.
Generating RTLIL representation for module `\$__DFFE_NP0'.
Generating RTLIL representation for module `\$__DFFE_NP1'.
Generating RTLIL representation for module `\$__DFFE_PP0'.
Generating RTLIL representation for module `\$__DFFE_PP1'.
Generating RTLIL representation for module `\$lut'.
Successfully finished Verilog frontend.

2.42.2. Continuing TECHMAP pass.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0101001100110011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1010110011001100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000011111111000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000101100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00001110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001111111110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011001001011101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01011100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111011100001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011101100101111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000011101111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111010000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001010000000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1101011111111100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011111110100000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111000011101010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111000011101110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=1\LUT=2'01 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000010111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100000011011111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000001011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111110000001010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100111100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1110111100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11111000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100000000000011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1110000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00001101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0111000001110111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100110011000101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011101011111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000001111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111010001000100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001000001001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1010110000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011000011111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000110000001010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11001010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100101000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00110101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000101000000011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011111101010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111001100000101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111000000010001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011010100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111100010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1110000000000100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0111000111000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0110000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000000111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011000010111011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01100000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11100111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0111111100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011111011111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000011100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000010100000011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000000011111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111111100000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111111111000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00000111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000011010111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1101011100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000110100000011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111110110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1110111111111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000011101110111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0010111111111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111010011111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011001100001011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011101100001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1110010100110110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1001000000001101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100111110100000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000111000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100000100010100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000101111000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000110111000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001110000001011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111000001000100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011110001010111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001111101110101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100011101011111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111110101001011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100111101010100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1110101110101010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000111110001000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111100010001000 for cells of type $lut.
No more expansions possible.
<suppressed ~1472 debug messages>
Removed 0 unused cells and 524 unused wires.

2.43. Executing HIERARCHY pass (managing design hierarchy).

2.43.1. Analyzing design hierarchy..
Top module:  \demo

2.43.2. Analyzing design hierarchy..
Top module:  \demo
Removed 0 unused modules.

2.44. Printing statistics.

=== demo ===

   Number of wires:                393
   Number of wire bits:           1462
   Number of public wires:         128
   Number of public wire bits:    1080
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                448
     SB_CARRY                       55
     SB_DFF                          1
     SB_DFFE                        67
     SB_DFFESS                      16
     SB_LUT4                       309

2.45. Executing CHECK pass (checking for obvious problems).
checking module demo..
found and reported 0 problems.

2.46. Executing BLIF backend.

2.47. Executing JSON backend.

End of script. Logfile hash: 614f368596
CPU: user 2.90s system 0.17s, MEM: 51.59 MB total, 45.84 MB resident
Yosys 0.9 (git sha1 1979e0b)
Time spent: 15% 23x opt_clean (0 sec), 15% 24x opt_expr (0 sec), ...
