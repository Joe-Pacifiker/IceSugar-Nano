
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2019  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9 (git sha1 1979e0b)


-- Parsing `demo.v' using frontend `verilog' --

1. Executing Verilog-2005 frontend: demo.v
Parsing Verilog input from `demo.v' to AST representation.
Generating RTLIL representation for module `\demo'.
Successfully finished Verilog frontend.

-- Running command `synth_ice40 -json demo.json -blif demo.blif' --

2. Executing SYNTH_ICE40 pass.

2.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/cells_sim.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\SB_IO'.
Generating RTLIL representation for module `\SB_GB_IO'.
Generating RTLIL representation for module `\SB_GB'.
Generating RTLIL representation for module `\SB_LUT4'.
Generating RTLIL representation for module `\SB_CARRY'.
Generating RTLIL representation for module `\SB_DFF'.
Generating RTLIL representation for module `\SB_DFFE'.
Generating RTLIL representation for module `\SB_DFFSR'.
Generating RTLIL representation for module `\SB_DFFR'.
Generating RTLIL representation for module `\SB_DFFSS'.
Generating RTLIL representation for module `\SB_DFFS'.
Generating RTLIL representation for module `\SB_DFFESR'.
Generating RTLIL representation for module `\SB_DFFER'.
Generating RTLIL representation for module `\SB_DFFESS'.
Generating RTLIL representation for module `\SB_DFFES'.
Generating RTLIL representation for module `\SB_DFFN'.
Generating RTLIL representation for module `\SB_DFFNE'.
Generating RTLIL representation for module `\SB_DFFNSR'.
Generating RTLIL representation for module `\SB_DFFNR'.
Generating RTLIL representation for module `\SB_DFFNSS'.
Generating RTLIL representation for module `\SB_DFFNS'.
Generating RTLIL representation for module `\SB_DFFNESR'.
Generating RTLIL representation for module `\SB_DFFNER'.
Generating RTLIL representation for module `\SB_DFFNESS'.
Generating RTLIL representation for module `\SB_DFFNES'.
Generating RTLIL representation for module `\SB_RAM40_4K'.
Generating RTLIL representation for module `\SB_RAM40_4KNR'.
Generating RTLIL representation for module `\SB_RAM40_4KNW'.
Generating RTLIL representation for module `\SB_RAM40_4KNRNW'.
Generating RTLIL representation for module `\ICESTORM_LC'.
Generating RTLIL representation for module `\SB_PLL40_CORE'.
Generating RTLIL representation for module `\SB_PLL40_PAD'.
Generating RTLIL representation for module `\SB_PLL40_2_PAD'.
Generating RTLIL representation for module `\SB_PLL40_2F_CORE'.
Generating RTLIL representation for module `\SB_PLL40_2F_PAD'.
Generating RTLIL representation for module `\SB_WARMBOOT'.
Generating RTLIL representation for module `\SB_SPRAM256KA'.
Generating RTLIL representation for module `\SB_HFOSC'.
Generating RTLIL representation for module `\SB_LFOSC'.
Generating RTLIL representation for module `\SB_RGBA_DRV'.
Generating RTLIL representation for module `\SB_LED_DRV_CUR'.
Generating RTLIL representation for module `\SB_RGB_DRV'.
Generating RTLIL representation for module `\SB_I2C'.
Generating RTLIL representation for module `\SB_SPI'.
Generating RTLIL representation for module `\SB_LEDDA_IP'.
Generating RTLIL representation for module `\SB_FILTER_50NS'.
Generating RTLIL representation for module `\SB_IO_I3C'.
Generating RTLIL representation for module `\SB_IO_OD'.
Generating RTLIL representation for module `\SB_MAC16'.
Successfully finished Verilog frontend.

2.2. Executing HIERARCHY pass (managing design hierarchy).

2.2.1. Finding top of design hierarchy..
root of   0 design levels: demo                
Automatically selected demo as design top module.

2.2.2. Analyzing design hierarchy..
Top module:  \demo

2.2.3. Analyzing design hierarchy..
Top module:  \demo
Removed 0 unused modules.

2.3. Executing PROC pass (convert processes to netlists).

2.3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

2.3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 14 switch rules as full_case in process $proc$demo.v:210$140 in module demo.
Removed a total of 0 dead cases.

2.3.3. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\demo.$proc$demo.v:47$315'.
  Set init value: \scl = 1'1
  Set init value: \state = 6'000000
  Set init value: \data = 8'00000000
  Set init value: \bit_counter = 3'111
  Set init value: \pixel_data = 16'0000000000000000
  Set init value: \pixel_bit_counter = 4'1111
  Set init value: \cmd_counter = 5'00000
  Set init value: \param_counter = 7'0000000
  Set init value: \params_left = 14'00000000000000

2.3.4. Executing PROC_ARST pass (detect async resets in processes).

2.3.5. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\demo.$proc$demo.v:47$315'.
     1/283: $1\pixel_bit_counter[3:0]
     2/283: $1\pixel_data[15:0]
     3/283: $1\bit_counter[2:0]
     4/283: $1\data[7:0]
     5/283: $1\params_left[13:0]
     6/283: $1\param_counter[6:0]
     7/283: $0$memwr$\params$demo.v:190$137_DATA[7:0]$589
     8/283: $0$memwr$\params$demo.v:190$137_ADDR[31:0]$588
     9/283: $0$memwr$\params$demo.v:189$136_DATA[7:0]$587
    10/283: $0$memwr$\params$demo.v:189$136_ADDR[31:0]$586
    11/283: $0$memwr$\params$demo.v:188$135_DATA[7:0]$585
    12/283: $0$memwr$\params$demo.v:188$135_ADDR[31:0]$584
    13/283: $0$memwr$\params$demo.v:187$134_DATA[7:0]$583
    14/283: $0$memwr$\params$demo.v:187$134_ADDR[31:0]$582
    15/283: $0$memwr$\params$demo.v:186$133_DATA[7:0]$581
    16/283: $0$memwr$\params$demo.v:186$133_ADDR[31:0]$580
    17/283: $0$memwr$\params$demo.v:185$132_DATA[7:0]$579
    18/283: $0$memwr$\params$demo.v:185$132_ADDR[31:0]$578
    19/283: $0$memwr$\params$demo.v:184$131_DATA[7:0]$577
    20/283: $0$memwr$\params$demo.v:184$131_ADDR[31:0]$576
    21/283: $0$memwr$\params$demo.v:183$130_DATA[7:0]$575
    22/283: $0$memwr$\params$demo.v:183$130_ADDR[31:0]$574
    23/283: $0$memwr$\params$demo.v:182$129_DATA[7:0]$573
    24/283: $0$memwr$\params$demo.v:182$129_ADDR[31:0]$572
    25/283: $0$memwr$\params$demo.v:181$128_DATA[7:0]$571
    26/283: $0$memwr$\params$demo.v:181$128_ADDR[31:0]$570
    27/283: $0$memwr$\params$demo.v:180$127_DATA[7:0]$569
    28/283: $0$memwr$\params$demo.v:180$127_ADDR[31:0]$568
    29/283: $0$memwr$\params$demo.v:179$126_DATA[7:0]$567
    30/283: $0$memwr$\params$demo.v:179$126_ADDR[31:0]$566
    31/283: $0$memwr$\params$demo.v:178$125_DATA[7:0]$565
    32/283: $0$memwr$\params$demo.v:178$125_ADDR[31:0]$564
    33/283: $0$memwr$\params$demo.v:177$124_DATA[7:0]$563
    34/283: $0$memwr$\params$demo.v:177$124_ADDR[31:0]$562
    35/283: $0$memwr$\params$demo.v:176$123_DATA[7:0]$561
    36/283: $0$memwr$\params$demo.v:176$123_ADDR[31:0]$560
    37/283: $0$memwr$\params$demo.v:175$122_DATA[7:0]$559
    38/283: $0$memwr$\params$demo.v:175$122_ADDR[31:0]$558
    39/283: $0$memwr$\params$demo.v:174$121_DATA[7:0]$557
    40/283: $0$memwr$\params$demo.v:174$121_ADDR[31:0]$556
    41/283: $0$memwr$\params$demo.v:173$120_DATA[7:0]$555
    42/283: $0$memwr$\params$demo.v:173$120_ADDR[31:0]$554
    43/283: $0$memwr$\params$demo.v:172$119_DATA[7:0]$553
    44/283: $0$memwr$\params$demo.v:172$119_ADDR[31:0]$552
    45/283: $0$memwr$\params$demo.v:171$118_DATA[7:0]$551
    46/283: $0$memwr$\params$demo.v:171$118_ADDR[31:0]$550
    47/283: $0$memwr$\params$demo.v:170$117_DATA[7:0]$549
    48/283: $0$memwr$\params$demo.v:170$117_ADDR[31:0]$548
    49/283: $0$memwr$\params$demo.v:169$116_DATA[7:0]$547
    50/283: $0$memwr$\params$demo.v:169$116_ADDR[31:0]$546
    51/283: $0$memwr$\params$demo.v:168$115_DATA[7:0]$545
    52/283: $0$memwr$\params$demo.v:168$115_ADDR[31:0]$544
    53/283: $0$memwr$\params$demo.v:167$114_DATA[7:0]$543
    54/283: $0$memwr$\params$demo.v:167$114_ADDR[31:0]$542
    55/283: $0$memwr$\params$demo.v:166$113_DATA[7:0]$541
    56/283: $0$memwr$\params$demo.v:166$113_ADDR[31:0]$540
    57/283: $0$memwr$\params$demo.v:165$112_DATA[7:0]$539
    58/283: $0$memwr$\params$demo.v:165$112_ADDR[31:0]$538
    59/283: $0$memwr$\params$demo.v:164$111_DATA[7:0]$537
    60/283: $0$memwr$\params$demo.v:164$111_ADDR[31:0]$536
    61/283: $0$memwr$\params$demo.v:163$110_DATA[7:0]$535
    62/283: $0$memwr$\params$demo.v:163$110_ADDR[31:0]$534
    63/283: $0$memwr$\params$demo.v:162$109_DATA[7:0]$533
    64/283: $0$memwr$\params$demo.v:162$109_ADDR[31:0]$532
    65/283: $0$memwr$\params$demo.v:161$108_DATA[7:0]$531
    66/283: $0$memwr$\params$demo.v:161$108_ADDR[31:0]$530
    67/283: $0$memwr$\params$demo.v:160$107_DATA[7:0]$529
    68/283: $0$memwr$\params$demo.v:160$107_ADDR[31:0]$528
    69/283: $0$memwr$\params$demo.v:159$106_DATA[7:0]$527
    70/283: $0$memwr$\params$demo.v:159$106_ADDR[31:0]$526
    71/283: $0$memwr$\params$demo.v:158$105_DATA[7:0]$525
    72/283: $0$memwr$\params$demo.v:158$105_ADDR[31:0]$524
    73/283: $0$memwr$\params$demo.v:157$104_DATA[7:0]$523
    74/283: $0$memwr$\params$demo.v:157$104_ADDR[31:0]$522
    75/283: $0$memwr$\params$demo.v:156$103_DATA[7:0]$521
    76/283: $0$memwr$\params$demo.v:156$103_ADDR[31:0]$520
    77/283: $0$memwr$\params$demo.v:155$102_DATA[7:0]$519
    78/283: $0$memwr$\params$demo.v:155$102_ADDR[31:0]$518
    79/283: $0$memwr$\params$demo.v:154$101_DATA[7:0]$517
    80/283: $0$memwr$\params$demo.v:154$101_ADDR[31:0]$516
    81/283: $0$memwr$\params$demo.v:153$100_DATA[7:0]$515
    82/283: $0$memwr$\params$demo.v:153$100_ADDR[31:0]$514
    83/283: $0$memwr$\params$demo.v:152$99_DATA[7:0]$513
    84/283: $0$memwr$\params$demo.v:152$99_ADDR[31:0]$512
    85/283: $0$memwr$\params$demo.v:151$98_DATA[7:0]$511
    86/283: $0$memwr$\params$demo.v:151$98_ADDR[31:0]$510
    87/283: $0$memwr$\params$demo.v:150$97_DATA[7:0]$509
    88/283: $0$memwr$\params$demo.v:150$97_ADDR[31:0]$508
    89/283: $0$memwr$\params$demo.v:149$96_DATA[7:0]$507
    90/283: $0$memwr$\params$demo.v:149$96_ADDR[31:0]$506
    91/283: $0$memwr$\params$demo.v:148$95_DATA[7:0]$505
    92/283: $0$memwr$\params$demo.v:148$95_ADDR[31:0]$504
    93/283: $0$memwr$\params$demo.v:147$94_DATA[7:0]$503
    94/283: $0$memwr$\params$demo.v:147$94_ADDR[31:0]$502
    95/283: $0$memwr$\params$demo.v:146$93_DATA[7:0]$501
    96/283: $0$memwr$\params$demo.v:146$93_ADDR[31:0]$500
    97/283: $0$memwr$\params$demo.v:145$92_DATA[7:0]$499
    98/283: $0$memwr$\params$demo.v:145$92_ADDR[31:0]$498
    99/283: $0$memwr$\params$demo.v:144$91_DATA[7:0]$497
   100/283: $0$memwr$\params$demo.v:144$91_ADDR[31:0]$496
   101/283: $0$memwr$\params$demo.v:143$90_DATA[7:0]$495
   102/283: $0$memwr$\params$demo.v:143$90_ADDR[31:0]$494
   103/283: $0$memwr$\params$demo.v:142$89_DATA[7:0]$493
   104/283: $0$memwr$\params$demo.v:142$89_ADDR[31:0]$492
   105/283: $0$memwr$\params$demo.v:141$88_DATA[7:0]$491
   106/283: $0$memwr$\params$demo.v:141$88_ADDR[31:0]$490
   107/283: $0$memwr$\params$demo.v:140$87_DATA[7:0]$489
   108/283: $0$memwr$\params$demo.v:140$87_ADDR[31:0]$488
   109/283: $0$memwr$\params$demo.v:139$86_DATA[7:0]$487
   110/283: $0$memwr$\params$demo.v:139$86_ADDR[31:0]$486
   111/283: $0$memwr$\params$demo.v:138$85_DATA[7:0]$485
   112/283: $0$memwr$\params$demo.v:138$85_ADDR[31:0]$484
   113/283: $0$memwr$\params$demo.v:137$84_DATA[7:0]$483
   114/283: $0$memwr$\params$demo.v:137$84_ADDR[31:0]$482
   115/283: $0$memwr$\params$demo.v:136$83_DATA[7:0]$481
   116/283: $0$memwr$\params$demo.v:136$83_ADDR[31:0]$480
   117/283: $0$memwr$\params$demo.v:135$82_DATA[7:0]$479
   118/283: $0$memwr$\params$demo.v:135$82_ADDR[31:0]$478
   119/283: $0$memwr$\params$demo.v:134$81_DATA[7:0]$477
   120/283: $0$memwr$\params$demo.v:134$81_ADDR[31:0]$476
   121/283: $0$memwr$\params$demo.v:133$80_DATA[7:0]$475
   122/283: $0$memwr$\params$demo.v:133$80_ADDR[31:0]$474
   123/283: $0$memwr$\params$demo.v:132$79_DATA[7:0]$473
   124/283: $0$memwr$\params$demo.v:132$79_ADDR[31:0]$472
   125/283: $0$memwr$\params$demo.v:131$78_DATA[7:0]$471
   126/283: $0$memwr$\params$demo.v:131$78_ADDR[31:0]$470
   127/283: $0$memwr$\params$demo.v:130$77_DATA[7:0]$469
   128/283: $0$memwr$\params$demo.v:130$77_ADDR[31:0]$468
   129/283: $0$memwr$\params$demo.v:129$76_DATA[7:0]$467
   130/283: $0$memwr$\params$demo.v:129$76_ADDR[31:0]$466
   131/283: $0$memwr$\params$demo.v:128$75_DATA[7:0]$465
   132/283: $0$memwr$\params$demo.v:128$75_ADDR[31:0]$464
   133/283: $0$memwr$\params$demo.v:127$74_DATA[7:0]$463
   134/283: $0$memwr$\params$demo.v:127$74_ADDR[31:0]$462
   135/283: $0$memwr$\params$demo.v:126$73_DATA[7:0]$461
   136/283: $0$memwr$\params$demo.v:126$73_ADDR[31:0]$460
   137/283: $0$memwr$\params$demo.v:125$72_DATA[7:0]$459
   138/283: $0$memwr$\params$demo.v:125$72_ADDR[31:0]$458
   139/283: $0$memwr$\params$demo.v:124$71_DATA[7:0]$457
   140/283: $0$memwr$\params$demo.v:124$71_ADDR[31:0]$456
   141/283: $0$memwr$\params$demo.v:123$70_DATA[7:0]$455
   142/283: $0$memwr$\params$demo.v:123$70_ADDR[31:0]$454
   143/283: $0$memwr$\params$demo.v:122$69_DATA[7:0]$453
   144/283: $0$memwr$\params$demo.v:122$69_ADDR[31:0]$452
   145/283: $0$memwr$\params$demo.v:121$68_DATA[7:0]$451
   146/283: $0$memwr$\params$demo.v:121$68_ADDR[31:0]$450
   147/283: $0$memwr$\params$demo.v:120$67_DATA[7:0]$449
   148/283: $0$memwr$\params$demo.v:120$67_ADDR[31:0]$448
   149/283: $0$memwr$\params$demo.v:119$66_DATA[7:0]$447
   150/283: $0$memwr$\params$demo.v:119$66_ADDR[31:0]$446
   151/283: $0$memwr$\params$demo.v:118$65_DATA[7:0]$445
   152/283: $0$memwr$\params$demo.v:118$65_ADDR[31:0]$444
   153/283: $0$memwr$\params$demo.v:117$64_DATA[7:0]$443
   154/283: $0$memwr$\params$demo.v:117$64_ADDR[31:0]$442
   155/283: $0$memwr$\params$demo.v:116$63_DATA[7:0]$441
   156/283: $0$memwr$\params$demo.v:116$63_ADDR[31:0]$440
   157/283: $0$memwr$\params$demo.v:115$62_DATA[7:0]$439
   158/283: $0$memwr$\params$demo.v:115$62_ADDR[31:0]$438
   159/283: $0$memwr$\params$demo.v:114$61_DATA[7:0]$437
   160/283: $0$memwr$\params$demo.v:114$61_ADDR[31:0]$436
   161/283: $0$memwr$\params$demo.v:113$60_DATA[7:0]$435
   162/283: $0$memwr$\params$demo.v:113$60_ADDR[31:0]$434
   163/283: $0$memwr$\params$demo.v:112$59_DATA[7:0]$433
   164/283: $0$memwr$\params$demo.v:112$59_ADDR[31:0]$432
   165/283: $0$memwr$\params$demo.v:111$58_DATA[7:0]$431
   166/283: $0$memwr$\params$demo.v:111$58_ADDR[31:0]$430
   167/283: $0$memwr$\params$demo.v:110$57_DATA[7:0]$429
   168/283: $0$memwr$\params$demo.v:110$57_ADDR[31:0]$428
   169/283: $0$memwr$\params$demo.v:109$56_DATA[7:0]$427
   170/283: $0$memwr$\params$demo.v:109$56_ADDR[31:0]$426
   171/283: $0$memwr$\params$demo.v:108$55_DATA[7:0]$425
   172/283: $0$memwr$\params$demo.v:108$55_ADDR[31:0]$424
   173/283: $0$memwr$\params$demo.v:107$54_DATA[7:0]$423
   174/283: $0$memwr$\params$demo.v:107$54_ADDR[31:0]$422
   175/283: $1\cmd_counter[4:0]
   176/283: $0$memwr$\num_params$demo.v:104$53_DATA[13:0]$421
   177/283: $0$memwr$\num_params$demo.v:104$53_ADDR[31:0]$420
   178/283: $0$memwr$\num_params$demo.v:103$52_DATA[13:0]$419
   179/283: $0$memwr$\num_params$demo.v:103$52_ADDR[31:0]$418
   180/283: $0$memwr$\num_params$demo.v:102$51_DATA[13:0]$417
   181/283: $0$memwr$\num_params$demo.v:102$51_ADDR[31:0]$416
   182/283: $0$memwr$\num_params$demo.v:101$50_DATA[13:0]$415
   183/283: $0$memwr$\num_params$demo.v:101$50_ADDR[31:0]$414
   184/283: $0$memwr$\num_params$demo.v:100$49_DATA[13:0]$413
   185/283: $0$memwr$\num_params$demo.v:100$49_ADDR[31:0]$412
   186/283: $0$memwr$\num_params$demo.v:99$48_DATA[13:0]$411
   187/283: $0$memwr$\num_params$demo.v:99$48_ADDR[31:0]$410
   188/283: $0$memwr$\num_params$demo.v:98$47_DATA[13:0]$409
   189/283: $0$memwr$\num_params$demo.v:98$47_ADDR[31:0]$408
   190/283: $0$memwr$\num_params$demo.v:97$46_DATA[13:0]$407
   191/283: $0$memwr$\num_params$demo.v:97$46_ADDR[31:0]$406
   192/283: $0$memwr$\num_params$demo.v:96$45_DATA[13:0]$405
   193/283: $0$memwr$\num_params$demo.v:96$45_ADDR[31:0]$404
   194/283: $0$memwr$\num_params$demo.v:95$44_DATA[13:0]$403
   195/283: $0$memwr$\num_params$demo.v:95$44_ADDR[31:0]$402
   196/283: $0$memwr$\num_params$demo.v:94$43_DATA[13:0]$401
   197/283: $0$memwr$\num_params$demo.v:94$43_ADDR[31:0]$400
   198/283: $0$memwr$\num_params$demo.v:93$42_DATA[13:0]$399
   199/283: $0$memwr$\num_params$demo.v:93$42_ADDR[31:0]$398
   200/283: $0$memwr$\num_params$demo.v:92$41_DATA[13:0]$397
   201/283: $0$memwr$\num_params$demo.v:92$41_ADDR[31:0]$396
   202/283: $0$memwr$\num_params$demo.v:91$40_DATA[13:0]$395
   203/283: $0$memwr$\num_params$demo.v:91$40_ADDR[31:0]$394
   204/283: $0$memwr$\num_params$demo.v:90$39_DATA[13:0]$393
   205/283: $0$memwr$\num_params$demo.v:90$39_ADDR[31:0]$392
   206/283: $0$memwr$\num_params$demo.v:89$38_DATA[13:0]$391
   207/283: $0$memwr$\num_params$demo.v:89$38_ADDR[31:0]$390
   208/283: $0$memwr$\num_params$demo.v:88$37_DATA[13:0]$389
   209/283: $0$memwr$\num_params$demo.v:88$37_ADDR[31:0]$388
   210/283: $0$memwr$\num_params$demo.v:87$36_DATA[13:0]$387
   211/283: $0$memwr$\num_params$demo.v:87$36_ADDR[31:0]$386
   212/283: $0$memwr$\num_params$demo.v:86$35_DATA[13:0]$385
   213/283: $0$memwr$\num_params$demo.v:86$35_ADDR[31:0]$384
   214/283: $0$memwr$\num_params$demo.v:85$34_DATA[13:0]$383
   215/283: $0$memwr$\num_params$demo.v:85$34_ADDR[31:0]$382
   216/283: $0$memwr$\num_params$demo.v:84$33_DATA[13:0]$381
   217/283: $0$memwr$\num_params$demo.v:84$33_ADDR[31:0]$380
   218/283: $0$memwr$\num_params$demo.v:83$32_DATA[13:0]$379
   219/283: $0$memwr$\num_params$demo.v:83$32_ADDR[31:0]$378
   220/283: $0$memwr$\num_params$demo.v:82$31_DATA[13:0]$377
   221/283: $0$memwr$\num_params$demo.v:82$31_ADDR[31:0]$376
   222/283: $0$memwr$\num_params$demo.v:81$30_DATA[13:0]$375
   223/283: $0$memwr$\num_params$demo.v:81$30_ADDR[31:0]$374
   224/283: $0$memwr$\num_params$demo.v:80$29_DATA[13:0]$373
   225/283: $0$memwr$\num_params$demo.v:80$29_ADDR[31:0]$372
   226/283: $0$memwr$\num_params$demo.v:79$28_DATA[13:0]$371
   227/283: $0$memwr$\num_params$demo.v:79$28_ADDR[31:0]$370
   228/283: $0$memwr$\cmd$demo.v:78$27_DATA[7:0]$369
   229/283: $0$memwr$\cmd$demo.v:78$27_ADDR[31:0]$368
   230/283: $0$memwr$\cmd$demo.v:77$26_DATA[7:0]$367
   231/283: $0$memwr$\cmd$demo.v:77$26_ADDR[31:0]$366
   232/283: $0$memwr$\cmd$demo.v:76$25_DATA[7:0]$365
   233/283: $0$memwr$\cmd$demo.v:76$25_ADDR[31:0]$364
   234/283: $0$memwr$\cmd$demo.v:75$24_DATA[7:0]$363
   235/283: $0$memwr$\cmd$demo.v:75$24_ADDR[31:0]$362
   236/283: $0$memwr$\cmd$demo.v:74$23_DATA[7:0]$361
   237/283: $0$memwr$\cmd$demo.v:74$23_ADDR[31:0]$360
   238/283: $0$memwr$\cmd$demo.v:73$22_DATA[7:0]$359
   239/283: $0$memwr$\cmd$demo.v:73$22_ADDR[31:0]$358
   240/283: $0$memwr$\cmd$demo.v:72$21_DATA[7:0]$357
   241/283: $0$memwr$\cmd$demo.v:72$21_ADDR[31:0]$356
   242/283: $0$memwr$\cmd$demo.v:71$20_DATA[7:0]$355
   243/283: $0$memwr$\cmd$demo.v:71$20_ADDR[31:0]$354
   244/283: $0$memwr$\cmd$demo.v:70$19_DATA[7:0]$353
   245/283: $0$memwr$\cmd$demo.v:70$19_ADDR[31:0]$352
   246/283: $0$memwr$\cmd$demo.v:69$18_DATA[7:0]$351
   247/283: $0$memwr$\cmd$demo.v:69$18_ADDR[31:0]$350
   248/283: $0$memwr$\cmd$demo.v:68$17_DATA[7:0]$349
   249/283: $0$memwr$\cmd$demo.v:68$17_ADDR[31:0]$348
   250/283: $0$memwr$\cmd$demo.v:67$16_DATA[7:0]$347
   251/283: $0$memwr$\cmd$demo.v:67$16_ADDR[31:0]$346
   252/283: $0$memwr$\cmd$demo.v:66$15_DATA[7:0]$345
   253/283: $0$memwr$\cmd$demo.v:66$15_ADDR[31:0]$344
   254/283: $0$memwr$\cmd$demo.v:65$14_DATA[7:0]$343
   255/283: $0$memwr$\cmd$demo.v:65$14_ADDR[31:0]$342
   256/283: $0$memwr$\cmd$demo.v:64$13_DATA[7:0]$341
   257/283: $0$memwr$\cmd$demo.v:64$13_ADDR[31:0]$340
   258/283: $0$memwr$\cmd$demo.v:63$12_DATA[7:0]$339
   259/283: $0$memwr$\cmd$demo.v:63$12_ADDR[31:0]$338
   260/283: $0$memwr$\cmd$demo.v:62$11_DATA[7:0]$337
   261/283: $0$memwr$\cmd$demo.v:62$11_ADDR[31:0]$336
   262/283: $0$memwr$\cmd$demo.v:61$10_DATA[7:0]$335
   263/283: $0$memwr$\cmd$demo.v:61$10_ADDR[31:0]$334
   264/283: $0$memwr$\cmd$demo.v:60$9_DATA[7:0]$333
   265/283: $0$memwr$\cmd$demo.v:60$9_ADDR[31:0]$332
   266/283: $0$memwr$\cmd$demo.v:59$8_DATA[7:0]$331
   267/283: $0$memwr$\cmd$demo.v:59$8_ADDR[31:0]$330
   268/283: $0$memwr$\cmd$demo.v:58$7_DATA[7:0]$329
   269/283: $0$memwr$\cmd$demo.v:58$7_ADDR[31:0]$328
   270/283: $0$memwr$\cmd$demo.v:57$6_DATA[7:0]$327
   271/283: $0$memwr$\cmd$demo.v:57$6_ADDR[31:0]$326
   272/283: $0$memwr$\cmd$demo.v:56$5_DATA[7:0]$325
   273/283: $0$memwr$\cmd$demo.v:56$5_ADDR[31:0]$324
   274/283: $0$memwr$\cmd$demo.v:55$4_DATA[7:0]$323
   275/283: $0$memwr$\cmd$demo.v:55$4_ADDR[31:0]$322
   276/283: $0$memwr$\cmd$demo.v:54$3_DATA[7:0]$321
   277/283: $0$memwr$\cmd$demo.v:54$3_ADDR[31:0]$320
   278/283: $0$memwr$\cmd$demo.v:53$2_DATA[7:0]$319
   279/283: $0$memwr$\cmd$demo.v:53$2_ADDR[31:0]$318
   280/283: $0$memwr$\cmd$demo.v:52$1_DATA[7:0]$317
   281/283: $0$memwr$\cmd$demo.v:52$1_ADDR[31:0]$316
   282/283: $1\scl[0:0]
   283/283: $1\state[5:0]
Creating decoders for process `\demo.$proc$demo.v:210$140'.
     1/14: $0\pixel_data[15:0] [15:8]
     2/14: $0\pixel_data[15:0] [7:0]
     3/14: $0\param_counter[6:0]
     4/14: $0\cmd_counter[4:0]
     5/14: $0\pixel_bit_counter[3:0]
     6/14: $0\params_left[13:0]
     7/14: $0\bit_counter[2:0]
     8/14: $0\data[7:0]
     9/14: $0\delay[15:0]
    10/14: $0\state[5:0]
    11/14: $0\cs[0:0]
    12/14: $0\mosi[0:0]
    13/14: $0\dc[0:0]
    14/14: $0\rst[0:0]
Creating decoders for process `\demo.$proc$demo.v:203$138'.
     1/1: $0\scl[0:0]

2.3.6. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:52$1_ADDR' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:52$1_DATA' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:53$2_ADDR' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:53$2_DATA' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:54$3_ADDR' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:54$3_DATA' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:55$4_ADDR' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:55$4_DATA' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:56$5_ADDR' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:56$5_DATA' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:57$6_ADDR' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:57$6_DATA' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:58$7_ADDR' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:58$7_DATA' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:59$8_ADDR' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:59$8_DATA' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:60$9_ADDR' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:60$9_DATA' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:61$10_ADDR' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:61$10_DATA' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:62$11_ADDR' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:62$11_DATA' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:63$12_ADDR' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:63$12_DATA' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:64$13_ADDR' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:64$13_DATA' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:65$14_ADDR' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:65$14_DATA' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:66$15_ADDR' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:66$15_DATA' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:67$16_ADDR' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:67$16_DATA' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:68$17_ADDR' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:68$17_DATA' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:69$18_ADDR' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:69$18_DATA' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:70$19_ADDR' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:70$19_DATA' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:71$20_ADDR' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:71$20_DATA' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:72$21_ADDR' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:72$21_DATA' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:73$22_ADDR' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:73$22_DATA' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:74$23_ADDR' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:74$23_DATA' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:75$24_ADDR' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:75$24_DATA' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:76$25_ADDR' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:76$25_DATA' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:77$26_ADDR' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:77$26_DATA' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:78$27_ADDR' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:78$27_DATA' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:79$28_ADDR' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:79$28_DATA' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:80$29_ADDR' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:80$29_DATA' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:81$30_ADDR' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:81$30_DATA' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:82$31_ADDR' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:82$31_DATA' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:83$32_ADDR' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:83$32_DATA' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:84$33_ADDR' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:84$33_DATA' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:85$34_ADDR' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:85$34_DATA' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:86$35_ADDR' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:86$35_DATA' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:87$36_ADDR' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:87$36_DATA' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:88$37_ADDR' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:88$37_DATA' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:89$38_ADDR' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:89$38_DATA' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:90$39_ADDR' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:90$39_DATA' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:91$40_ADDR' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:91$40_DATA' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:92$41_ADDR' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:92$41_DATA' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:93$42_ADDR' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:93$42_DATA' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:94$43_ADDR' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:94$43_DATA' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:95$44_ADDR' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:95$44_DATA' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:96$45_ADDR' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:96$45_DATA' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:97$46_ADDR' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:97$46_DATA' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:98$47_ADDR' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:98$47_DATA' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:99$48_ADDR' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:99$48_DATA' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:100$49_ADDR' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:100$49_DATA' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:101$50_ADDR' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:101$50_DATA' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:102$51_ADDR' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:102$51_DATA' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:103$52_ADDR' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:103$52_DATA' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:104$53_ADDR' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:104$53_DATA' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:107$54_ADDR' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:107$54_DATA' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:108$55_ADDR' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:108$55_DATA' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:109$56_ADDR' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:109$56_DATA' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:110$57_ADDR' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:110$57_DATA' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:111$58_ADDR' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:111$58_DATA' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:112$59_ADDR' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:112$59_DATA' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:113$60_ADDR' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:113$60_DATA' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:114$61_ADDR' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:114$61_DATA' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:115$62_ADDR' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:115$62_DATA' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:116$63_ADDR' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:116$63_DATA' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:117$64_ADDR' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:117$64_DATA' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:118$65_ADDR' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:118$65_DATA' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:119$66_ADDR' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:119$66_DATA' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:120$67_ADDR' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:120$67_DATA' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:121$68_ADDR' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:121$68_DATA' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:122$69_ADDR' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:122$69_DATA' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:123$70_ADDR' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:123$70_DATA' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:124$71_ADDR' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:124$71_DATA' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:125$72_ADDR' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:125$72_DATA' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:126$73_ADDR' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:126$73_DATA' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:127$74_ADDR' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:127$74_DATA' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:128$75_ADDR' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:128$75_DATA' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:129$76_ADDR' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:129$76_DATA' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:130$77_ADDR' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:130$77_DATA' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:131$78_ADDR' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:131$78_DATA' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:132$79_ADDR' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:132$79_DATA' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:133$80_ADDR' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:133$80_DATA' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:134$81_ADDR' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:134$81_DATA' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:135$82_ADDR' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:135$82_DATA' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:136$83_ADDR' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:136$83_DATA' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:137$84_ADDR' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:137$84_DATA' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:138$85_ADDR' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:138$85_DATA' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:139$86_ADDR' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:139$86_DATA' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:140$87_ADDR' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:140$87_DATA' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:141$88_ADDR' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:141$88_DATA' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:142$89_ADDR' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:142$89_DATA' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:143$90_ADDR' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:143$90_DATA' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:144$91_ADDR' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:144$91_DATA' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:145$92_ADDR' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:145$92_DATA' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:146$93_ADDR' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:146$93_DATA' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:147$94_ADDR' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:147$94_DATA' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:148$95_ADDR' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:148$95_DATA' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:149$96_ADDR' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:149$96_DATA' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:150$97_ADDR' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:150$97_DATA' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:151$98_ADDR' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:151$98_DATA' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:152$99_ADDR' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:152$99_DATA' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:153$100_ADDR' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:153$100_DATA' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:154$101_ADDR' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:154$101_DATA' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:155$102_ADDR' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:155$102_DATA' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:156$103_ADDR' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:156$103_DATA' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:157$104_ADDR' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:157$104_DATA' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:158$105_ADDR' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:158$105_DATA' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:159$106_ADDR' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:159$106_DATA' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:160$107_ADDR' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:160$107_DATA' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:161$108_ADDR' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:161$108_DATA' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:162$109_ADDR' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:162$109_DATA' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:163$110_ADDR' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:163$110_DATA' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:164$111_ADDR' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:164$111_DATA' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:165$112_ADDR' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:165$112_DATA' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:166$113_ADDR' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:166$113_DATA' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:167$114_ADDR' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:167$114_DATA' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:168$115_ADDR' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:168$115_DATA' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:169$116_ADDR' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:169$116_DATA' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:170$117_ADDR' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:170$117_DATA' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:171$118_ADDR' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:171$118_DATA' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:172$119_ADDR' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:172$119_DATA' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:173$120_ADDR' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:173$120_DATA' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:174$121_ADDR' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:174$121_DATA' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:175$122_ADDR' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:175$122_DATA' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:176$123_ADDR' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:176$123_DATA' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:177$124_ADDR' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:177$124_DATA' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:178$125_ADDR' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:178$125_DATA' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:179$126_ADDR' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:179$126_DATA' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:180$127_ADDR' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:180$127_DATA' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:181$128_ADDR' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:181$128_DATA' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:182$129_ADDR' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:182$129_DATA' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:183$130_ADDR' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:183$130_DATA' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:184$131_ADDR' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:184$131_DATA' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:185$132_ADDR' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:185$132_DATA' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:186$133_ADDR' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:186$133_DATA' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:187$134_ADDR' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:187$134_DATA' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:188$135_ADDR' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:188$135_DATA' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:189$136_ADDR' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:189$136_DATA' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:190$137_ADDR' from process `\demo.$proc$demo.v:47$315'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:190$137_DATA' from process `\demo.$proc$demo.v:47$315'.

2.3.7. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\demo.\rst' using process `\demo.$proc$demo.v:210$140'.
  created $dff cell `$procdff$772' with positive edge clock.
Creating register for signal `\demo.\dc' using process `\demo.$proc$demo.v:210$140'.
  created $dff cell `$procdff$773' with positive edge clock.
Creating register for signal `\demo.\mosi' using process `\demo.$proc$demo.v:210$140'.
  created $dff cell `$procdff$774' with positive edge clock.
Creating register for signal `\demo.\cs' using process `\demo.$proc$demo.v:210$140'.
  created $dff cell `$procdff$775' with positive edge clock.
Creating register for signal `\demo.\state' using process `\demo.$proc$demo.v:210$140'.
  created $dff cell `$procdff$776' with positive edge clock.
Creating register for signal `\demo.\delay' using process `\demo.$proc$demo.v:210$140'.
  created $dff cell `$procdff$777' with positive edge clock.
Creating register for signal `\demo.\data' using process `\demo.$proc$demo.v:210$140'.
  created $dff cell `$procdff$778' with positive edge clock.
Creating register for signal `\demo.\bit_counter' using process `\demo.$proc$demo.v:210$140'.
  created $dff cell `$procdff$779' with positive edge clock.
Creating register for signal `\demo.\pixel_data' using process `\demo.$proc$demo.v:210$140'.
  created $dff cell `$procdff$780' with positive edge clock.
Creating register for signal `\demo.\pixel_bit_counter' using process `\demo.$proc$demo.v:210$140'.
  created $dff cell `$procdff$781' with positive edge clock.
Creating register for signal `\demo.\cmd_counter' using process `\demo.$proc$demo.v:210$140'.
  created $dff cell `$procdff$782' with positive edge clock.
Creating register for signal `\demo.\param_counter' using process `\demo.$proc$demo.v:210$140'.
  created $dff cell `$procdff$783' with positive edge clock.
Creating register for signal `\demo.\params_left' using process `\demo.$proc$demo.v:210$140'.
  created $dff cell `$procdff$784' with positive edge clock.
Creating register for signal `\demo.\scl' using process `\demo.$proc$demo.v:203$138'.
  created $dff cell `$procdff$785' with positive edge clock.

2.3.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `demo.$proc$demo.v:47$315'.
Found and cleaned up 16 empty switches in `\demo.$proc$demo.v:210$140'.
Removing empty process `demo.$proc$demo.v:210$140'.
Removing empty process `demo.$proc$demo.v:203$138'.
Cleaned up 16 empty switches.

2.4. Executing FLATTEN pass (flatten design).
No more expansions possible.

2.5. Executing TRIBUF pass.

2.6. Executing DEMINOUT pass (demote inout ports to input or output).

2.7. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.
<suppressed ~16 debug messages>

2.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..
Removed 1 unused cells and 605 unused wires.
<suppressed ~2 debug messages>

2.9. Executing CHECK pass (checking for obvious problems).
checking module demo..
found and reported 0 problems.

2.10. Executing OPT pass (performing simple optimizations).

2.10.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.

2.10.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\demo'.
<suppressed ~99 debug messages>
Removed a total of 33 cells.

2.10.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \demo..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~14 debug messages>

2.10.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \demo.
    New ctrl vector for $pmux cell $procmux$731: { $procmux$697_CMP $auto$opt_reduce.cc:132:opt_mux$787 }
    New ctrl vector for $pmux cell $procmux$751: { $auto$opt_reduce.cc:132:opt_mux$789 $procmux$636_CMP }
  Optimizing cells in module \demo.
Performed a total of 2 changes.

2.10.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\demo'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

2.10.6. Executing OPT_RMDFF pass (remove dff with constant values).

2.10.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..
Removed 0 unused cells and 34 unused wires.
<suppressed ~1 debug messages>

2.10.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.

2.10.9. Rerunning OPT passes. (Maybe there is more to do..)

2.10.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \demo..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~14 debug messages>

2.10.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \demo.
    New ctrl vector for $pmux cell $procmux$669: { $procmux$675_CMP $auto$opt_reduce.cc:132:opt_mux$791 }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$790: { $procmux$670_CMP $procmux$674_CMP }
  Optimizing cells in module \demo.
Performed a total of 2 changes.

2.10.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\demo'.
Removed a total of 0 cells.

2.10.13. Executing OPT_RMDFF pass (remove dff with constant values).

2.10.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..

2.10.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.

2.10.16. Rerunning OPT passes. (Maybe there is more to do..)

2.10.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \demo..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~14 debug messages>

2.10.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \demo.
Performed a total of 0 changes.

2.10.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\demo'.
Removed a total of 0 cells.

2.10.20. Executing OPT_RMDFF pass (remove dff with constant values).

2.10.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..

2.10.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.

2.10.23. Finished OPT passes. (There is nothing left to do.)

2.11. Executing WREDUCE pass (reducing word size of cells).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:52$178 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:53$179 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:54$180 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:55$181 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:56$182 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:57$183 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:58$184 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:59$185 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:60$186 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:61$187 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:62$188 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:63$189 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:64$190 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:65$191 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:66$192 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:67$193 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:68$194 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:69$195 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:70$196 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:71$197 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:72$198 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:73$199 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:74$200 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:75$201 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:76$202 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:77$203 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:78$204 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\num_params$demo.v:100$226 (num_params).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\num_params$demo.v:101$227 (num_params).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\num_params$demo.v:102$228 (num_params).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\num_params$demo.v:103$229 (num_params).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\num_params$demo.v:104$230 (num_params).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\num_params$demo.v:79$205 (num_params).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\num_params$demo.v:80$206 (num_params).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\num_params$demo.v:81$207 (num_params).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\num_params$demo.v:82$208 (num_params).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\num_params$demo.v:83$209 (num_params).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\num_params$demo.v:84$210 (num_params).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\num_params$demo.v:85$211 (num_params).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\num_params$demo.v:86$212 (num_params).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\num_params$demo.v:87$213 (num_params).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\num_params$demo.v:88$214 (num_params).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\num_params$demo.v:89$215 (num_params).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\num_params$demo.v:90$216 (num_params).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\num_params$demo.v:91$217 (num_params).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\num_params$demo.v:92$218 (num_params).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\num_params$demo.v:93$219 (num_params).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\num_params$demo.v:94$220 (num_params).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\num_params$demo.v:95$221 (num_params).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\num_params$demo.v:96$222 (num_params).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\num_params$demo.v:97$223 (num_params).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\num_params$demo.v:98$224 (num_params).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\num_params$demo.v:99$225 (num_params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:107$231 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:108$232 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:109$233 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:110$234 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:111$235 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:112$236 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:113$237 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:114$238 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:115$239 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:116$240 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:117$241 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:118$242 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:119$243 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:120$244 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:121$245 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:122$246 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:123$247 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:124$248 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:125$249 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:126$250 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:127$251 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:128$252 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:129$253 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:130$254 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:131$255 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:132$256 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:133$257 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:134$258 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:135$259 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:136$260 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:137$261 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:138$262 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:139$263 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:140$264 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:141$265 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:142$266 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:143$267 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:144$268 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:145$269 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:146$270 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:147$271 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:148$272 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:149$273 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:150$274 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:151$275 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:152$276 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:153$277 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:154$278 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:155$279 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:156$280 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:157$281 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:158$282 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:159$283 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:160$284 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:161$285 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:162$286 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:163$287 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:164$288 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:165$289 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:166$290 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:167$291 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:168$292 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:169$293 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:170$294 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:171$295 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:172$296 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:173$297 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:174$298 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:175$299 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:176$300 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:177$301 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:178$302 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:179$303 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:180$304 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:181$305 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:182$306 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:183$307 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:184$308 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:185$309 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:186$310 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:187$311 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:188$312 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:189$313 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:190$314 (params).
Removed top 7 bits (of 16) from port B of cell demo.$le$demo.v:238$141 ($le).
Removed top 15 bits (of 16) from port B of cell demo.$add$demo.v:240$142 ($add).
Removed top 4 bits (of 5) from port B of cell demo.$add$demo.v:276$148 ($add).
Removed top 4 bits (of 5) from port B of cell demo.$sub$demo.v:293$151 ($sub).
Removed top 2 bits (of 8) from port B of cell demo.$eq$demo.v:293$152 ($eq).
Removed top 3 bits (of 4) from port B of cell demo.$sub$demo.v:310$157 ($sub).
Removed top 2 bits (of 3) from port B of cell demo.$sub$demo.v:329$161 ($sub).
Removed top 6 bits (of 7) from port B of cell demo.$add$demo.v:422$176 ($add).
Removed top 13 bits (of 14) from port B of cell demo.$sub$demo.v:424$177 ($sub).
Removed top 2 bits (of 6) from port B of cell demo.$procmux$594_CMP0 ($eq).
Removed top 3 bits (of 6) from port B of cell demo.$procmux$619_CMP0 ($eq).
Removed top 3 bits (of 6) from port B of cell demo.$procmux$630_CMP0 ($eq).
Removed top 2 bits (of 6) from port B of cell demo.$procmux$636_CMP0 ($eq).
Removed top 4 bits (of 6) from port B of cell demo.$procmux$670_CMP0 ($eq).
Removed top 4 bits (of 6) from port B of cell demo.$procmux$674_CMP0 ($eq).
Removed top 4 bits (of 6) from mux cell demo.$procmux$677 ($mux).
Removed top 3 bits (of 6) from mux cell demo.$procmux$683 ($mux).
Removed top 2 bits (of 6) from port B of cell demo.$procmux$685_CMP0 ($eq).
Removed top 5 bits (of 6) from mux cell demo.$procmux$687 ($mux).
Removed top 2 bits (of 6) from port B of cell demo.$procmux$689_CMP0 ($eq).
Removed top 2 bits (of 6) from mux cell demo.$procmux$691 ($mux).
Removed top 2 bits (of 6) from port B of cell demo.$procmux$693_CMP0 ($eq).
Removed top 2 bits (of 6) from mux cell demo.$procmux$695 ($mux).
Removed top 3 bits (of 6) from port B of cell demo.$procmux$697_CMP0 ($eq).
Removed top 4 bits (of 6) from mux cell demo.$procmux$706 ($mux).
Removed top 4 bits (of 6) from mux cell demo.$procmux$699 ($mux).
Removed top 2 bits (of 6) from mux cell demo.$procmux$702 ($mux).
Removed top 2 bits (of 6) from mux cell demo.$procmux$709 ($mux).
Removed top 2 bits (of 6) from mux cell demo.$procmux$711 ($mux).
Removed top 3 bits (of 6) from port B of cell demo.$procmux$714_CMP0 ($eq).
Removed top 5 bits (of 6) from mux cell demo.$procmux$716 ($mux).
Removed top 5 bits (of 6) from port B of cell demo.$procmux$727_CMP0 ($eq).
Removed top 4 bits (of 6) from wire demo.$procmux$677_Y.
Removed top 3 bits (of 6) from wire demo.$procmux$683_Y.
Removed top 5 bits (of 6) from wire demo.$procmux$687_Y.
Removed top 2 bits (of 6) from wire demo.$procmux$691_Y.
Removed top 2 bits (of 6) from wire demo.$procmux$695_Y.
Removed top 4 bits (of 6) from wire demo.$procmux$699_Y.
Removed top 2 bits (of 6) from wire demo.$procmux$702_Y.
Removed top 4 bits (of 6) from wire demo.$procmux$706_Y.
Removed top 2 bits (of 6) from wire demo.$procmux$709_Y.
Removed top 2 bits (of 6) from wire demo.$procmux$711_Y.
Removed top 5 bits (of 6) from wire demo.$procmux$716_Y.

2.12. Executing PEEPOPT pass (run peephole optimizers).

2.13. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..
Removed 0 unused cells and 11 unused wires.
<suppressed ~1 debug messages>

2.14. Executing SHARE pass (SAT-based resource sharing).
Found 4 cells in module demo that may be considered for resource sharing.
  Analyzing resource sharing options for $memrd$\params$demo.v:406$171 ($memrd):
    Found 1 activation_patterns using ctrl signal $procmux$594_CMP.
    No candidates found.
  Analyzing resource sharing options for $memrd$\num_params$demo.v:396$166 ($memrd):
    Found 1 activation_patterns using ctrl signal $procmux$636_CMP.
    No candidates found.
  Analyzing resource sharing options for $memrd$\cmd$demo.v:293$150 ($memrd):
    Found 2 activation_patterns using ctrl signal { $procmux$630_CMP $procmux$594_CMP }.
    Found 1 candidates: $memrd$\cmd$demo.v:269$145
    Analyzing resource sharing with $memrd$\cmd$demo.v:269$145 ($memrd):
      Found 2 activation_patterns using ctrl signal { $procmux$619_CMP $eq$demo.v:269$146_Y }.
      Forbidden control signals for this pair of cells: { $logic_and$demo.v:293$153_Y $eq$demo.v:293$152_Y $eq$demo.v:269$146_Y }
      Activation pattern for cell $memrd$\cmd$demo.v:293$150: $procmux$594_CMP = 1'1
      Activation pattern for cell $memrd$\cmd$demo.v:293$150: $procmux$630_CMP = 1'1
      Activation pattern for cell $memrd$\cmd$demo.v:269$145: $procmux$619_CMP = 1'1
      Adding exclusive control bits: $procmux$594_CMP vs. $procmux$619_CMP
      Adding exclusive control bits: $procmux$594_CMP vs. $procmux$630_CMP
      Adding exclusive control bits: $procmux$594_CMP vs. $procmux$619_CMP
      Adding exclusive control bits: $procmux$619_CMP vs. $procmux$630_CMP
      Size of SAT problem: 4 cells, 65 variables, 165 clauses
      According to the SAT solver this pair of cells can be shared.
      Activation signal for $memrd$\cmd$demo.v:269$145: $auto$share.cc:976:make_cell_activation_logic$803
      New cell: $auto$share.cc:710:make_supercell$805 ($memrd)
  Analyzing resource sharing options for $auto$share.cc:710:make_supercell$805 ($memrd):
    Found 3 activation_patterns using ctrl signal { $procmux$630_CMP $procmux$619_CMP $procmux$594_CMP }.
    No candidates found.
Removing 2 cells in module demo:
  Removing cell $memrd$\cmd$demo.v:269$145 ($memrd).
  Removing cell $memrd$\cmd$demo.v:293$150 ($memrd).

2.15. Executing TECHMAP pass (map to technology primitives).

2.15.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/cmp2lut.v
Parsing Verilog input from `/usr/bin/../share/yosys/cmp2lut.v' to AST representation.
Generating RTLIL representation for module `\_90_lut_cmp_'.
Successfully finished Verilog frontend.

2.15.2. Continuing TECHMAP pass.
Using template $paramod$968c93632f950ce0f306709fa121c1e7a868940c\_90_lut_cmp_ for cells of type $eq.
Using template $paramod$77ad031fce233083715243f95e3cd2547d931e42\_90_lut_cmp_ for cells of type $eq.
Using template $paramod$b014af9c344b7c6e328d7df54af43048a86ccf04\_90_lut_cmp_ for cells of type $eq.
No more expansions possible.
<suppressed ~304 debug messages>

2.16. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.

2.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..
Removed 0 unused cells and 10 unused wires.
<suppressed ~2 debug messages>

2.18. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module demo:
  creating $macc model for $add$demo.v:240$142 ($add).
  creating $macc model for $add$demo.v:276$148 ($add).
  creating $macc model for $add$demo.v:422$176 ($add).
  creating $macc model for $sub$demo.v:293$151 ($sub).
  creating $macc model for $sub$demo.v:310$157 ($sub).
  creating $macc model for $sub$demo.v:329$161 ($sub).
  creating $macc model for $sub$demo.v:424$177 ($sub).
  creating $alu model for $macc $sub$demo.v:424$177.
  creating $alu model for $macc $sub$demo.v:329$161.
  creating $alu model for $macc $sub$demo.v:310$157.
  creating $alu model for $macc $sub$demo.v:293$151.
  creating $alu model for $macc $add$demo.v:422$176.
  creating $alu model for $macc $add$demo.v:276$148.
  creating $alu model for $macc $add$demo.v:240$142.
  creating $alu model for $le$demo.v:238$141 ($le): new $alu
  creating $alu cell for $le$demo.v:238$141: $auto$alumacc.cc:474:replace_alu$816
  creating $alu cell for $add$demo.v:240$142: $auto$alumacc.cc:474:replace_alu$829
  creating $alu cell for $add$demo.v:276$148: $auto$alumacc.cc:474:replace_alu$832
  creating $alu cell for $add$demo.v:422$176: $auto$alumacc.cc:474:replace_alu$835
  creating $alu cell for $sub$demo.v:293$151: $auto$alumacc.cc:474:replace_alu$838
  creating $alu cell for $sub$demo.v:310$157: $auto$alumacc.cc:474:replace_alu$841
  creating $alu cell for $sub$demo.v:329$161: $auto$alumacc.cc:474:replace_alu$844
  creating $alu cell for $sub$demo.v:424$177: $auto$alumacc.cc:474:replace_alu$847
  created 8 $alu and 0 $macc cells.

2.19. Executing OPT pass (performing simple optimizations).

2.19.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.

2.19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\demo'.
Removed a total of 0 cells.

2.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \demo..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~15 debug messages>

2.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \demo.
    New input vector for $reduce_or cell $auto$alumacc.cc:509:replace_alu$827: { $auto$rtlil.cc:1832:Not$826 $auto$rtlil.cc:1835:ReduceAnd$820 }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$819: { $auto$alumacc.cc:490:replace_alu$817 [0] $auto$alumacc.cc:490:replace_alu$817 [1] $auto$alumacc.cc:490:replace_alu$817 [2] $auto$alumacc.cc:490:replace_alu$817 [3] $auto$alumacc.cc:490:replace_alu$817 [4] $auto$alumacc.cc:490:replace_alu$817 [5] $auto$alumacc.cc:490:replace_alu$817 [6] $auto$alumacc.cc:490:replace_alu$817 [7] $auto$alumacc.cc:490:replace_alu$817 [8] $auto$alumacc.cc:490:replace_alu$817 [9] $auto$alumacc.cc:490:replace_alu$817 [10] $auto$alumacc.cc:490:replace_alu$817 [11] $auto$alumacc.cc:490:replace_alu$817 [12] $auto$alumacc.cc:490:replace_alu$817 [13] $auto$alumacc.cc:490:replace_alu$817 [14] $auto$alumacc.cc:490:replace_alu$817 [15] }
  Optimizing cells in module \demo.
Performed a total of 2 changes.

2.19.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\demo'.
Removed a total of 0 cells.

2.19.6. Executing OPT_RMDFF pass (remove dff with constant values).

2.19.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

2.19.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.

2.19.9. Rerunning OPT passes. (Maybe there is more to do..)

2.19.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \demo..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~15 debug messages>

2.19.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \demo.
Performed a total of 0 changes.

2.19.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\demo'.
Removed a total of 0 cells.

2.19.13. Executing OPT_RMDFF pass (remove dff with constant values).

2.19.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..

2.19.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.

2.19.16. Finished OPT passes. (There is nothing left to do.)

2.20. Executing FSM pass (extract and optimize FSM).

2.20.1. Executing FSM_DETECT pass (finding FSMs in design).
Not marking demo.state as FSM state register:
    Register has an initialization value.

2.20.2. Executing FSM_EXTRACT pass (extracting FSM from design).

2.20.3. Executing FSM_OPT pass (simple optimizations of FSMs).

2.20.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..

2.20.5. Executing FSM_OPT pass (simple optimizations of FSMs).

2.20.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

2.20.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

2.20.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

2.21. Executing OPT pass (performing simple optimizations).

2.21.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.

2.21.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\demo'.
Removed a total of 0 cells.

2.21.3. Executing OPT_RMDFF pass (remove dff with constant values).

2.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..

2.21.5. Finished fast OPT passes.

2.22. Executing MEMORY pass.

2.22.1. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).
Checking cell `$auto$share.cc:710:make_supercell$805' in module `\demo': no (compatible) $dff found.
Checking cell `$memrd$\num_params$demo.v:396$166' in module `\demo': no (compatible) $dff found.
Checking cell `$memrd$\params$demo.v:406$171' in module `\demo': no (compatible) $dff found.

2.22.2. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..

2.22.3. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

2.22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..

2.22.5. Executing MEMORY_COLLECT pass (generating $mem cells).
Collecting $memrd, $memwr and $meminit for memory `\cmd' in module `\demo':
  $meminit$\cmd$demo.v:52$178 ($meminit)
  $meminit$\cmd$demo.v:53$179 ($meminit)
  $meminit$\cmd$demo.v:54$180 ($meminit)
  $meminit$\cmd$demo.v:55$181 ($meminit)
  $meminit$\cmd$demo.v:56$182 ($meminit)
  $meminit$\cmd$demo.v:57$183 ($meminit)
  $meminit$\cmd$demo.v:58$184 ($meminit)
  $meminit$\cmd$demo.v:59$185 ($meminit)
  $meminit$\cmd$demo.v:60$186 ($meminit)
  $meminit$\cmd$demo.v:61$187 ($meminit)
  $meminit$\cmd$demo.v:62$188 ($meminit)
  $meminit$\cmd$demo.v:63$189 ($meminit)
  $meminit$\cmd$demo.v:64$190 ($meminit)
  $meminit$\cmd$demo.v:65$191 ($meminit)
  $meminit$\cmd$demo.v:66$192 ($meminit)
  $meminit$\cmd$demo.v:67$193 ($meminit)
  $meminit$\cmd$demo.v:68$194 ($meminit)
  $meminit$\cmd$demo.v:69$195 ($meminit)
  $meminit$\cmd$demo.v:70$196 ($meminit)
  $meminit$\cmd$demo.v:71$197 ($meminit)
  $meminit$\cmd$demo.v:72$198 ($meminit)
  $meminit$\cmd$demo.v:73$199 ($meminit)
  $meminit$\cmd$demo.v:74$200 ($meminit)
  $meminit$\cmd$demo.v:75$201 ($meminit)
  $meminit$\cmd$demo.v:76$202 ($meminit)
  $meminit$\cmd$demo.v:77$203 ($meminit)
  $meminit$\cmd$demo.v:78$204 ($meminit)
  $auto$share.cc:710:make_supercell$805 ($memrd)
Collecting $memrd, $memwr and $meminit for memory `\num_params' in module `\demo':
  $meminit$\num_params$demo.v:79$205 ($meminit)
  $meminit$\num_params$demo.v:80$206 ($meminit)
  $meminit$\num_params$demo.v:81$207 ($meminit)
  $meminit$\num_params$demo.v:82$208 ($meminit)
  $meminit$\num_params$demo.v:83$209 ($meminit)
  $meminit$\num_params$demo.v:84$210 ($meminit)
  $meminit$\num_params$demo.v:85$211 ($meminit)
  $meminit$\num_params$demo.v:86$212 ($meminit)
  $meminit$\num_params$demo.v:87$213 ($meminit)
  $meminit$\num_params$demo.v:88$214 ($meminit)
  $meminit$\num_params$demo.v:89$215 ($meminit)
  $meminit$\num_params$demo.v:90$216 ($meminit)
  $meminit$\num_params$demo.v:91$217 ($meminit)
  $meminit$\num_params$demo.v:92$218 ($meminit)
  $meminit$\num_params$demo.v:93$219 ($meminit)
  $meminit$\num_params$demo.v:94$220 ($meminit)
  $meminit$\num_params$demo.v:95$221 ($meminit)
  $meminit$\num_params$demo.v:96$222 ($meminit)
  $meminit$\num_params$demo.v:97$223 ($meminit)
  $meminit$\num_params$demo.v:98$224 ($meminit)
  $meminit$\num_params$demo.v:99$225 ($meminit)
  $meminit$\num_params$demo.v:100$226 ($meminit)
  $meminit$\num_params$demo.v:101$227 ($meminit)
  $meminit$\num_params$demo.v:102$228 ($meminit)
  $meminit$\num_params$demo.v:103$229 ($meminit)
  $meminit$\num_params$demo.v:104$230 ($meminit)
Warning: Address 5'11001 in memory initialization $meminit$\num_params$demo.v:104$230 is out-of-bounds.
  $memrd$\num_params$demo.v:396$166 ($memrd)
Collecting $memrd, $memwr and $meminit for memory `\params' in module `\demo':
  $meminit$\params$demo.v:107$231 ($meminit)
  $meminit$\params$demo.v:108$232 ($meminit)
  $meminit$\params$demo.v:109$233 ($meminit)
  $meminit$\params$demo.v:110$234 ($meminit)
  $meminit$\params$demo.v:111$235 ($meminit)
  $meminit$\params$demo.v:112$236 ($meminit)
  $meminit$\params$demo.v:113$237 ($meminit)
  $meminit$\params$demo.v:114$238 ($meminit)
  $meminit$\params$demo.v:115$239 ($meminit)
  $meminit$\params$demo.v:116$240 ($meminit)
  $meminit$\params$demo.v:117$241 ($meminit)
  $meminit$\params$demo.v:118$242 ($meminit)
  $meminit$\params$demo.v:119$243 ($meminit)
  $meminit$\params$demo.v:120$244 ($meminit)
  $meminit$\params$demo.v:121$245 ($meminit)
  $meminit$\params$demo.v:122$246 ($meminit)
  $meminit$\params$demo.v:123$247 ($meminit)
  $meminit$\params$demo.v:124$248 ($meminit)
  $meminit$\params$demo.v:125$249 ($meminit)
  $meminit$\params$demo.v:126$250 ($meminit)
  $meminit$\params$demo.v:127$251 ($meminit)
  $meminit$\params$demo.v:128$252 ($meminit)
  $meminit$\params$demo.v:129$253 ($meminit)
  $meminit$\params$demo.v:130$254 ($meminit)
  $meminit$\params$demo.v:131$255 ($meminit)
  $meminit$\params$demo.v:132$256 ($meminit)
  $meminit$\params$demo.v:133$257 ($meminit)
  $meminit$\params$demo.v:134$258 ($meminit)
  $meminit$\params$demo.v:135$259 ($meminit)
  $meminit$\params$demo.v:136$260 ($meminit)
  $meminit$\params$demo.v:137$261 ($meminit)
  $meminit$\params$demo.v:138$262 ($meminit)
  $meminit$\params$demo.v:139$263 ($meminit)
  $meminit$\params$demo.v:140$264 ($meminit)
  $meminit$\params$demo.v:141$265 ($meminit)
  $meminit$\params$demo.v:142$266 ($meminit)
  $meminit$\params$demo.v:143$267 ($meminit)
  $meminit$\params$demo.v:144$268 ($meminit)
  $meminit$\params$demo.v:145$269 ($meminit)
  $meminit$\params$demo.v:146$270 ($meminit)
  $meminit$\params$demo.v:147$271 ($meminit)
  $meminit$\params$demo.v:148$272 ($meminit)
  $meminit$\params$demo.v:149$273 ($meminit)
  $meminit$\params$demo.v:150$274 ($meminit)
  $meminit$\params$demo.v:151$275 ($meminit)
  $meminit$\params$demo.v:152$276 ($meminit)
  $meminit$\params$demo.v:153$277 ($meminit)
  $meminit$\params$demo.v:154$278 ($meminit)
  $meminit$\params$demo.v:155$279 ($meminit)
  $meminit$\params$demo.v:156$280 ($meminit)
  $meminit$\params$demo.v:157$281 ($meminit)
  $meminit$\params$demo.v:158$282 ($meminit)
  $meminit$\params$demo.v:159$283 ($meminit)
  $meminit$\params$demo.v:160$284 ($meminit)
  $meminit$\params$demo.v:161$285 ($meminit)
  $meminit$\params$demo.v:162$286 ($meminit)
  $meminit$\params$demo.v:163$287 ($meminit)
  $meminit$\params$demo.v:164$288 ($meminit)
  $meminit$\params$demo.v:165$289 ($meminit)
  $meminit$\params$demo.v:166$290 ($meminit)
  $meminit$\params$demo.v:167$291 ($meminit)
  $meminit$\params$demo.v:168$292 ($meminit)
  $meminit$\params$demo.v:169$293 ($meminit)
  $meminit$\params$demo.v:170$294 ($meminit)
  $meminit$\params$demo.v:171$295 ($meminit)
  $meminit$\params$demo.v:172$296 ($meminit)
  $meminit$\params$demo.v:173$297 ($meminit)
  $meminit$\params$demo.v:174$298 ($meminit)
  $meminit$\params$demo.v:175$299 ($meminit)
  $meminit$\params$demo.v:176$300 ($meminit)
  $meminit$\params$demo.v:177$301 ($meminit)
  $meminit$\params$demo.v:178$302 ($meminit)
  $meminit$\params$demo.v:179$303 ($meminit)
  $meminit$\params$demo.v:180$304 ($meminit)
  $meminit$\params$demo.v:181$305 ($meminit)
  $meminit$\params$demo.v:182$306 ($meminit)
  $meminit$\params$demo.v:183$307 ($meminit)
  $meminit$\params$demo.v:184$308 ($meminit)
  $meminit$\params$demo.v:185$309 ($meminit)
  $meminit$\params$demo.v:186$310 ($meminit)
  $meminit$\params$demo.v:187$311 ($meminit)
  $meminit$\params$demo.v:188$312 ($meminit)
  $meminit$\params$demo.v:189$313 ($meminit)
  $meminit$\params$demo.v:190$314 ($meminit)
  $memrd$\params$demo.v:406$171 ($memrd)

2.23. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..

2.24. Executing MEMORY_BRAM pass (mapping $mem cells to block memories).
Processing demo.cmd:
  Properties: ports=1 bits=216 rports=1 wports=0 dbits=8 abits=5 words=27
  Checking rule #1 for bram type $__ICE40_RAM4K_M0 (variant 1):
    Bram geometry: abits=8 dbits=16 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M0: awaste=229 dwaste=8 bwaste=3880 waste=3880 efficiency=5
    Rule #1 for bram type $__ICE40_RAM4K_M0 (variant 1) accepted.
    Mapping to bram type $__ICE40_RAM4K_M0 (variant 1):
      Read port #0 is in clock domain !~async~.
        Bram port A1.1 has incompatible clock type.
        Failed to map read port #0.
    Mapping to bram type $__ICE40_RAM4K_M0 failed.
  Checking rule #2 for bram type $__ICE40_RAM4K_M123 (variant 1):
    Bram geometry: abits=9 dbits=8 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=485 dwaste=0 bwaste=3880 waste=3880 efficiency=5
    Rule #2 for bram type $__ICE40_RAM4K_M123 (variant 1) accepted.
    Mapping to bram type $__ICE40_RAM4K_M123 (variant 1):
      Read port #0 is in clock domain !~async~.
        Bram port A1.1 has incompatible clock type.
        Failed to map read port #0.
    Mapping to bram type $__ICE40_RAM4K_M123 failed.
  Checking rule #2 for bram type $__ICE40_RAM4K_M123 (variant 2):
    Bram geometry: abits=10 dbits=4 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=997 dwaste=0 bwaste=3988 waste=3988 efficiency=2
    Rule #2 for bram type $__ICE40_RAM4K_M123 (variant 2) accepted.
    Mapping to bram type $__ICE40_RAM4K_M123 (variant 2):
      Read port #0 is in clock domain !~async~.
        Bram port A1.1 has incompatible clock type.
        Failed to map read port #0.
    Mapping to bram type $__ICE40_RAM4K_M123 failed.
  Checking rule #2 for bram type $__ICE40_RAM4K_M123 (variant 3):
    Bram geometry: abits=11 dbits=2 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=2021 dwaste=0 bwaste=4042 waste=4042 efficiency=1
    Rule #2 for bram type $__ICE40_RAM4K_M123 (variant 3) rejected: requirement 'min efficiency 2' not met.
  No acceptable bram resources found.
Processing demo.num_params:
  Properties: ports=1 bits=350 rports=1 wports=0 dbits=14 abits=5 words=25
  Checking rule #1 for bram type $__ICE40_RAM4K_M0 (variant 1):
    Bram geometry: abits=8 dbits=16 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M0: awaste=231 dwaste=2 bwaste=3746 waste=3746 efficiency=8
    Rule #1 for bram type $__ICE40_RAM4K_M0 (variant 1) accepted.
    Mapping to bram type $__ICE40_RAM4K_M0 (variant 1):
      Read port #0 is in clock domain !~async~.
        Bram port A1.1 has incompatible clock type.
        Failed to map read port #0.
    Mapping to bram type $__ICE40_RAM4K_M0 failed.
  Checking rule #2 for bram type $__ICE40_RAM4K_M123 (variant 1):
    Bram geometry: abits=9 dbits=8 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=487 dwaste=2 bwaste=3946 waste=3946 efficiency=4
    Rule #2 for bram type $__ICE40_RAM4K_M123 (variant 1) accepted.
    Mapping to bram type $__ICE40_RAM4K_M123 (variant 1):
      Read port #0 is in clock domain !~async~.
        Bram port A1.1 has incompatible clock type.
        Failed to map read port #0.
    Mapping to bram type $__ICE40_RAM4K_M123 failed.
  Checking rule #2 for bram type $__ICE40_RAM4K_M123 (variant 2):
    Bram geometry: abits=10 dbits=4 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=999 dwaste=2 bwaste=4046 waste=4046 efficiency=2
    Rule #2 for bram type $__ICE40_RAM4K_M123 (variant 2) accepted.
    Mapping to bram type $__ICE40_RAM4K_M123 (variant 2):
      Read port #0 is in clock domain !~async~.
        Bram port A1.1 has incompatible clock type.
        Failed to map read port #0.
    Mapping to bram type $__ICE40_RAM4K_M123 failed.
  Checking rule #2 for bram type $__ICE40_RAM4K_M123 (variant 3):
    Bram geometry: abits=11 dbits=2 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=2023 dwaste=0 bwaste=4046 waste=4046 efficiency=1
    Rule #2 for bram type $__ICE40_RAM4K_M123 (variant 3) rejected: requirement 'min efficiency 2' not met.
  No acceptable bram resources found.
Processing demo.params:
  Properties: ports=1 bits=672 rports=1 wports=0 dbits=8 abits=7 words=84
  Checking rule #1 for bram type $__ICE40_RAM4K_M0 (variant 1):
    Bram geometry: abits=8 dbits=16 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M0: awaste=172 dwaste=8 bwaste=3424 waste=3424 efficiency=16
    Rule #1 for bram type $__ICE40_RAM4K_M0 (variant 1) accepted.
    Mapping to bram type $__ICE40_RAM4K_M0 (variant 1):
      Read port #0 is in clock domain !~async~.
        Bram port A1.1 has incompatible clock type.
        Failed to map read port #0.
    Mapping to bram type $__ICE40_RAM4K_M0 failed.
  Checking rule #2 for bram type $__ICE40_RAM4K_M123 (variant 1):
    Bram geometry: abits=9 dbits=8 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=428 dwaste=0 bwaste=3424 waste=3424 efficiency=16
    Rule #2 for bram type $__ICE40_RAM4K_M123 (variant 1) accepted.
    Mapping to bram type $__ICE40_RAM4K_M123 (variant 1):
      Read port #0 is in clock domain !~async~.
        Bram port A1.1 has incompatible clock type.
        Failed to map read port #0.
    Mapping to bram type $__ICE40_RAM4K_M123 failed.
  Checking rule #2 for bram type $__ICE40_RAM4K_M123 (variant 2):
    Bram geometry: abits=10 dbits=4 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=940 dwaste=0 bwaste=3760 waste=3760 efficiency=8
    Rule #2 for bram type $__ICE40_RAM4K_M123 (variant 2) accepted.
    Mapping to bram type $__ICE40_RAM4K_M123 (variant 2):
      Read port #0 is in clock domain !~async~.
        Bram port A1.1 has incompatible clock type.
        Failed to map read port #0.
    Mapping to bram type $__ICE40_RAM4K_M123 failed.
  Checking rule #2 for bram type $__ICE40_RAM4K_M123 (variant 3):
    Bram geometry: abits=11 dbits=2 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=1964 dwaste=0 bwaste=3928 waste=3928 efficiency=4
    Rule #2 for bram type $__ICE40_RAM4K_M123 (variant 3) accepted.
    Mapping to bram type $__ICE40_RAM4K_M123 (variant 3):
      Read port #0 is in clock domain !~async~.
        Bram port A1.1 has incompatible clock type.
        Failed to map read port #0.
    Mapping to bram type $__ICE40_RAM4K_M123 failed.
  No acceptable bram resources found.

2.25. Executing TECHMAP pass (map to technology primitives).

2.25.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/brams_map.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/brams_map.v' to AST representation.
Generating RTLIL representation for module `\$__ICE40_RAM4K'.
Generating RTLIL representation for module `\$__ICE40_RAM4K_M0'.
Generating RTLIL representation for module `\$__ICE40_RAM4K_M123'.
Successfully finished Verilog frontend.

2.25.2. Continuing TECHMAP pass.
No more expansions possible.

2.26. Executing ICE40_BRAMINIT pass.

2.27. Executing OPT pass (performing simple optimizations).

2.27.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.
<suppressed ~1 debug messages>

2.27.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\demo'.
Removed a total of 0 cells.

2.27.3. Executing OPT_RMDFF pass (remove dff with constant values).

2.27.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

2.27.5. Finished fast OPT passes.

2.28. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).
Mapping memory cell \cmd in module \demo:
  created 27 $dff cells and 0 static cells of width 8.
  read interface: 0 $dff and 31 $mux cells.
  write interface: 0 write mux blocks.
Mapping memory cell \num_params in module \demo:
  created 25 $dff cells and 0 static cells of width 14.
  read interface: 0 $dff and 31 $mux cells.
  write interface: 0 write mux blocks.
Mapping memory cell \params in module \demo:
  created 84 $dff cells and 0 static cells of width 8.
  read interface: 0 $dff and 127 $mux cells.
  write interface: 0 write mux blocks.

2.29. Executing OPT pass (performing simple optimizations).

2.29.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.
<suppressed ~120 debug messages>

2.29.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\demo'.
Removed a total of 0 cells.

2.29.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \demo..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~17 debug messages>

2.29.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \demo.
    Consolidated identical input bits for $mux cell $procmux$677:
      Old ports: A=2'10, B=2'00, Y=$auto$wreduce.cc:455:run$792 [1:0]
      New ports: A=1'1, B=1'0, Y=$auto$wreduce.cc:455:run$792 [1]
      New connections: $auto$wreduce.cc:455:run$792 [0] = 1'0
    Consolidated identical input bits for $mux cell $procmux$683:
      Old ports: A=3'011, B=3'100, Y=$auto$wreduce.cc:455:run$793 [2:0]
      New ports: A=2'01, B=2'10, Y={ $auto$wreduce.cc:455:run$793 [2] $auto$wreduce.cc:455:run$793 [0] }
      New connections: $auto$wreduce.cc:455:run$793 [1] = $auto$wreduce.cc:455:run$793 [0]
    Consolidated identical input bits for $mux cell $procmux$691:
      Old ports: A=4'1010, B=4'0110, Y=$auto$wreduce.cc:455:run$795 [3:0]
      New ports: A=2'10, B=2'01, Y=$auto$wreduce.cc:455:run$795 [3:2]
      New connections: $auto$wreduce.cc:455:run$795 [1:0] = 2'10
    Consolidated identical input bits for $mux cell $procmux$695:
      Old ports: A=4'0111, B=4'1010, Y=$auto$wreduce.cc:455:run$796 [3:0]
      New ports: A=2'01, B=2'10, Y={ $auto$wreduce.cc:455:run$796 [3] $auto$wreduce.cc:455:run$796 [0] }
      New connections: $auto$wreduce.cc:455:run$796 [2:1] = { $auto$wreduce.cc:455:run$796 [0] 1'1 }
    Consolidated identical input bits for $mux cell $procmux$699:
      Old ports: A=2'10, B=2'00, Y=$auto$wreduce.cc:455:run$797 [1:0]
      New ports: A=1'1, B=1'0, Y=$auto$wreduce.cc:455:run$797 [1]
      New connections: $auto$wreduce.cc:455:run$797 [0] = 1'0
    Consolidated identical input bits for $mux cell $procmux$706:
      Old ports: A=2'10, B=2'00, Y=$auto$wreduce.cc:455:run$799 [1:0]
      New ports: A=1'1, B=1'0, Y=$auto$wreduce.cc:455:run$799 [1]
      New connections: $auto$wreduce.cc:455:run$799 [0] = 1'0
  Optimizing cells in module \demo.
    Consolidated identical input bits for $mux cell $procmux$702:
      Old ports: A={ 2'10 $auto$wreduce.cc:455:run$797 [1:0] }, B=4'0111, Y=$auto$wreduce.cc:455:run$798 [3:0]
      New ports: A={ 1'1 $auto$wreduce.cc:455:run$797 [1] 1'0 }, B=3'011, Y={ $auto$wreduce.cc:455:run$798 [3] $auto$wreduce.cc:455:run$798 [1:0] }
      New connections: $auto$wreduce.cc:455:run$798 [2] = $auto$wreduce.cc:455:run$798 [0]
    Consolidated identical input bits for $mux cell $procmux$709:
      Old ports: A={ 2'10 $auto$wreduce.cc:455:run$799 [1:0] }, B=4'0111, Y=$auto$wreduce.cc:455:run$800 [3:0]
      New ports: A={ 1'1 $auto$wreduce.cc:455:run$799 [1] 1'0 }, B=3'011, Y={ $auto$wreduce.cc:455:run$800 [3] $auto$wreduce.cc:455:run$800 [1:0] }
      New connections: $auto$wreduce.cc:455:run$800 [2] = $auto$wreduce.cc:455:run$800 [0]
  Optimizing cells in module \demo.
    Consolidated identical input bits for $mux cell $procmux$711:
      Old ports: A=$auto$wreduce.cc:455:run$798 [3:0], B=$auto$wreduce.cc:455:run$800 [3:0], Y=$auto$wreduce.cc:455:run$801 [3:0]
      New ports: A={ $auto$wreduce.cc:455:run$798 [3] $auto$wreduce.cc:455:run$798 [1:0] }, B={ $auto$wreduce.cc:455:run$800 [3] $auto$wreduce.cc:455:run$800 [1:0] }, Y={ $auto$wreduce.cc:455:run$801 [3] $auto$wreduce.cc:455:run$801 [1:0] }
      New connections: $auto$wreduce.cc:455:run$801 [2] = $auto$wreduce.cc:455:run$801 [0]
  Optimizing cells in module \demo.
Performed a total of 9 changes.

2.29.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\demo'.
Removed a total of 0 cells.

2.29.6. Executing OPT_RMDFF pass (remove dff with constant values).
Removing $memory\params[83]$1312 ($dff) from module demo.
Removing $memory\params[82]$1310 ($dff) from module demo.
Removing $memory\params[81]$1308 ($dff) from module demo.
Removing $memory\params[80]$1306 ($dff) from module demo.
Removing $memory\params[79]$1304 ($dff) from module demo.
Removing $memory\params[78]$1302 ($dff) from module demo.
Removing $memory\params[77]$1300 ($dff) from module demo.
Removing $memory\params[76]$1298 ($dff) from module demo.
Removing $memory\params[75]$1296 ($dff) from module demo.
Removing $memory\params[74]$1294 ($dff) from module demo.
Removing $memory\params[73]$1292 ($dff) from module demo.
Removing $memory\params[72]$1290 ($dff) from module demo.
Removing $memory\params[71]$1288 ($dff) from module demo.
Removing $memory\params[70]$1286 ($dff) from module demo.
Removing $memory\params[69]$1284 ($dff) from module demo.
Removing $memory\params[68]$1282 ($dff) from module demo.
Removing $memory\params[67]$1280 ($dff) from module demo.
Removing $memory\params[66]$1278 ($dff) from module demo.
Removing $memory\params[65]$1276 ($dff) from module demo.
Removing $memory\params[64]$1274 ($dff) from module demo.
Removing $memory\params[63]$1272 ($dff) from module demo.
Removing $memory\params[62]$1270 ($dff) from module demo.
Removing $memory\params[61]$1268 ($dff) from module demo.
Removing $memory\params[60]$1266 ($dff) from module demo.
Removing $memory\params[59]$1264 ($dff) from module demo.
Removing $memory\params[58]$1262 ($dff) from module demo.
Removing $memory\params[57]$1260 ($dff) from module demo.
Removing $memory\params[56]$1258 ($dff) from module demo.
Removing $memory\params[55]$1256 ($dff) from module demo.
Removing $memory\params[54]$1254 ($dff) from module demo.
Removing $memory\params[53]$1252 ($dff) from module demo.
Removing $memory\params[52]$1250 ($dff) from module demo.
Removing $memory\params[51]$1248 ($dff) from module demo.
Removing $memory\params[50]$1246 ($dff) from module demo.
Removing $memory\params[49]$1244 ($dff) from module demo.
Removing $memory\params[48]$1242 ($dff) from module demo.
Removing $memory\params[47]$1240 ($dff) from module demo.
Removing $memory\params[46]$1238 ($dff) from module demo.
Removing $memory\params[45]$1236 ($dff) from module demo.
Removing $memory\params[44]$1234 ($dff) from module demo.
Removing $memory\params[43]$1232 ($dff) from module demo.
Removing $memory\params[42]$1230 ($dff) from module demo.
Removing $memory\params[41]$1228 ($dff) from module demo.
Removing $memory\params[40]$1226 ($dff) from module demo.
Removing $memory\params[39]$1224 ($dff) from module demo.
Removing $memory\params[38]$1222 ($dff) from module demo.
Removing $memory\params[37]$1220 ($dff) from module demo.
Removing $memory\params[36]$1218 ($dff) from module demo.
Removing $memory\params[35]$1216 ($dff) from module demo.
Removing $memory\params[34]$1214 ($dff) from module demo.
Removing $memory\params[33]$1212 ($dff) from module demo.
Removing $memory\params[32]$1210 ($dff) from module demo.
Removing $memory\params[31]$1208 ($dff) from module demo.
Removing $memory\params[30]$1206 ($dff) from module demo.
Removing $memory\params[29]$1204 ($dff) from module demo.
Removing $memory\params[28]$1202 ($dff) from module demo.
Removing $memory\params[27]$1200 ($dff) from module demo.
Removing $memory\params[26]$1198 ($dff) from module demo.
Removing $memory\params[25]$1196 ($dff) from module demo.
Removing $memory\params[24]$1194 ($dff) from module demo.
Removing $memory\params[23]$1192 ($dff) from module demo.
Removing $memory\params[22]$1190 ($dff) from module demo.
Removing $memory\params[21]$1188 ($dff) from module demo.
Removing $memory\params[20]$1186 ($dff) from module demo.
Removing $memory\params[19]$1184 ($dff) from module demo.
Removing $memory\params[18]$1182 ($dff) from module demo.
Removing $memory\params[17]$1180 ($dff) from module demo.
Removing $memory\params[16]$1178 ($dff) from module demo.
Removing $memory\params[15]$1176 ($dff) from module demo.
Removing $memory\params[14]$1174 ($dff) from module demo.
Removing $memory\params[13]$1172 ($dff) from module demo.
Removing $memory\params[12]$1170 ($dff) from module demo.
Removing $memory\params[11]$1168 ($dff) from module demo.
Removing $memory\params[10]$1166 ($dff) from module demo.
Removing $memory\params[9]$1164 ($dff) from module demo.
Removing $memory\params[8]$1162 ($dff) from module demo.
Removing $memory\params[7]$1160 ($dff) from module demo.
Removing $memory\params[6]$1158 ($dff) from module demo.
Removing $memory\params[5]$1156 ($dff) from module demo.
Removing $memory\params[4]$1154 ($dff) from module demo.
Removing $memory\params[3]$1152 ($dff) from module demo.
Removing $memory\params[2]$1150 ($dff) from module demo.
Removing $memory\params[1]$1148 ($dff) from module demo.
Removing $memory\params[0]$1146 ($dff) from module demo.
Removing $memory\num_params[24]$1051 ($dff) from module demo.
Removing $memory\num_params[23]$1049 ($dff) from module demo.
Removing $memory\num_params[22]$1047 ($dff) from module demo.
Removing $memory\num_params[21]$1045 ($dff) from module demo.
Removing $memory\num_params[20]$1043 ($dff) from module demo.
Removing $memory\num_params[19]$1041 ($dff) from module demo.
Removing $memory\num_params[18]$1039 ($dff) from module demo.
Removing $memory\num_params[17]$1037 ($dff) from module demo.
Removing $memory\num_params[16]$1035 ($dff) from module demo.
Removing $memory\num_params[15]$1033 ($dff) from module demo.
Removing $memory\num_params[14]$1031 ($dff) from module demo.
Removing $memory\num_params[13]$1029 ($dff) from module demo.
Removing $memory\num_params[12]$1027 ($dff) from module demo.
Removing $memory\num_params[11]$1025 ($dff) from module demo.
Removing $memory\num_params[10]$1023 ($dff) from module demo.
Removing $memory\num_params[9]$1021 ($dff) from module demo.
Removing $memory\num_params[8]$1019 ($dff) from module demo.
Removing $memory\num_params[7]$1017 ($dff) from module demo.
Removing $memory\num_params[6]$1015 ($dff) from module demo.
Removing $memory\num_params[5]$1013 ($dff) from module demo.
Removing $memory\num_params[4]$1011 ($dff) from module demo.
Removing $memory\num_params[3]$1009 ($dff) from module demo.
Removing $memory\num_params[2]$1007 ($dff) from module demo.
Removing $memory\num_params[1]$1005 ($dff) from module demo.
Removing $memory\num_params[0]$1003 ($dff) from module demo.
Removing $memory\cmd[26]$908 ($dff) from module demo.
Removing $memory\cmd[25]$906 ($dff) from module demo.
Removing $memory\cmd[24]$904 ($dff) from module demo.
Removing $memory\cmd[23]$902 ($dff) from module demo.
Removing $memory\cmd[22]$900 ($dff) from module demo.
Removing $memory\cmd[21]$898 ($dff) from module demo.
Removing $memory\cmd[20]$896 ($dff) from module demo.
Removing $memory\cmd[19]$894 ($dff) from module demo.
Removing $memory\cmd[18]$892 ($dff) from module demo.
Removing $memory\cmd[17]$890 ($dff) from module demo.
Removing $memory\cmd[16]$888 ($dff) from module demo.
Removing $memory\cmd[15]$886 ($dff) from module demo.
Removing $memory\cmd[14]$884 ($dff) from module demo.
Removing $memory\cmd[13]$882 ($dff) from module demo.
Removing $memory\cmd[12]$880 ($dff) from module demo.
Removing $memory\cmd[11]$878 ($dff) from module demo.
Removing $memory\cmd[10]$876 ($dff) from module demo.
Removing $memory\cmd[9]$874 ($dff) from module demo.
Removing $memory\cmd[8]$872 ($dff) from module demo.
Removing $memory\cmd[7]$870 ($dff) from module demo.
Removing $memory\cmd[6]$868 ($dff) from module demo.
Removing $memory\cmd[5]$866 ($dff) from module demo.
Removing $memory\cmd[4]$864 ($dff) from module demo.
Removing $memory\cmd[3]$862 ($dff) from module demo.
Removing $memory\cmd[2]$860 ($dff) from module demo.
Removing $memory\cmd[1]$858 ($dff) from module demo.
Removing $memory\cmd[0]$856 ($dff) from module demo.
Replaced 136 DFF cells.

2.29.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..
Removed 0 unused cells and 376 unused wires.
<suppressed ~1 debug messages>

2.29.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.
<suppressed ~6 debug messages>

2.29.9. Rerunning OPT passes. (Maybe there is more to do..)

2.29.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \demo..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~17 debug messages>

2.29.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \demo.
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][4][0]$955:
      Old ports: A=8'00010001, B=8'10110001, Y=$memory\cmd$rdmux[0][3][0]$a$932
      New ports: A=1'0, B=1'1, Y=$memory\cmd$rdmux[0][3][0]$a$932 [5]
      New connections: { $memory\cmd$rdmux[0][3][0]$a$932 [7:6] $memory\cmd$rdmux[0][3][0]$a$932 [4:0] } = { $memory\cmd$rdmux[0][3][0]$a$932 [5] 6'010001 }
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][4][10]$985:
      Old ports: A=8'00101100, B=8'00101010, Y=$memory\cmd$rdmux[0][3][5]$a$947
      New ports: A=2'10, B=2'01, Y=$memory\cmd$rdmux[0][3][5]$a$947 [2:1]
      New connections: { $memory\cmd$rdmux[0][3][5]$a$947 [7:3] $memory\cmd$rdmux[0][3][5]$a$947 [0] } = 6'001010
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][4][11]$988:
      Old ports: A=8'00101011, B=8'00101100, Y=$memory\cmd$rdmux[0][3][5]$b$948
      New ports: A=2'01, B=2'10, Y={ $memory\cmd$rdmux[0][3][5]$b$948 [2] $memory\cmd$rdmux[0][3][5]$b$948 [0] }
      New connections: { $memory\cmd$rdmux[0][3][5]$b$948 [7:3] $memory\cmd$rdmux[0][3][5]$b$948 [1] } = { 5'00101 $memory\cmd$rdmux[0][3][5]$b$948 [0] }
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][4][12]$991:
      Old ports: A=8'00101010, B=8'00101011, Y=$memory\cmd$rdmux[0][3][6]$a$950
      New ports: A=1'0, B=1'1, Y=$memory\cmd$rdmux[0][3][6]$a$950 [0]
      New connections: $memory\cmd$rdmux[0][3][6]$a$950 [7:1] = 7'0010101
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][4][13]$994:
      Old ports: A=8'00000000, B=8'xxxxxxxx, Y=$memory\cmd$rdmux[0][3][6]$b$951
      New ports: A=1'0, B=1'x, Y=$memory\cmd$rdmux[0][3][6]$b$951 [0]
      New connections: $memory\cmd$rdmux[0][3][6]$b$951 [7:1] = { $memory\cmd$rdmux[0][3][6]$b$951 [0] $memory\cmd$rdmux[0][3][6]$b$951 [0] $memory\cmd$rdmux[0][3][6]$b$951 [0] $memory\cmd$rdmux[0][3][6]$b$951 [0] $memory\cmd$rdmux[0][3][6]$b$951 [0] $memory\cmd$rdmux[0][3][6]$b$951 [0] $memory\cmd$rdmux[0][3][6]$b$951 [0] }
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][4][1]$958:
      Old ports: A=8'10110010, B=8'10110011, Y=$memory\cmd$rdmux[0][3][0]$b$933
      New ports: A=1'0, B=1'1, Y=$memory\cmd$rdmux[0][3][0]$b$933 [0]
      New connections: $memory\cmd$rdmux[0][3][0]$b$933 [7:1] = 7'1011001
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][4][2]$961:
      Old ports: A=8'10110100, B=8'11000000, Y=$memory\cmd$rdmux[0][3][1]$a$935
      New ports: A=2'01, B=2'10, Y={ $memory\cmd$rdmux[0][3][1]$a$935 [6] $memory\cmd$rdmux[0][3][1]$a$935 [2] }
      New connections: { $memory\cmd$rdmux[0][3][1]$a$935 [7] $memory\cmd$rdmux[0][3][1]$a$935 [5:3] $memory\cmd$rdmux[0][3][1]$a$935 [1:0] } = { 1'1 $memory\cmd$rdmux[0][3][1]$a$935 [2] $memory\cmd$rdmux[0][3][1]$a$935 [2] 3'000 }
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][4][3]$964:
      Old ports: A=8'11000001, B=8'11000010, Y=$memory\cmd$rdmux[0][3][1]$b$936
      New ports: A=2'01, B=2'10, Y=$memory\cmd$rdmux[0][3][1]$b$936 [1:0]
      New connections: $memory\cmd$rdmux[0][3][1]$b$936 [7:2] = 6'110000
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][4][4]$967:
      Old ports: A=8'11000011, B=8'11000100, Y=$memory\cmd$rdmux[0][3][2]$a$938
      New ports: A=2'01, B=2'10, Y={ $memory\cmd$rdmux[0][3][2]$a$938 [2] $memory\cmd$rdmux[0][3][2]$a$938 [0] }
      New connections: { $memory\cmd$rdmux[0][3][2]$a$938 [7:3] $memory\cmd$rdmux[0][3][2]$a$938 [1] } = { 5'11000 $memory\cmd$rdmux[0][3][2]$a$938 [0] }
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][4][5]$970:
      Old ports: A=8'11000101, B=8'11100000, Y=$memory\cmd$rdmux[0][3][2]$b$939
      New ports: A=2'01, B=2'10, Y={ $memory\cmd$rdmux[0][3][2]$b$939 [5] $memory\cmd$rdmux[0][3][2]$b$939 [0] }
      New connections: { $memory\cmd$rdmux[0][3][2]$b$939 [7:6] $memory\cmd$rdmux[0][3][2]$b$939 [4:1] } = { 4'1100 $memory\cmd$rdmux[0][3][2]$b$939 [0] 1'0 }
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][4][6]$973:
      Old ports: A=8'11100001, B=8'11111100, Y=$memory\cmd$rdmux[0][3][3]$a$941
      New ports: A=2'01, B=2'10, Y={ $memory\cmd$rdmux[0][3][3]$a$941 [2] $memory\cmd$rdmux[0][3][3]$a$941 [0] }
      New connections: { $memory\cmd$rdmux[0][3][3]$a$941 [7:3] $memory\cmd$rdmux[0][3][3]$a$941 [1] } = { 3'111 $memory\cmd$rdmux[0][3][3]$a$941 [2] $memory\cmd$rdmux[0][3][3]$a$941 [2] 1'0 }
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][4][7]$976:
      Old ports: A=8'00111010, B=8'00110110, Y=$memory\cmd$rdmux[0][3][3]$b$942
      New ports: A=2'10, B=2'01, Y=$memory\cmd$rdmux[0][3][3]$b$942 [3:2]
      New connections: { $memory\cmd$rdmux[0][3][3]$b$942 [7:4] $memory\cmd$rdmux[0][3][3]$b$942 [1:0] } = 6'001110
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][4][8]$979:
      Old ports: A=8'00100001, B=8'00101001, Y=$memory\cmd$rdmux[0][3][4]$a$944
      New ports: A=1'0, B=1'1, Y=$memory\cmd$rdmux[0][3][4]$a$944 [3]
      New connections: { $memory\cmd$rdmux[0][3][4]$a$944 [7:4] $memory\cmd$rdmux[0][3][4]$a$944 [2:0] } = 7'0010001
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][4][9]$982:
      Old ports: A=8'00101010, B=8'00101011, Y=$memory\cmd$rdmux[0][3][4]$b$945
      New ports: A=1'0, B=1'1, Y=$memory\cmd$rdmux[0][3][4]$b$945 [0]
      New connections: $memory\cmd$rdmux[0][3][4]$b$945 [7:1] = 7'0010101
    Consolidated identical input bits for $mux cell $memory\num_params$rdmux[0][3][4]$1086:
      Old ports: A=$memory\num_params$rdmux[0][3][4]$a$1087, B=$memory\num_params$rdmux[0][3][4]$b$1088, Y=$memory\num_params$rdmux[0][2][2]$a$1069
      New ports: A=1'0, B=1'1, Y=$memory\num_params$rdmux[0][2][2]$a$1069 [2]
      New connections: { $memory\num_params$rdmux[0][2][2]$a$1069 [13:3] $memory\num_params$rdmux[0][2][2]$a$1069 [1:0] } = 13'0000000000000
    Consolidated identical input bits for $mux cell $memory\num_params$rdmux[0][4][0]$1098:
      Old ports: A=14'00000000000000, B=14'00000000000011, Y=$memory\num_params$rdmux[0][3][0]$a$1075
      New ports: A=1'0, B=1'1, Y=$memory\num_params$rdmux[0][3][0]$a$1075 [0]
      New connections: $memory\num_params$rdmux[0][3][0]$a$1075 [13:1] = { 12'000000000000 $memory\num_params$rdmux[0][3][0]$a$1075 [0] }
    Consolidated identical input bits for $mux cell $memory\num_params$rdmux[0][4][10]$1128:
      Old ports: A=14'00000000000000, B=14'00000000000100, Y=$memory\num_params$rdmux[0][3][5]$a$1090
      New ports: A=1'0, B=1'1, Y=$memory\num_params$rdmux[0][3][5]$a$1090 [2]
      New connections: { $memory\num_params$rdmux[0][3][5]$a$1090 [13:3] $memory\num_params$rdmux[0][3][5]$a$1090 [1:0] } = 13'0000000000000
    Consolidated identical input bits for $mux cell $memory\num_params$rdmux[0][4][11]$1131:
      Old ports: A=14'00000000000100, B=14'11001000000000, Y=$memory\num_params$rdmux[0][3][5]$b$1091
      New ports: A=2'01, B=2'10, Y={ $memory\num_params$rdmux[0][3][5]$b$1091 [9] $memory\num_params$rdmux[0][3][5]$b$1091 [2] }
      New connections: { $memory\num_params$rdmux[0][3][5]$b$1091 [13:10] $memory\num_params$rdmux[0][3][5]$b$1091 [8:3] $memory\num_params$rdmux[0][3][5]$b$1091 [1:0] } = { $memory\num_params$rdmux[0][3][5]$b$1091 [9] $memory\num_params$rdmux[0][3][5]$b$1091 [9] 10'0000000000 }
    Consolidated identical input bits for $mux cell $memory\num_params$rdmux[0][4][12]$1134:
      Old ports: A=14'00000000000100, B=14'xxxxxxxxxxxxxx, Y=$memory\num_params$rdmux[0][3][6]$a$1093
      New ports: A=2'10, B=2'xx, Y={ $memory\num_params$rdmux[0][3][6]$a$1093 [2] $memory\num_params$rdmux[0][3][6]$a$1093 [0] }
      New connections: { $memory\num_params$rdmux[0][3][6]$a$1093 [13:3] $memory\num_params$rdmux[0][3][6]$a$1093 [1] } = { $memory\num_params$rdmux[0][3][6]$a$1093 [0] $memory\num_params$rdmux[0][3][6]$a$1093 [0] $memory\num_params$rdmux[0][3][6]$a$1093 [0] $memory\num_params$rdmux[0][3][6]$a$1093 [0] $memory\num_params$rdmux[0][3][6]$a$1093 [0] $memory\num_params$rdmux[0][3][6]$a$1093 [0] $memory\num_params$rdmux[0][3][6]$a$1093 [0] $memory\num_params$rdmux[0][3][6]$a$1093 [0] $memory\num_params$rdmux[0][3][6]$a$1093 [0] $memory\num_params$rdmux[0][3][6]$a$1093 [0] $memory\num_params$rdmux[0][3][6]$a$1093 [0] $memory\num_params$rdmux[0][3][6]$a$1093 [0] }
    Consolidated identical input bits for $mux cell $memory\num_params$rdmux[0][4][1]$1101:
      Old ports: A=14'00000000000011, B=14'00000000000110, Y=$memory\num_params$rdmux[0][3][0]$b$1076
      New ports: A=2'01, B=2'10, Y={ $memory\num_params$rdmux[0][3][0]$b$1076 [2] $memory\num_params$rdmux[0][3][0]$b$1076 [0] }
      New connections: { $memory\num_params$rdmux[0][3][0]$b$1076 [13:3] $memory\num_params$rdmux[0][3][0]$b$1076 [1] } = 12'000000000001
    Consolidated identical input bits for $mux cell $memory\num_params$rdmux[0][4][2]$1104:
      Old ports: A=14'00000000000001, B=14'00000000000011, Y=$memory\num_params$rdmux[0][3][1]$a$1078
      New ports: A=1'0, B=1'1, Y=$memory\num_params$rdmux[0][3][1]$a$1078 [1]
      New connections: { $memory\num_params$rdmux[0][3][1]$a$1078 [13:2] $memory\num_params$rdmux[0][3][1]$a$1078 [0] } = 13'0000000000001
    Consolidated identical input bits for $mux cell $memory\num_params$rdmux[0][4][3]$1107:
      Old ports: A=14'00000000000001, B=14'00000000000010, Y=$memory\num_params$rdmux[0][3][1]$b$1079
      New ports: A=2'01, B=2'10, Y=$memory\num_params$rdmux[0][3][1]$b$1079 [1:0]
      New connections: $memory\num_params$rdmux[0][3][1]$b$1079 [13:2] = 12'000000000000
    Consolidated identical input bits for $mux cell $memory\num_params$rdmux[0][4][5]$1113:
      Old ports: A=14'00000000000001, B=14'00000000010000, Y=$memory\num_params$rdmux[0][3][2]$b$1082
      New ports: A=2'01, B=2'10, Y={ $memory\num_params$rdmux[0][3][2]$b$1082 [4] $memory\num_params$rdmux[0][3][2]$b$1082 [0] }
      New connections: { $memory\num_params$rdmux[0][3][2]$b$1082 [13:5] $memory\num_params$rdmux[0][3][2]$b$1082 [3:1] } = 12'000000000000
    Consolidated identical input bits for $mux cell $memory\num_params$rdmux[0][4][6]$1116:
      Old ports: A=14'00000000010000, B=14'00000000000001, Y=$memory\num_params$rdmux[0][3][3]$a$1084
      New ports: A=2'10, B=2'01, Y={ $memory\num_params$rdmux[0][3][3]$a$1084 [4] $memory\num_params$rdmux[0][3][3]$a$1084 [0] }
      New connections: { $memory\num_params$rdmux[0][3][3]$a$1084 [13:5] $memory\num_params$rdmux[0][3][3]$a$1084 [3:1] } = 12'000000000000
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][0]$1503:
      Old ports: A=8'00000101, B=8'00111100, Y=$memory\params$rdmux[0][5][0]$a$1408
      New ports: A=2'01, B=2'10, Y={ $memory\params$rdmux[0][5][0]$a$1408 [3] $memory\params$rdmux[0][5][0]$a$1408 [0] }
      New connections: { $memory\params$rdmux[0][5][0]$a$1408 [7:4] $memory\params$rdmux[0][5][0]$a$1408 [2:1] } = { 2'00 $memory\params$rdmux[0][5][0]$a$1408 [3] $memory\params$rdmux[0][5][0]$a$1408 [3] 2'10 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][10]$1533:
      Old ports: A=8'01101010, B=8'10001101, Y=$memory\params$rdmux[0][5][5]$a$1423
      New ports: A=2'10, B=2'01, Y=$memory\params$rdmux[0][5][5]$a$1423 [1:0]
      New connections: $memory\params$rdmux[0][5][5]$a$1423 [7:2] = { $memory\params$rdmux[0][5][5]$a$1423 [0] $memory\params$rdmux[0][5][5]$a$1423 [1] $memory\params$rdmux[0][5][5]$a$1423 [1] 2'01 $memory\params$rdmux[0][5][5]$a$1423 [0] }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][11]$1536:
      Old ports: A=8'11101110, B=8'00001111, Y=$memory\params$rdmux[0][5][5]$b$1424
      New ports: A=2'10, B=2'01, Y={ $memory\params$rdmux[0][5][5]$b$1424 [5] $memory\params$rdmux[0][5][5]$b$1424 [0] }
      New connections: { $memory\params$rdmux[0][5][5]$b$1424 [7:6] $memory\params$rdmux[0][5][5]$b$1424 [4:1] } = { $memory\params$rdmux[0][5][5]$b$1424 [5] $memory\params$rdmux[0][5][5]$b$1424 [5] 4'0111 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][12]$1539:
      Old ports: A=8'00000111, B=8'00001110, Y=$memory\params$rdmux[0][5][6]$a$1426
      New ports: A=2'01, B=2'10, Y={ $memory\params$rdmux[0][5][6]$a$1426 [3] $memory\params$rdmux[0][5][6]$a$1426 [0] }
      New connections: { $memory\params$rdmux[0][5][6]$a$1426 [7:4] $memory\params$rdmux[0][5][6]$a$1426 [2:1] } = 6'000011
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][13]$1542:
      Old ports: A=8'00001000, B=8'00000111, Y=$memory\params$rdmux[0][5][6]$b$1427
      New ports: A=2'10, B=2'01, Y={ $memory\params$rdmux[0][5][6]$b$1427 [3] $memory\params$rdmux[0][5][6]$b$1427 [0] }
      New connections: { $memory\params$rdmux[0][5][6]$b$1427 [7:4] $memory\params$rdmux[0][5][6]$b$1427 [2:1] } = { 4'0000 $memory\params$rdmux[0][5][6]$b$1427 [0] $memory\params$rdmux[0][5][6]$b$1427 [0] }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][14]$1545:
      Old ports: A=8'00010000, B=8'00000111, Y=$memory\params$rdmux[0][5][7]$a$1429
      New ports: A=2'10, B=2'01, Y={ $memory\params$rdmux[0][5][7]$a$1429 [4] $memory\params$rdmux[0][5][7]$a$1429 [0] }
      New connections: { $memory\params$rdmux[0][5][7]$a$1429 [7:5] $memory\params$rdmux[0][5][7]$a$1429 [3:1] } = { 4'0000 $memory\params$rdmux[0][5][7]$a$1429 [0] $memory\params$rdmux[0][5][7]$a$1429 [0] }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][15]$1548:
      Old ports: A=8'00000010, B=8'00000111, Y=$memory\params$rdmux[0][5][7]$b$1430
      New ports: A=1'0, B=1'1, Y=$memory\params$rdmux[0][5][7]$b$1430 [0]
      New connections: $memory\params$rdmux[0][5][7]$b$1430 [7:1] = { 5'00000 $memory\params$rdmux[0][5][7]$b$1430 [0] 1'1 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][16]$1551:
      Old ports: A=8'00001001, B=8'00001111, Y=$memory\params$rdmux[0][5][8]$a$1432
      New ports: A=1'0, B=1'1, Y=$memory\params$rdmux[0][5][8]$a$1432 [1]
      New connections: { $memory\params$rdmux[0][5][8]$a$1432 [7:2] $memory\params$rdmux[0][5][8]$a$1432 [0] } = { 5'00001 $memory\params$rdmux[0][5][8]$a$1432 [1] 1'1 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][17]$1554:
      Old ports: A=8'00100101, B=8'00110110, Y=$memory\params$rdmux[0][5][8]$b$1433
      New ports: A=2'01, B=2'10, Y=$memory\params$rdmux[0][5][8]$b$1433 [1:0]
      New connections: $memory\params$rdmux[0][5][8]$b$1433 [7:2] = { 3'001 $memory\params$rdmux[0][5][8]$b$1433 [1] 2'01 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][18]$1557:
      Old ports: A=8'00000000, B=8'00001000, Y=$memory\params$rdmux[0][5][9]$a$1435
      New ports: A=1'0, B=1'1, Y=$memory\params$rdmux[0][5][9]$a$1435 [3]
      New connections: { $memory\params$rdmux[0][5][9]$a$1435 [7:4] $memory\params$rdmux[0][5][9]$a$1435 [2:0] } = 7'0000000
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][19]$1560:
      Old ports: A=8'00000100, B=8'00010000, Y=$memory\params$rdmux[0][5][9]$b$1436
      New ports: A=2'01, B=2'10, Y={ $memory\params$rdmux[0][5][9]$b$1436 [4] $memory\params$rdmux[0][5][9]$b$1436 [2] }
      New connections: { $memory\params$rdmux[0][5][9]$b$1436 [7:5] $memory\params$rdmux[0][5][9]$b$1436 [3] $memory\params$rdmux[0][5][9]$b$1436 [1:0] } = 6'000000
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][1]$1506:
      Old ports: A=8'00111100, B=8'00000101, Y=$memory\params$rdmux[0][5][0]$b$1409
      New ports: A=2'10, B=2'01, Y={ $memory\params$rdmux[0][5][0]$b$1409 [3] $memory\params$rdmux[0][5][0]$b$1409 [0] }
      New connections: { $memory\params$rdmux[0][5][0]$b$1409 [7:4] $memory\params$rdmux[0][5][0]$b$1409 [2:1] } = { 2'00 $memory\params$rdmux[0][5][0]$b$1409 [3] $memory\params$rdmux[0][5][0]$b$1409 [3] 2'10 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][20]$1563:
      Old ports: A=8'00001010, B=8'00001101, Y=$memory\params$rdmux[0][5][10]$a$1438
      New ports: A=2'10, B=2'01, Y=$memory\params$rdmux[0][5][10]$a$1438 [1:0]
      New connections: $memory\params$rdmux[0][5][10]$a$1438 [7:2] = { 5'00001 $memory\params$rdmux[0][5][10]$a$1438 [0] }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][21]$1566:
      Old ports: A=8'00001000, B=8'00000111, Y=$memory\params$rdmux[0][5][10]$b$1439
      New ports: A=2'10, B=2'01, Y={ $memory\params$rdmux[0][5][10]$b$1439 [3] $memory\params$rdmux[0][5][10]$b$1439 [0] }
      New connections: { $memory\params$rdmux[0][5][10]$b$1439 [7:4] $memory\params$rdmux[0][5][10]$b$1439 [2:1] } = { 4'0000 $memory\params$rdmux[0][5][10]$b$1439 [0] $memory\params$rdmux[0][5][10]$b$1439 [0] }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][22]$1569:
      Old ports: A=8'00001111, B=8'00000111, Y=$memory\params$rdmux[0][5][11]$a$1441
      New ports: A=1'1, B=1'0, Y=$memory\params$rdmux[0][5][11]$a$1441 [3]
      New connections: { $memory\params$rdmux[0][5][11]$a$1441 [7:4] $memory\params$rdmux[0][5][11]$a$1441 [2:0] } = 7'0000111
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][23]$1572:
      Old ports: A=8'00000010, B=8'00000111, Y=$memory\params$rdmux[0][5][11]$b$1442
      New ports: A=1'0, B=1'1, Y=$memory\params$rdmux[0][5][11]$b$1442 [0]
      New connections: $memory\params$rdmux[0][5][11]$b$1442 [7:1] = { 5'00000 $memory\params$rdmux[0][5][11]$b$1442 [0] 1'1 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][24]$1575:
      Old ports: A=8'00001001, B=8'00001111, Y=$memory\params$rdmux[0][5][12]$a$1444
      New ports: A=1'0, B=1'1, Y=$memory\params$rdmux[0][5][12]$a$1444 [1]
      New connections: { $memory\params$rdmux[0][5][12]$a$1444 [7:2] $memory\params$rdmux[0][5][12]$a$1444 [0] } = { 5'00001 $memory\params$rdmux[0][5][12]$a$1444 [1] 1'1 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][25]$1578:
      Old ports: A=8'00100101, B=8'00110101, Y=$memory\params$rdmux[0][5][12]$b$1445
      New ports: A=1'0, B=1'1, Y=$memory\params$rdmux[0][5][12]$b$1445 [4]
      New connections: { $memory\params$rdmux[0][5][12]$b$1445 [7:5] $memory\params$rdmux[0][5][12]$b$1445 [3:0] } = 7'0010101
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][26]$1581:
      Old ports: A=8'00000000, B=8'00001001, Y=$memory\params$rdmux[0][5][13]$a$1447
      New ports: A=1'0, B=1'1, Y=$memory\params$rdmux[0][5][13]$a$1447 [0]
      New connections: $memory\params$rdmux[0][5][13]$a$1447 [7:1] = { 4'0000 $memory\params$rdmux[0][5][13]$a$1447 [0] 2'00 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][27]$1584:
      Old ports: A=8'00000100, B=8'00010000, Y=$memory\params$rdmux[0][5][13]$b$1448
      New ports: A=2'01, B=2'10, Y={ $memory\params$rdmux[0][5][13]$b$1448 [4] $memory\params$rdmux[0][5][13]$b$1448 [2] }
      New connections: { $memory\params$rdmux[0][5][13]$b$1448 [7:5] $memory\params$rdmux[0][5][13]$b$1448 [3] $memory\params$rdmux[0][5][13]$b$1448 [1:0] } = 6'000000
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][28]$1587:
      Old ports: A=8'10000000, B=8'00000101, Y=$memory\params$rdmux[0][5][14]$a$1450
      New ports: A=2'10, B=2'01, Y={ $memory\params$rdmux[0][5][14]$a$1450 [7] $memory\params$rdmux[0][5][14]$a$1450 [0] }
      New connections: $memory\params$rdmux[0][5][14]$a$1450 [6:1] = { 4'0000 $memory\params$rdmux[0][5][14]$a$1450 [0] 1'0 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][29]$1590:
      Old ports: A=8'01111000, B=8'00000000, Y=$memory\params$rdmux[0][5][14]$b$1451
      New ports: A=1'1, B=1'0, Y=$memory\params$rdmux[0][5][14]$b$1451 [3]
      New connections: { $memory\params$rdmux[0][5][14]$b$1451 [7:4] $memory\params$rdmux[0][5][14]$b$1451 [2:0] } = { 1'0 $memory\params$rdmux[0][5][14]$b$1451 [3] $memory\params$rdmux[0][5][14]$b$1451 [3] $memory\params$rdmux[0][5][14]$b$1451 [3] 3'000 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][30]$1593:
      Old ports: A=8'00011010, B=8'00000000, Y=$memory\params$rdmux[0][5][15]$a$1453
      New ports: A=1'1, B=1'0, Y=$memory\params$rdmux[0][5][15]$a$1453 [1]
      New connections: { $memory\params$rdmux[0][5][15]$a$1453 [7:2] $memory\params$rdmux[0][5][15]$a$1453 [0] } = { 3'000 $memory\params$rdmux[0][5][15]$a$1453 [1] $memory\params$rdmux[0][5][15]$a$1453 [1] 2'00 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][31]$1596:
      Old ports: A=8'01101001, B=8'00000000, Y=$memory\params$rdmux[0][5][15]$b$1454
      New ports: A=1'1, B=1'0, Y=$memory\params$rdmux[0][5][15]$b$1454 [0]
      New connections: $memory\params$rdmux[0][5][15]$b$1454 [7:1] = { 1'0 $memory\params$rdmux[0][5][15]$b$1454 [0] $memory\params$rdmux[0][5][15]$b$1454 [0] 1'0 $memory\params$rdmux[0][5][15]$b$1454 [0] 2'00 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][32]$1599:
      Old ports: A=8'00000001, B=8'00000000, Y=$memory\params$rdmux[0][5][16]$a$1456
      New ports: A=1'1, B=1'0, Y=$memory\params$rdmux[0][5][16]$a$1456 [0]
      New connections: $memory\params$rdmux[0][5][16]$a$1456 [7:1] = 7'0000000
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][33]$1602:
      Old ports: A=8'10100000, B=8'00000000, Y=$memory\params$rdmux[0][5][16]$b$1457
      New ports: A=1'1, B=1'0, Y=$memory\params$rdmux[0][5][16]$b$1457 [5]
      New connections: { $memory\params$rdmux[0][5][16]$b$1457 [7:6] $memory\params$rdmux[0][5][16]$b$1457 [4:0] } = { $memory\params$rdmux[0][5][16]$b$1457 [5] 6'000000 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][34]$1605:
      Old ports: A=8'00000001, B=8'00000000, Y=$memory\params$rdmux[0][5][17]$a$1459
      New ports: A=1'1, B=1'0, Y=$memory\params$rdmux[0][5][17]$a$1459 [0]
      New connections: $memory\params$rdmux[0][5][17]$a$1459 [7:1] = 7'0000000
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][35]$1608:
      Old ports: A=8'10100000, B=8'00000000, Y=$memory\params$rdmux[0][5][17]$b$1460
      New ports: A=1'1, B=1'0, Y=$memory\params$rdmux[0][5][17]$b$1460 [5]
      New connections: { $memory\params$rdmux[0][5][17]$b$1460 [7:6] $memory\params$rdmux[0][5][17]$b$1460 [4:0] } = { $memory\params$rdmux[0][5][17]$b$1460 [5] 6'000000 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][36]$1611:
      Old ports: A=8'00011010, B=8'00000000, Y=$memory\params$rdmux[0][5][18]$a$1462
      New ports: A=1'1, B=1'0, Y=$memory\params$rdmux[0][5][18]$a$1462 [1]
      New connections: { $memory\params$rdmux[0][5][18]$a$1462 [7:2] $memory\params$rdmux[0][5][18]$a$1462 [0] } = { 3'000 $memory\params$rdmux[0][5][18]$a$1462 [1] $memory\params$rdmux[0][5][18]$a$1462 [1] 2'00 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][37]$1614:
      Old ports: A=8'01101001, B=8'11111111, Y=$memory\params$rdmux[0][5][18]$b$1463
      New ports: A=1'0, B=1'1, Y=$memory\params$rdmux[0][5][18]$b$1463 [1]
      New connections: { $memory\params$rdmux[0][5][18]$b$1463 [7:2] $memory\params$rdmux[0][5][18]$b$1463 [0] } = { $memory\params$rdmux[0][5][18]$b$1463 [1] 2'11 $memory\params$rdmux[0][5][18]$b$1463 [1] 1'1 $memory\params$rdmux[0][5][18]$b$1463 [1] 1'1 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][38]$1617:
      Old ports: A=8'00000000, B=8'00000001, Y=$memory\params$rdmux[0][5][19]$a$1465
      New ports: A=1'0, B=1'1, Y=$memory\params$rdmux[0][5][19]$a$1465 [0]
      New connections: $memory\params$rdmux[0][5][19]$a$1465 [7:1] = 7'0000000
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][39]$1620:
      Old ports: A=8'00000000, B=8'10100000, Y=$memory\params$rdmux[0][5][19]$b$1466
      New ports: A=1'0, B=1'1, Y=$memory\params$rdmux[0][5][19]$b$1466 [5]
      New connections: { $memory\params$rdmux[0][5][19]$b$1466 [7:6] $memory\params$rdmux[0][5][19]$b$1466 [4:0] } = { $memory\params$rdmux[0][5][19]$b$1466 [5] 6'000000 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][3]$1512:
      Old ports: A=8'00000101, B=8'00111100, Y=$memory\params$rdmux[0][5][1]$b$1412
      New ports: A=2'01, B=2'10, Y={ $memory\params$rdmux[0][5][1]$b$1412 [3] $memory\params$rdmux[0][5][1]$b$1412 [0] }
      New connections: { $memory\params$rdmux[0][5][1]$b$1412 [7:4] $memory\params$rdmux[0][5][1]$b$1412 [2:1] } = { 2'00 $memory\params$rdmux[0][5][1]$b$1412 [3] $memory\params$rdmux[0][5][1]$b$1412 [3] 2'10 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][40]$1623:
      Old ports: A=8'00000000, B=8'00011010, Y=$memory\params$rdmux[0][5][20]$a$1468
      New ports: A=1'0, B=1'1, Y=$memory\params$rdmux[0][5][20]$a$1468 [1]
      New connections: { $memory\params$rdmux[0][5][20]$a$1468 [7:2] $memory\params$rdmux[0][5][20]$a$1468 [0] } = { 3'000 $memory\params$rdmux[0][5][20]$a$1468 [1] $memory\params$rdmux[0][5][20]$a$1468 [1] 2'00 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][41]$1626:
      Old ports: A=8'00000000, B=8'01101001, Y=$memory\params$rdmux[0][5][20]$b$1469
      New ports: A=1'0, B=1'1, Y=$memory\params$rdmux[0][5][20]$b$1469 [0]
      New connections: $memory\params$rdmux[0][5][20]$b$1469 [7:1] = { 1'0 $memory\params$rdmux[0][5][20]$b$1469 [0] $memory\params$rdmux[0][5][20]$b$1469 [0] 1'0 $memory\params$rdmux[0][5][20]$b$1469 [0] 2'00 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][4]$1515:
      Old ports: A=8'00111100, B=8'00000101, Y=$memory\params$rdmux[0][5][2]$a$1414
      New ports: A=2'10, B=2'01, Y={ $memory\params$rdmux[0][5][2]$a$1414 [3] $memory\params$rdmux[0][5][2]$a$1414 [0] }
      New connections: { $memory\params$rdmux[0][5][2]$a$1414 [7:4] $memory\params$rdmux[0][5][2]$a$1414 [2:1] } = { 2'00 $memory\params$rdmux[0][5][2]$a$1414 [3] $memory\params$rdmux[0][5][2]$a$1414 [3] 2'10 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][6]$1521:
      Old ports: A=8'00000011, B=8'10101011, Y=$memory\params$rdmux[0][5][3]$a$1417
      New ports: A=1'0, B=1'1, Y=$memory\params$rdmux[0][5][3]$a$1417 [3]
      New connections: { $memory\params$rdmux[0][5][3]$a$1417 [7:4] $memory\params$rdmux[0][5][3]$a$1417 [2:0] } = { $memory\params$rdmux[0][5][3]$a$1417 [3] 1'0 $memory\params$rdmux[0][5][3]$a$1417 [3] 4'0011 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][7]$1524:
      Old ports: A=8'00001011, B=8'00000100, Y=$memory\params$rdmux[0][5][3]$b$1418
      New ports: A=2'01, B=2'10, Y={ $memory\params$rdmux[0][5][3]$b$1418 [2] $memory\params$rdmux[0][5][3]$b$1418 [0] }
      New connections: { $memory\params$rdmux[0][5][3]$b$1418 [7:3] $memory\params$rdmux[0][5][3]$b$1418 [1] } = { 4'0000 $memory\params$rdmux[0][5][3]$b$1418 [0] $memory\params$rdmux[0][5][3]$b$1418 [0] }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][8]$1527:
      Old ports: A=8'11000101, B=8'00001101, Y=$memory\params$rdmux[0][5][4]$a$1420
      New ports: A=2'10, B=2'01, Y={ $memory\params$rdmux[0][5][4]$a$1420 [6] $memory\params$rdmux[0][5][4]$a$1420 [3] }
      New connections: { $memory\params$rdmux[0][5][4]$a$1420 [7] $memory\params$rdmux[0][5][4]$a$1420 [5:4] $memory\params$rdmux[0][5][4]$a$1420 [2:0] } = { $memory\params$rdmux[0][5][4]$a$1420 [6] 5'00101 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][9]$1530:
      Old ports: A=8'00000000, B=8'10001101, Y=$memory\params$rdmux[0][5][4]$b$1421
      New ports: A=1'0, B=1'1, Y=$memory\params$rdmux[0][5][4]$b$1421 [0]
      New connections: $memory\params$rdmux[0][5][4]$b$1421 [7:1] = { $memory\params$rdmux[0][5][4]$b$1421 [0] 3'000 $memory\params$rdmux[0][5][4]$b$1421 [0] $memory\params$rdmux[0][5][4]$b$1421 [0] 1'0 }
  Optimizing cells in module \demo.
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][3][0]$931:
      Old ports: A=$memory\cmd$rdmux[0][3][0]$a$932, B=$memory\cmd$rdmux[0][3][0]$b$933, Y=$memory\cmd$rdmux[0][2][0]$a$920
      New ports: A={ $memory\cmd$rdmux[0][3][0]$a$932 [5] 2'01 }, B={ 2'11 $memory\cmd$rdmux[0][3][0]$b$933 [0] }, Y={ $memory\cmd$rdmux[0][2][0]$a$920 [5] $memory\cmd$rdmux[0][2][0]$a$920 [1:0] }
      New connections: { $memory\cmd$rdmux[0][2][0]$a$920 [7:6] $memory\cmd$rdmux[0][2][0]$a$920 [4:2] } = { $memory\cmd$rdmux[0][2][0]$a$920 [5] 4'0100 }
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][3][1]$934:
      Old ports: A=$memory\cmd$rdmux[0][3][1]$a$935, B=$memory\cmd$rdmux[0][3][1]$b$936, Y=$memory\cmd$rdmux[0][2][0]$b$921
      New ports: A={ $memory\cmd$rdmux[0][3][1]$a$935 [6] $memory\cmd$rdmux[0][3][1]$a$935 [2] 2'00 }, B={ 2'10 $memory\cmd$rdmux[0][3][1]$b$936 [1:0] }, Y={ $memory\cmd$rdmux[0][2][0]$b$921 [6] $memory\cmd$rdmux[0][2][0]$b$921 [2:0] }
      New connections: { $memory\cmd$rdmux[0][2][0]$b$921 [7] $memory\cmd$rdmux[0][2][0]$b$921 [5:3] } = { 1'1 $memory\cmd$rdmux[0][2][0]$b$921 [2] $memory\cmd$rdmux[0][2][0]$b$921 [2] 1'0 }
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][3][2]$937:
      Old ports: A=$memory\cmd$rdmux[0][3][2]$a$938, B=$memory\cmd$rdmux[0][3][2]$b$939, Y=$memory\cmd$rdmux[0][2][1]$a$923
      New ports: A={ 1'0 $memory\cmd$rdmux[0][3][2]$a$938 [2] $memory\cmd$rdmux[0][3][2]$a$938 [0] $memory\cmd$rdmux[0][3][2]$a$938 [0] }, B={ $memory\cmd$rdmux[0][3][2]$b$939 [5] $memory\cmd$rdmux[0][3][2]$b$939 [0] 1'0 $memory\cmd$rdmux[0][3][2]$b$939 [0] }, Y={ $memory\cmd$rdmux[0][2][1]$a$923 [5] $memory\cmd$rdmux[0][2][1]$a$923 [2:0] }
      New connections: { $memory\cmd$rdmux[0][2][1]$a$923 [7:6] $memory\cmd$rdmux[0][2][1]$a$923 [4:3] } = 4'1100
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][3][3]$940:
      Old ports: A=$memory\cmd$rdmux[0][3][3]$a$941, B=$memory\cmd$rdmux[0][3][3]$b$942, Y=$memory\cmd$rdmux[0][2][1]$b$924
      New ports: A={ 1'1 $memory\cmd$rdmux[0][3][3]$a$941 [2] $memory\cmd$rdmux[0][3][3]$a$941 [2] $memory\cmd$rdmux[0][3][3]$a$941 [2] 1'0 $memory\cmd$rdmux[0][3][3]$a$941 [0] }, B={ 2'01 $memory\cmd$rdmux[0][3][3]$b$942 [3:2] 2'10 }, Y={ $memory\cmd$rdmux[0][2][1]$b$924 [6] $memory\cmd$rdmux[0][2][1]$b$924 [4:0] }
      New connections: { $memory\cmd$rdmux[0][2][1]$b$924 [7] $memory\cmd$rdmux[0][2][1]$b$924 [5] } = { $memory\cmd$rdmux[0][2][1]$b$924 [6] 1'1 }
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][3][4]$943:
      Old ports: A=$memory\cmd$rdmux[0][3][4]$a$944, B=$memory\cmd$rdmux[0][3][4]$b$945, Y=$memory\cmd$rdmux[0][2][2]$a$926
      New ports: A={ $memory\cmd$rdmux[0][3][4]$a$944 [3] 2'01 }, B={ 2'11 $memory\cmd$rdmux[0][3][4]$b$945 [0] }, Y={ $memory\cmd$rdmux[0][2][2]$a$926 [3] $memory\cmd$rdmux[0][2][2]$a$926 [1:0] }
      New connections: { $memory\cmd$rdmux[0][2][2]$a$926 [7:4] $memory\cmd$rdmux[0][2][2]$a$926 [2] } = 5'00100
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][3][5]$946:
      Old ports: A=$memory\cmd$rdmux[0][3][5]$a$947, B=$memory\cmd$rdmux[0][3][5]$b$948, Y=$memory\cmd$rdmux[0][2][2]$b$927
      New ports: A={ $memory\cmd$rdmux[0][3][5]$a$947 [2:1] 1'0 }, B={ $memory\cmd$rdmux[0][3][5]$b$948 [2] $memory\cmd$rdmux[0][3][5]$b$948 [0] $memory\cmd$rdmux[0][3][5]$b$948 [0] }, Y=$memory\cmd$rdmux[0][2][2]$b$927 [2:0]
      New connections: $memory\cmd$rdmux[0][2][2]$b$927 [7:3] = 5'00101
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][3][6]$949:
      Old ports: A=$memory\cmd$rdmux[0][3][6]$a$950, B=$memory\cmd$rdmux[0][3][6]$b$951, Y=$memory\cmd$rdmux[0][2][3]$a$929
      New ports: A={ 2'01 $memory\cmd$rdmux[0][3][6]$a$950 [0] }, B={ $memory\cmd$rdmux[0][3][6]$b$951 [0] $memory\cmd$rdmux[0][3][6]$b$951 [0] $memory\cmd$rdmux[0][3][6]$b$951 [0] }, Y=$memory\cmd$rdmux[0][2][3]$a$929 [2:0]
      New connections: $memory\cmd$rdmux[0][2][3]$a$929 [7:3] = { $memory\cmd$rdmux[0][2][3]$a$929 [2] $memory\cmd$rdmux[0][2][3]$a$929 [2:1] $memory\cmd$rdmux[0][2][3]$a$929 [2:1] }
    Consolidated identical input bits for $mux cell $memory\num_params$rdmux[0][3][0]$1074:
      Old ports: A=$memory\num_params$rdmux[0][3][0]$a$1075, B=$memory\num_params$rdmux[0][3][0]$b$1076, Y=$memory\num_params$rdmux[0][2][0]$a$1063
      New ports: A={ 1'0 $memory\num_params$rdmux[0][3][0]$a$1075 [0] $memory\num_params$rdmux[0][3][0]$a$1075 [0] }, B={ $memory\num_params$rdmux[0][3][0]$b$1076 [2] 1'1 $memory\num_params$rdmux[0][3][0]$b$1076 [0] }, Y=$memory\num_params$rdmux[0][2][0]$a$1063 [2:0]
      New connections: $memory\num_params$rdmux[0][2][0]$a$1063 [13:3] = 11'00000000000
    Consolidated identical input bits for $mux cell $memory\num_params$rdmux[0][3][1]$1077:
      Old ports: A=$memory\num_params$rdmux[0][3][1]$a$1078, B=$memory\num_params$rdmux[0][3][1]$b$1079, Y=$memory\num_params$rdmux[0][2][0]$b$1064
      New ports: A={ $memory\num_params$rdmux[0][3][1]$a$1078 [1] 1'1 }, B=$memory\num_params$rdmux[0][3][1]$b$1079 [1:0], Y=$memory\num_params$rdmux[0][2][0]$b$1064 [1:0]
      New connections: $memory\num_params$rdmux[0][2][0]$b$1064 [13:2] = 12'000000000000
    Consolidated identical input bits for $mux cell $memory\num_params$rdmux[0][3][2]$1080:
      Old ports: A=$memory\num_params$rdmux[0][3][2]$a$1081, B=$memory\num_params$rdmux[0][3][2]$b$1082, Y=$memory\num_params$rdmux[0][2][1]$a$1066
      New ports: A=3'010, B={ $memory\num_params$rdmux[0][3][2]$b$1082 [4] 1'0 $memory\num_params$rdmux[0][3][2]$b$1082 [0] }, Y={ $memory\num_params$rdmux[0][2][1]$a$1066 [4] $memory\num_params$rdmux[0][2][1]$a$1066 [1:0] }
      New connections: { $memory\num_params$rdmux[0][2][1]$a$1066 [13:5] $memory\num_params$rdmux[0][2][1]$a$1066 [3:2] } = 11'00000000000
    Consolidated identical input bits for $mux cell $memory\num_params$rdmux[0][3][3]$1083:
      Old ports: A=$memory\num_params$rdmux[0][3][3]$a$1084, B=14'00000000000001, Y=$memory\num_params$rdmux[0][2][1]$b$1067
      New ports: A={ $memory\num_params$rdmux[0][3][3]$a$1084 [4] $memory\num_params$rdmux[0][3][3]$a$1084 [0] }, B=2'01, Y={ $memory\num_params$rdmux[0][2][1]$b$1067 [4] $memory\num_params$rdmux[0][2][1]$b$1067 [0] }
      New connections: { $memory\num_params$rdmux[0][2][1]$b$1067 [13:5] $memory\num_params$rdmux[0][2][1]$b$1067 [3:1] } = 12'000000000000
    Consolidated identical input bits for $mux cell $memory\num_params$rdmux[0][3][5]$1089:
      Old ports: A=$memory\num_params$rdmux[0][3][5]$a$1090, B=$memory\num_params$rdmux[0][3][5]$b$1091, Y=$memory\num_params$rdmux[0][2][2]$b$1070
      New ports: A={ 1'0 $memory\num_params$rdmux[0][3][5]$a$1090 [2] }, B={ $memory\num_params$rdmux[0][3][5]$b$1091 [9] $memory\num_params$rdmux[0][3][5]$b$1091 [2] }, Y={ $memory\num_params$rdmux[0][2][2]$b$1070 [9] $memory\num_params$rdmux[0][2][2]$b$1070 [2] }
      New connections: { $memory\num_params$rdmux[0][2][2]$b$1070 [13:10] $memory\num_params$rdmux[0][2][2]$b$1070 [8:3] $memory\num_params$rdmux[0][2][2]$b$1070 [1:0] } = { $memory\num_params$rdmux[0][2][2]$b$1070 [9] $memory\num_params$rdmux[0][2][2]$b$1070 [9] 10'0000000000 }
    Consolidated identical input bits for $mux cell $memory\num_params$rdmux[0][3][6]$1092:
      Old ports: A=$memory\num_params$rdmux[0][3][6]$a$1093, B=14'xxxxxxxxxxxxxx, Y=$memory\num_params$rdmux[0][2][3]$a$1072
      New ports: A={ $memory\num_params$rdmux[0][3][6]$a$1093 [2] $memory\num_params$rdmux[0][3][6]$a$1093 [0] }, B=2'xx, Y={ $memory\num_params$rdmux[0][2][3]$a$1072 [2] $memory\num_params$rdmux[0][2][3]$a$1072 [0] }
      New connections: { $memory\num_params$rdmux[0][2][3]$a$1072 [13:3] $memory\num_params$rdmux[0][2][3]$a$1072 [1] } = { $memory\num_params$rdmux[0][2][3]$a$1072 [0] $memory\num_params$rdmux[0][2][3]$a$1072 [0] $memory\num_params$rdmux[0][2][3]$a$1072 [0] $memory\num_params$rdmux[0][2][3]$a$1072 [0] $memory\num_params$rdmux[0][2][3]$a$1072 [0] $memory\num_params$rdmux[0][2][3]$a$1072 [0] $memory\num_params$rdmux[0][2][3]$a$1072 [0] $memory\num_params$rdmux[0][2][3]$a$1072 [0] $memory\num_params$rdmux[0][2][3]$a$1072 [0] $memory\num_params$rdmux[0][2][3]$a$1072 [0] $memory\num_params$rdmux[0][2][3]$a$1072 [0] $memory\num_params$rdmux[0][2][3]$a$1072 [0] }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][0]$1407:
      Old ports: A=$memory\params$rdmux[0][5][0]$a$1408, B=$memory\params$rdmux[0][5][0]$b$1409, Y=$memory\params$rdmux[0][4][0]$a$1360
      New ports: A={ $memory\params$rdmux[0][5][0]$a$1408 [3] $memory\params$rdmux[0][5][0]$a$1408 [0] }, B={ $memory\params$rdmux[0][5][0]$b$1409 [3] $memory\params$rdmux[0][5][0]$b$1409 [0] }, Y={ $memory\params$rdmux[0][4][0]$a$1360 [3] $memory\params$rdmux[0][4][0]$a$1360 [0] }
      New connections: { $memory\params$rdmux[0][4][0]$a$1360 [7:4] $memory\params$rdmux[0][4][0]$a$1360 [2:1] } = { 2'00 $memory\params$rdmux[0][4][0]$a$1360 [3] $memory\params$rdmux[0][4][0]$a$1360 [3] 2'10 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][10]$1437:
      Old ports: A=$memory\params$rdmux[0][5][10]$a$1438, B=$memory\params$rdmux[0][5][10]$b$1439, Y=$memory\params$rdmux[0][4][5]$a$1375
      New ports: A={ 1'1 $memory\params$rdmux[0][5][10]$a$1438 [1:0] }, B={ $memory\params$rdmux[0][5][10]$b$1439 [3] $memory\params$rdmux[0][5][10]$b$1439 [0] $memory\params$rdmux[0][5][10]$b$1439 [0] }, Y={ $memory\params$rdmux[0][4][5]$a$1375 [3] $memory\params$rdmux[0][4][5]$a$1375 [1:0] }
      New connections: { $memory\params$rdmux[0][4][5]$a$1375 [7:4] $memory\params$rdmux[0][4][5]$a$1375 [2] } = { 4'0000 $memory\params$rdmux[0][4][5]$a$1375 [0] }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][11]$1440:
      Old ports: A=$memory\params$rdmux[0][5][11]$a$1441, B=$memory\params$rdmux[0][5][11]$b$1442, Y=$memory\params$rdmux[0][4][5]$b$1376
      New ports: A={ $memory\params$rdmux[0][5][11]$a$1441 [3] 1'1 }, B={ 1'0 $memory\params$rdmux[0][5][11]$b$1442 [0] }, Y={ $memory\params$rdmux[0][4][5]$b$1376 [3] $memory\params$rdmux[0][4][5]$b$1376 [0] }
      New connections: { $memory\params$rdmux[0][4][5]$b$1376 [7:4] $memory\params$rdmux[0][4][5]$b$1376 [2:1] } = { 4'0000 $memory\params$rdmux[0][4][5]$b$1376 [0] 1'1 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][12]$1443:
      Old ports: A=$memory\params$rdmux[0][5][12]$a$1444, B=$memory\params$rdmux[0][5][12]$b$1445, Y=$memory\params$rdmux[0][4][6]$a$1378
      New ports: A={ 3'001 $memory\params$rdmux[0][5][12]$a$1444 [1] $memory\params$rdmux[0][5][12]$a$1444 [1] }, B={ 1'1 $memory\params$rdmux[0][5][12]$b$1445 [4] 3'010 }, Y=$memory\params$rdmux[0][4][6]$a$1378 [5:1]
      New connections: { $memory\params$rdmux[0][4][6]$a$1378 [7:6] $memory\params$rdmux[0][4][6]$a$1378 [0] } = 3'001
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][13]$1446:
      Old ports: A=$memory\params$rdmux[0][5][13]$a$1447, B=$memory\params$rdmux[0][5][13]$b$1448, Y=$memory\params$rdmux[0][4][6]$b$1379
      New ports: A={ 2'00 $memory\params$rdmux[0][5][13]$a$1447 [0] }, B={ $memory\params$rdmux[0][5][13]$b$1448 [4] $memory\params$rdmux[0][5][13]$b$1448 [2] 1'0 }, Y={ $memory\params$rdmux[0][4][6]$b$1379 [4] $memory\params$rdmux[0][4][6]$b$1379 [2] $memory\params$rdmux[0][4][6]$b$1379 [0] }
      New connections: { $memory\params$rdmux[0][4][6]$b$1379 [7:5] $memory\params$rdmux[0][4][6]$b$1379 [3] $memory\params$rdmux[0][4][6]$b$1379 [1] } = { 3'000 $memory\params$rdmux[0][4][6]$b$1379 [0] 1'0 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][14]$1449:
      Old ports: A=$memory\params$rdmux[0][5][14]$a$1450, B=$memory\params$rdmux[0][5][14]$b$1451, Y=$memory\params$rdmux[0][4][7]$a$1381
      New ports: A={ $memory\params$rdmux[0][5][14]$a$1450 [7] 1'0 $memory\params$rdmux[0][5][14]$a$1450 [0] }, B={ 1'0 $memory\params$rdmux[0][5][14]$b$1451 [3] 1'0 }, Y={ $memory\params$rdmux[0][4][7]$a$1381 [7] $memory\params$rdmux[0][4][7]$a$1381 [3] $memory\params$rdmux[0][4][7]$a$1381 [0] }
      New connections: { $memory\params$rdmux[0][4][7]$a$1381 [6:4] $memory\params$rdmux[0][4][7]$a$1381 [2:1] } = { $memory\params$rdmux[0][4][7]$a$1381 [3] $memory\params$rdmux[0][4][7]$a$1381 [3] $memory\params$rdmux[0][4][7]$a$1381 [3] $memory\params$rdmux[0][4][7]$a$1381 [0] 1'0 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][15]$1452:
      Old ports: A=$memory\params$rdmux[0][5][15]$a$1453, B=$memory\params$rdmux[0][5][15]$b$1454, Y=$memory\params$rdmux[0][4][7]$b$1382
      New ports: A={ $memory\params$rdmux[0][5][15]$a$1453 [1] $memory\params$rdmux[0][5][15]$a$1453 [1] 1'0 }, B={ $memory\params$rdmux[0][5][15]$b$1454 [0] 1'0 $memory\params$rdmux[0][5][15]$b$1454 [0] }, Y={ $memory\params$rdmux[0][4][7]$b$1382 [3] $memory\params$rdmux[0][4][7]$b$1382 [1:0] }
      New connections: { $memory\params$rdmux[0][4][7]$b$1382 [7:4] $memory\params$rdmux[0][4][7]$b$1382 [2] } = { 1'0 $memory\params$rdmux[0][4][7]$b$1382 [0] $memory\params$rdmux[0][4][7]$b$1382 [0] $memory\params$rdmux[0][4][7]$b$1382 [1] 1'0 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][16]$1455:
      Old ports: A=$memory\params$rdmux[0][5][16]$a$1456, B=$memory\params$rdmux[0][5][16]$b$1457, Y=$memory\params$rdmux[0][4][8]$a$1384
      New ports: A={ 1'0 $memory\params$rdmux[0][5][16]$a$1456 [0] }, B={ $memory\params$rdmux[0][5][16]$b$1457 [5] 1'0 }, Y={ $memory\params$rdmux[0][4][8]$a$1384 [5] $memory\params$rdmux[0][4][8]$a$1384 [0] }
      New connections: { $memory\params$rdmux[0][4][8]$a$1384 [7:6] $memory\params$rdmux[0][4][8]$a$1384 [4:1] } = { $memory\params$rdmux[0][4][8]$a$1384 [5] 5'00000 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][17]$1458:
      Old ports: A=$memory\params$rdmux[0][5][17]$a$1459, B=$memory\params$rdmux[0][5][17]$b$1460, Y=$memory\params$rdmux[0][4][8]$b$1385
      New ports: A={ 1'0 $memory\params$rdmux[0][5][17]$a$1459 [0] }, B={ $memory\params$rdmux[0][5][17]$b$1460 [5] 1'0 }, Y={ $memory\params$rdmux[0][4][8]$b$1385 [5] $memory\params$rdmux[0][4][8]$b$1385 [0] }
      New connections: { $memory\params$rdmux[0][4][8]$b$1385 [7:6] $memory\params$rdmux[0][4][8]$b$1385 [4:1] } = { $memory\params$rdmux[0][4][8]$b$1385 [5] 5'00000 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][18]$1461:
      Old ports: A=$memory\params$rdmux[0][5][18]$a$1462, B=$memory\params$rdmux[0][5][18]$b$1463, Y=$memory\params$rdmux[0][4][9]$a$1387
      New ports: A={ $memory\params$rdmux[0][5][18]$a$1462 [1] 1'0 $memory\params$rdmux[0][5][18]$a$1462 [1] 1'0 }, B={ 1'1 $memory\params$rdmux[0][5][18]$b$1463 [1] $memory\params$rdmux[0][5][18]$b$1463 [1] 1'1 }, Y=$memory\params$rdmux[0][4][9]$a$1387 [3:0]
      New connections: $memory\params$rdmux[0][4][9]$a$1387 [7:4] = { $memory\params$rdmux[0][4][9]$a$1387 [2] $memory\params$rdmux[0][4][9]$a$1387 [0] $memory\params$rdmux[0][4][9]$a$1387 [0] $memory\params$rdmux[0][4][9]$a$1387 [1] }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][19]$1464:
      Old ports: A=$memory\params$rdmux[0][5][19]$a$1465, B=$memory\params$rdmux[0][5][19]$b$1466, Y=$memory\params$rdmux[0][4][9]$b$1388
      New ports: A={ 1'0 $memory\params$rdmux[0][5][19]$a$1465 [0] }, B={ $memory\params$rdmux[0][5][19]$b$1466 [5] 1'0 }, Y={ $memory\params$rdmux[0][4][9]$b$1388 [5] $memory\params$rdmux[0][4][9]$b$1388 [0] }
      New connections: { $memory\params$rdmux[0][4][9]$b$1388 [7:6] $memory\params$rdmux[0][4][9]$b$1388 [4:1] } = { $memory\params$rdmux[0][4][9]$b$1388 [5] 5'00000 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][1]$1410:
      Old ports: A=$memory\params$rdmux[0][5][1]$a$1411, B=$memory\params$rdmux[0][5][1]$b$1412, Y=$memory\params$rdmux[0][4][0]$b$1361
      New ports: A=2'10, B={ $memory\params$rdmux[0][5][1]$b$1412 [3] $memory\params$rdmux[0][5][1]$b$1412 [0] }, Y={ $memory\params$rdmux[0][4][0]$b$1361 [3] $memory\params$rdmux[0][4][0]$b$1361 [0] }
      New connections: { $memory\params$rdmux[0][4][0]$b$1361 [7:4] $memory\params$rdmux[0][4][0]$b$1361 [2:1] } = { 2'00 $memory\params$rdmux[0][4][0]$b$1361 [3] $memory\params$rdmux[0][4][0]$b$1361 [3] 2'10 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][20]$1467:
      Old ports: A=$memory\params$rdmux[0][5][20]$a$1468, B=$memory\params$rdmux[0][5][20]$b$1469, Y=$memory\params$rdmux[0][4][10]$a$1390
      New ports: A={ $memory\params$rdmux[0][5][20]$a$1468 [1] $memory\params$rdmux[0][5][20]$a$1468 [1] 1'0 }, B={ $memory\params$rdmux[0][5][20]$b$1469 [0] 1'0 $memory\params$rdmux[0][5][20]$b$1469 [0] }, Y={ $memory\params$rdmux[0][4][10]$a$1390 [3] $memory\params$rdmux[0][4][10]$a$1390 [1:0] }
      New connections: { $memory\params$rdmux[0][4][10]$a$1390 [7:4] $memory\params$rdmux[0][4][10]$a$1390 [2] } = { 1'0 $memory\params$rdmux[0][4][10]$a$1390 [0] $memory\params$rdmux[0][4][10]$a$1390 [0] $memory\params$rdmux[0][4][10]$a$1390 [1] 1'0 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][2]$1413:
      Old ports: A=$memory\params$rdmux[0][5][2]$a$1414, B=8'00111100, Y=$memory\params$rdmux[0][4][1]$a$1363
      New ports: A={ $memory\params$rdmux[0][5][2]$a$1414 [3] $memory\params$rdmux[0][5][2]$a$1414 [0] }, B=2'10, Y={ $memory\params$rdmux[0][4][1]$a$1363 [3] $memory\params$rdmux[0][4][1]$a$1363 [0] }
      New connections: { $memory\params$rdmux[0][4][1]$a$1363 [7:4] $memory\params$rdmux[0][4][1]$a$1363 [2:1] } = { 2'00 $memory\params$rdmux[0][4][1]$a$1363 [3] $memory\params$rdmux[0][4][1]$a$1363 [3] 2'10 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][3]$1416:
      Old ports: A=$memory\params$rdmux[0][5][3]$a$1417, B=$memory\params$rdmux[0][5][3]$b$1418, Y=$memory\params$rdmux[0][4][1]$b$1364
      New ports: A={ $memory\params$rdmux[0][5][3]$a$1417 [3] $memory\params$rdmux[0][5][3]$a$1417 [3] 2'01 }, B={ 1'0 $memory\params$rdmux[0][5][3]$b$1418 [0] $memory\params$rdmux[0][5][3]$b$1418 [2] $memory\params$rdmux[0][5][3]$b$1418 [0] }, Y={ $memory\params$rdmux[0][4][1]$b$1364 [5] $memory\params$rdmux[0][4][1]$b$1364 [3:2] $memory\params$rdmux[0][4][1]$b$1364 [0] }
      New connections: { $memory\params$rdmux[0][4][1]$b$1364 [7:6] $memory\params$rdmux[0][4][1]$b$1364 [4] $memory\params$rdmux[0][4][1]$b$1364 [1] } = { $memory\params$rdmux[0][4][1]$b$1364 [5] 2'00 $memory\params$rdmux[0][4][1]$b$1364 [0] }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][4]$1419:
      Old ports: A=$memory\params$rdmux[0][5][4]$a$1420, B=$memory\params$rdmux[0][5][4]$b$1421, Y=$memory\params$rdmux[0][4][2]$a$1366
      New ports: A={ $memory\params$rdmux[0][5][4]$a$1420 [6] $memory\params$rdmux[0][5][4]$a$1420 [6] $memory\params$rdmux[0][5][4]$a$1420 [3] 1'1 }, B={ $memory\params$rdmux[0][5][4]$b$1421 [0] 1'0 $memory\params$rdmux[0][5][4]$b$1421 [0] $memory\params$rdmux[0][5][4]$b$1421 [0] }, Y={ $memory\params$rdmux[0][4][2]$a$1366 [7:6] $memory\params$rdmux[0][4][2]$a$1366 [3] $memory\params$rdmux[0][4][2]$a$1366 [0] }
      New connections: { $memory\params$rdmux[0][4][2]$a$1366 [5:4] $memory\params$rdmux[0][4][2]$a$1366 [2:1] } = { 2'00 $memory\params$rdmux[0][4][2]$a$1366 [0] 1'0 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][5]$1422:
      Old ports: A=$memory\params$rdmux[0][5][5]$a$1423, B=$memory\params$rdmux[0][5][5]$b$1424, Y=$memory\params$rdmux[0][4][2]$b$1367
      New ports: A={ $memory\params$rdmux[0][5][5]$a$1423 [0] $memory\params$rdmux[0][5][5]$a$1423 [1:0] $memory\params$rdmux[0][5][5]$a$1423 [1:0] }, B={ $memory\params$rdmux[0][5][5]$b$1424 [5] $memory\params$rdmux[0][5][5]$b$1424 [5] 2'11 $memory\params$rdmux[0][5][5]$b$1424 [0] }, Y={ $memory\params$rdmux[0][4][2]$b$1367 [7] $memory\params$rdmux[0][4][2]$b$1367 [5] $memory\params$rdmux[0][4][2]$b$1367 [2:0] }
      New connections: { $memory\params$rdmux[0][4][2]$b$1367 [6] $memory\params$rdmux[0][4][2]$b$1367 [4:3] } = { $memory\params$rdmux[0][4][2]$b$1367 [5] 2'01 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][6]$1425:
      Old ports: A=$memory\params$rdmux[0][5][6]$a$1426, B=$memory\params$rdmux[0][5][6]$b$1427, Y=$memory\params$rdmux[0][4][3]$a$1369
      New ports: A={ $memory\params$rdmux[0][5][6]$a$1426 [3] 1'1 $memory\params$rdmux[0][5][6]$a$1426 [0] }, B={ $memory\params$rdmux[0][5][6]$b$1427 [3] $memory\params$rdmux[0][5][6]$b$1427 [0] $memory\params$rdmux[0][5][6]$b$1427 [0] }, Y={ $memory\params$rdmux[0][4][3]$a$1369 [3] $memory\params$rdmux[0][4][3]$a$1369 [1:0] }
      New connections: { $memory\params$rdmux[0][4][3]$a$1369 [7:4] $memory\params$rdmux[0][4][3]$a$1369 [2] } = { 4'0000 $memory\params$rdmux[0][4][3]$a$1369 [1] }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][7]$1428:
      Old ports: A=$memory\params$rdmux[0][5][7]$a$1429, B=$memory\params$rdmux[0][5][7]$b$1430, Y=$memory\params$rdmux[0][4][3]$b$1370
      New ports: A={ $memory\params$rdmux[0][5][7]$a$1429 [4] $memory\params$rdmux[0][5][7]$a$1429 [0] $memory\params$rdmux[0][5][7]$a$1429 [0] }, B={ 2'01 $memory\params$rdmux[0][5][7]$b$1430 [0] }, Y={ $memory\params$rdmux[0][4][3]$b$1370 [4] $memory\params$rdmux[0][4][3]$b$1370 [1:0] }
      New connections: { $memory\params$rdmux[0][4][3]$b$1370 [7:5] $memory\params$rdmux[0][4][3]$b$1370 [3:2] } = { 4'0000 $memory\params$rdmux[0][4][3]$b$1370 [0] }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][8]$1431:
      Old ports: A=$memory\params$rdmux[0][5][8]$a$1432, B=$memory\params$rdmux[0][5][8]$b$1433, Y=$memory\params$rdmux[0][4][4]$a$1372
      New ports: A={ 3'001 $memory\params$rdmux[0][5][8]$a$1432 [1] $memory\params$rdmux[0][5][8]$a$1432 [1] 1'1 }, B={ 1'1 $memory\params$rdmux[0][5][8]$b$1433 [1] 2'01 $memory\params$rdmux[0][5][8]$b$1433 [1:0] }, Y=$memory\params$rdmux[0][4][4]$a$1372 [5:0]
      New connections: $memory\params$rdmux[0][4][4]$a$1372 [7:6] = 2'00
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][9]$1434:
      Old ports: A=$memory\params$rdmux[0][5][9]$a$1435, B=$memory\params$rdmux[0][5][9]$b$1436, Y=$memory\params$rdmux[0][4][4]$b$1373
      New ports: A={ 1'0 $memory\params$rdmux[0][5][9]$a$1435 [3] 1'0 }, B={ $memory\params$rdmux[0][5][9]$b$1436 [4] 1'0 $memory\params$rdmux[0][5][9]$b$1436 [2] }, Y=$memory\params$rdmux[0][4][4]$b$1373 [4:2]
      New connections: { $memory\params$rdmux[0][4][4]$b$1373 [7:5] $memory\params$rdmux[0][4][4]$b$1373 [1:0] } = 5'00000
  Optimizing cells in module \demo.
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][2][0]$919:
      Old ports: A=$memory\cmd$rdmux[0][2][0]$a$920, B=$memory\cmd$rdmux[0][2][0]$b$921, Y=$memory\cmd$rdmux[0][1][0]$a$914
      New ports: A={ $memory\cmd$rdmux[0][2][0]$a$920 [5] 1'0 $memory\cmd$rdmux[0][2][0]$a$920 [5] 2'10 $memory\cmd$rdmux[0][2][0]$a$920 [1:0] }, B={ 1'1 $memory\cmd$rdmux[0][2][0]$b$921 [6] $memory\cmd$rdmux[0][2][0]$b$921 [2] $memory\cmd$rdmux[0][2][0]$b$921 [2] $memory\cmd$rdmux[0][2][0]$b$921 [2:0] }, Y={ $memory\cmd$rdmux[0][1][0]$a$914 [7:4] $memory\cmd$rdmux[0][1][0]$a$914 [2:0] }
      New connections: $memory\cmd$rdmux[0][1][0]$a$914 [3] = 1'0
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][2][1]$922:
      Old ports: A=$memory\cmd$rdmux[0][2][1]$a$923, B=$memory\cmd$rdmux[0][2][1]$b$924, Y=$memory\cmd$rdmux[0][1][0]$b$915
      New ports: A={ 1'1 $memory\cmd$rdmux[0][2][1]$a$923 [5] 2'00 $memory\cmd$rdmux[0][2][1]$a$923 [2:0] }, B={ $memory\cmd$rdmux[0][2][1]$b$924 [6] 1'1 $memory\cmd$rdmux[0][2][1]$b$924 [4:0] }, Y=$memory\cmd$rdmux[0][1][0]$b$915 [6:0]
      New connections: $memory\cmd$rdmux[0][1][0]$b$915 [7] = $memory\cmd$rdmux[0][1][0]$b$915 [6]
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][2][2]$925:
      Old ports: A=$memory\cmd$rdmux[0][2][2]$a$926, B=$memory\cmd$rdmux[0][2][2]$b$927, Y=$memory\cmd$rdmux[0][1][1]$a$917
      New ports: A={ $memory\cmd$rdmux[0][2][2]$a$926 [3] 1'0 $memory\cmd$rdmux[0][2][2]$a$926 [1:0] }, B={ 1'1 $memory\cmd$rdmux[0][2][2]$b$927 [2:0] }, Y=$memory\cmd$rdmux[0][1][1]$a$917 [3:0]
      New connections: $memory\cmd$rdmux[0][1][1]$a$917 [7:4] = 4'0010
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][2][3]$928:
      Old ports: A=$memory\cmd$rdmux[0][2][3]$a$929, B=8'xxxxxxxx, Y=$memory\cmd$rdmux[0][1][1]$b$918
      New ports: A=$memory\cmd$rdmux[0][2][3]$a$929 [2:0], B=3'xxx, Y=$memory\cmd$rdmux[0][1][1]$b$918 [2:0]
      New connections: $memory\cmd$rdmux[0][1][1]$b$918 [7:3] = { $memory\cmd$rdmux[0][1][1]$b$918 [2] $memory\cmd$rdmux[0][1][1]$b$918 [2:1] $memory\cmd$rdmux[0][1][1]$b$918 [2:1] }
    Consolidated identical input bits for $mux cell $memory\num_params$rdmux[0][2][0]$1062:
      Old ports: A=$memory\num_params$rdmux[0][2][0]$a$1063, B=$memory\num_params$rdmux[0][2][0]$b$1064, Y=$memory\num_params$rdmux[0][1][0]$a$1057
      New ports: A=$memory\num_params$rdmux[0][2][0]$a$1063 [2:0], B={ 1'0 $memory\num_params$rdmux[0][2][0]$b$1064 [1:0] }, Y=$memory\num_params$rdmux[0][1][0]$a$1057 [2:0]
      New connections: $memory\num_params$rdmux[0][1][0]$a$1057 [13:3] = 11'00000000000
    Consolidated identical input bits for $mux cell $memory\num_params$rdmux[0][2][1]$1065:
      Old ports: A=$memory\num_params$rdmux[0][2][1]$a$1066, B=$memory\num_params$rdmux[0][2][1]$b$1067, Y=$memory\num_params$rdmux[0][1][0]$b$1058
      New ports: A={ $memory\num_params$rdmux[0][2][1]$a$1066 [4] $memory\num_params$rdmux[0][2][1]$a$1066 [1:0] }, B={ $memory\num_params$rdmux[0][2][1]$b$1067 [4] 1'0 $memory\num_params$rdmux[0][2][1]$b$1067 [0] }, Y={ $memory\num_params$rdmux[0][1][0]$b$1058 [4] $memory\num_params$rdmux[0][1][0]$b$1058 [1:0] }
      New connections: { $memory\num_params$rdmux[0][1][0]$b$1058 [13:5] $memory\num_params$rdmux[0][1][0]$b$1058 [3:2] } = 11'00000000000
    Consolidated identical input bits for $mux cell $memory\num_params$rdmux[0][2][2]$1068:
      Old ports: A=$memory\num_params$rdmux[0][2][2]$a$1069, B=$memory\num_params$rdmux[0][2][2]$b$1070, Y=$memory\num_params$rdmux[0][1][1]$a$1060
      New ports: A={ 1'0 $memory\num_params$rdmux[0][2][2]$a$1069 [2] }, B={ $memory\num_params$rdmux[0][2][2]$b$1070 [9] $memory\num_params$rdmux[0][2][2]$b$1070 [2] }, Y={ $memory\num_params$rdmux[0][1][1]$a$1060 [9] $memory\num_params$rdmux[0][1][1]$a$1060 [2] }
      New connections: { $memory\num_params$rdmux[0][1][1]$a$1060 [13:10] $memory\num_params$rdmux[0][1][1]$a$1060 [8:3] $memory\num_params$rdmux[0][1][1]$a$1060 [1:0] } = { $memory\num_params$rdmux[0][1][1]$a$1060 [9] $memory\num_params$rdmux[0][1][1]$a$1060 [9] 10'0000000000 }
    Consolidated identical input bits for $mux cell $memory\num_params$rdmux[0][2][3]$1071:
      Old ports: A=$memory\num_params$rdmux[0][2][3]$a$1072, B=14'xxxxxxxxxxxxxx, Y=$memory\num_params$rdmux[0][1][1]$b$1061
      New ports: A={ $memory\num_params$rdmux[0][2][3]$a$1072 [2] $memory\num_params$rdmux[0][2][3]$a$1072 [0] }, B=2'xx, Y={ $memory\num_params$rdmux[0][1][1]$b$1061 [2] $memory\num_params$rdmux[0][1][1]$b$1061 [0] }
      New connections: { $memory\num_params$rdmux[0][1][1]$b$1061 [13:3] $memory\num_params$rdmux[0][1][1]$b$1061 [1] } = { $memory\num_params$rdmux[0][1][1]$b$1061 [0] $memory\num_params$rdmux[0][1][1]$b$1061 [0] $memory\num_params$rdmux[0][1][1]$b$1061 [0] $memory\num_params$rdmux[0][1][1]$b$1061 [0] $memory\num_params$rdmux[0][1][1]$b$1061 [0] $memory\num_params$rdmux[0][1][1]$b$1061 [0] $memory\num_params$rdmux[0][1][1]$b$1061 [0] $memory\num_params$rdmux[0][1][1]$b$1061 [0] $memory\num_params$rdmux[0][1][1]$b$1061 [0] $memory\num_params$rdmux[0][1][1]$b$1061 [0] $memory\num_params$rdmux[0][1][1]$b$1061 [0] $memory\num_params$rdmux[0][1][1]$b$1061 [0] }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][4][0]$1359:
      Old ports: A=$memory\params$rdmux[0][4][0]$a$1360, B=$memory\params$rdmux[0][4][0]$b$1361, Y=$memory\params$rdmux[0][3][0]$a$1336
      New ports: A={ $memory\params$rdmux[0][4][0]$a$1360 [3] $memory\params$rdmux[0][4][0]$a$1360 [0] }, B={ $memory\params$rdmux[0][4][0]$b$1361 [3] $memory\params$rdmux[0][4][0]$b$1361 [0] }, Y={ $memory\params$rdmux[0][3][0]$a$1336 [3] $memory\params$rdmux[0][3][0]$a$1336 [0] }
      New connections: { $memory\params$rdmux[0][3][0]$a$1336 [7:4] $memory\params$rdmux[0][3][0]$a$1336 [2:1] } = { 2'00 $memory\params$rdmux[0][3][0]$a$1336 [3] $memory\params$rdmux[0][3][0]$a$1336 [3] 2'10 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][4][10]$1389:
      Old ports: A=$memory\params$rdmux[0][4][10]$a$1390, B=8'xxxxxxxx, Y=$memory\params$rdmux[0][3][5]$a$1351
      New ports: A={ $memory\params$rdmux[0][4][10]$a$1390 [3] 1'0 $memory\params$rdmux[0][4][10]$a$1390 [1:0] }, B=4'xxxx, Y=$memory\params$rdmux[0][3][5]$a$1351 [3:0]
      New connections: $memory\params$rdmux[0][3][5]$a$1351 [7:4] = { $memory\params$rdmux[0][3][5]$a$1351 [2] $memory\params$rdmux[0][3][5]$a$1351 [0] $memory\params$rdmux[0][3][5]$a$1351 [0] $memory\params$rdmux[0][3][5]$a$1351 [1] }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][4][1]$1362:
      Old ports: A=$memory\params$rdmux[0][4][1]$a$1363, B=$memory\params$rdmux[0][4][1]$b$1364, Y=$memory\params$rdmux[0][3][0]$b$1337
      New ports: A={ 1'0 $memory\params$rdmux[0][4][1]$a$1363 [3] $memory\params$rdmux[0][4][1]$a$1363 [3] $memory\params$rdmux[0][4][1]$a$1363 [3] 2'10 $memory\params$rdmux[0][4][1]$a$1363 [0] }, B={ $memory\params$rdmux[0][4][1]$b$1364 [5] $memory\params$rdmux[0][4][1]$b$1364 [5] 1'0 $memory\params$rdmux[0][4][1]$b$1364 [3:2] $memory\params$rdmux[0][4][1]$b$1364 [0] $memory\params$rdmux[0][4][1]$b$1364 [0] }, Y={ $memory\params$rdmux[0][3][0]$b$1337 [7] $memory\params$rdmux[0][3][0]$b$1337 [5:0] }
      New connections: $memory\params$rdmux[0][3][0]$b$1337 [6] = 1'0
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][4][2]$1365:
      Old ports: A=$memory\params$rdmux[0][4][2]$a$1366, B=$memory\params$rdmux[0][4][2]$b$1367, Y=$memory\params$rdmux[0][3][1]$a$1339
      New ports: A={ $memory\params$rdmux[0][4][2]$a$1366 [7:6] 1'0 $memory\params$rdmux[0][4][2]$a$1366 [3] $memory\params$rdmux[0][4][2]$a$1366 [0] 1'0 $memory\params$rdmux[0][4][2]$a$1366 [0] }, B={ $memory\params$rdmux[0][4][2]$b$1367 [7] $memory\params$rdmux[0][4][2]$b$1367 [5] $memory\params$rdmux[0][4][2]$b$1367 [5] 1'1 $memory\params$rdmux[0][4][2]$b$1367 [2:0] }, Y={ $memory\params$rdmux[0][3][1]$a$1339 [7:5] $memory\params$rdmux[0][3][1]$a$1339 [3:0] }
      New connections: $memory\params$rdmux[0][3][1]$a$1339 [4] = 1'0
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][4][3]$1368:
      Old ports: A=$memory\params$rdmux[0][4][3]$a$1369, B=$memory\params$rdmux[0][4][3]$b$1370, Y=$memory\params$rdmux[0][3][1]$b$1340
      New ports: A={ 1'0 $memory\params$rdmux[0][4][3]$a$1369 [3] $memory\params$rdmux[0][4][3]$a$1369 [1] $memory\params$rdmux[0][4][3]$a$1369 [1:0] }, B={ $memory\params$rdmux[0][4][3]$b$1370 [4] 1'0 $memory\params$rdmux[0][4][3]$b$1370 [0] $memory\params$rdmux[0][4][3]$b$1370 [1:0] }, Y=$memory\params$rdmux[0][3][1]$b$1340 [4:0]
      New connections: $memory\params$rdmux[0][3][1]$b$1340 [7:5] = 3'000
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][4][4]$1371:
      Old ports: A=$memory\params$rdmux[0][4][4]$a$1372, B=$memory\params$rdmux[0][4][4]$b$1373, Y=$memory\params$rdmux[0][3][2]$a$1342
      New ports: A=$memory\params$rdmux[0][4][4]$a$1372 [5:0], B={ 1'0 $memory\params$rdmux[0][4][4]$b$1373 [4:2] 2'00 }, Y=$memory\params$rdmux[0][3][2]$a$1342 [5:0]
      New connections: $memory\params$rdmux[0][3][2]$a$1342 [7:6] = 2'00
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][4][5]$1374:
      Old ports: A=$memory\params$rdmux[0][4][5]$a$1375, B=$memory\params$rdmux[0][4][5]$b$1376, Y=$memory\params$rdmux[0][3][2]$b$1343
      New ports: A={ $memory\params$rdmux[0][4][5]$a$1375 [3] $memory\params$rdmux[0][4][5]$a$1375 [1:0] }, B={ $memory\params$rdmux[0][4][5]$b$1376 [3] 1'1 $memory\params$rdmux[0][4][5]$b$1376 [0] }, Y={ $memory\params$rdmux[0][3][2]$b$1343 [3] $memory\params$rdmux[0][3][2]$b$1343 [1:0] }
      New connections: { $memory\params$rdmux[0][3][2]$b$1343 [7:4] $memory\params$rdmux[0][3][2]$b$1343 [2] } = { 4'0000 $memory\params$rdmux[0][3][2]$b$1343 [0] }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][4][6]$1377:
      Old ports: A=$memory\params$rdmux[0][4][6]$a$1378, B=$memory\params$rdmux[0][4][6]$b$1379, Y=$memory\params$rdmux[0][3][3]$a$1345
      New ports: A={ $memory\params$rdmux[0][4][6]$a$1378 [5:1] 1'1 }, B={ 1'0 $memory\params$rdmux[0][4][6]$b$1379 [4] $memory\params$rdmux[0][4][6]$b$1379 [0] $memory\params$rdmux[0][4][6]$b$1379 [2] 1'0 $memory\params$rdmux[0][4][6]$b$1379 [0] }, Y=$memory\params$rdmux[0][3][3]$a$1345 [5:0]
      New connections: $memory\params$rdmux[0][3][3]$a$1345 [7:6] = 2'00
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][4][7]$1380:
      Old ports: A=$memory\params$rdmux[0][4][7]$a$1381, B=$memory\params$rdmux[0][4][7]$b$1382, Y=$memory\params$rdmux[0][3][3]$b$1346
      New ports: A={ $memory\params$rdmux[0][4][7]$a$1381 [7] $memory\params$rdmux[0][4][7]$a$1381 [3] $memory\params$rdmux[0][4][7]$a$1381 [3] $memory\params$rdmux[0][4][7]$a$1381 [3] $memory\params$rdmux[0][4][7]$a$1381 [0] 1'0 $memory\params$rdmux[0][4][7]$a$1381 [0] }, B={ 1'0 $memory\params$rdmux[0][4][7]$b$1382 [0] $memory\params$rdmux[0][4][7]$b$1382 [1] $memory\params$rdmux[0][4][7]$b$1382 [3] 1'0 $memory\params$rdmux[0][4][7]$b$1382 [1:0] }, Y={ $memory\params$rdmux[0][3][3]$b$1346 [7] $memory\params$rdmux[0][3][3]$b$1346 [5:0] }
      New connections: $memory\params$rdmux[0][3][3]$b$1346 [6] = $memory\params$rdmux[0][3][3]$b$1346 [5]
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][4][8]$1383:
      Old ports: A=$memory\params$rdmux[0][4][8]$a$1384, B=$memory\params$rdmux[0][4][8]$b$1385, Y=$memory\params$rdmux[0][3][4]$a$1348
      New ports: A={ $memory\params$rdmux[0][4][8]$a$1384 [5] $memory\params$rdmux[0][4][8]$a$1384 [0] }, B={ $memory\params$rdmux[0][4][8]$b$1385 [5] $memory\params$rdmux[0][4][8]$b$1385 [0] }, Y={ $memory\params$rdmux[0][3][4]$a$1348 [5] $memory\params$rdmux[0][3][4]$a$1348 [0] }
      New connections: { $memory\params$rdmux[0][3][4]$a$1348 [7:6] $memory\params$rdmux[0][3][4]$a$1348 [4:1] } = { $memory\params$rdmux[0][3][4]$a$1348 [5] 5'00000 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][4][9]$1386:
      Old ports: A=$memory\params$rdmux[0][4][9]$a$1387, B=$memory\params$rdmux[0][4][9]$b$1388, Y=$memory\params$rdmux[0][3][4]$b$1349
      New ports: A={ $memory\params$rdmux[0][4][9]$a$1387 [2] $memory\params$rdmux[0][4][9]$a$1387 [0] $memory\params$rdmux[0][4][9]$a$1387 [0] $memory\params$rdmux[0][4][9]$a$1387 [3:0] }, B={ $memory\params$rdmux[0][4][9]$b$1388 [5] 1'0 $memory\params$rdmux[0][4][9]$b$1388 [5] 3'000 $memory\params$rdmux[0][4][9]$b$1388 [0] }, Y={ $memory\params$rdmux[0][3][4]$b$1349 [7:5] $memory\params$rdmux[0][3][4]$b$1349 [3:0] }
      New connections: $memory\params$rdmux[0][3][4]$b$1349 [4] = $memory\params$rdmux[0][3][4]$b$1349 [1]
  Optimizing cells in module \demo.
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][1][1]$916:
      Old ports: A=$memory\cmd$rdmux[0][1][1]$a$917, B=$memory\cmd$rdmux[0][1][1]$b$918, Y=$memory\cmd$rdmux[0][0][0]$b$912
      New ports: A={ 2'10 $memory\cmd$rdmux[0][1][1]$a$917 [3:0] }, B={ $memory\cmd$rdmux[0][1][1]$b$918 [1] $memory\cmd$rdmux[0][1][1]$b$918 [2:1] $memory\cmd$rdmux[0][1][1]$b$918 [2:0] }, Y=$memory\cmd$rdmux[0][0][0]$b$912 [5:0]
      New connections: $memory\cmd$rdmux[0][0][0]$b$912 [7:6] = { $memory\cmd$rdmux[0][0][0]$b$912 [4] $memory\cmd$rdmux[0][0][0]$b$912 [4] }
    Consolidated identical input bits for $mux cell $memory\num_params$rdmux[0][1][0]$1056:
      Old ports: A=$memory\num_params$rdmux[0][1][0]$a$1057, B=$memory\num_params$rdmux[0][1][0]$b$1058, Y=$memory\num_params$rdmux[0][0][0]$a$1054
      New ports: A={ 1'0 $memory\num_params$rdmux[0][1][0]$a$1057 [2:0] }, B={ $memory\num_params$rdmux[0][1][0]$b$1058 [4] 1'0 $memory\num_params$rdmux[0][1][0]$b$1058 [1:0] }, Y={ $memory\num_params$rdmux[0][0][0]$a$1054 [4] $memory\num_params$rdmux[0][0][0]$a$1054 [2:0] }
      New connections: { $memory\num_params$rdmux[0][0][0]$a$1054 [13:5] $memory\num_params$rdmux[0][0][0]$a$1054 [3] } = 10'0000000000
    Consolidated identical input bits for $mux cell $memory\num_params$rdmux[0][1][1]$1059:
      Old ports: A=$memory\num_params$rdmux[0][1][1]$a$1060, B=$memory\num_params$rdmux[0][1][1]$b$1061, Y=$memory\num_params$rdmux[0][0][0]$b$1055
      New ports: A={ $memory\num_params$rdmux[0][1][1]$a$1060 [9] $memory\num_params$rdmux[0][1][1]$a$1060 [2] 1'0 }, B={ $memory\num_params$rdmux[0][1][1]$b$1061 [0] $memory\num_params$rdmux[0][1][1]$b$1061 [2] $memory\num_params$rdmux[0][1][1]$b$1061 [0] }, Y={ $memory\num_params$rdmux[0][0][0]$b$1055 [9] $memory\num_params$rdmux[0][0][0]$b$1055 [2] $memory\num_params$rdmux[0][0][0]$b$1055 [0] }
      New connections: { $memory\num_params$rdmux[0][0][0]$b$1055 [13:10] $memory\num_params$rdmux[0][0][0]$b$1055 [8:3] $memory\num_params$rdmux[0][0][0]$b$1055 [1] } = { $memory\num_params$rdmux[0][0][0]$b$1055 [9] $memory\num_params$rdmux[0][0][0]$b$1055 [9] $memory\num_params$rdmux[0][0][0]$b$1055 [0] $memory\num_params$rdmux[0][0][0]$b$1055 [0] $memory\num_params$rdmux[0][0][0]$b$1055 [0] $memory\num_params$rdmux[0][0][0]$b$1055 [0] $memory\num_params$rdmux[0][0][0]$b$1055 [0] $memory\num_params$rdmux[0][0][0]$b$1055 [0] $memory\num_params$rdmux[0][0][0]$b$1055 [0] $memory\num_params$rdmux[0][0][0]$b$1055 [0] $memory\num_params$rdmux[0][0][0]$b$1055 [0] }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][3][0]$1335:
      Old ports: A=$memory\params$rdmux[0][3][0]$a$1336, B=$memory\params$rdmux[0][3][0]$b$1337, Y=$memory\params$rdmux[0][2][0]$a$1324
      New ports: A={ 1'0 $memory\params$rdmux[0][3][0]$a$1336 [3] $memory\params$rdmux[0][3][0]$a$1336 [3] $memory\params$rdmux[0][3][0]$a$1336 [3] 2'10 $memory\params$rdmux[0][3][0]$a$1336 [0] }, B={ $memory\params$rdmux[0][3][0]$b$1337 [7] $memory\params$rdmux[0][3][0]$b$1337 [5:0] }, Y={ $memory\params$rdmux[0][2][0]$a$1324 [7] $memory\params$rdmux[0][2][0]$a$1324 [5:0] }
      New connections: $memory\params$rdmux[0][2][0]$a$1324 [6] = 1'0
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][3][2]$1341:
      Old ports: A=$memory\params$rdmux[0][3][2]$a$1342, B=$memory\params$rdmux[0][3][2]$b$1343, Y=$memory\params$rdmux[0][2][1]$a$1327
      New ports: A=$memory\params$rdmux[0][3][2]$a$1342 [5:0], B={ 2'00 $memory\params$rdmux[0][3][2]$b$1343 [3] $memory\params$rdmux[0][3][2]$b$1343 [0] $memory\params$rdmux[0][3][2]$b$1343 [1:0] }, Y=$memory\params$rdmux[0][2][1]$a$1327 [5:0]
      New connections: $memory\params$rdmux[0][2][1]$a$1327 [7:6] = 2'00
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][3][4]$1347:
      Old ports: A=$memory\params$rdmux[0][3][4]$a$1348, B=$memory\params$rdmux[0][3][4]$b$1349, Y=$memory\params$rdmux[0][2][2]$a$1330
      New ports: A={ $memory\params$rdmux[0][3][4]$a$1348 [5] 1'0 $memory\params$rdmux[0][3][4]$a$1348 [5] 3'000 $memory\params$rdmux[0][3][4]$a$1348 [0] }, B={ $memory\params$rdmux[0][3][4]$b$1349 [7:5] $memory\params$rdmux[0][3][4]$b$1349 [3:0] }, Y={ $memory\params$rdmux[0][2][2]$a$1330 [7:5] $memory\params$rdmux[0][2][2]$a$1330 [3:0] }
      New connections: $memory\params$rdmux[0][2][2]$a$1330 [4] = $memory\params$rdmux[0][2][2]$a$1330 [1]
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][3][5]$1350:
      Old ports: A=$memory\params$rdmux[0][3][5]$a$1351, B=8'xxxxxxxx, Y=$memory\params$rdmux[0][2][2]$b$1331
      New ports: A=$memory\params$rdmux[0][3][5]$a$1351 [3:0], B=4'xxxx, Y=$memory\params$rdmux[0][2][2]$b$1331 [3:0]
      New connections: $memory\params$rdmux[0][2][2]$b$1331 [7:4] = { $memory\params$rdmux[0][2][2]$b$1331 [2] $memory\params$rdmux[0][2][2]$b$1331 [0] $memory\params$rdmux[0][2][2]$b$1331 [0] $memory\params$rdmux[0][2][2]$b$1331 [1] }
  Optimizing cells in module \demo.
    Consolidated identical input bits for $mux cell $memory\num_params$rdmux[0][0][0]$1053:
      Old ports: A=$memory\num_params$rdmux[0][0][0]$a$1054, B=$memory\num_params$rdmux[0][0][0]$b$1055, Y=$memrd$\num_params$demo.v:396$166_DATA
      New ports: A={ 1'0 $memory\num_params$rdmux[0][0][0]$a$1054 [4] 1'0 $memory\num_params$rdmux[0][0][0]$a$1054 [2:0] }, B={ $memory\num_params$rdmux[0][0][0]$b$1055 [9] $memory\num_params$rdmux[0][0][0]$b$1055 [0] $memory\num_params$rdmux[0][0][0]$b$1055 [0] $memory\num_params$rdmux[0][0][0]$b$1055 [2] $memory\num_params$rdmux[0][0][0]$b$1055 [0] $memory\num_params$rdmux[0][0][0]$b$1055 [0] }, Y={ $memrd$\num_params$demo.v:396$166_DATA [9] $memrd$\num_params$demo.v:396$166_DATA [4:0] }
      New connections: { $memrd$\num_params$demo.v:396$166_DATA [13:10] $memrd$\num_params$demo.v:396$166_DATA [8:5] } = { $memrd$\num_params$demo.v:396$166_DATA [9] $memrd$\num_params$demo.v:396$166_DATA [9] $memrd$\num_params$demo.v:396$166_DATA [3] $memrd$\num_params$demo.v:396$166_DATA [3] $memrd$\num_params$demo.v:396$166_DATA [3] $memrd$\num_params$demo.v:396$166_DATA [3] $memrd$\num_params$demo.v:396$166_DATA [3] $memrd$\num_params$demo.v:396$166_DATA [3] }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][2][2]$1329:
      Old ports: A=$memory\params$rdmux[0][2][2]$a$1330, B=$memory\params$rdmux[0][2][2]$b$1331, Y=$memory\params$rdmux[0][1][1]$a$1321
      New ports: A={ $memory\params$rdmux[0][2][2]$a$1330 [7:5] $memory\params$rdmux[0][2][2]$a$1330 [3:0] }, B={ $memory\params$rdmux[0][2][2]$b$1331 [2] $memory\params$rdmux[0][2][2]$b$1331 [0] $memory\params$rdmux[0][2][2]$b$1331 [0] $memory\params$rdmux[0][2][2]$b$1331 [3:0] }, Y={ $memory\params$rdmux[0][1][1]$a$1321 [7:5] $memory\params$rdmux[0][1][1]$a$1321 [3:0] }
      New connections: $memory\params$rdmux[0][1][1]$a$1321 [4] = $memory\params$rdmux[0][1][1]$a$1321 [1]
  Optimizing cells in module \demo.
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][1][1]$1320:
      Old ports: A=$memory\params$rdmux[0][1][1]$a$1321, B=8'xxxxxxxx, Y=$memory\params$rdmux[0][0][0]$b$1316
      New ports: A={ $memory\params$rdmux[0][1][1]$a$1321 [7:5] $memory\params$rdmux[0][1][1]$a$1321 [3:0] }, B=7'xxxxxxx, Y={ $memory\params$rdmux[0][0][0]$b$1316 [7:5] $memory\params$rdmux[0][0][0]$b$1316 [3:0] }
      New connections: $memory\params$rdmux[0][0][0]$b$1316 [4] = $memory\params$rdmux[0][0][0]$b$1316 [1]
  Optimizing cells in module \demo.
Performed a total of 127 changes.

2.29.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\demo'.
<suppressed ~159 debug messages>
Removed a total of 53 cells.

2.29.13. Executing OPT_RMDFF pass (remove dff with constant values).

2.29.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..
Removed 0 unused cells and 59 unused wires.
<suppressed ~1 debug messages>

2.29.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.
<suppressed ~1 debug messages>

2.29.16. Rerunning OPT passes. (Maybe there is more to do..)

2.29.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \demo..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~27 debug messages>

2.29.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \demo.
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][3][2]$937:
      Old ports: A={ 1'0 $memory\cmd$rdmux[0][3][1]$a$935 [6:5] $memory\cmd$rdmux[0][3][1]$a$935 [5] }, B={ $memory\cmd$rdmux[0][3][1]$a$935 [6:5] 1'0 $memory\cmd$rdmux[0][3][1]$a$935 [5] }, Y={ $memory\cmd$rdmux[0][2][1]$a$923 [5] $memory\cmd$rdmux[0][2][1]$a$923 [2:0] }
      New ports: A={ 1'0 $memory\cmd$rdmux[0][3][1]$a$935 [6:5] }, B={ $memory\cmd$rdmux[0][3][1]$a$935 [6:5] 1'0 }, Y={ $memory\cmd$rdmux[0][2][1]$a$923 [5] $memory\cmd$rdmux[0][2][1]$a$923 [2:1] }
      New connections: $memory\cmd$rdmux[0][2][1]$a$923 [0] = $memory\cmd$rdmux[0][3][1]$a$935 [5]
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][10]$1437:
      Old ports: A={ 1'1 $memory\params$rdmux[0][5][0]$b$1409 [5] $memory\params$rdmux[0][5][0]$b$1409 [0] }, B={ $memory\params$rdmux[0][5][0]$b$1409 [5] $memory\params$rdmux[0][5][0]$b$1409 [0] $memory\params$rdmux[0][5][0]$b$1409 [0] }, Y={ $memory\params$rdmux[0][4][5]$a$1375 [3] $memory\params$rdmux[0][4][5]$a$1375 [1] $memory\params$rdmux[0][4][5]$a$1375 [2] }
      New ports: A={ 1'1 $memory\params$rdmux[0][5][0]$b$1409 [5] }, B={ $memory\params$rdmux[0][5][0]$b$1409 [5] $memory\params$rdmux[0][5][0]$b$1409 [0] }, Y={ $memory\params$rdmux[0][4][5]$a$1375 [3] $memory\params$rdmux[0][4][5]$a$1375 [1] }
      New connections: $memory\params$rdmux[0][4][5]$a$1375 [2] = $memory\params$rdmux[0][5][0]$b$1409 [0]
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][15]$1452:
      Old ports: A={ $memory\params$rdmux[0][5][11]$a$1441 [3] $memory\params$rdmux[0][5][11]$a$1441 [3] 1'0 }, B={ $memory\params$rdmux[0][5][11]$a$1441 [3] 1'0 $memory\params$rdmux[0][5][11]$a$1441 [3] }, Y={ $memory\params$rdmux[0][4][7]$b$1382 [3] $memory\params$rdmux[0][4][7]$b$1382 [4] $memory\params$rdmux[0][4][7]$b$1382 [6] }
      New ports: A={ $memory\params$rdmux[0][5][11]$a$1441 [3] 1'0 }, B={ 1'0 $memory\params$rdmux[0][5][11]$a$1441 [3] }, Y={ $memory\params$rdmux[0][4][7]$b$1382 [4] $memory\params$rdmux[0][4][7]$b$1382 [6] }
      New connections: $memory\params$rdmux[0][4][7]$b$1382 [3] = $memory\params$rdmux[0][5][11]$a$1441 [3]
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][20]$1467:
      Old ports: A={ $memory\params$rdmux[0][5][11]$b$1442 [2] $memory\params$rdmux[0][5][11]$b$1442 [2] 1'0 }, B={ $memory\params$rdmux[0][5][11]$b$1442 [2] 1'0 $memory\params$rdmux[0][5][11]$b$1442 [2] }, Y={ $memory\params$rdmux[0][4][10]$a$1390 [3] $memory\params$rdmux[0][4][10]$a$1390 [4] $memory\params$rdmux[0][4][10]$a$1390 [6] }
      New ports: A={ $memory\params$rdmux[0][5][11]$b$1442 [2] 1'0 }, B={ 1'0 $memory\params$rdmux[0][5][11]$b$1442 [2] }, Y={ $memory\params$rdmux[0][4][10]$a$1390 [4] $memory\params$rdmux[0][4][10]$a$1390 [6] }
      New connections: $memory\params$rdmux[0][4][10]$a$1390 [3] = $memory\params$rdmux[0][5][11]$b$1442 [2]
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][5]$1422:
      Old ports: A={ $memory\params$rdmux[0][5][0]$b$1409 [0] $memory\params$rdmux[0][5][0]$b$1409 [5] $memory\params$rdmux[0][5][0]$b$1409 [0] $memory\params$rdmux[0][5][0]$b$1409 [5] $memory\params$rdmux[0][5][0]$b$1409 [0] }, B={ $memory\params$rdmux[0][5][0]$b$1409 [5] $memory\params$rdmux[0][5][0]$b$1409 [5] 2'11 $memory\params$rdmux[0][5][0]$b$1409 [0] }, Y={ $memory\params$rdmux[0][4][2]$b$1367 [7:6] $memory\params$rdmux[0][4][2]$b$1367 [2:0] }
      New ports: A={ $memory\params$rdmux[0][5][0]$b$1409 [0] $memory\params$rdmux[0][5][0]$b$1409 [0] $memory\params$rdmux[0][5][0]$b$1409 [5] }, B={ $memory\params$rdmux[0][5][0]$b$1409 [5] 2'11 }, Y={ $memory\params$rdmux[0][4][2]$b$1367 [7] $memory\params$rdmux[0][4][2]$b$1367 [2:1] }
      New connections: { $memory\params$rdmux[0][4][2]$b$1367 [6] $memory\params$rdmux[0][4][2]$b$1367 [0] } = { $memory\params$rdmux[0][5][0]$b$1409 [5] $memory\params$rdmux[0][5][0]$b$1409 [0] }
  Optimizing cells in module \demo.
Performed a total of 5 changes.

2.29.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\demo'.
Removed a total of 0 cells.

2.29.20. Executing OPT_RMDFF pass (remove dff with constant values).

2.29.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..
Removed 0 unused cells and 4 unused wires.
<suppressed ~1 debug messages>

2.29.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.

2.29.23. Rerunning OPT passes. (Maybe there is more to do..)

2.29.24. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \demo..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~27 debug messages>

2.29.25. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \demo.
Performed a total of 0 changes.

2.29.26. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\demo'.
Removed a total of 0 cells.

2.29.27. Executing OPT_RMDFF pass (remove dff with constant values).

2.29.28. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..

2.29.29. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.

2.29.30. Finished OPT passes. (There is nothing left to do.)

2.30. Executing TECHMAP pass (map to technology primitives).

2.30.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

2.30.2. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/arith_map.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/arith_map.v' to AST representation.
Generating RTLIL representation for module `\_80_ice40_alu'.
Successfully finished Verilog frontend.

2.30.3. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $not.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=3\B_WIDTH=1\Y_WIDTH=3 for cells of type $alu.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $logic_and.
Using template $paramod$constmap:446553370afc6c2aa6cc0b8f657b7f64b237ff7c$paramod$55f49a009a975a30a28fdd971adb6110903d4740\_90_shift_shiftx for cells of type $shiftx.
Using template $paramod$constmap:ee5af906ae0d3d414c6a0471604c553ef70c8e09$paramod$1297efc30c1e19551d1f4e269f2cbfa7dd15f801\_90_shift_shiftx for cells of type $shiftx.
Using extmapper simplemap for cells of type $lut.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $ne.
Using template $paramod\_90_pmux\WIDTH=14\S_WIDTH=2 for cells of type $pmux.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=16\Y_WIDTH=16 for cells of type $alu.
Using template $paramod\_90_pmux\WIDTH=8\S_WIDTH=2 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=16\S_WIDTH=2 for cells of type $pmux.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=7\Y_WIDTH=7 for cells of type $alu.
Using template $paramod\_90_pmux\WIDTH=6\S_WIDTH=13 for cells of type $pmux.
Using extmapper simplemap for cells of type $or.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=5\B_WIDTH=1\Y_WIDTH=5 for cells of type $alu.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=5\Y_WIDTH=5 for cells of type $alu.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=4\B_WIDTH=1\Y_WIDTH=4 for cells of type $alu.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=14\B_WIDTH=1\Y_WIDTH=14 for cells of type $alu.
Using template $paramod\_90_pmux\WIDTH=1\S_WIDTH=2 for cells of type $pmux.
Using extmapper simplemap for cells of type $reduce_and.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=9\B_WIDTH=16\Y_WIDTH=16 for cells of type $alu.
Using template $paramod\_90_pmux\WIDTH=1\S_WIDTH=3 for cells of type $pmux.
Using extmapper simplemap for cells of type $dff.
Using extmapper simplemap for cells of type $pos.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $and.
No more expansions possible.
<suppressed ~703 debug messages>

2.31. Executing ICE40_OPT pass (performing simple optimizations).

2.31.1. Running ICE40 specific optimizations.

2.31.2. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.
<suppressed ~541 debug messages>

2.31.3. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\demo'.
<suppressed ~474 debug messages>
Removed a total of 158 cells.

2.31.4. Executing OPT_RMDFF pass (remove dff with constant values).

2.31.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..
Removed 105 unused cells and 460 unused wires.
<suppressed ~106 debug messages>

2.31.6. Rerunning OPT passes. (Removed registers in this run.)

2.31.7. Running ICE40 specific optimizations.
Optimized away SB_CARRY cell demo.$auto$alumacc.cc:474:replace_alu$816.slice[0].carry: CO=$auto$alumacc.cc:474:replace_alu$816.BB [0]
Optimized away SB_CARRY cell demo.$auto$alumacc.cc:474:replace_alu$829.slice[0].carry: CO=\delay [0]
Optimized away SB_CARRY cell demo.$auto$alumacc.cc:474:replace_alu$832.slice[0].carry: CO=\cmd_counter [0]
Optimized away SB_CARRY cell demo.$auto$alumacc.cc:474:replace_alu$835.slice[0].carry: CO=\param_counter [0]
Optimized away SB_CARRY cell demo.$auto$alumacc.cc:474:replace_alu$838.slice[0].carry: CO=\cmd_counter [0]
Optimized away SB_CARRY cell demo.$auto$alumacc.cc:474:replace_alu$841.slice[0].carry: CO=\pixel_bit_counter [0]
Optimized away SB_CARRY cell demo.$auto$alumacc.cc:474:replace_alu$844.slice[0].carry: CO=\bit_counter [0]
Optimized away SB_CARRY cell demo.$auto$alumacc.cc:474:replace_alu$847.slice[0].carry: CO=\params_left [0]
Mapping SB_LUT4 cell demo.$auto$alumacc.cc:474:replace_alu$829.slice[1].adder back to logic.
Mapping SB_LUT4 cell demo.$auto$alumacc.cc:474:replace_alu$832.slice[1].adder back to logic.
Mapping SB_LUT4 cell demo.$auto$alumacc.cc:474:replace_alu$835.slice[1].adder back to logic.
Mapping SB_LUT4 cell demo.$auto$alumacc.cc:474:replace_alu$838.slice[1].adder back to logic.
Mapping SB_LUT4 cell demo.$auto$alumacc.cc:474:replace_alu$841.slice[1].adder back to logic.
Mapping SB_LUT4 cell demo.$auto$alumacc.cc:474:replace_alu$844.slice[1].adder back to logic.
Mapping SB_LUT4 cell demo.$auto$alumacc.cc:474:replace_alu$847.slice[1].adder back to logic.

2.31.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.
<suppressed ~89 debug messages>

2.31.9. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\demo'.
<suppressed ~21 debug messages>
Removed a total of 7 cells.

2.31.10. Executing OPT_RMDFF pass (remove dff with constant values).

2.31.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..
Removed 0 unused cells and 21 unused wires.
<suppressed ~1 debug messages>

2.31.12. Rerunning OPT passes. (Removed registers in this run.)

2.31.13. Running ICE40 specific optimizations.

2.31.14. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.

2.31.15. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\demo'.
Removed a total of 0 cells.

2.31.16. Executing OPT_RMDFF pass (remove dff with constant values).

2.31.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..

2.31.18. Finished OPT passes. (There is nothing left to do.)

2.32. Executing DFFSR2DFF pass (mapping DFFSR cells to simpler FFs).

2.33. Executing DFF2DFFE pass (transform $dff to $dffe where applicable).
Selected cell types for direct conversion:
  $_DFF_PP1_ -> $__DFFE_PP1
  $_DFF_PP0_ -> $__DFFE_PP0
  $_DFF_PN1_ -> $__DFFE_PN1
  $_DFF_PN0_ -> $__DFFE_PN0
  $_DFF_NP1_ -> $__DFFE_NP1
  $_DFF_NP0_ -> $__DFFE_NP0
  $_DFF_NN1_ -> $__DFFE_NN1
  $_DFF_NN0_ -> $__DFFE_NN0
  $_DFF_N_ -> $_DFFE_NP_
  $_DFF_P_ -> $_DFFE_PP_
Transforming FF to FF+Enable cells in module demo:
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2796 to $_DFFE_PP_ for $0\rst[0:0] -> \rst.
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2797 to $_DFFE_PP_ for $0\dc[0:0] -> \dc.
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2798 to $_DFFE_PP_ for $0\mosi[0:0] -> \mosi.
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2799 to $_DFFE_PP_ for $0\cs[0:0] -> \cs.
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2800 to $_DFFE_PP_ for $0\state[5:0] [0] -> \state [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2801 to $_DFFE_PP_ for $0\state[5:0] [1] -> \state [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2802 to $_DFFE_PP_ for $0\state[5:0] [2] -> \state [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2803 to $_DFFE_PP_ for $0\state[5:0] [3] -> \state [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2804 to $_DFFE_PP_ for $0\state[5:0] [4] -> \state [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2805 to $_DFFE_PP_ for $0\state[5:0] [5] -> \state [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2806 to $_DFFE_PP_ for $0\delay[15:0] [0] -> \delay [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2807 to $_DFFE_PP_ for $0\delay[15:0] [1] -> \delay [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2808 to $_DFFE_PP_ for $0\delay[15:0] [2] -> \delay [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2809 to $_DFFE_PP_ for $0\delay[15:0] [3] -> \delay [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2810 to $_DFFE_PP_ for $0\delay[15:0] [4] -> \delay [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2811 to $_DFFE_PP_ for $0\delay[15:0] [5] -> \delay [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2812 to $_DFFE_PP_ for $0\delay[15:0] [6] -> \delay [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2813 to $_DFFE_PP_ for $0\delay[15:0] [7] -> \delay [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2814 to $_DFFE_PP_ for $0\delay[15:0] [8] -> \delay [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2815 to $_DFFE_PP_ for $0\delay[15:0] [9] -> \delay [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2816 to $_DFFE_PP_ for $0\delay[15:0] [10] -> \delay [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2817 to $_DFFE_PP_ for $0\delay[15:0] [11] -> \delay [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2818 to $_DFFE_PP_ for $0\delay[15:0] [12] -> \delay [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2819 to $_DFFE_PP_ for $0\delay[15:0] [13] -> \delay [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2820 to $_DFFE_PP_ for $0\delay[15:0] [14] -> \delay [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2821 to $_DFFE_PP_ for $0\delay[15:0] [15] -> \delay [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2822 to $_DFFE_PP_ for $0\data[7:0] [0] -> \data [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2823 to $_DFFE_PP_ for $0\data[7:0] [1] -> \data [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2824 to $_DFFE_PP_ for $0\data[7:0] [2] -> \data [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2825 to $_DFFE_PP_ for $0\data[7:0] [3] -> \data [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2826 to $_DFFE_PP_ for $0\data[7:0] [4] -> \data [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2827 to $_DFFE_PP_ for $0\data[7:0] [5] -> \data [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2828 to $_DFFE_PP_ for $0\data[7:0] [6] -> \data [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2829 to $_DFFE_PP_ for $0\data[7:0] [7] -> \data [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2830 to $_DFFE_PP_ for $0\bit_counter[2:0] [0] -> \bit_counter [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2831 to $_DFFE_PP_ for $0\bit_counter[2:0] [1] -> \bit_counter [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2832 to $_DFFE_PP_ for $0\bit_counter[2:0] [2] -> \bit_counter [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2833 to $_DFFE_PP_ for $0\pixel_data[15:0] [0] -> \pixel_data [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2834 to $_DFFE_PP_ for $0\pixel_data[15:0] [1] -> \pixel_data [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2835 to $_DFFE_PP_ for $0\pixel_data[15:0] [2] -> \pixel_data [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2836 to $_DFFE_PP_ for $0\pixel_data[15:0] [3] -> \pixel_data [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2837 to $_DFFE_PP_ for $0\pixel_data[15:0] [4] -> \pixel_data [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2838 to $_DFFE_PP_ for $0\pixel_data[15:0] [5] -> \pixel_data [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2839 to $_DFFE_PP_ for $0\pixel_data[15:0] [6] -> \pixel_data [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2840 to $_DFFE_PP_ for $0\pixel_data[15:0] [7] -> \pixel_data [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2841 to $_DFFE_PP_ for $0\pixel_data[15:0] [8] -> \pixel_data [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2842 to $_DFFE_PP_ for $0\pixel_data[15:0] [9] -> \pixel_data [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2843 to $_DFFE_PP_ for $0\pixel_data[15:0] [10] -> \pixel_data [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2844 to $_DFFE_PP_ for $0\pixel_data[15:0] [11] -> \pixel_data [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2845 to $_DFFE_PP_ for $0\pixel_data[15:0] [12] -> \pixel_data [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2846 to $_DFFE_PP_ for $0\pixel_data[15:0] [13] -> \pixel_data [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2847 to $_DFFE_PP_ for $0\pixel_data[15:0] [14] -> \pixel_data [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2848 to $_DFFE_PP_ for $0\pixel_data[15:0] [15] -> \pixel_data [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2849 to $_DFFE_PP_ for $0\pixel_bit_counter[3:0] [0] -> \pixel_bit_counter [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2850 to $_DFFE_PP_ for $0\pixel_bit_counter[3:0] [1] -> \pixel_bit_counter [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2851 to $_DFFE_PP_ for $0\pixel_bit_counter[3:0] [2] -> \pixel_bit_counter [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2852 to $_DFFE_PP_ for $0\pixel_bit_counter[3:0] [3] -> \pixel_bit_counter [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2853 to $_DFFE_PP_ for $0\cmd_counter[4:0] [0] -> \cmd_counter [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2854 to $_DFFE_PP_ for $0\cmd_counter[4:0] [1] -> \cmd_counter [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2855 to $_DFFE_PP_ for $0\cmd_counter[4:0] [2] -> \cmd_counter [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2856 to $_DFFE_PP_ for $0\cmd_counter[4:0] [3] -> \cmd_counter [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2857 to $_DFFE_PP_ for $0\cmd_counter[4:0] [4] -> \cmd_counter [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2858 to $_DFFE_PP_ for $0\param_counter[6:0] [0] -> \param_counter [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2859 to $_DFFE_PP_ for $0\param_counter[6:0] [1] -> \param_counter [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2860 to $_DFFE_PP_ for $0\param_counter[6:0] [2] -> \param_counter [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2861 to $_DFFE_PP_ for $0\param_counter[6:0] [3] -> \param_counter [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2862 to $_DFFE_PP_ for $0\param_counter[6:0] [4] -> \param_counter [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2863 to $_DFFE_PP_ for $0\param_counter[6:0] [5] -> \param_counter [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2864 to $_DFFE_PP_ for $0\param_counter[6:0] [6] -> \param_counter [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2865 to $_DFFE_PP_ for $0\params_left[13:0] [0] -> \params_left [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2866 to $_DFFE_PP_ for $0\params_left[13:0] [1] -> \params_left [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2867 to $_DFFE_PP_ for $0\params_left[13:0] [2] -> \params_left [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2868 to $_DFFE_PP_ for $0\params_left[13:0] [3] -> \params_left [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2869 to $_DFFE_PP_ for $0\params_left[13:0] [4] -> \params_left [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2870 to $_DFFE_PP_ for $0\params_left[13:0] [5] -> \params_left [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2871 to $_DFFE_PP_ for $0\params_left[13:0] [6] -> \params_left [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2872 to $_DFFE_PP_ for $0\params_left[13:0] [7] -> \params_left [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2873 to $_DFFE_PP_ for $0\params_left[13:0] [8] -> \params_left [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2874 to $_DFFE_PP_ for $0\params_left[13:0] [9] -> \params_left [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2875 to $_DFFE_PP_ for $0\params_left[13:0] [10] -> \params_left [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2876 to $_DFFE_PP_ for $0\params_left[13:0] [11] -> \params_left [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2877 to $_DFFE_PP_ for $0\params_left[13:0] [12] -> \params_left [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2878 to $_DFFE_PP_ for $0\params_left[13:0] [13] -> \params_left [13].

2.34. Executing TECHMAP pass (map to technology primitives).

2.34.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/cells_map.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$__DFFE_NN0'.
Generating RTLIL representation for module `\$__DFFE_NN1'.
Generating RTLIL representation for module `\$__DFFE_PN0'.
Generating RTLIL representation for module `\$__DFFE_PN1'.
Generating RTLIL representation for module `\$__DFFE_NP0'.
Generating RTLIL representation for module `\$__DFFE_NP1'.
Generating RTLIL representation for module `\$__DFFE_PP0'.
Generating RTLIL representation for module `\$__DFFE_PP1'.
Successfully finished Verilog frontend.

2.34.2. Continuing TECHMAP pass.
Using template \$_DFFE_PP_ for cells of type $_DFFE_PP_.
Using template \$_DFF_P_ for cells of type $_DFF_P_.
No more expansions possible.
<suppressed ~84 debug messages>

2.35. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.
<suppressed ~249 debug messages>

2.36. Executing SIMPLEMAP pass (map simple cells to gate primitives).

2.37. Executing ICE40_FFINIT pass (implement FF init values).
Handling FF init values in demo.
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2879 (SB_DFF): \scl = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2802 (SB_DFFE): \state [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2803 (SB_DFFE): \state [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2804 (SB_DFFE): \state [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2801 (SB_DFFE): \state [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2865 (SB_DFFE): \params_left [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2805 (SB_DFFE): \state [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2800 (SB_DFFE): \state [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2822 (SB_DFFE): \data [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2823 (SB_DFFE): \data [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2824 (SB_DFFE): \data [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2825 (SB_DFFE): \data [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2826 (SB_DFFE): \data [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2827 (SB_DFFE): \data [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2828 (SB_DFFE): \data [6] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2829 (SB_DFFE): \data [7] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2831 (SB_DFFE): \bit_counter [1] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2838 (SB_DFFE): \pixel_data [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2832 (SB_DFFE): \bit_counter [2] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2834 (SB_DFFE): \pixel_data [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2835 (SB_DFFE): \pixel_data [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2836 (SB_DFFE): \pixel_data [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2830 (SB_DFFE): \bit_counter [0] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2837 (SB_DFFE): \pixel_data [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2839 (SB_DFFE): \pixel_data [6] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2840 (SB_DFFE): \pixel_data [7] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2841 (SB_DFFE): \pixel_data [8] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2842 (SB_DFFE): \pixel_data [9] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2843 (SB_DFFE): \pixel_data [10] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2844 (SB_DFFE): \pixel_data [11] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2845 (SB_DFFE): \pixel_data [12] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2846 (SB_DFFE): \pixel_data [13] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2847 (SB_DFFE): \pixel_data [14] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2848 (SB_DFFE): \pixel_data [15] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2849 (SB_DFFE): \pixel_bit_counter [0] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2850 (SB_DFFE): \pixel_bit_counter [1] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2851 (SB_DFFE): \pixel_bit_counter [2] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2857 (SB_DFFE): \cmd_counter [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2852 (SB_DFFE): \pixel_bit_counter [3] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2854 (SB_DFFE): \cmd_counter [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2855 (SB_DFFE): \cmd_counter [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2833 (SB_DFFE): \pixel_data [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2856 (SB_DFFE): \cmd_counter [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2858 (SB_DFFE): \param_counter [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2859 (SB_DFFE): \param_counter [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2860 (SB_DFFE): \param_counter [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2861 (SB_DFFE): \param_counter [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2862 (SB_DFFE): \param_counter [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2863 (SB_DFFE): \param_counter [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2866 (SB_DFFE): \params_left [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2853 (SB_DFFE): \cmd_counter [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2864 (SB_DFFE): \param_counter [6] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2867 (SB_DFFE): \params_left [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2868 (SB_DFFE): \params_left [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2869 (SB_DFFE): \params_left [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2870 (SB_DFFE): \params_left [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2871 (SB_DFFE): \params_left [6] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2872 (SB_DFFE): \params_left [7] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2873 (SB_DFFE): \params_left [8] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2874 (SB_DFFE): \params_left [9] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2875 (SB_DFFE): \params_left [10] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2876 (SB_DFFE): \params_left [11] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2877 (SB_DFFE): \params_left [12] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2878 (SB_DFFE): \params_left [13] = 0

2.38. Executing ICE40_FFSSR pass (merge synchronous set/reset into FF cells).
Merging set/reset $_MUX_ cells into SB_FFs in demo.

2.39. Executing ICE40_OPT pass (performing simple optimizations).

2.39.1. Running ICE40 specific optimizations.

2.39.2. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.
<suppressed ~96 debug messages>

2.39.3. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\demo'.
<suppressed ~399 debug messages>
Removed a total of 133 cells.

2.39.4. Executing OPT_RMDFF pass (remove dff with constant values).

2.39.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..
Removed 0 unused cells and 727 unused wires.
<suppressed ~1 debug messages>

2.39.6. Rerunning OPT passes. (Removed registers in this run.)

2.39.7. Running ICE40 specific optimizations.

2.39.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.

2.39.9. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\demo'.
Removed a total of 0 cells.

2.39.10. Executing OPT_RMDFF pass (remove dff with constant values).

2.39.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..

2.39.12. Finished OPT passes. (There is nothing left to do.)

2.40. Executing TECHMAP pass (map to technology primitives).

2.40.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/latches_map.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/latches_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Successfully finished Verilog frontend.

2.40.2. Continuing TECHMAP pass.
No more expansions possible.

2.41. Executing ABC pass (technology mapping using ABC).

2.41.1. Extracting gate netlist of module `\demo' to `<abc-temp-dir>/input.blif'..
Extracted 635 gates and 758 wires to a netlist network with 121 inputs and 104 outputs.

2.41.1.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + lutpack -S 1 
ABC: + dress 
ABC: Total number of equiv classes                =     189.
ABC: Participating nodes from both networks       =     423.
ABC: Participating nodes from the first network   =     190. (  65.07 % of nodes)
ABC: Participating nodes from the second network  =     233. (  79.79 % of nodes)
ABC: Node pairs (any polarity)                    =     190. (  65.07 % of names can be moved)
ABC: Node pairs (same polarity)                   =     160. (  54.79 % of names can be moved)
ABC: Total runtime =     0.09 sec
ABC: + write_blif <abc-temp-dir>/output.blif 

2.41.1.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:      578
ABC RESULTS:        internal signals:      533
ABC RESULTS:           input signals:      121
ABC RESULTS:          output signals:      104
Removing temp directory.
Removed 0 unused cells and 381 unused wires.

2.42. Executing TECHMAP pass (map to technology primitives).

2.42.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/cells_map.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$__DFFE_NN0'.
Generating RTLIL representation for module `\$__DFFE_NN1'.
Generating RTLIL representation for module `\$__DFFE_PN0'.
Generating RTLIL representation for module `\$__DFFE_PN1'.
Generating RTLIL representation for module `\$__DFFE_NP0'.
Generating RTLIL representation for module `\$__DFFE_NP1'.
Generating RTLIL representation for module `\$__DFFE_PP0'.
Generating RTLIL representation for module `\$__DFFE_PP1'.
Generating RTLIL representation for module `\$lut'.
Successfully finished Verilog frontend.

2.42.2. Continuing TECHMAP pass.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=1\LUT=2'01 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000011111111000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01101111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000010111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011111100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001101011001001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111010111111100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000000111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000001111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11101111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0101001100110011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0101001111111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1110110000000011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000010001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0110100100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111110110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100101000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00001110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001000001111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0010110000000111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01001011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11001010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00110101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100111110100000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000101011110011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111101011111100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000110000001010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001111100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11000101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011111101010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111001100000101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011010100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000001100000101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1110111011110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000101111111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1110000100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11110001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100111100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00000111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1010110000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0010010000001011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000011111111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000011110100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111000100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1110111100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111010000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11111000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01100000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11110100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00011000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0101111111110011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000001011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1101111111111100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000111111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10100011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000110100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011110001010111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000101000000011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111111110010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0111111100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000101000110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1010110011001100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000011101110111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000111111111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000100110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1110101100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000110111001100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001010000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100000100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111100000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00001011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111010001000100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000111100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100000011111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000000011111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111000001000100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00011111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111000100111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011111111111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000011100001000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000111000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11111110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000001110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1110101110101010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011001100001011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0110000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0010001100110101 for cells of type $lut.
No more expansions possible.
<suppressed ~1466 debug messages>
Removed 0 unused cells and 578 unused wires.

2.43. Executing HIERARCHY pass (managing design hierarchy).

2.43.1. Analyzing design hierarchy..
Top module:  \demo

2.43.2. Analyzing design hierarchy..
Top module:  \demo
Removed 0 unused modules.

2.44. Printing statistics.

=== demo ===

   Number of wires:                441
   Number of wire bits:           1745
   Number of public wires:         156
   Number of public wire bits:    1328
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                475
     SB_CARRY                       55
     SB_DFF                          1
     SB_DFFE                        83
     SB_LUT4                       336

2.45. Executing CHECK pass (checking for obvious problems).
checking module demo..
found and reported 0 problems.

2.46. Executing BLIF backend.

2.47. Executing JSON backend.

Warnings: 1 unique messages, 1 total
End of script. Logfile hash: 8833408e68
CPU: user 2.90s system 0.15s, MEM: 51.70 MB total, 46.11 MB resident
Yosys 0.9 (git sha1 1979e0b)
Time spent: 15% 23x opt_clean (0 sec), 14% 24x opt_expr (0 sec), ...
