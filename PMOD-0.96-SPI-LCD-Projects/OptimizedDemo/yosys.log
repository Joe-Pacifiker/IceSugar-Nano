
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2019  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9 (git sha1 1979e0b)


-- Parsing `demo.v' using frontend `verilog' --

1. Executing Verilog-2005 frontend: demo.v
Parsing Verilog input from `demo.v' to AST representation.
Generating RTLIL representation for module `\demo'.
Successfully finished Verilog frontend.

-- Running command `synth_ice40 -json demo.json -blif demo.blif' --

2. Executing SYNTH_ICE40 pass.

2.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/cells_sim.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\SB_IO'.
Generating RTLIL representation for module `\SB_GB_IO'.
Generating RTLIL representation for module `\SB_GB'.
Generating RTLIL representation for module `\SB_LUT4'.
Generating RTLIL representation for module `\SB_CARRY'.
Generating RTLIL representation for module `\SB_DFF'.
Generating RTLIL representation for module `\SB_DFFE'.
Generating RTLIL representation for module `\SB_DFFSR'.
Generating RTLIL representation for module `\SB_DFFR'.
Generating RTLIL representation for module `\SB_DFFSS'.
Generating RTLIL representation for module `\SB_DFFS'.
Generating RTLIL representation for module `\SB_DFFESR'.
Generating RTLIL representation for module `\SB_DFFER'.
Generating RTLIL representation for module `\SB_DFFESS'.
Generating RTLIL representation for module `\SB_DFFES'.
Generating RTLIL representation for module `\SB_DFFN'.
Generating RTLIL representation for module `\SB_DFFNE'.
Generating RTLIL representation for module `\SB_DFFNSR'.
Generating RTLIL representation for module `\SB_DFFNR'.
Generating RTLIL representation for module `\SB_DFFNSS'.
Generating RTLIL representation for module `\SB_DFFNS'.
Generating RTLIL representation for module `\SB_DFFNESR'.
Generating RTLIL representation for module `\SB_DFFNER'.
Generating RTLIL representation for module `\SB_DFFNESS'.
Generating RTLIL representation for module `\SB_DFFNES'.
Generating RTLIL representation for module `\SB_RAM40_4K'.
Generating RTLIL representation for module `\SB_RAM40_4KNR'.
Generating RTLIL representation for module `\SB_RAM40_4KNW'.
Generating RTLIL representation for module `\SB_RAM40_4KNRNW'.
Generating RTLIL representation for module `\ICESTORM_LC'.
Generating RTLIL representation for module `\SB_PLL40_CORE'.
Generating RTLIL representation for module `\SB_PLL40_PAD'.
Generating RTLIL representation for module `\SB_PLL40_2_PAD'.
Generating RTLIL representation for module `\SB_PLL40_2F_CORE'.
Generating RTLIL representation for module `\SB_PLL40_2F_PAD'.
Generating RTLIL representation for module `\SB_WARMBOOT'.
Generating RTLIL representation for module `\SB_SPRAM256KA'.
Generating RTLIL representation for module `\SB_HFOSC'.
Generating RTLIL representation for module `\SB_LFOSC'.
Generating RTLIL representation for module `\SB_RGBA_DRV'.
Generating RTLIL representation for module `\SB_LED_DRV_CUR'.
Generating RTLIL representation for module `\SB_RGB_DRV'.
Generating RTLIL representation for module `\SB_I2C'.
Generating RTLIL representation for module `\SB_SPI'.
Generating RTLIL representation for module `\SB_LEDDA_IP'.
Generating RTLIL representation for module `\SB_FILTER_50NS'.
Generating RTLIL representation for module `\SB_IO_I3C'.
Generating RTLIL representation for module `\SB_IO_OD'.
Generating RTLIL representation for module `\SB_MAC16'.
Successfully finished Verilog frontend.

2.2. Executing HIERARCHY pass (managing design hierarchy).

2.2.1. Finding top of design hierarchy..
root of   0 design levels: demo                
Automatically selected demo as design top module.

2.2.2. Analyzing design hierarchy..
Top module:  \demo

2.2.3. Analyzing design hierarchy..
Top module:  \demo
Removed 0 unused modules.

2.3. Executing PROC pass (convert processes to netlists).

2.3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

2.3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 16 switch rules as full_case in process $proc$demo.v:212$140 in module demo.
Removed a total of 0 dead cases.

2.3.3. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\demo.$proc$demo.v:49$320'.
  Set init value: \scl = 1'1
  Set init value: \state = 6'000000
  Set init value: \data = 8'00000000
  Set init value: \bit_counter = 3'111
  Set init value: \pixel_data = 16'0000000000000000
  Set init value: \pixel_bit_counter = 4'1111
  Set init value: \cmd_counter = 5'00000
  Set init value: \param_counter = 7'0000000
  Set init value: \params_left = 14'00000000000000

2.3.4. Executing PROC_ARST pass (detect async resets in processes).

2.3.5. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\demo.$proc$demo.v:49$320'.
     1/283: $1\pixel_bit_counter[3:0]
     2/283: $1\pixel_data[15:0]
     3/283: $1\bit_counter[2:0]
     4/283: $1\data[7:0]
     5/283: $1\params_left[13:0]
     6/283: $1\param_counter[6:0]
     7/283: $0$memwr$\params$demo.v:192$137_DATA[7:0]$594
     8/283: $0$memwr$\params$demo.v:192$137_ADDR[31:0]$593
     9/283: $0$memwr$\params$demo.v:191$136_DATA[7:0]$592
    10/283: $0$memwr$\params$demo.v:191$136_ADDR[31:0]$591
    11/283: $0$memwr$\params$demo.v:190$135_DATA[7:0]$590
    12/283: $0$memwr$\params$demo.v:190$135_ADDR[31:0]$589
    13/283: $0$memwr$\params$demo.v:189$134_DATA[7:0]$588
    14/283: $0$memwr$\params$demo.v:189$134_ADDR[31:0]$587
    15/283: $0$memwr$\params$demo.v:188$133_DATA[7:0]$586
    16/283: $0$memwr$\params$demo.v:188$133_ADDR[31:0]$585
    17/283: $0$memwr$\params$demo.v:187$132_DATA[7:0]$584
    18/283: $0$memwr$\params$demo.v:187$132_ADDR[31:0]$583
    19/283: $0$memwr$\params$demo.v:186$131_DATA[7:0]$582
    20/283: $0$memwr$\params$demo.v:186$131_ADDR[31:0]$581
    21/283: $0$memwr$\params$demo.v:185$130_DATA[7:0]$580
    22/283: $0$memwr$\params$demo.v:185$130_ADDR[31:0]$579
    23/283: $0$memwr$\params$demo.v:184$129_DATA[7:0]$578
    24/283: $0$memwr$\params$demo.v:184$129_ADDR[31:0]$577
    25/283: $0$memwr$\params$demo.v:183$128_DATA[7:0]$576
    26/283: $0$memwr$\params$demo.v:183$128_ADDR[31:0]$575
    27/283: $0$memwr$\params$demo.v:182$127_DATA[7:0]$574
    28/283: $0$memwr$\params$demo.v:182$127_ADDR[31:0]$573
    29/283: $0$memwr$\params$demo.v:181$126_DATA[7:0]$572
    30/283: $0$memwr$\params$demo.v:181$126_ADDR[31:0]$571
    31/283: $0$memwr$\params$demo.v:180$125_DATA[7:0]$570
    32/283: $0$memwr$\params$demo.v:180$125_ADDR[31:0]$569
    33/283: $0$memwr$\params$demo.v:179$124_DATA[7:0]$568
    34/283: $0$memwr$\params$demo.v:179$124_ADDR[31:0]$567
    35/283: $0$memwr$\params$demo.v:178$123_DATA[7:0]$566
    36/283: $0$memwr$\params$demo.v:178$123_ADDR[31:0]$565
    37/283: $0$memwr$\params$demo.v:177$122_DATA[7:0]$564
    38/283: $0$memwr$\params$demo.v:177$122_ADDR[31:0]$563
    39/283: $0$memwr$\params$demo.v:176$121_DATA[7:0]$562
    40/283: $0$memwr$\params$demo.v:176$121_ADDR[31:0]$561
    41/283: $0$memwr$\params$demo.v:175$120_DATA[7:0]$560
    42/283: $0$memwr$\params$demo.v:175$120_ADDR[31:0]$559
    43/283: $0$memwr$\params$demo.v:174$119_DATA[7:0]$558
    44/283: $0$memwr$\params$demo.v:174$119_ADDR[31:0]$557
    45/283: $0$memwr$\params$demo.v:173$118_DATA[7:0]$556
    46/283: $0$memwr$\params$demo.v:173$118_ADDR[31:0]$555
    47/283: $0$memwr$\params$demo.v:172$117_DATA[7:0]$554
    48/283: $0$memwr$\params$demo.v:172$117_ADDR[31:0]$553
    49/283: $0$memwr$\params$demo.v:171$116_DATA[7:0]$552
    50/283: $0$memwr$\params$demo.v:171$116_ADDR[31:0]$551
    51/283: $0$memwr$\params$demo.v:170$115_DATA[7:0]$550
    52/283: $0$memwr$\params$demo.v:170$115_ADDR[31:0]$549
    53/283: $0$memwr$\params$demo.v:169$114_DATA[7:0]$548
    54/283: $0$memwr$\params$demo.v:169$114_ADDR[31:0]$547
    55/283: $0$memwr$\params$demo.v:168$113_DATA[7:0]$546
    56/283: $0$memwr$\params$demo.v:168$113_ADDR[31:0]$545
    57/283: $0$memwr$\params$demo.v:167$112_DATA[7:0]$544
    58/283: $0$memwr$\params$demo.v:167$112_ADDR[31:0]$543
    59/283: $0$memwr$\params$demo.v:166$111_DATA[7:0]$542
    60/283: $0$memwr$\params$demo.v:166$111_ADDR[31:0]$541
    61/283: $0$memwr$\params$demo.v:165$110_DATA[7:0]$540
    62/283: $0$memwr$\params$demo.v:165$110_ADDR[31:0]$539
    63/283: $0$memwr$\params$demo.v:164$109_DATA[7:0]$538
    64/283: $0$memwr$\params$demo.v:164$109_ADDR[31:0]$537
    65/283: $0$memwr$\params$demo.v:163$108_DATA[7:0]$536
    66/283: $0$memwr$\params$demo.v:163$108_ADDR[31:0]$535
    67/283: $0$memwr$\params$demo.v:162$107_DATA[7:0]$534
    68/283: $0$memwr$\params$demo.v:162$107_ADDR[31:0]$533
    69/283: $0$memwr$\params$demo.v:161$106_DATA[7:0]$532
    70/283: $0$memwr$\params$demo.v:161$106_ADDR[31:0]$531
    71/283: $0$memwr$\params$demo.v:160$105_DATA[7:0]$530
    72/283: $0$memwr$\params$demo.v:160$105_ADDR[31:0]$529
    73/283: $0$memwr$\params$demo.v:159$104_DATA[7:0]$528
    74/283: $0$memwr$\params$demo.v:159$104_ADDR[31:0]$527
    75/283: $0$memwr$\params$demo.v:158$103_DATA[7:0]$526
    76/283: $0$memwr$\params$demo.v:158$103_ADDR[31:0]$525
    77/283: $0$memwr$\params$demo.v:157$102_DATA[7:0]$524
    78/283: $0$memwr$\params$demo.v:157$102_ADDR[31:0]$523
    79/283: $0$memwr$\params$demo.v:156$101_DATA[7:0]$522
    80/283: $0$memwr$\params$demo.v:156$101_ADDR[31:0]$521
    81/283: $0$memwr$\params$demo.v:155$100_DATA[7:0]$520
    82/283: $0$memwr$\params$demo.v:155$100_ADDR[31:0]$519
    83/283: $0$memwr$\params$demo.v:154$99_DATA[7:0]$518
    84/283: $0$memwr$\params$demo.v:154$99_ADDR[31:0]$517
    85/283: $0$memwr$\params$demo.v:153$98_DATA[7:0]$516
    86/283: $0$memwr$\params$demo.v:153$98_ADDR[31:0]$515
    87/283: $0$memwr$\params$demo.v:152$97_DATA[7:0]$514
    88/283: $0$memwr$\params$demo.v:152$97_ADDR[31:0]$513
    89/283: $0$memwr$\params$demo.v:151$96_DATA[7:0]$512
    90/283: $0$memwr$\params$demo.v:151$96_ADDR[31:0]$511
    91/283: $0$memwr$\params$demo.v:150$95_DATA[7:0]$510
    92/283: $0$memwr$\params$demo.v:150$95_ADDR[31:0]$509
    93/283: $0$memwr$\params$demo.v:149$94_DATA[7:0]$508
    94/283: $0$memwr$\params$demo.v:149$94_ADDR[31:0]$507
    95/283: $0$memwr$\params$demo.v:148$93_DATA[7:0]$506
    96/283: $0$memwr$\params$demo.v:148$93_ADDR[31:0]$505
    97/283: $0$memwr$\params$demo.v:147$92_DATA[7:0]$504
    98/283: $0$memwr$\params$demo.v:147$92_ADDR[31:0]$503
    99/283: $0$memwr$\params$demo.v:146$91_DATA[7:0]$502
   100/283: $0$memwr$\params$demo.v:146$91_ADDR[31:0]$501
   101/283: $0$memwr$\params$demo.v:145$90_DATA[7:0]$500
   102/283: $0$memwr$\params$demo.v:145$90_ADDR[31:0]$499
   103/283: $0$memwr$\params$demo.v:144$89_DATA[7:0]$498
   104/283: $0$memwr$\params$demo.v:144$89_ADDR[31:0]$497
   105/283: $0$memwr$\params$demo.v:143$88_DATA[7:0]$496
   106/283: $0$memwr$\params$demo.v:143$88_ADDR[31:0]$495
   107/283: $0$memwr$\params$demo.v:142$87_DATA[7:0]$494
   108/283: $0$memwr$\params$demo.v:142$87_ADDR[31:0]$493
   109/283: $0$memwr$\params$demo.v:141$86_DATA[7:0]$492
   110/283: $0$memwr$\params$demo.v:141$86_ADDR[31:0]$491
   111/283: $0$memwr$\params$demo.v:140$85_DATA[7:0]$490
   112/283: $0$memwr$\params$demo.v:140$85_ADDR[31:0]$489
   113/283: $0$memwr$\params$demo.v:139$84_DATA[7:0]$488
   114/283: $0$memwr$\params$demo.v:139$84_ADDR[31:0]$487
   115/283: $0$memwr$\params$demo.v:138$83_DATA[7:0]$486
   116/283: $0$memwr$\params$demo.v:138$83_ADDR[31:0]$485
   117/283: $0$memwr$\params$demo.v:137$82_DATA[7:0]$484
   118/283: $0$memwr$\params$demo.v:137$82_ADDR[31:0]$483
   119/283: $0$memwr$\params$demo.v:136$81_DATA[7:0]$482
   120/283: $0$memwr$\params$demo.v:136$81_ADDR[31:0]$481
   121/283: $0$memwr$\params$demo.v:135$80_DATA[7:0]$480
   122/283: $0$memwr$\params$demo.v:135$80_ADDR[31:0]$479
   123/283: $0$memwr$\params$demo.v:134$79_DATA[7:0]$478
   124/283: $0$memwr$\params$demo.v:134$79_ADDR[31:0]$477
   125/283: $0$memwr$\params$demo.v:133$78_DATA[7:0]$476
   126/283: $0$memwr$\params$demo.v:133$78_ADDR[31:0]$475
   127/283: $0$memwr$\params$demo.v:132$77_DATA[7:0]$474
   128/283: $0$memwr$\params$demo.v:132$77_ADDR[31:0]$473
   129/283: $0$memwr$\params$demo.v:131$76_DATA[7:0]$472
   130/283: $0$memwr$\params$demo.v:131$76_ADDR[31:0]$471
   131/283: $0$memwr$\params$demo.v:130$75_DATA[7:0]$470
   132/283: $0$memwr$\params$demo.v:130$75_ADDR[31:0]$469
   133/283: $0$memwr$\params$demo.v:129$74_DATA[7:0]$468
   134/283: $0$memwr$\params$demo.v:129$74_ADDR[31:0]$467
   135/283: $0$memwr$\params$demo.v:128$73_DATA[7:0]$466
   136/283: $0$memwr$\params$demo.v:128$73_ADDR[31:0]$465
   137/283: $0$memwr$\params$demo.v:127$72_DATA[7:0]$464
   138/283: $0$memwr$\params$demo.v:127$72_ADDR[31:0]$463
   139/283: $0$memwr$\params$demo.v:126$71_DATA[7:0]$462
   140/283: $0$memwr$\params$demo.v:126$71_ADDR[31:0]$461
   141/283: $0$memwr$\params$demo.v:125$70_DATA[7:0]$460
   142/283: $0$memwr$\params$demo.v:125$70_ADDR[31:0]$459
   143/283: $0$memwr$\params$demo.v:124$69_DATA[7:0]$458
   144/283: $0$memwr$\params$demo.v:124$69_ADDR[31:0]$457
   145/283: $0$memwr$\params$demo.v:123$68_DATA[7:0]$456
   146/283: $0$memwr$\params$demo.v:123$68_ADDR[31:0]$455
   147/283: $0$memwr$\params$demo.v:122$67_DATA[7:0]$454
   148/283: $0$memwr$\params$demo.v:122$67_ADDR[31:0]$453
   149/283: $0$memwr$\params$demo.v:121$66_DATA[7:0]$452
   150/283: $0$memwr$\params$demo.v:121$66_ADDR[31:0]$451
   151/283: $0$memwr$\params$demo.v:120$65_DATA[7:0]$450
   152/283: $0$memwr$\params$demo.v:120$65_ADDR[31:0]$449
   153/283: $0$memwr$\params$demo.v:119$64_DATA[7:0]$448
   154/283: $0$memwr$\params$demo.v:119$64_ADDR[31:0]$447
   155/283: $0$memwr$\params$demo.v:118$63_DATA[7:0]$446
   156/283: $0$memwr$\params$demo.v:118$63_ADDR[31:0]$445
   157/283: $0$memwr$\params$demo.v:117$62_DATA[7:0]$444
   158/283: $0$memwr$\params$demo.v:117$62_ADDR[31:0]$443
   159/283: $0$memwr$\params$demo.v:116$61_DATA[7:0]$442
   160/283: $0$memwr$\params$demo.v:116$61_ADDR[31:0]$441
   161/283: $0$memwr$\params$demo.v:115$60_DATA[7:0]$440
   162/283: $0$memwr$\params$demo.v:115$60_ADDR[31:0]$439
   163/283: $0$memwr$\params$demo.v:114$59_DATA[7:0]$438
   164/283: $0$memwr$\params$demo.v:114$59_ADDR[31:0]$437
   165/283: $0$memwr$\params$demo.v:113$58_DATA[7:0]$436
   166/283: $0$memwr$\params$demo.v:113$58_ADDR[31:0]$435
   167/283: $0$memwr$\params$demo.v:112$57_DATA[7:0]$434
   168/283: $0$memwr$\params$demo.v:112$57_ADDR[31:0]$433
   169/283: $0$memwr$\params$demo.v:111$56_DATA[7:0]$432
   170/283: $0$memwr$\params$demo.v:111$56_ADDR[31:0]$431
   171/283: $0$memwr$\params$demo.v:110$55_DATA[7:0]$430
   172/283: $0$memwr$\params$demo.v:110$55_ADDR[31:0]$429
   173/283: $0$memwr$\params$demo.v:109$54_DATA[7:0]$428
   174/283: $0$memwr$\params$demo.v:109$54_ADDR[31:0]$427
   175/283: $1\cmd_counter[4:0]
   176/283: $0$memwr$\num_params$demo.v:106$53_DATA[13:0]$426
   177/283: $0$memwr$\num_params$demo.v:106$53_ADDR[31:0]$425
   178/283: $0$memwr$\num_params$demo.v:105$52_DATA[13:0]$424
   179/283: $0$memwr$\num_params$demo.v:105$52_ADDR[31:0]$423
   180/283: $0$memwr$\num_params$demo.v:104$51_DATA[13:0]$422
   181/283: $0$memwr$\num_params$demo.v:104$51_ADDR[31:0]$421
   182/283: $0$memwr$\num_params$demo.v:103$50_DATA[13:0]$420
   183/283: $0$memwr$\num_params$demo.v:103$50_ADDR[31:0]$419
   184/283: $0$memwr$\num_params$demo.v:102$49_DATA[13:0]$418
   185/283: $0$memwr$\num_params$demo.v:102$49_ADDR[31:0]$417
   186/283: $0$memwr$\num_params$demo.v:101$48_DATA[13:0]$416
   187/283: $0$memwr$\num_params$demo.v:101$48_ADDR[31:0]$415
   188/283: $0$memwr$\num_params$demo.v:100$47_DATA[13:0]$414
   189/283: $0$memwr$\num_params$demo.v:100$47_ADDR[31:0]$413
   190/283: $0$memwr$\num_params$demo.v:99$46_DATA[13:0]$412
   191/283: $0$memwr$\num_params$demo.v:99$46_ADDR[31:0]$411
   192/283: $0$memwr$\num_params$demo.v:98$45_DATA[13:0]$410
   193/283: $0$memwr$\num_params$demo.v:98$45_ADDR[31:0]$409
   194/283: $0$memwr$\num_params$demo.v:97$44_DATA[13:0]$408
   195/283: $0$memwr$\num_params$demo.v:97$44_ADDR[31:0]$407
   196/283: $0$memwr$\num_params$demo.v:96$43_DATA[13:0]$406
   197/283: $0$memwr$\num_params$demo.v:96$43_ADDR[31:0]$405
   198/283: $0$memwr$\num_params$demo.v:95$42_DATA[13:0]$404
   199/283: $0$memwr$\num_params$demo.v:95$42_ADDR[31:0]$403
   200/283: $0$memwr$\num_params$demo.v:94$41_DATA[13:0]$402
   201/283: $0$memwr$\num_params$demo.v:94$41_ADDR[31:0]$401
   202/283: $0$memwr$\num_params$demo.v:93$40_DATA[13:0]$400
   203/283: $0$memwr$\num_params$demo.v:93$40_ADDR[31:0]$399
   204/283: $0$memwr$\num_params$demo.v:92$39_DATA[13:0]$398
   205/283: $0$memwr$\num_params$demo.v:92$39_ADDR[31:0]$397
   206/283: $0$memwr$\num_params$demo.v:91$38_DATA[13:0]$396
   207/283: $0$memwr$\num_params$demo.v:91$38_ADDR[31:0]$395
   208/283: $0$memwr$\num_params$demo.v:90$37_DATA[13:0]$394
   209/283: $0$memwr$\num_params$demo.v:90$37_ADDR[31:0]$393
   210/283: $0$memwr$\num_params$demo.v:89$36_DATA[13:0]$392
   211/283: $0$memwr$\num_params$demo.v:89$36_ADDR[31:0]$391
   212/283: $0$memwr$\num_params$demo.v:88$35_DATA[13:0]$390
   213/283: $0$memwr$\num_params$demo.v:88$35_ADDR[31:0]$389
   214/283: $0$memwr$\num_params$demo.v:87$34_DATA[13:0]$388
   215/283: $0$memwr$\num_params$demo.v:87$34_ADDR[31:0]$387
   216/283: $0$memwr$\num_params$demo.v:86$33_DATA[13:0]$386
   217/283: $0$memwr$\num_params$demo.v:86$33_ADDR[31:0]$385
   218/283: $0$memwr$\num_params$demo.v:85$32_DATA[13:0]$384
   219/283: $0$memwr$\num_params$demo.v:85$32_ADDR[31:0]$383
   220/283: $0$memwr$\num_params$demo.v:84$31_DATA[13:0]$382
   221/283: $0$memwr$\num_params$demo.v:84$31_ADDR[31:0]$381
   222/283: $0$memwr$\num_params$demo.v:83$30_DATA[13:0]$380
   223/283: $0$memwr$\num_params$demo.v:83$30_ADDR[31:0]$379
   224/283: $0$memwr$\num_params$demo.v:82$29_DATA[13:0]$378
   225/283: $0$memwr$\num_params$demo.v:82$29_ADDR[31:0]$377
   226/283: $0$memwr$\num_params$demo.v:81$28_DATA[13:0]$376
   227/283: $0$memwr$\num_params$demo.v:81$28_ADDR[31:0]$375
   228/283: $0$memwr$\cmd$demo.v:80$27_DATA[7:0]$374
   229/283: $0$memwr$\cmd$demo.v:80$27_ADDR[31:0]$373
   230/283: $0$memwr$\cmd$demo.v:79$26_DATA[7:0]$372
   231/283: $0$memwr$\cmd$demo.v:79$26_ADDR[31:0]$371
   232/283: $0$memwr$\cmd$demo.v:78$25_DATA[7:0]$370
   233/283: $0$memwr$\cmd$demo.v:78$25_ADDR[31:0]$369
   234/283: $0$memwr$\cmd$demo.v:77$24_DATA[7:0]$368
   235/283: $0$memwr$\cmd$demo.v:77$24_ADDR[31:0]$367
   236/283: $0$memwr$\cmd$demo.v:76$23_DATA[7:0]$366
   237/283: $0$memwr$\cmd$demo.v:76$23_ADDR[31:0]$365
   238/283: $0$memwr$\cmd$demo.v:75$22_DATA[7:0]$364
   239/283: $0$memwr$\cmd$demo.v:75$22_ADDR[31:0]$363
   240/283: $0$memwr$\cmd$demo.v:74$21_DATA[7:0]$362
   241/283: $0$memwr$\cmd$demo.v:74$21_ADDR[31:0]$361
   242/283: $0$memwr$\cmd$demo.v:73$20_DATA[7:0]$360
   243/283: $0$memwr$\cmd$demo.v:73$20_ADDR[31:0]$359
   244/283: $0$memwr$\cmd$demo.v:72$19_DATA[7:0]$358
   245/283: $0$memwr$\cmd$demo.v:72$19_ADDR[31:0]$357
   246/283: $0$memwr$\cmd$demo.v:71$18_DATA[7:0]$356
   247/283: $0$memwr$\cmd$demo.v:71$18_ADDR[31:0]$355
   248/283: $0$memwr$\cmd$demo.v:70$17_DATA[7:0]$354
   249/283: $0$memwr$\cmd$demo.v:70$17_ADDR[31:0]$353
   250/283: $0$memwr$\cmd$demo.v:69$16_DATA[7:0]$352
   251/283: $0$memwr$\cmd$demo.v:69$16_ADDR[31:0]$351
   252/283: $0$memwr$\cmd$demo.v:68$15_DATA[7:0]$350
   253/283: $0$memwr$\cmd$demo.v:68$15_ADDR[31:0]$349
   254/283: $0$memwr$\cmd$demo.v:67$14_DATA[7:0]$348
   255/283: $0$memwr$\cmd$demo.v:67$14_ADDR[31:0]$347
   256/283: $0$memwr$\cmd$demo.v:66$13_DATA[7:0]$346
   257/283: $0$memwr$\cmd$demo.v:66$13_ADDR[31:0]$345
   258/283: $0$memwr$\cmd$demo.v:65$12_DATA[7:0]$344
   259/283: $0$memwr$\cmd$demo.v:65$12_ADDR[31:0]$343
   260/283: $0$memwr$\cmd$demo.v:64$11_DATA[7:0]$342
   261/283: $0$memwr$\cmd$demo.v:64$11_ADDR[31:0]$341
   262/283: $0$memwr$\cmd$demo.v:63$10_DATA[7:0]$340
   263/283: $0$memwr$\cmd$demo.v:63$10_ADDR[31:0]$339
   264/283: $0$memwr$\cmd$demo.v:62$9_DATA[7:0]$338
   265/283: $0$memwr$\cmd$demo.v:62$9_ADDR[31:0]$337
   266/283: $0$memwr$\cmd$demo.v:61$8_DATA[7:0]$336
   267/283: $0$memwr$\cmd$demo.v:61$8_ADDR[31:0]$335
   268/283: $0$memwr$\cmd$demo.v:60$7_DATA[7:0]$334
   269/283: $0$memwr$\cmd$demo.v:60$7_ADDR[31:0]$333
   270/283: $0$memwr$\cmd$demo.v:59$6_DATA[7:0]$332
   271/283: $0$memwr$\cmd$demo.v:59$6_ADDR[31:0]$331
   272/283: $0$memwr$\cmd$demo.v:58$5_DATA[7:0]$330
   273/283: $0$memwr$\cmd$demo.v:58$5_ADDR[31:0]$329
   274/283: $0$memwr$\cmd$demo.v:57$4_DATA[7:0]$328
   275/283: $0$memwr$\cmd$demo.v:57$4_ADDR[31:0]$327
   276/283: $0$memwr$\cmd$demo.v:56$3_DATA[7:0]$326
   277/283: $0$memwr$\cmd$demo.v:56$3_ADDR[31:0]$325
   278/283: $0$memwr$\cmd$demo.v:55$2_DATA[7:0]$324
   279/283: $0$memwr$\cmd$demo.v:55$2_ADDR[31:0]$323
   280/283: $0$memwr$\cmd$demo.v:54$1_DATA[7:0]$322
   281/283: $0$memwr$\cmd$demo.v:54$1_ADDR[31:0]$321
   282/283: $1\scl[0:0]
   283/283: $1\state[5:0]
Creating decoders for process `\demo.$proc$demo.v:212$140'.
     1/14: $0\pixel_data[15:0] [15:8]
     2/14: $0\pixel_data[15:0] [7:0]
     3/14: $0\param_counter[6:0]
     4/14: $0\cmd_counter[4:0]
     5/14: $0\pixel_bit_counter[3:0]
     6/14: $0\params_left[13:0]
     7/14: $0\bit_counter[2:0]
     8/14: $0\data[7:0]
     9/14: $0\delay[15:0]
    10/14: $0\state[5:0]
    11/14: $0\cs[0:0]
    12/14: $0\mosi[0:0]
    13/14: $0\dc[0:0]
    14/14: $0\rst[0:0]
Creating decoders for process `\demo.$proc$demo.v:205$138'.
     1/1: $0\scl[0:0]

2.3.6. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:54$1_ADDR' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:54$1_DATA' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:55$2_ADDR' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:55$2_DATA' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:56$3_ADDR' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:56$3_DATA' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:57$4_ADDR' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:57$4_DATA' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:58$5_ADDR' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:58$5_DATA' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:59$6_ADDR' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:59$6_DATA' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:60$7_ADDR' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:60$7_DATA' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:61$8_ADDR' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:61$8_DATA' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:62$9_ADDR' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:62$9_DATA' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:63$10_ADDR' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:63$10_DATA' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:64$11_ADDR' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:64$11_DATA' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:65$12_ADDR' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:65$12_DATA' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:66$13_ADDR' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:66$13_DATA' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:67$14_ADDR' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:67$14_DATA' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:68$15_ADDR' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:68$15_DATA' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:69$16_ADDR' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:69$16_DATA' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:70$17_ADDR' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:70$17_DATA' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:71$18_ADDR' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:71$18_DATA' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:72$19_ADDR' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:72$19_DATA' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:73$20_ADDR' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:73$20_DATA' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:74$21_ADDR' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:74$21_DATA' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:75$22_ADDR' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:75$22_DATA' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:76$23_ADDR' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:76$23_DATA' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:77$24_ADDR' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:77$24_DATA' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:78$25_ADDR' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:78$25_DATA' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:79$26_ADDR' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:79$26_DATA' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:80$27_ADDR' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:80$27_DATA' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:81$28_ADDR' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:81$28_DATA' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:82$29_ADDR' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:82$29_DATA' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:83$30_ADDR' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:83$30_DATA' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:84$31_ADDR' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:84$31_DATA' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:85$32_ADDR' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:85$32_DATA' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:86$33_ADDR' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:86$33_DATA' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:87$34_ADDR' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:87$34_DATA' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:88$35_ADDR' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:88$35_DATA' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:89$36_ADDR' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:89$36_DATA' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:90$37_ADDR' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:90$37_DATA' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:91$38_ADDR' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:91$38_DATA' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:92$39_ADDR' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:92$39_DATA' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:93$40_ADDR' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:93$40_DATA' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:94$41_ADDR' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:94$41_DATA' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:95$42_ADDR' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:95$42_DATA' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:96$43_ADDR' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:96$43_DATA' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:97$44_ADDR' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:97$44_DATA' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:98$45_ADDR' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:98$45_DATA' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:99$46_ADDR' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:99$46_DATA' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:100$47_ADDR' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:100$47_DATA' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:101$48_ADDR' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:101$48_DATA' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:102$49_ADDR' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:102$49_DATA' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:103$50_ADDR' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:103$50_DATA' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:104$51_ADDR' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:104$51_DATA' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:105$52_ADDR' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:105$52_DATA' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:106$53_ADDR' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:106$53_DATA' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:109$54_ADDR' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:109$54_DATA' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:110$55_ADDR' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:110$55_DATA' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:111$56_ADDR' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:111$56_DATA' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:112$57_ADDR' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:112$57_DATA' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:113$58_ADDR' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:113$58_DATA' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:114$59_ADDR' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:114$59_DATA' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:115$60_ADDR' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:115$60_DATA' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:116$61_ADDR' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:116$61_DATA' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:117$62_ADDR' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:117$62_DATA' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:118$63_ADDR' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:118$63_DATA' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:119$64_ADDR' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:119$64_DATA' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:120$65_ADDR' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:120$65_DATA' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:121$66_ADDR' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:121$66_DATA' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:122$67_ADDR' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:122$67_DATA' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:123$68_ADDR' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:123$68_DATA' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:124$69_ADDR' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:124$69_DATA' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:125$70_ADDR' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:125$70_DATA' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:126$71_ADDR' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:126$71_DATA' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:127$72_ADDR' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:127$72_DATA' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:128$73_ADDR' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:128$73_DATA' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:129$74_ADDR' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:129$74_DATA' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:130$75_ADDR' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:130$75_DATA' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:131$76_ADDR' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:131$76_DATA' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:132$77_ADDR' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:132$77_DATA' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:133$78_ADDR' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:133$78_DATA' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:134$79_ADDR' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:134$79_DATA' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:135$80_ADDR' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:135$80_DATA' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:136$81_ADDR' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:136$81_DATA' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:137$82_ADDR' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:137$82_DATA' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:138$83_ADDR' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:138$83_DATA' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:139$84_ADDR' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:139$84_DATA' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:140$85_ADDR' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:140$85_DATA' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:141$86_ADDR' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:141$86_DATA' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:142$87_ADDR' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:142$87_DATA' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:143$88_ADDR' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:143$88_DATA' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:144$89_ADDR' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:144$89_DATA' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:145$90_ADDR' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:145$90_DATA' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:146$91_ADDR' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:146$91_DATA' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:147$92_ADDR' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:147$92_DATA' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:148$93_ADDR' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:148$93_DATA' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:149$94_ADDR' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:149$94_DATA' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:150$95_ADDR' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:150$95_DATA' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:151$96_ADDR' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:151$96_DATA' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:152$97_ADDR' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:152$97_DATA' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:153$98_ADDR' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:153$98_DATA' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:154$99_ADDR' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:154$99_DATA' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:155$100_ADDR' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:155$100_DATA' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:156$101_ADDR' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:156$101_DATA' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:157$102_ADDR' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:157$102_DATA' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:158$103_ADDR' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:158$103_DATA' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:159$104_ADDR' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:159$104_DATA' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:160$105_ADDR' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:160$105_DATA' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:161$106_ADDR' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:161$106_DATA' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:162$107_ADDR' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:162$107_DATA' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:163$108_ADDR' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:163$108_DATA' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:164$109_ADDR' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:164$109_DATA' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:165$110_ADDR' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:165$110_DATA' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:166$111_ADDR' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:166$111_DATA' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:167$112_ADDR' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:167$112_DATA' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:168$113_ADDR' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:168$113_DATA' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:169$114_ADDR' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:169$114_DATA' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:170$115_ADDR' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:170$115_DATA' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:171$116_ADDR' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:171$116_DATA' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:172$117_ADDR' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:172$117_DATA' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:173$118_ADDR' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:173$118_DATA' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:174$119_ADDR' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:174$119_DATA' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:175$120_ADDR' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:175$120_DATA' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:176$121_ADDR' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:176$121_DATA' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:177$122_ADDR' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:177$122_DATA' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:178$123_ADDR' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:178$123_DATA' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:179$124_ADDR' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:179$124_DATA' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:180$125_ADDR' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:180$125_DATA' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:181$126_ADDR' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:181$126_DATA' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:182$127_ADDR' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:182$127_DATA' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:183$128_ADDR' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:183$128_DATA' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:184$129_ADDR' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:184$129_DATA' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:185$130_ADDR' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:185$130_DATA' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:186$131_ADDR' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:186$131_DATA' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:187$132_ADDR' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:187$132_DATA' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:188$133_ADDR' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:188$133_DATA' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:189$134_ADDR' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:189$134_DATA' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:190$135_ADDR' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:190$135_DATA' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:191$136_ADDR' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:191$136_DATA' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:192$137_ADDR' from process `\demo.$proc$demo.v:49$320'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:192$137_DATA' from process `\demo.$proc$demo.v:49$320'.

2.3.7. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\demo.\rst' using process `\demo.$proc$demo.v:212$140'.
  created $dff cell `$procdff$791' with positive edge clock.
Creating register for signal `\demo.\dc' using process `\demo.$proc$demo.v:212$140'.
  created $dff cell `$procdff$792' with positive edge clock.
Creating register for signal `\demo.\mosi' using process `\demo.$proc$demo.v:212$140'.
  created $dff cell `$procdff$793' with positive edge clock.
Creating register for signal `\demo.\cs' using process `\demo.$proc$demo.v:212$140'.
  created $dff cell `$procdff$794' with positive edge clock.
Creating register for signal `\demo.\state' using process `\demo.$proc$demo.v:212$140'.
  created $dff cell `$procdff$795' with positive edge clock.
Creating register for signal `\demo.\delay' using process `\demo.$proc$demo.v:212$140'.
  created $dff cell `$procdff$796' with positive edge clock.
Creating register for signal `\demo.\data' using process `\demo.$proc$demo.v:212$140'.
  created $dff cell `$procdff$797' with positive edge clock.
Creating register for signal `\demo.\bit_counter' using process `\demo.$proc$demo.v:212$140'.
  created $dff cell `$procdff$798' with positive edge clock.
Creating register for signal `\demo.\pixel_data' using process `\demo.$proc$demo.v:212$140'.
  created $dff cell `$procdff$799' with positive edge clock.
Creating register for signal `\demo.\pixel_bit_counter' using process `\demo.$proc$demo.v:212$140'.
  created $dff cell `$procdff$800' with positive edge clock.
Creating register for signal `\demo.\cmd_counter' using process `\demo.$proc$demo.v:212$140'.
  created $dff cell `$procdff$801' with positive edge clock.
Creating register for signal `\demo.\param_counter' using process `\demo.$proc$demo.v:212$140'.
  created $dff cell `$procdff$802' with positive edge clock.
Creating register for signal `\demo.\params_left' using process `\demo.$proc$demo.v:212$140'.
  created $dff cell `$procdff$803' with positive edge clock.
Creating register for signal `\demo.\scl' using process `\demo.$proc$demo.v:205$138'.
  created $dff cell `$procdff$804' with positive edge clock.

2.3.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `demo.$proc$demo.v:49$320'.
Found and cleaned up 18 empty switches in `\demo.$proc$demo.v:212$140'.
Removing empty process `demo.$proc$demo.v:212$140'.
Removing empty process `demo.$proc$demo.v:205$138'.
Cleaned up 18 empty switches.

2.4. Executing FLATTEN pass (flatten design).
No more expansions possible.

2.5. Executing TRIBUF pass.

2.6. Executing DEMINOUT pass (demote inout ports to input or output).

2.7. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.
<suppressed ~16 debug messages>

2.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..
Removed 1 unused cells and 608 unused wires.
<suppressed ~2 debug messages>

2.9. Executing CHECK pass (checking for obvious problems).
checking module demo..
found and reported 0 problems.

2.10. Executing OPT pass (performing simple optimizations).

2.10.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.

2.10.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\demo'.
<suppressed ~108 debug messages>
Removed a total of 36 cells.

2.10.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \demo..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~14 debug messages>

2.10.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \demo.
    New ctrl vector for $pmux cell $procmux$747: { $procmux$712_CMP $auto$opt_reduce.cc:132:opt_mux$806 }
    New ctrl vector for $pmux cell $procmux$769: { $auto$opt_reduce.cc:132:opt_mux$808 $procmux$647_CMP }
  Optimizing cells in module \demo.
Performed a total of 2 changes.

2.10.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\demo'.
Removed a total of 0 cells.

2.10.6. Executing OPT_RMDFF pass (remove dff with constant values).

2.10.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..
Removed 0 unused cells and 36 unused wires.
<suppressed ~1 debug messages>

2.10.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.

2.10.9. Rerunning OPT passes. (Maybe there is more to do..)

2.10.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \demo..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~14 debug messages>

2.10.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \demo.
Performed a total of 0 changes.

2.10.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\demo'.
Removed a total of 0 cells.

2.10.13. Executing OPT_RMDFF pass (remove dff with constant values).

2.10.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..

2.10.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.

2.10.16. Finished OPT passes. (There is nothing left to do.)

2.11. Executing WREDUCE pass (reducing word size of cells).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:54$183 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:55$184 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:56$185 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:57$186 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:58$187 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:59$188 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:60$189 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:61$190 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:62$191 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:63$192 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:64$193 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:65$194 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:66$195 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:67$196 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:68$197 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:69$198 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:70$199 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:71$200 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:72$201 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:73$202 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:74$203 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:75$204 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:76$205 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:77$206 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:78$207 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:79$208 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:80$209 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\num_params$demo.v:100$229 (num_params).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\num_params$demo.v:101$230 (num_params).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\num_params$demo.v:102$231 (num_params).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\num_params$demo.v:103$232 (num_params).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\num_params$demo.v:104$233 (num_params).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\num_params$demo.v:105$234 (num_params).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\num_params$demo.v:106$235 (num_params).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\num_params$demo.v:81$210 (num_params).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\num_params$demo.v:82$211 (num_params).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\num_params$demo.v:83$212 (num_params).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\num_params$demo.v:84$213 (num_params).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\num_params$demo.v:85$214 (num_params).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\num_params$demo.v:86$215 (num_params).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\num_params$demo.v:87$216 (num_params).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\num_params$demo.v:88$217 (num_params).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\num_params$demo.v:89$218 (num_params).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\num_params$demo.v:90$219 (num_params).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\num_params$demo.v:91$220 (num_params).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\num_params$demo.v:92$221 (num_params).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\num_params$demo.v:93$222 (num_params).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\num_params$demo.v:94$223 (num_params).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\num_params$demo.v:95$224 (num_params).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\num_params$demo.v:96$225 (num_params).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\num_params$demo.v:97$226 (num_params).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\num_params$demo.v:98$227 (num_params).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\num_params$demo.v:99$228 (num_params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:109$236 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:110$237 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:111$238 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:112$239 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:113$240 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:114$241 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:115$242 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:116$243 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:117$244 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:118$245 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:119$246 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:120$247 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:121$248 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:122$249 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:123$250 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:124$251 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:125$252 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:126$253 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:127$254 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:128$255 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:129$256 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:130$257 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:131$258 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:132$259 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:133$260 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:134$261 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:135$262 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:136$263 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:137$264 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:138$265 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:139$266 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:140$267 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:141$268 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:142$269 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:143$270 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:144$271 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:145$272 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:146$273 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:147$274 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:148$275 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:149$276 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:150$277 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:151$278 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:152$279 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:153$280 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:154$281 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:155$282 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:156$283 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:157$284 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:158$285 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:159$286 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:160$287 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:161$288 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:162$289 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:163$290 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:164$291 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:165$292 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:166$293 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:167$294 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:168$295 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:169$296 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:170$297 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:171$298 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:172$299 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:173$300 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:174$301 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:175$302 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:176$303 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:177$304 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:178$305 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:179$306 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:180$307 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:181$308 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:182$309 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:183$310 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:184$311 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:185$312 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:186$313 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:187$314 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:188$315 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:189$316 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:190$317 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:191$318 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:192$319 (params).
Removed top 1 bits (of 16) from port B of cell demo.$le$demo.v:256$143 ($le).
Removed top 1 bits (of 16) from port B of cell demo.$le$demo.v:240$141 ($le).
Removed top 15 bits (of 16) from port B of cell demo.$add$demo.v:242$142 ($add).
Removed top 4 bits (of 5) from port B of cell demo.$add$demo.v:278$148 ($add).
Removed top 4 bits (of 5) from port B of cell demo.$sub$demo.v:295$151 ($sub).
Removed top 2 bits (of 8) from port B of cell demo.$eq$demo.v:295$152 ($eq).
Removed top 3 bits (of 4) from port B of cell demo.$sub$demo.v:312$157 ($sub).
Removed top 2 bits (of 3) from port B of cell demo.$sub$demo.v:331$161 ($sub).
Removed top 3 bits (of 8) from port B of cell demo.$eq$demo.v:385$168 ($eq).
Removed top 6 bits (of 7) from port B of cell demo.$add$demo.v:431$179 ($add).
Removed top 13 bits (of 14) from port B of cell demo.$sub$demo.v:433$180 ($sub).
Removed top 1 bits (of 16) from port B of cell demo.$lt$demo.v:442$181 ($lt).
Removed top 2 bits (of 6) from port B of cell demo.$procmux$600_CMP0 ($eq).
Removed top 3 bits (of 6) from port B of cell demo.$procmux$628_CMP0 ($eq).
Removed top 3 bits (of 6) from port B of cell demo.$procmux$640_CMP0 ($eq).
Removed top 2 bits (of 6) from port B of cell demo.$procmux$647_CMP0 ($eq).
Removed top 2 bits (of 6) from port B of cell demo.$procmux$674_CMP0 ($eq).
Removed top 4 bits (of 6) from port B of cell demo.$procmux$678_CMP0 ($eq).
Removed top 4 bits (of 6) from port B of cell demo.$procmux$682_CMP0 ($eq).
Removed top 4 bits (of 6) from mux cell demo.$procmux$690 ($mux).
Removed top 3 bits (of 6) from mux cell demo.$procmux$696 ($mux).
Removed top 3 bits (of 6) from mux cell demo.$procmux$698 ($mux).
Removed top 2 bits (of 6) from port B of cell demo.$procmux$700_CMP0 ($eq).
Removed top 5 bits (of 6) from mux cell demo.$procmux$702 ($mux).
Removed top 2 bits (of 6) from port B of cell demo.$procmux$704_CMP0 ($eq).
Removed top 2 bits (of 6) from mux cell demo.$procmux$706 ($mux).
Removed top 2 bits (of 6) from port B of cell demo.$procmux$708_CMP0 ($eq).
Removed top 2 bits (of 6) from mux cell demo.$procmux$710 ($mux).
Removed top 3 bits (of 6) from port B of cell demo.$procmux$712_CMP0 ($eq).
Removed top 4 bits (of 6) from mux cell demo.$procmux$714 ($mux).
Removed top 2 bits (of 6) from mux cell demo.$procmux$717 ($mux).
Removed top 4 bits (of 6) from mux cell demo.$procmux$721 ($mux).
Removed top 2 bits (of 6) from mux cell demo.$procmux$724 ($mux).
Removed top 3 bits (of 6) from port B of cell demo.$procmux$729_CMP0 ($eq).
Removed top 5 bits (of 6) from mux cell demo.$procmux$731 ($mux).
Removed top 5 bits (of 6) from port B of cell demo.$procmux$742_CMP0 ($eq).
Removed top 4 bits (of 6) from wire demo.$procmux$690_Y.
Removed top 3 bits (of 6) from wire demo.$procmux$696_Y.
Removed top 3 bits (of 6) from wire demo.$procmux$698_Y.
Removed top 5 bits (of 6) from wire demo.$procmux$702_Y.
Removed top 2 bits (of 6) from wire demo.$procmux$706_Y.
Removed top 2 bits (of 6) from wire demo.$procmux$710_Y.
Removed top 4 bits (of 6) from wire demo.$procmux$714_Y.
Removed top 2 bits (of 6) from wire demo.$procmux$717_Y.
Removed top 4 bits (of 6) from wire demo.$procmux$721_Y.
Removed top 2 bits (of 6) from wire demo.$procmux$724_Y.
Removed top 5 bits (of 6) from wire demo.$procmux$731_Y.

2.12. Executing PEEPOPT pass (run peephole optimizers).

2.13. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..
Removed 0 unused cells and 11 unused wires.
<suppressed ~1 debug messages>

2.14. Executing SHARE pass (SAT-based resource sharing).
Found 4 cells in module demo that may be considered for resource sharing.
  Analyzing resource sharing options for $memrd$\params$demo.v:415$174 ($memrd):
    Found 1 activation_patterns using ctrl signal $procmux$600_CMP.
    No candidates found.
  Analyzing resource sharing options for $memrd$\num_params$demo.v:405$169 ($memrd):
    Found 1 activation_patterns using ctrl signal $procmux$647_CMP.
    No candidates found.
  Analyzing resource sharing options for $memrd$\cmd$demo.v:295$150 ($memrd):
    Found 3 activation_patterns using ctrl signal { $procmux$700_CMP $procmux$640_CMP $procmux$600_CMP \dc }.
    Found 1 candidates: $memrd$\cmd$demo.v:271$145
    Analyzing resource sharing with $memrd$\cmd$demo.v:271$145 ($memrd):
      Found 2 activation_patterns using ctrl signal { $procmux$628_CMP $eq$demo.v:271$146_Y }.
      Forbidden control signals for this pair of cells: { $eq$demo.v:385$168_Y $logic_and$demo.v:295$153_Y $eq$demo.v:295$152_Y $eq$demo.v:271$146_Y }
      Activation pattern for cell $memrd$\cmd$demo.v:295$150: $procmux$600_CMP = 1'1
      Activation pattern for cell $memrd$\cmd$demo.v:295$150: $procmux$640_CMP = 1'1
      Activation pattern for cell $memrd$\cmd$demo.v:295$150: { $procmux$700_CMP \dc } = 2'10
      Activation pattern for cell $memrd$\cmd$demo.v:271$145: $procmux$628_CMP = 1'1
      Adding exclusive control bits: $procmux$600_CMP vs. $procmux$628_CMP
      Adding exclusive control bits: $procmux$600_CMP vs. $procmux$700_CMP
      Adding exclusive control bits: $procmux$600_CMP vs. $procmux$640_CMP
      Adding exclusive control bits: $procmux$600_CMP vs. $procmux$628_CMP
      Adding exclusive control bits: $procmux$640_CMP vs. $procmux$700_CMP
      Adding exclusive control bits: $procmux$628_CMP vs. $procmux$700_CMP
      Adding exclusive control bits: $procmux$628_CMP vs. $procmux$640_CMP
      Size of SAT problem: 5 cells, 86 variables, 232 clauses
      According to the SAT solver this pair of cells can be shared.
      Activation signal for $memrd$\cmd$demo.v:271$145: $auto$share.cc:976:make_cell_activation_logic$820
      New cell: $auto$share.cc:710:make_supercell$822 ($memrd)
  Analyzing resource sharing options for $auto$share.cc:710:make_supercell$822 ($memrd):
    Found 4 activation_patterns using ctrl signal { $procmux$700_CMP $procmux$640_CMP $procmux$628_CMP $procmux$600_CMP \dc }.
    No candidates found.
Removing 2 cells in module demo:
  Removing cell $memrd$\cmd$demo.v:271$145 ($memrd).
  Removing cell $memrd$\cmd$demo.v:295$150 ($memrd).

2.15. Executing TECHMAP pass (map to technology primitives).

2.15.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/cmp2lut.v
Parsing Verilog input from `/usr/bin/../share/yosys/cmp2lut.v' to AST representation.
Generating RTLIL representation for module `\_90_lut_cmp_'.
Successfully finished Verilog frontend.

2.15.2. Continuing TECHMAP pass.
Using template $paramod$968c93632f950ce0f306709fa121c1e7a868940c\_90_lut_cmp_ for cells of type $eq.
Using template $paramod$77ad031fce233083715243f95e3cd2547d931e42\_90_lut_cmp_ for cells of type $eq.
Using template $paramod$b014af9c344b7c6e328d7df54af43048a86ccf04\_90_lut_cmp_ for cells of type $eq.
No more expansions possible.
<suppressed ~368 debug messages>

2.16. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.

2.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..
Removed 0 unused cells and 10 unused wires.
<suppressed ~2 debug messages>

2.18. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module demo:
  creating $macc model for $add$demo.v:242$142 ($add).
  creating $macc model for $add$demo.v:278$148 ($add).
  creating $macc model for $add$demo.v:431$179 ($add).
  creating $macc model for $sub$demo.v:295$151 ($sub).
  creating $macc model for $sub$demo.v:312$157 ($sub).
  creating $macc model for $sub$demo.v:331$161 ($sub).
  creating $macc model for $sub$demo.v:433$180 ($sub).
  creating $alu model for $macc $sub$demo.v:433$180.
  creating $alu model for $macc $sub$demo.v:331$161.
  creating $alu model for $macc $sub$demo.v:312$157.
  creating $alu model for $macc $sub$demo.v:295$151.
  creating $alu model for $macc $add$demo.v:431$179.
  creating $alu model for $macc $add$demo.v:278$148.
  creating $alu model for $macc $add$demo.v:242$142.
  creating $alu model for $le$demo.v:240$141 ($le): new $alu
  creating $alu model for $le$demo.v:256$143 ($le): new $alu
  creating $alu model for $lt$demo.v:442$181 ($lt): new $alu
  creating $alu cell for $lt$demo.v:442$181: $auto$alumacc.cc:474:replace_alu$835
  creating $alu cell for $le$demo.v:256$143: $auto$alumacc.cc:474:replace_alu$846
  creating $alu cell for $le$demo.v:240$141: $auto$alumacc.cc:474:replace_alu$859
  creating $alu cell for $add$demo.v:242$142: $auto$alumacc.cc:474:replace_alu$872
  creating $alu cell for $add$demo.v:278$148: $auto$alumacc.cc:474:replace_alu$875
  creating $alu cell for $add$demo.v:431$179: $auto$alumacc.cc:474:replace_alu$878
  creating $alu cell for $sub$demo.v:295$151: $auto$alumacc.cc:474:replace_alu$881
  creating $alu cell for $sub$demo.v:312$157: $auto$alumacc.cc:474:replace_alu$884
  creating $alu cell for $sub$demo.v:331$161: $auto$alumacc.cc:474:replace_alu$887
  creating $alu cell for $sub$demo.v:433$180: $auto$alumacc.cc:474:replace_alu$890
  created 10 $alu and 0 $macc cells.

2.19. Executing OPT pass (performing simple optimizations).

2.19.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.
<suppressed ~2 debug messages>

2.19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\demo'.
Removed a total of 0 cells.

2.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \demo..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~15 debug messages>

2.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \demo.
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$838: { $auto$alumacc.cc:490:replace_alu$836 [0] $auto$alumacc.cc:490:replace_alu$836 [1] $auto$alumacc.cc:490:replace_alu$836 [2] $auto$alumacc.cc:490:replace_alu$836 [3] $auto$alumacc.cc:490:replace_alu$836 [4] $auto$alumacc.cc:490:replace_alu$836 [5] $auto$alumacc.cc:490:replace_alu$836 [6] $auto$alumacc.cc:490:replace_alu$836 [7] $auto$alumacc.cc:490:replace_alu$836 [8] $auto$alumacc.cc:490:replace_alu$836 [9] $auto$alumacc.cc:490:replace_alu$836 [10] $auto$alumacc.cc:490:replace_alu$836 [11] $auto$alumacc.cc:490:replace_alu$836 [12] $auto$alumacc.cc:490:replace_alu$836 [13] $auto$alumacc.cc:490:replace_alu$836 [14] $auto$alumacc.cc:490:replace_alu$836 [15] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$849: { $auto$alumacc.cc:490:replace_alu$847 [0] $auto$alumacc.cc:490:replace_alu$847 [1] $auto$alumacc.cc:490:replace_alu$847 [2] $auto$alumacc.cc:490:replace_alu$847 [3] $auto$alumacc.cc:490:replace_alu$847 [4] $auto$alumacc.cc:490:replace_alu$847 [5] $auto$alumacc.cc:490:replace_alu$847 [6] $auto$alumacc.cc:490:replace_alu$847 [7] $auto$alumacc.cc:490:replace_alu$847 [8] $auto$alumacc.cc:490:replace_alu$847 [9] $auto$alumacc.cc:490:replace_alu$847 [10] $auto$alumacc.cc:490:replace_alu$847 [11] $auto$alumacc.cc:490:replace_alu$847 [12] $auto$alumacc.cc:490:replace_alu$847 [13] $auto$alumacc.cc:490:replace_alu$847 [14] $auto$alumacc.cc:490:replace_alu$847 [15] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$862: { $auto$alumacc.cc:490:replace_alu$860 [0] $auto$alumacc.cc:490:replace_alu$860 [1] $auto$alumacc.cc:490:replace_alu$860 [2] $auto$alumacc.cc:490:replace_alu$860 [3] $auto$alumacc.cc:490:replace_alu$860 [4] $auto$alumacc.cc:490:replace_alu$860 [5] $auto$alumacc.cc:490:replace_alu$860 [6] $auto$alumacc.cc:490:replace_alu$860 [7] $auto$alumacc.cc:490:replace_alu$860 [8] $auto$alumacc.cc:490:replace_alu$860 [9] $auto$alumacc.cc:490:replace_alu$860 [10] $auto$alumacc.cc:490:replace_alu$860 [11] $auto$alumacc.cc:490:replace_alu$860 [12] $auto$alumacc.cc:490:replace_alu$860 [13] $auto$alumacc.cc:490:replace_alu$860 [14] $auto$alumacc.cc:490:replace_alu$860 [15] }
  Optimizing cells in module \demo.
Performed a total of 3 changes.

2.19.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\demo'.
Removed a total of 0 cells.

2.19.6. Executing OPT_RMDFF pass (remove dff with constant values).

2.19.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..
Removed 1 unused cells and 4 unused wires.
<suppressed ~2 debug messages>

2.19.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.

2.19.9. Rerunning OPT passes. (Maybe there is more to do..)

2.19.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \demo..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~15 debug messages>

2.19.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \demo.
Performed a total of 0 changes.

2.19.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\demo'.
Removed a total of 0 cells.

2.19.13. Executing OPT_RMDFF pass (remove dff with constant values).

2.19.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..

2.19.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.

2.19.16. Finished OPT passes. (There is nothing left to do.)

2.20. Executing FSM pass (extract and optimize FSM).

2.20.1. Executing FSM_DETECT pass (finding FSMs in design).
Not marking demo.state as FSM state register:
    Register has an initialization value.

2.20.2. Executing FSM_EXTRACT pass (extracting FSM from design).

2.20.3. Executing FSM_OPT pass (simple optimizations of FSMs).

2.20.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..

2.20.5. Executing FSM_OPT pass (simple optimizations of FSMs).

2.20.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

2.20.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

2.20.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

2.21. Executing OPT pass (performing simple optimizations).

2.21.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.

2.21.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\demo'.
Removed a total of 0 cells.

2.21.3. Executing OPT_RMDFF pass (remove dff with constant values).

2.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..

2.21.5. Finished fast OPT passes.

2.22. Executing MEMORY pass.

2.22.1. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).
Checking cell `$auto$share.cc:710:make_supercell$822' in module `\demo': no (compatible) $dff found.
Checking cell `$memrd$\num_params$demo.v:405$169' in module `\demo': no (compatible) $dff found.
Checking cell `$memrd$\params$demo.v:415$174' in module `\demo': no (compatible) $dff found.

2.22.2. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..

2.22.3. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

2.22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..

2.22.5. Executing MEMORY_COLLECT pass (generating $mem cells).
Collecting $memrd, $memwr and $meminit for memory `\cmd' in module `\demo':
  $meminit$\cmd$demo.v:54$183 ($meminit)
  $meminit$\cmd$demo.v:55$184 ($meminit)
  $meminit$\cmd$demo.v:56$185 ($meminit)
  $meminit$\cmd$demo.v:57$186 ($meminit)
  $meminit$\cmd$demo.v:58$187 ($meminit)
  $meminit$\cmd$demo.v:59$188 ($meminit)
  $meminit$\cmd$demo.v:60$189 ($meminit)
  $meminit$\cmd$demo.v:61$190 ($meminit)
  $meminit$\cmd$demo.v:62$191 ($meminit)
  $meminit$\cmd$demo.v:63$192 ($meminit)
  $meminit$\cmd$demo.v:64$193 ($meminit)
  $meminit$\cmd$demo.v:65$194 ($meminit)
  $meminit$\cmd$demo.v:66$195 ($meminit)
  $meminit$\cmd$demo.v:67$196 ($meminit)
  $meminit$\cmd$demo.v:68$197 ($meminit)
  $meminit$\cmd$demo.v:69$198 ($meminit)
  $meminit$\cmd$demo.v:70$199 ($meminit)
  $meminit$\cmd$demo.v:71$200 ($meminit)
  $meminit$\cmd$demo.v:72$201 ($meminit)
  $meminit$\cmd$demo.v:73$202 ($meminit)
  $meminit$\cmd$demo.v:74$203 ($meminit)
  $meminit$\cmd$demo.v:75$204 ($meminit)
  $meminit$\cmd$demo.v:76$205 ($meminit)
  $meminit$\cmd$demo.v:77$206 ($meminit)
  $meminit$\cmd$demo.v:78$207 ($meminit)
  $meminit$\cmd$demo.v:79$208 ($meminit)
  $meminit$\cmd$demo.v:80$209 ($meminit)
  $auto$share.cc:710:make_supercell$822 ($memrd)
Collecting $memrd, $memwr and $meminit for memory `\num_params' in module `\demo':
  $meminit$\num_params$demo.v:81$210 ($meminit)
  $meminit$\num_params$demo.v:82$211 ($meminit)
  $meminit$\num_params$demo.v:83$212 ($meminit)
  $meminit$\num_params$demo.v:84$213 ($meminit)
  $meminit$\num_params$demo.v:85$214 ($meminit)
  $meminit$\num_params$demo.v:86$215 ($meminit)
  $meminit$\num_params$demo.v:87$216 ($meminit)
  $meminit$\num_params$demo.v:88$217 ($meminit)
  $meminit$\num_params$demo.v:89$218 ($meminit)
  $meminit$\num_params$demo.v:90$219 ($meminit)
  $meminit$\num_params$demo.v:91$220 ($meminit)
  $meminit$\num_params$demo.v:92$221 ($meminit)
  $meminit$\num_params$demo.v:93$222 ($meminit)
  $meminit$\num_params$demo.v:94$223 ($meminit)
  $meminit$\num_params$demo.v:95$224 ($meminit)
  $meminit$\num_params$demo.v:96$225 ($meminit)
  $meminit$\num_params$demo.v:97$226 ($meminit)
  $meminit$\num_params$demo.v:98$227 ($meminit)
  $meminit$\num_params$demo.v:99$228 ($meminit)
  $meminit$\num_params$demo.v:100$229 ($meminit)
  $meminit$\num_params$demo.v:101$230 ($meminit)
  $meminit$\num_params$demo.v:102$231 ($meminit)
  $meminit$\num_params$demo.v:103$232 ($meminit)
  $meminit$\num_params$demo.v:104$233 ($meminit)
  $meminit$\num_params$demo.v:105$234 ($meminit)
  $meminit$\num_params$demo.v:106$235 ($meminit)
Warning: Address 5'11001 in memory initialization $meminit$\num_params$demo.v:106$235 is out-of-bounds.
  $memrd$\num_params$demo.v:405$169 ($memrd)
Collecting $memrd, $memwr and $meminit for memory `\params' in module `\demo':
  $meminit$\params$demo.v:109$236 ($meminit)
  $meminit$\params$demo.v:110$237 ($meminit)
  $meminit$\params$demo.v:111$238 ($meminit)
  $meminit$\params$demo.v:112$239 ($meminit)
  $meminit$\params$demo.v:113$240 ($meminit)
  $meminit$\params$demo.v:114$241 ($meminit)
  $meminit$\params$demo.v:115$242 ($meminit)
  $meminit$\params$demo.v:116$243 ($meminit)
  $meminit$\params$demo.v:117$244 ($meminit)
  $meminit$\params$demo.v:118$245 ($meminit)
  $meminit$\params$demo.v:119$246 ($meminit)
  $meminit$\params$demo.v:120$247 ($meminit)
  $meminit$\params$demo.v:121$248 ($meminit)
  $meminit$\params$demo.v:122$249 ($meminit)
  $meminit$\params$demo.v:123$250 ($meminit)
  $meminit$\params$demo.v:124$251 ($meminit)
  $meminit$\params$demo.v:125$252 ($meminit)
  $meminit$\params$demo.v:126$253 ($meminit)
  $meminit$\params$demo.v:127$254 ($meminit)
  $meminit$\params$demo.v:128$255 ($meminit)
  $meminit$\params$demo.v:129$256 ($meminit)
  $meminit$\params$demo.v:130$257 ($meminit)
  $meminit$\params$demo.v:131$258 ($meminit)
  $meminit$\params$demo.v:132$259 ($meminit)
  $meminit$\params$demo.v:133$260 ($meminit)
  $meminit$\params$demo.v:134$261 ($meminit)
  $meminit$\params$demo.v:135$262 ($meminit)
  $meminit$\params$demo.v:136$263 ($meminit)
  $meminit$\params$demo.v:137$264 ($meminit)
  $meminit$\params$demo.v:138$265 ($meminit)
  $meminit$\params$demo.v:139$266 ($meminit)
  $meminit$\params$demo.v:140$267 ($meminit)
  $meminit$\params$demo.v:141$268 ($meminit)
  $meminit$\params$demo.v:142$269 ($meminit)
  $meminit$\params$demo.v:143$270 ($meminit)
  $meminit$\params$demo.v:144$271 ($meminit)
  $meminit$\params$demo.v:145$272 ($meminit)
  $meminit$\params$demo.v:146$273 ($meminit)
  $meminit$\params$demo.v:147$274 ($meminit)
  $meminit$\params$demo.v:148$275 ($meminit)
  $meminit$\params$demo.v:149$276 ($meminit)
  $meminit$\params$demo.v:150$277 ($meminit)
  $meminit$\params$demo.v:151$278 ($meminit)
  $meminit$\params$demo.v:152$279 ($meminit)
  $meminit$\params$demo.v:153$280 ($meminit)
  $meminit$\params$demo.v:154$281 ($meminit)
  $meminit$\params$demo.v:155$282 ($meminit)
  $meminit$\params$demo.v:156$283 ($meminit)
  $meminit$\params$demo.v:157$284 ($meminit)
  $meminit$\params$demo.v:158$285 ($meminit)
  $meminit$\params$demo.v:159$286 ($meminit)
  $meminit$\params$demo.v:160$287 ($meminit)
  $meminit$\params$demo.v:161$288 ($meminit)
  $meminit$\params$demo.v:162$289 ($meminit)
  $meminit$\params$demo.v:163$290 ($meminit)
  $meminit$\params$demo.v:164$291 ($meminit)
  $meminit$\params$demo.v:165$292 ($meminit)
  $meminit$\params$demo.v:166$293 ($meminit)
  $meminit$\params$demo.v:167$294 ($meminit)
  $meminit$\params$demo.v:168$295 ($meminit)
  $meminit$\params$demo.v:169$296 ($meminit)
  $meminit$\params$demo.v:170$297 ($meminit)
  $meminit$\params$demo.v:171$298 ($meminit)
  $meminit$\params$demo.v:172$299 ($meminit)
  $meminit$\params$demo.v:173$300 ($meminit)
  $meminit$\params$demo.v:174$301 ($meminit)
  $meminit$\params$demo.v:175$302 ($meminit)
  $meminit$\params$demo.v:176$303 ($meminit)
  $meminit$\params$demo.v:177$304 ($meminit)
  $meminit$\params$demo.v:178$305 ($meminit)
  $meminit$\params$demo.v:179$306 ($meminit)
  $meminit$\params$demo.v:180$307 ($meminit)
  $meminit$\params$demo.v:181$308 ($meminit)
  $meminit$\params$demo.v:182$309 ($meminit)
  $meminit$\params$demo.v:183$310 ($meminit)
  $meminit$\params$demo.v:184$311 ($meminit)
  $meminit$\params$demo.v:185$312 ($meminit)
  $meminit$\params$demo.v:186$313 ($meminit)
  $meminit$\params$demo.v:187$314 ($meminit)
  $meminit$\params$demo.v:188$315 ($meminit)
  $meminit$\params$demo.v:189$316 ($meminit)
  $meminit$\params$demo.v:190$317 ($meminit)
  $meminit$\params$demo.v:191$318 ($meminit)
  $meminit$\params$demo.v:192$319 ($meminit)
  $memrd$\params$demo.v:415$174 ($memrd)

2.23. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..

2.24. Executing MEMORY_BRAM pass (mapping $mem cells to block memories).
Processing demo.cmd:
  Properties: ports=1 bits=216 rports=1 wports=0 dbits=8 abits=5 words=27
  Checking rule #1 for bram type $__ICE40_RAM4K_M0 (variant 1):
    Bram geometry: abits=8 dbits=16 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M0: awaste=229 dwaste=8 bwaste=3880 waste=3880 efficiency=5
    Rule #1 for bram type $__ICE40_RAM4K_M0 (variant 1) accepted.
    Mapping to bram type $__ICE40_RAM4K_M0 (variant 1):
      Read port #0 is in clock domain !~async~.
        Bram port A1.1 has incompatible clock type.
        Failed to map read port #0.
    Mapping to bram type $__ICE40_RAM4K_M0 failed.
  Checking rule #2 for bram type $__ICE40_RAM4K_M123 (variant 1):
    Bram geometry: abits=9 dbits=8 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=485 dwaste=0 bwaste=3880 waste=3880 efficiency=5
    Rule #2 for bram type $__ICE40_RAM4K_M123 (variant 1) accepted.
    Mapping to bram type $__ICE40_RAM4K_M123 (variant 1):
      Read port #0 is in clock domain !~async~.
        Bram port A1.1 has incompatible clock type.
        Failed to map read port #0.
    Mapping to bram type $__ICE40_RAM4K_M123 failed.
  Checking rule #2 for bram type $__ICE40_RAM4K_M123 (variant 2):
    Bram geometry: abits=10 dbits=4 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=997 dwaste=0 bwaste=3988 waste=3988 efficiency=2
    Rule #2 for bram type $__ICE40_RAM4K_M123 (variant 2) accepted.
    Mapping to bram type $__ICE40_RAM4K_M123 (variant 2):
      Read port #0 is in clock domain !~async~.
        Bram port A1.1 has incompatible clock type.
        Failed to map read port #0.
    Mapping to bram type $__ICE40_RAM4K_M123 failed.
  Checking rule #2 for bram type $__ICE40_RAM4K_M123 (variant 3):
    Bram geometry: abits=11 dbits=2 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=2021 dwaste=0 bwaste=4042 waste=4042 efficiency=1
    Rule #2 for bram type $__ICE40_RAM4K_M123 (variant 3) rejected: requirement 'min efficiency 2' not met.
  No acceptable bram resources found.
Processing demo.num_params:
  Properties: ports=1 bits=350 rports=1 wports=0 dbits=14 abits=5 words=25
  Checking rule #1 for bram type $__ICE40_RAM4K_M0 (variant 1):
    Bram geometry: abits=8 dbits=16 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M0: awaste=231 dwaste=2 bwaste=3746 waste=3746 efficiency=8
    Rule #1 for bram type $__ICE40_RAM4K_M0 (variant 1) accepted.
    Mapping to bram type $__ICE40_RAM4K_M0 (variant 1):
      Read port #0 is in clock domain !~async~.
        Bram port A1.1 has incompatible clock type.
        Failed to map read port #0.
    Mapping to bram type $__ICE40_RAM4K_M0 failed.
  Checking rule #2 for bram type $__ICE40_RAM4K_M123 (variant 1):
    Bram geometry: abits=9 dbits=8 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=487 dwaste=2 bwaste=3946 waste=3946 efficiency=4
    Rule #2 for bram type $__ICE40_RAM4K_M123 (variant 1) accepted.
    Mapping to bram type $__ICE40_RAM4K_M123 (variant 1):
      Read port #0 is in clock domain !~async~.
        Bram port A1.1 has incompatible clock type.
        Failed to map read port #0.
    Mapping to bram type $__ICE40_RAM4K_M123 failed.
  Checking rule #2 for bram type $__ICE40_RAM4K_M123 (variant 2):
    Bram geometry: abits=10 dbits=4 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=999 dwaste=2 bwaste=4046 waste=4046 efficiency=2
    Rule #2 for bram type $__ICE40_RAM4K_M123 (variant 2) accepted.
    Mapping to bram type $__ICE40_RAM4K_M123 (variant 2):
      Read port #0 is in clock domain !~async~.
        Bram port A1.1 has incompatible clock type.
        Failed to map read port #0.
    Mapping to bram type $__ICE40_RAM4K_M123 failed.
  Checking rule #2 for bram type $__ICE40_RAM4K_M123 (variant 3):
    Bram geometry: abits=11 dbits=2 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=2023 dwaste=0 bwaste=4046 waste=4046 efficiency=1
    Rule #2 for bram type $__ICE40_RAM4K_M123 (variant 3) rejected: requirement 'min efficiency 2' not met.
  No acceptable bram resources found.
Processing demo.params:
  Properties: ports=1 bits=672 rports=1 wports=0 dbits=8 abits=7 words=84
  Checking rule #1 for bram type $__ICE40_RAM4K_M0 (variant 1):
    Bram geometry: abits=8 dbits=16 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M0: awaste=172 dwaste=8 bwaste=3424 waste=3424 efficiency=16
    Rule #1 for bram type $__ICE40_RAM4K_M0 (variant 1) accepted.
    Mapping to bram type $__ICE40_RAM4K_M0 (variant 1):
      Read port #0 is in clock domain !~async~.
        Bram port A1.1 has incompatible clock type.
        Failed to map read port #0.
    Mapping to bram type $__ICE40_RAM4K_M0 failed.
  Checking rule #2 for bram type $__ICE40_RAM4K_M123 (variant 1):
    Bram geometry: abits=9 dbits=8 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=428 dwaste=0 bwaste=3424 waste=3424 efficiency=16
    Rule #2 for bram type $__ICE40_RAM4K_M123 (variant 1) accepted.
    Mapping to bram type $__ICE40_RAM4K_M123 (variant 1):
      Read port #0 is in clock domain !~async~.
        Bram port A1.1 has incompatible clock type.
        Failed to map read port #0.
    Mapping to bram type $__ICE40_RAM4K_M123 failed.
  Checking rule #2 for bram type $__ICE40_RAM4K_M123 (variant 2):
    Bram geometry: abits=10 dbits=4 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=940 dwaste=0 bwaste=3760 waste=3760 efficiency=8
    Rule #2 for bram type $__ICE40_RAM4K_M123 (variant 2) accepted.
    Mapping to bram type $__ICE40_RAM4K_M123 (variant 2):
      Read port #0 is in clock domain !~async~.
        Bram port A1.1 has incompatible clock type.
        Failed to map read port #0.
    Mapping to bram type $__ICE40_RAM4K_M123 failed.
  Checking rule #2 for bram type $__ICE40_RAM4K_M123 (variant 3):
    Bram geometry: abits=11 dbits=2 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=1964 dwaste=0 bwaste=3928 waste=3928 efficiency=4
    Rule #2 for bram type $__ICE40_RAM4K_M123 (variant 3) accepted.
    Mapping to bram type $__ICE40_RAM4K_M123 (variant 3):
      Read port #0 is in clock domain !~async~.
        Bram port A1.1 has incompatible clock type.
        Failed to map read port #0.
    Mapping to bram type $__ICE40_RAM4K_M123 failed.
  No acceptable bram resources found.

2.25. Executing TECHMAP pass (map to technology primitives).

2.25.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/brams_map.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/brams_map.v' to AST representation.
Generating RTLIL representation for module `\$__ICE40_RAM4K'.
Generating RTLIL representation for module `\$__ICE40_RAM4K_M0'.
Generating RTLIL representation for module `\$__ICE40_RAM4K_M123'.
Successfully finished Verilog frontend.

2.25.2. Continuing TECHMAP pass.
No more expansions possible.

2.26. Executing ICE40_BRAMINIT pass.

2.27. Executing OPT pass (performing simple optimizations).

2.27.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.
<suppressed ~1 debug messages>

2.27.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\demo'.
Removed a total of 0 cells.

2.27.3. Executing OPT_RMDFF pass (remove dff with constant values).

2.27.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

2.27.5. Finished fast OPT passes.

2.28. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).
Mapping memory cell \cmd in module \demo:
  created 27 $dff cells and 0 static cells of width 8.
  read interface: 0 $dff and 31 $mux cells.
  write interface: 0 write mux blocks.
Mapping memory cell \num_params in module \demo:
  created 25 $dff cells and 0 static cells of width 14.
  read interface: 0 $dff and 31 $mux cells.
  write interface: 0 write mux blocks.
Mapping memory cell \params in module \demo:
  created 84 $dff cells and 0 static cells of width 8.
  read interface: 0 $dff and 127 $mux cells.
  write interface: 0 write mux blocks.

2.29. Executing OPT pass (performing simple optimizations).

2.29.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.
<suppressed ~115 debug messages>

2.29.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\demo'.
Removed a total of 0 cells.

2.29.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \demo..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~17 debug messages>

2.29.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \demo.
    Consolidated identical input bits for $mux cell $procmux$690:
      Old ports: A=2'10, B=2'00, Y=$auto$wreduce.cc:455:run$809 [1:0]
      New ports: A=1'1, B=1'0, Y=$auto$wreduce.cc:455:run$809 [1]
      New connections: $auto$wreduce.cc:455:run$809 [0] = 1'0
    Consolidated identical input bits for $mux cell $procmux$696:
      Old ports: A=3'011, B=3'101, Y=$auto$wreduce.cc:455:run$810 [2:0]
      New ports: A=2'01, B=2'10, Y=$auto$wreduce.cc:455:run$810 [2:1]
      New connections: $auto$wreduce.cc:455:run$810 [0] = 1'1
    Consolidated identical input bits for $mux cell $procmux$706:
      Old ports: A=4'1010, B=4'0110, Y=$auto$wreduce.cc:455:run$813 [3:0]
      New ports: A=2'10, B=2'01, Y=$auto$wreduce.cc:455:run$813 [3:2]
      New connections: $auto$wreduce.cc:455:run$813 [1:0] = 2'10
    Consolidated identical input bits for $mux cell $procmux$710:
      Old ports: A=4'0111, B=4'1010, Y=$auto$wreduce.cc:455:run$814 [3:0]
      New ports: A=2'01, B=2'10, Y={ $auto$wreduce.cc:455:run$814 [3] $auto$wreduce.cc:455:run$814 [0] }
      New connections: $auto$wreduce.cc:455:run$814 [2:1] = { $auto$wreduce.cc:455:run$814 [0] 1'1 }
    Consolidated identical input bits for $mux cell $procmux$714:
      Old ports: A=2'10, B=2'00, Y=$auto$wreduce.cc:455:run$815 [1:0]
      New ports: A=1'1, B=1'0, Y=$auto$wreduce.cc:455:run$815 [1]
      New connections: $auto$wreduce.cc:455:run$815 [0] = 1'0
    Consolidated identical input bits for $mux cell $procmux$721:
      Old ports: A=2'10, B=2'00, Y=$auto$wreduce.cc:455:run$817 [1:0]
      New ports: A=1'1, B=1'0, Y=$auto$wreduce.cc:455:run$817 [1]
      New connections: $auto$wreduce.cc:455:run$817 [0] = 1'0
    Consolidated identical input bits for $mux cell $procmux$726:
      Old ports: A={ 2'00 $auto$wreduce.cc:455:run$816 [3:0] }, B={ 2'00 $auto$wreduce.cc:455:run$818 [3:0] }, Y=$procmux$726_Y
      New ports: A=$auto$wreduce.cc:455:run$816 [3:0], B=$auto$wreduce.cc:455:run$818 [3:0], Y=$procmux$726_Y [3:0]
      New connections: $procmux$726_Y [5:4] = 2'00
  Optimizing cells in module \demo.
    Consolidated identical input bits for $mux cell $procmux$717:
      Old ports: A={ 2'10 $auto$wreduce.cc:455:run$815 [1:0] }, B=4'0111, Y=$auto$wreduce.cc:455:run$816 [3:0]
      New ports: A={ 1'1 $auto$wreduce.cc:455:run$815 [1] 1'0 }, B=3'011, Y={ $auto$wreduce.cc:455:run$816 [3] $auto$wreduce.cc:455:run$816 [1:0] }
      New connections: $auto$wreduce.cc:455:run$816 [2] = $auto$wreduce.cc:455:run$816 [0]
    Consolidated identical input bits for $mux cell $procmux$724:
      Old ports: A={ 2'10 $auto$wreduce.cc:455:run$817 [1:0] }, B=4'0111, Y=$auto$wreduce.cc:455:run$818 [3:0]
      New ports: A={ 1'1 $auto$wreduce.cc:455:run$817 [1] 1'0 }, B=3'011, Y={ $auto$wreduce.cc:455:run$818 [3] $auto$wreduce.cc:455:run$818 [1:0] }
      New connections: $auto$wreduce.cc:455:run$818 [2] = $auto$wreduce.cc:455:run$818 [0]
  Optimizing cells in module \demo.
    Consolidated identical input bits for $mux cell $procmux$726:
      Old ports: A=$auto$wreduce.cc:455:run$816 [3:0], B=$auto$wreduce.cc:455:run$818 [3:0], Y=$procmux$726_Y [3:0]
      New ports: A={ $auto$wreduce.cc:455:run$816 [3] $auto$wreduce.cc:455:run$816 [1:0] }, B={ $auto$wreduce.cc:455:run$818 [3] $auto$wreduce.cc:455:run$818 [1:0] }, Y={ $procmux$726_Y [3] $procmux$726_Y [1:0] }
      New connections: $procmux$726_Y [2] = $procmux$726_Y [0]
  Optimizing cells in module \demo.
Performed a total of 10 changes.

2.29.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\demo'.
Removed a total of 0 cells.

2.29.6. Executing OPT_RMDFF pass (remove dff with constant values).
Removing $memory\params[83]$1355 ($dff) from module demo.
Removing $memory\params[82]$1353 ($dff) from module demo.
Removing $memory\params[81]$1351 ($dff) from module demo.
Removing $memory\params[80]$1349 ($dff) from module demo.
Removing $memory\params[79]$1347 ($dff) from module demo.
Removing $memory\params[78]$1345 ($dff) from module demo.
Removing $memory\params[77]$1343 ($dff) from module demo.
Removing $memory\params[76]$1341 ($dff) from module demo.
Removing $memory\params[75]$1339 ($dff) from module demo.
Removing $memory\params[74]$1337 ($dff) from module demo.
Removing $memory\params[73]$1335 ($dff) from module demo.
Removing $memory\params[72]$1333 ($dff) from module demo.
Removing $memory\params[71]$1331 ($dff) from module demo.
Removing $memory\params[70]$1329 ($dff) from module demo.
Removing $memory\params[69]$1327 ($dff) from module demo.
Removing $memory\params[68]$1325 ($dff) from module demo.
Removing $memory\params[67]$1323 ($dff) from module demo.
Removing $memory\params[66]$1321 ($dff) from module demo.
Removing $memory\params[65]$1319 ($dff) from module demo.
Removing $memory\params[64]$1317 ($dff) from module demo.
Removing $memory\params[63]$1315 ($dff) from module demo.
Removing $memory\params[62]$1313 ($dff) from module demo.
Removing $memory\params[61]$1311 ($dff) from module demo.
Removing $memory\params[60]$1309 ($dff) from module demo.
Removing $memory\params[59]$1307 ($dff) from module demo.
Removing $memory\params[58]$1305 ($dff) from module demo.
Removing $memory\params[57]$1303 ($dff) from module demo.
Removing $memory\params[56]$1301 ($dff) from module demo.
Removing $memory\params[55]$1299 ($dff) from module demo.
Removing $memory\params[54]$1297 ($dff) from module demo.
Removing $memory\params[53]$1295 ($dff) from module demo.
Removing $memory\params[52]$1293 ($dff) from module demo.
Removing $memory\params[51]$1291 ($dff) from module demo.
Removing $memory\params[50]$1289 ($dff) from module demo.
Removing $memory\params[49]$1287 ($dff) from module demo.
Removing $memory\params[48]$1285 ($dff) from module demo.
Removing $memory\params[47]$1283 ($dff) from module demo.
Removing $memory\params[46]$1281 ($dff) from module demo.
Removing $memory\params[45]$1279 ($dff) from module demo.
Removing $memory\params[44]$1277 ($dff) from module demo.
Removing $memory\params[43]$1275 ($dff) from module demo.
Removing $memory\params[42]$1273 ($dff) from module demo.
Removing $memory\params[41]$1271 ($dff) from module demo.
Removing $memory\params[40]$1269 ($dff) from module demo.
Removing $memory\params[39]$1267 ($dff) from module demo.
Removing $memory\params[38]$1265 ($dff) from module demo.
Removing $memory\params[37]$1263 ($dff) from module demo.
Removing $memory\params[36]$1261 ($dff) from module demo.
Removing $memory\params[35]$1259 ($dff) from module demo.
Removing $memory\params[34]$1257 ($dff) from module demo.
Removing $memory\params[33]$1255 ($dff) from module demo.
Removing $memory\params[32]$1253 ($dff) from module demo.
Removing $memory\params[31]$1251 ($dff) from module demo.
Removing $memory\params[30]$1249 ($dff) from module demo.
Removing $memory\params[29]$1247 ($dff) from module demo.
Removing $memory\params[28]$1245 ($dff) from module demo.
Removing $memory\params[27]$1243 ($dff) from module demo.
Removing $memory\params[26]$1241 ($dff) from module demo.
Removing $memory\params[25]$1239 ($dff) from module demo.
Removing $memory\params[24]$1237 ($dff) from module demo.
Removing $memory\params[23]$1235 ($dff) from module demo.
Removing $memory\params[22]$1233 ($dff) from module demo.
Removing $memory\params[21]$1231 ($dff) from module demo.
Removing $memory\params[20]$1229 ($dff) from module demo.
Removing $memory\params[19]$1227 ($dff) from module demo.
Removing $memory\params[18]$1225 ($dff) from module demo.
Removing $memory\params[17]$1223 ($dff) from module demo.
Removing $memory\params[16]$1221 ($dff) from module demo.
Removing $memory\params[15]$1219 ($dff) from module demo.
Removing $memory\params[14]$1217 ($dff) from module demo.
Removing $memory\params[13]$1215 ($dff) from module demo.
Removing $memory\params[12]$1213 ($dff) from module demo.
Removing $memory\params[11]$1211 ($dff) from module demo.
Removing $memory\params[10]$1209 ($dff) from module demo.
Removing $memory\params[9]$1207 ($dff) from module demo.
Removing $memory\params[8]$1205 ($dff) from module demo.
Removing $memory\params[7]$1203 ($dff) from module demo.
Removing $memory\params[6]$1201 ($dff) from module demo.
Removing $memory\params[5]$1199 ($dff) from module demo.
Removing $memory\params[4]$1197 ($dff) from module demo.
Removing $memory\params[3]$1195 ($dff) from module demo.
Removing $memory\params[2]$1193 ($dff) from module demo.
Removing $memory\params[1]$1191 ($dff) from module demo.
Removing $memory\params[0]$1189 ($dff) from module demo.
Removing $memory\num_params[24]$1094 ($dff) from module demo.
Removing $memory\num_params[23]$1092 ($dff) from module demo.
Removing $memory\num_params[22]$1090 ($dff) from module demo.
Removing $memory\num_params[21]$1088 ($dff) from module demo.
Removing $memory\num_params[20]$1086 ($dff) from module demo.
Removing $memory\num_params[19]$1084 ($dff) from module demo.
Removing $memory\num_params[18]$1082 ($dff) from module demo.
Removing $memory\num_params[17]$1080 ($dff) from module demo.
Removing $memory\num_params[16]$1078 ($dff) from module demo.
Removing $memory\num_params[15]$1076 ($dff) from module demo.
Removing $memory\num_params[14]$1074 ($dff) from module demo.
Removing $memory\num_params[13]$1072 ($dff) from module demo.
Removing $memory\num_params[12]$1070 ($dff) from module demo.
Removing $memory\num_params[11]$1068 ($dff) from module demo.
Removing $memory\num_params[10]$1066 ($dff) from module demo.
Removing $memory\num_params[9]$1064 ($dff) from module demo.
Removing $memory\num_params[8]$1062 ($dff) from module demo.
Removing $memory\num_params[7]$1060 ($dff) from module demo.
Removing $memory\num_params[6]$1058 ($dff) from module demo.
Removing $memory\num_params[5]$1056 ($dff) from module demo.
Removing $memory\num_params[4]$1054 ($dff) from module demo.
Removing $memory\num_params[3]$1052 ($dff) from module demo.
Removing $memory\num_params[2]$1050 ($dff) from module demo.
Removing $memory\num_params[1]$1048 ($dff) from module demo.
Removing $memory\num_params[0]$1046 ($dff) from module demo.
Removing $memory\cmd[26]$951 ($dff) from module demo.
Removing $memory\cmd[25]$949 ($dff) from module demo.
Removing $memory\cmd[24]$947 ($dff) from module demo.
Removing $memory\cmd[23]$945 ($dff) from module demo.
Removing $memory\cmd[22]$943 ($dff) from module demo.
Removing $memory\cmd[21]$941 ($dff) from module demo.
Removing $memory\cmd[20]$939 ($dff) from module demo.
Removing $memory\cmd[19]$937 ($dff) from module demo.
Removing $memory\cmd[18]$935 ($dff) from module demo.
Removing $memory\cmd[17]$933 ($dff) from module demo.
Removing $memory\cmd[16]$931 ($dff) from module demo.
Removing $memory\cmd[15]$929 ($dff) from module demo.
Removing $memory\cmd[14]$927 ($dff) from module demo.
Removing $memory\cmd[13]$925 ($dff) from module demo.
Removing $memory\cmd[12]$923 ($dff) from module demo.
Removing $memory\cmd[11]$921 ($dff) from module demo.
Removing $memory\cmd[10]$919 ($dff) from module demo.
Removing $memory\cmd[9]$917 ($dff) from module demo.
Removing $memory\cmd[8]$915 ($dff) from module demo.
Removing $memory\cmd[7]$913 ($dff) from module demo.
Removing $memory\cmd[6]$911 ($dff) from module demo.
Removing $memory\cmd[5]$909 ($dff) from module demo.
Removing $memory\cmd[4]$907 ($dff) from module demo.
Removing $memory\cmd[3]$905 ($dff) from module demo.
Removing $memory\cmd[2]$903 ($dff) from module demo.
Removing $memory\cmd[1]$901 ($dff) from module demo.
Removing $memory\cmd[0]$899 ($dff) from module demo.
Replaced 136 DFF cells.

2.29.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..
Removed 0 unused cells and 376 unused wires.
<suppressed ~1 debug messages>

2.29.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.
<suppressed ~6 debug messages>

2.29.9. Rerunning OPT passes. (Maybe there is more to do..)

2.29.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \demo..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~17 debug messages>

2.29.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \demo.
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][4][0]$998:
      Old ports: A=8'00010001, B=8'10110001, Y=$memory\cmd$rdmux[0][3][0]$a$975
      New ports: A=1'0, B=1'1, Y=$memory\cmd$rdmux[0][3][0]$a$975 [5]
      New connections: { $memory\cmd$rdmux[0][3][0]$a$975 [7:6] $memory\cmd$rdmux[0][3][0]$a$975 [4:0] } = { $memory\cmd$rdmux[0][3][0]$a$975 [5] 6'010001 }
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][4][10]$1028:
      Old ports: A=8'00101100, B=8'00101010, Y=$memory\cmd$rdmux[0][3][5]$a$990
      New ports: A=2'10, B=2'01, Y=$memory\cmd$rdmux[0][3][5]$a$990 [2:1]
      New connections: { $memory\cmd$rdmux[0][3][5]$a$990 [7:3] $memory\cmd$rdmux[0][3][5]$a$990 [0] } = 6'001010
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][4][11]$1031:
      Old ports: A=8'00101011, B=8'00101100, Y=$memory\cmd$rdmux[0][3][5]$b$991
      New ports: A=2'01, B=2'10, Y={ $memory\cmd$rdmux[0][3][5]$b$991 [2] $memory\cmd$rdmux[0][3][5]$b$991 [0] }
      New connections: { $memory\cmd$rdmux[0][3][5]$b$991 [7:3] $memory\cmd$rdmux[0][3][5]$b$991 [1] } = { 5'00101 $memory\cmd$rdmux[0][3][5]$b$991 [0] }
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][4][12]$1034:
      Old ports: A=8'00101010, B=8'00101011, Y=$memory\cmd$rdmux[0][3][6]$a$993
      New ports: A=1'0, B=1'1, Y=$memory\cmd$rdmux[0][3][6]$a$993 [0]
      New connections: $memory\cmd$rdmux[0][3][6]$a$993 [7:1] = 7'0010101
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][4][13]$1037:
      Old ports: A=8'00000000, B=8'xxxxxxxx, Y=$memory\cmd$rdmux[0][3][6]$b$994
      New ports: A=1'0, B=1'x, Y=$memory\cmd$rdmux[0][3][6]$b$994 [0]
      New connections: $memory\cmd$rdmux[0][3][6]$b$994 [7:1] = { $memory\cmd$rdmux[0][3][6]$b$994 [0] $memory\cmd$rdmux[0][3][6]$b$994 [0] $memory\cmd$rdmux[0][3][6]$b$994 [0] $memory\cmd$rdmux[0][3][6]$b$994 [0] $memory\cmd$rdmux[0][3][6]$b$994 [0] $memory\cmd$rdmux[0][3][6]$b$994 [0] $memory\cmd$rdmux[0][3][6]$b$994 [0] }
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][4][1]$1001:
      Old ports: A=8'10110010, B=8'10110011, Y=$memory\cmd$rdmux[0][3][0]$b$976
      New ports: A=1'0, B=1'1, Y=$memory\cmd$rdmux[0][3][0]$b$976 [0]
      New connections: $memory\cmd$rdmux[0][3][0]$b$976 [7:1] = 7'1011001
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][4][2]$1004:
      Old ports: A=8'10110100, B=8'11000000, Y=$memory\cmd$rdmux[0][3][1]$a$978
      New ports: A=2'01, B=2'10, Y={ $memory\cmd$rdmux[0][3][1]$a$978 [6] $memory\cmd$rdmux[0][3][1]$a$978 [2] }
      New connections: { $memory\cmd$rdmux[0][3][1]$a$978 [7] $memory\cmd$rdmux[0][3][1]$a$978 [5:3] $memory\cmd$rdmux[0][3][1]$a$978 [1:0] } = { 1'1 $memory\cmd$rdmux[0][3][1]$a$978 [2] $memory\cmd$rdmux[0][3][1]$a$978 [2] 3'000 }
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][4][3]$1007:
      Old ports: A=8'11000001, B=8'11000010, Y=$memory\cmd$rdmux[0][3][1]$b$979
      New ports: A=2'01, B=2'10, Y=$memory\cmd$rdmux[0][3][1]$b$979 [1:0]
      New connections: $memory\cmd$rdmux[0][3][1]$b$979 [7:2] = 6'110000
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][4][4]$1010:
      Old ports: A=8'11000011, B=8'11000100, Y=$memory\cmd$rdmux[0][3][2]$a$981
      New ports: A=2'01, B=2'10, Y={ $memory\cmd$rdmux[0][3][2]$a$981 [2] $memory\cmd$rdmux[0][3][2]$a$981 [0] }
      New connections: { $memory\cmd$rdmux[0][3][2]$a$981 [7:3] $memory\cmd$rdmux[0][3][2]$a$981 [1] } = { 5'11000 $memory\cmd$rdmux[0][3][2]$a$981 [0] }
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][4][5]$1013:
      Old ports: A=8'11000101, B=8'11100000, Y=$memory\cmd$rdmux[0][3][2]$b$982
      New ports: A=2'01, B=2'10, Y={ $memory\cmd$rdmux[0][3][2]$b$982 [5] $memory\cmd$rdmux[0][3][2]$b$982 [0] }
      New connections: { $memory\cmd$rdmux[0][3][2]$b$982 [7:6] $memory\cmd$rdmux[0][3][2]$b$982 [4:1] } = { 4'1100 $memory\cmd$rdmux[0][3][2]$b$982 [0] 1'0 }
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][4][6]$1016:
      Old ports: A=8'11100001, B=8'11111100, Y=$memory\cmd$rdmux[0][3][3]$a$984
      New ports: A=2'01, B=2'10, Y={ $memory\cmd$rdmux[0][3][3]$a$984 [2] $memory\cmd$rdmux[0][3][3]$a$984 [0] }
      New connections: { $memory\cmd$rdmux[0][3][3]$a$984 [7:3] $memory\cmd$rdmux[0][3][3]$a$984 [1] } = { 3'111 $memory\cmd$rdmux[0][3][3]$a$984 [2] $memory\cmd$rdmux[0][3][3]$a$984 [2] 1'0 }
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][4][7]$1019:
      Old ports: A=8'00111010, B=8'00110110, Y=$memory\cmd$rdmux[0][3][3]$b$985
      New ports: A=2'10, B=2'01, Y=$memory\cmd$rdmux[0][3][3]$b$985 [3:2]
      New connections: { $memory\cmd$rdmux[0][3][3]$b$985 [7:4] $memory\cmd$rdmux[0][3][3]$b$985 [1:0] } = 6'001110
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][4][8]$1022:
      Old ports: A=8'00100001, B=8'00101001, Y=$memory\cmd$rdmux[0][3][4]$a$987
      New ports: A=1'0, B=1'1, Y=$memory\cmd$rdmux[0][3][4]$a$987 [3]
      New connections: { $memory\cmd$rdmux[0][3][4]$a$987 [7:4] $memory\cmd$rdmux[0][3][4]$a$987 [2:0] } = 7'0010001
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][4][9]$1025:
      Old ports: A=8'00101010, B=8'00101011, Y=$memory\cmd$rdmux[0][3][4]$b$988
      New ports: A=1'0, B=1'1, Y=$memory\cmd$rdmux[0][3][4]$b$988 [0]
      New connections: $memory\cmd$rdmux[0][3][4]$b$988 [7:1] = 7'0010101
    Consolidated identical input bits for $mux cell $memory\num_params$rdmux[0][3][4]$1129:
      Old ports: A=$memory\num_params$rdmux[0][3][4]$a$1130, B=$memory\num_params$rdmux[0][3][4]$b$1131, Y=$memory\num_params$rdmux[0][2][2]$a$1112
      New ports: A=1'0, B=1'1, Y=$memory\num_params$rdmux[0][2][2]$a$1112 [2]
      New connections: { $memory\num_params$rdmux[0][2][2]$a$1112 [13:3] $memory\num_params$rdmux[0][2][2]$a$1112 [1:0] } = 13'0000000000000
    Consolidated identical input bits for $mux cell $memory\num_params$rdmux[0][4][0]$1141:
      Old ports: A=14'00000000000000, B=14'00000000000011, Y=$memory\num_params$rdmux[0][3][0]$a$1118
      New ports: A=1'0, B=1'1, Y=$memory\num_params$rdmux[0][3][0]$a$1118 [0]
      New connections: $memory\num_params$rdmux[0][3][0]$a$1118 [13:1] = { 12'000000000000 $memory\num_params$rdmux[0][3][0]$a$1118 [0] }
    Consolidated identical input bits for $mux cell $memory\num_params$rdmux[0][4][10]$1171:
      Old ports: A=14'00000000000000, B=14'00000000000100, Y=$memory\num_params$rdmux[0][3][5]$a$1133
      New ports: A=1'0, B=1'1, Y=$memory\num_params$rdmux[0][3][5]$a$1133 [2]
      New connections: { $memory\num_params$rdmux[0][3][5]$a$1133 [13:3] $memory\num_params$rdmux[0][3][5]$a$1133 [1:0] } = 13'0000000000000
    Consolidated identical input bits for $mux cell $memory\num_params$rdmux[0][4][11]$1174:
      Old ports: A=14'00000000000100, B=14'11001000000000, Y=$memory\num_params$rdmux[0][3][5]$b$1134
      New ports: A=2'01, B=2'10, Y={ $memory\num_params$rdmux[0][3][5]$b$1134 [9] $memory\num_params$rdmux[0][3][5]$b$1134 [2] }
      New connections: { $memory\num_params$rdmux[0][3][5]$b$1134 [13:10] $memory\num_params$rdmux[0][3][5]$b$1134 [8:3] $memory\num_params$rdmux[0][3][5]$b$1134 [1:0] } = { $memory\num_params$rdmux[0][3][5]$b$1134 [9] $memory\num_params$rdmux[0][3][5]$b$1134 [9] 10'0000000000 }
    Consolidated identical input bits for $mux cell $memory\num_params$rdmux[0][4][12]$1177:
      Old ports: A=14'00000000000100, B=14'xxxxxxxxxxxxxx, Y=$memory\num_params$rdmux[0][3][6]$a$1136
      New ports: A=2'10, B=2'xx, Y={ $memory\num_params$rdmux[0][3][6]$a$1136 [2] $memory\num_params$rdmux[0][3][6]$a$1136 [0] }
      New connections: { $memory\num_params$rdmux[0][3][6]$a$1136 [13:3] $memory\num_params$rdmux[0][3][6]$a$1136 [1] } = { $memory\num_params$rdmux[0][3][6]$a$1136 [0] $memory\num_params$rdmux[0][3][6]$a$1136 [0] $memory\num_params$rdmux[0][3][6]$a$1136 [0] $memory\num_params$rdmux[0][3][6]$a$1136 [0] $memory\num_params$rdmux[0][3][6]$a$1136 [0] $memory\num_params$rdmux[0][3][6]$a$1136 [0] $memory\num_params$rdmux[0][3][6]$a$1136 [0] $memory\num_params$rdmux[0][3][6]$a$1136 [0] $memory\num_params$rdmux[0][3][6]$a$1136 [0] $memory\num_params$rdmux[0][3][6]$a$1136 [0] $memory\num_params$rdmux[0][3][6]$a$1136 [0] $memory\num_params$rdmux[0][3][6]$a$1136 [0] }
    Consolidated identical input bits for $mux cell $memory\num_params$rdmux[0][4][1]$1144:
      Old ports: A=14'00000000000011, B=14'00000000000110, Y=$memory\num_params$rdmux[0][3][0]$b$1119
      New ports: A=2'01, B=2'10, Y={ $memory\num_params$rdmux[0][3][0]$b$1119 [2] $memory\num_params$rdmux[0][3][0]$b$1119 [0] }
      New connections: { $memory\num_params$rdmux[0][3][0]$b$1119 [13:3] $memory\num_params$rdmux[0][3][0]$b$1119 [1] } = 12'000000000001
    Consolidated identical input bits for $mux cell $memory\num_params$rdmux[0][4][2]$1147:
      Old ports: A=14'00000000000001, B=14'00000000000011, Y=$memory\num_params$rdmux[0][3][1]$a$1121
      New ports: A=1'0, B=1'1, Y=$memory\num_params$rdmux[0][3][1]$a$1121 [1]
      New connections: { $memory\num_params$rdmux[0][3][1]$a$1121 [13:2] $memory\num_params$rdmux[0][3][1]$a$1121 [0] } = 13'0000000000001
    Consolidated identical input bits for $mux cell $memory\num_params$rdmux[0][4][3]$1150:
      Old ports: A=14'00000000000001, B=14'00000000000010, Y=$memory\num_params$rdmux[0][3][1]$b$1122
      New ports: A=2'01, B=2'10, Y=$memory\num_params$rdmux[0][3][1]$b$1122 [1:0]
      New connections: $memory\num_params$rdmux[0][3][1]$b$1122 [13:2] = 12'000000000000
    Consolidated identical input bits for $mux cell $memory\num_params$rdmux[0][4][5]$1156:
      Old ports: A=14'00000000000001, B=14'00000000010000, Y=$memory\num_params$rdmux[0][3][2]$b$1125
      New ports: A=2'01, B=2'10, Y={ $memory\num_params$rdmux[0][3][2]$b$1125 [4] $memory\num_params$rdmux[0][3][2]$b$1125 [0] }
      New connections: { $memory\num_params$rdmux[0][3][2]$b$1125 [13:5] $memory\num_params$rdmux[0][3][2]$b$1125 [3:1] } = 12'000000000000
    Consolidated identical input bits for $mux cell $memory\num_params$rdmux[0][4][6]$1159:
      Old ports: A=14'00000000010000, B=14'00000000000001, Y=$memory\num_params$rdmux[0][3][3]$a$1127
      New ports: A=2'10, B=2'01, Y={ $memory\num_params$rdmux[0][3][3]$a$1127 [4] $memory\num_params$rdmux[0][3][3]$a$1127 [0] }
      New connections: { $memory\num_params$rdmux[0][3][3]$a$1127 [13:5] $memory\num_params$rdmux[0][3][3]$a$1127 [3:1] } = 12'000000000000
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][0]$1546:
      Old ports: A=8'00000101, B=8'00111100, Y=$memory\params$rdmux[0][5][0]$a$1451
      New ports: A=2'01, B=2'10, Y={ $memory\params$rdmux[0][5][0]$a$1451 [3] $memory\params$rdmux[0][5][0]$a$1451 [0] }
      New connections: { $memory\params$rdmux[0][5][0]$a$1451 [7:4] $memory\params$rdmux[0][5][0]$a$1451 [2:1] } = { 2'00 $memory\params$rdmux[0][5][0]$a$1451 [3] $memory\params$rdmux[0][5][0]$a$1451 [3] 2'10 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][10]$1576:
      Old ports: A=8'01101010, B=8'10001101, Y=$memory\params$rdmux[0][5][5]$a$1466
      New ports: A=2'10, B=2'01, Y=$memory\params$rdmux[0][5][5]$a$1466 [1:0]
      New connections: $memory\params$rdmux[0][5][5]$a$1466 [7:2] = { $memory\params$rdmux[0][5][5]$a$1466 [0] $memory\params$rdmux[0][5][5]$a$1466 [1] $memory\params$rdmux[0][5][5]$a$1466 [1] 2'01 $memory\params$rdmux[0][5][5]$a$1466 [0] }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][11]$1579:
      Old ports: A=8'11101110, B=8'00001111, Y=$memory\params$rdmux[0][5][5]$b$1467
      New ports: A=2'10, B=2'01, Y={ $memory\params$rdmux[0][5][5]$b$1467 [5] $memory\params$rdmux[0][5][5]$b$1467 [0] }
      New connections: { $memory\params$rdmux[0][5][5]$b$1467 [7:6] $memory\params$rdmux[0][5][5]$b$1467 [4:1] } = { $memory\params$rdmux[0][5][5]$b$1467 [5] $memory\params$rdmux[0][5][5]$b$1467 [5] 4'0111 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][12]$1582:
      Old ports: A=8'00000111, B=8'00001110, Y=$memory\params$rdmux[0][5][6]$a$1469
      New ports: A=2'01, B=2'10, Y={ $memory\params$rdmux[0][5][6]$a$1469 [3] $memory\params$rdmux[0][5][6]$a$1469 [0] }
      New connections: { $memory\params$rdmux[0][5][6]$a$1469 [7:4] $memory\params$rdmux[0][5][6]$a$1469 [2:1] } = 6'000011
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][13]$1585:
      Old ports: A=8'00001000, B=8'00000111, Y=$memory\params$rdmux[0][5][6]$b$1470
      New ports: A=2'10, B=2'01, Y={ $memory\params$rdmux[0][5][6]$b$1470 [3] $memory\params$rdmux[0][5][6]$b$1470 [0] }
      New connections: { $memory\params$rdmux[0][5][6]$b$1470 [7:4] $memory\params$rdmux[0][5][6]$b$1470 [2:1] } = { 4'0000 $memory\params$rdmux[0][5][6]$b$1470 [0] $memory\params$rdmux[0][5][6]$b$1470 [0] }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][14]$1588:
      Old ports: A=8'00010000, B=8'00000111, Y=$memory\params$rdmux[0][5][7]$a$1472
      New ports: A=2'10, B=2'01, Y={ $memory\params$rdmux[0][5][7]$a$1472 [4] $memory\params$rdmux[0][5][7]$a$1472 [0] }
      New connections: { $memory\params$rdmux[0][5][7]$a$1472 [7:5] $memory\params$rdmux[0][5][7]$a$1472 [3:1] } = { 4'0000 $memory\params$rdmux[0][5][7]$a$1472 [0] $memory\params$rdmux[0][5][7]$a$1472 [0] }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][15]$1591:
      Old ports: A=8'00000010, B=8'00000111, Y=$memory\params$rdmux[0][5][7]$b$1473
      New ports: A=1'0, B=1'1, Y=$memory\params$rdmux[0][5][7]$b$1473 [0]
      New connections: $memory\params$rdmux[0][5][7]$b$1473 [7:1] = { 5'00000 $memory\params$rdmux[0][5][7]$b$1473 [0] 1'1 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][16]$1594:
      Old ports: A=8'00001001, B=8'00001111, Y=$memory\params$rdmux[0][5][8]$a$1475
      New ports: A=1'0, B=1'1, Y=$memory\params$rdmux[0][5][8]$a$1475 [1]
      New connections: { $memory\params$rdmux[0][5][8]$a$1475 [7:2] $memory\params$rdmux[0][5][8]$a$1475 [0] } = { 5'00001 $memory\params$rdmux[0][5][8]$a$1475 [1] 1'1 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][17]$1597:
      Old ports: A=8'00100101, B=8'00110110, Y=$memory\params$rdmux[0][5][8]$b$1476
      New ports: A=2'01, B=2'10, Y=$memory\params$rdmux[0][5][8]$b$1476 [1:0]
      New connections: $memory\params$rdmux[0][5][8]$b$1476 [7:2] = { 3'001 $memory\params$rdmux[0][5][8]$b$1476 [1] 2'01 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][18]$1600:
      Old ports: A=8'00000000, B=8'00001000, Y=$memory\params$rdmux[0][5][9]$a$1478
      New ports: A=1'0, B=1'1, Y=$memory\params$rdmux[0][5][9]$a$1478 [3]
      New connections: { $memory\params$rdmux[0][5][9]$a$1478 [7:4] $memory\params$rdmux[0][5][9]$a$1478 [2:0] } = 7'0000000
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][19]$1603:
      Old ports: A=8'00000100, B=8'00010000, Y=$memory\params$rdmux[0][5][9]$b$1479
      New ports: A=2'01, B=2'10, Y={ $memory\params$rdmux[0][5][9]$b$1479 [4] $memory\params$rdmux[0][5][9]$b$1479 [2] }
      New connections: { $memory\params$rdmux[0][5][9]$b$1479 [7:5] $memory\params$rdmux[0][5][9]$b$1479 [3] $memory\params$rdmux[0][5][9]$b$1479 [1:0] } = 6'000000
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][1]$1549:
      Old ports: A=8'00111100, B=8'00000101, Y=$memory\params$rdmux[0][5][0]$b$1452
      New ports: A=2'10, B=2'01, Y={ $memory\params$rdmux[0][5][0]$b$1452 [3] $memory\params$rdmux[0][5][0]$b$1452 [0] }
      New connections: { $memory\params$rdmux[0][5][0]$b$1452 [7:4] $memory\params$rdmux[0][5][0]$b$1452 [2:1] } = { 2'00 $memory\params$rdmux[0][5][0]$b$1452 [3] $memory\params$rdmux[0][5][0]$b$1452 [3] 2'10 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][20]$1606:
      Old ports: A=8'00001010, B=8'00001101, Y=$memory\params$rdmux[0][5][10]$a$1481
      New ports: A=2'10, B=2'01, Y=$memory\params$rdmux[0][5][10]$a$1481 [1:0]
      New connections: $memory\params$rdmux[0][5][10]$a$1481 [7:2] = { 5'00001 $memory\params$rdmux[0][5][10]$a$1481 [0] }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][21]$1609:
      Old ports: A=8'00001000, B=8'00000111, Y=$memory\params$rdmux[0][5][10]$b$1482
      New ports: A=2'10, B=2'01, Y={ $memory\params$rdmux[0][5][10]$b$1482 [3] $memory\params$rdmux[0][5][10]$b$1482 [0] }
      New connections: { $memory\params$rdmux[0][5][10]$b$1482 [7:4] $memory\params$rdmux[0][5][10]$b$1482 [2:1] } = { 4'0000 $memory\params$rdmux[0][5][10]$b$1482 [0] $memory\params$rdmux[0][5][10]$b$1482 [0] }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][22]$1612:
      Old ports: A=8'00001111, B=8'00000111, Y=$memory\params$rdmux[0][5][11]$a$1484
      New ports: A=1'1, B=1'0, Y=$memory\params$rdmux[0][5][11]$a$1484 [3]
      New connections: { $memory\params$rdmux[0][5][11]$a$1484 [7:4] $memory\params$rdmux[0][5][11]$a$1484 [2:0] } = 7'0000111
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][23]$1615:
      Old ports: A=8'00000010, B=8'00000111, Y=$memory\params$rdmux[0][5][11]$b$1485
      New ports: A=1'0, B=1'1, Y=$memory\params$rdmux[0][5][11]$b$1485 [0]
      New connections: $memory\params$rdmux[0][5][11]$b$1485 [7:1] = { 5'00000 $memory\params$rdmux[0][5][11]$b$1485 [0] 1'1 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][24]$1618:
      Old ports: A=8'00001001, B=8'00001111, Y=$memory\params$rdmux[0][5][12]$a$1487
      New ports: A=1'0, B=1'1, Y=$memory\params$rdmux[0][5][12]$a$1487 [1]
      New connections: { $memory\params$rdmux[0][5][12]$a$1487 [7:2] $memory\params$rdmux[0][5][12]$a$1487 [0] } = { 5'00001 $memory\params$rdmux[0][5][12]$a$1487 [1] 1'1 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][25]$1621:
      Old ports: A=8'00100101, B=8'00110101, Y=$memory\params$rdmux[0][5][12]$b$1488
      New ports: A=1'0, B=1'1, Y=$memory\params$rdmux[0][5][12]$b$1488 [4]
      New connections: { $memory\params$rdmux[0][5][12]$b$1488 [7:5] $memory\params$rdmux[0][5][12]$b$1488 [3:0] } = 7'0010101
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][26]$1624:
      Old ports: A=8'00000000, B=8'00001001, Y=$memory\params$rdmux[0][5][13]$a$1490
      New ports: A=1'0, B=1'1, Y=$memory\params$rdmux[0][5][13]$a$1490 [0]
      New connections: $memory\params$rdmux[0][5][13]$a$1490 [7:1] = { 4'0000 $memory\params$rdmux[0][5][13]$a$1490 [0] 2'00 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][27]$1627:
      Old ports: A=8'00000100, B=8'00010000, Y=$memory\params$rdmux[0][5][13]$b$1491
      New ports: A=2'01, B=2'10, Y={ $memory\params$rdmux[0][5][13]$b$1491 [4] $memory\params$rdmux[0][5][13]$b$1491 [2] }
      New connections: { $memory\params$rdmux[0][5][13]$b$1491 [7:5] $memory\params$rdmux[0][5][13]$b$1491 [3] $memory\params$rdmux[0][5][13]$b$1491 [1:0] } = 6'000000
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][28]$1630:
      Old ports: A=8'10000000, B=8'00000101, Y=$memory\params$rdmux[0][5][14]$a$1493
      New ports: A=2'10, B=2'01, Y={ $memory\params$rdmux[0][5][14]$a$1493 [7] $memory\params$rdmux[0][5][14]$a$1493 [0] }
      New connections: $memory\params$rdmux[0][5][14]$a$1493 [6:1] = { 4'0000 $memory\params$rdmux[0][5][14]$a$1493 [0] 1'0 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][29]$1633:
      Old ports: A=8'01111000, B=8'00000000, Y=$memory\params$rdmux[0][5][14]$b$1494
      New ports: A=1'1, B=1'0, Y=$memory\params$rdmux[0][5][14]$b$1494 [3]
      New connections: { $memory\params$rdmux[0][5][14]$b$1494 [7:4] $memory\params$rdmux[0][5][14]$b$1494 [2:0] } = { 1'0 $memory\params$rdmux[0][5][14]$b$1494 [3] $memory\params$rdmux[0][5][14]$b$1494 [3] $memory\params$rdmux[0][5][14]$b$1494 [3] 3'000 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][30]$1636:
      Old ports: A=8'00011010, B=8'00000000, Y=$memory\params$rdmux[0][5][15]$a$1496
      New ports: A=1'1, B=1'0, Y=$memory\params$rdmux[0][5][15]$a$1496 [1]
      New connections: { $memory\params$rdmux[0][5][15]$a$1496 [7:2] $memory\params$rdmux[0][5][15]$a$1496 [0] } = { 3'000 $memory\params$rdmux[0][5][15]$a$1496 [1] $memory\params$rdmux[0][5][15]$a$1496 [1] 2'00 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][31]$1639:
      Old ports: A=8'01101001, B=8'00000000, Y=$memory\params$rdmux[0][5][15]$b$1497
      New ports: A=1'1, B=1'0, Y=$memory\params$rdmux[0][5][15]$b$1497 [0]
      New connections: $memory\params$rdmux[0][5][15]$b$1497 [7:1] = { 1'0 $memory\params$rdmux[0][5][15]$b$1497 [0] $memory\params$rdmux[0][5][15]$b$1497 [0] 1'0 $memory\params$rdmux[0][5][15]$b$1497 [0] 2'00 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][32]$1642:
      Old ports: A=8'00000001, B=8'00000000, Y=$memory\params$rdmux[0][5][16]$a$1499
      New ports: A=1'1, B=1'0, Y=$memory\params$rdmux[0][5][16]$a$1499 [0]
      New connections: $memory\params$rdmux[0][5][16]$a$1499 [7:1] = 7'0000000
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][33]$1645:
      Old ports: A=8'10100000, B=8'00000000, Y=$memory\params$rdmux[0][5][16]$b$1500
      New ports: A=1'1, B=1'0, Y=$memory\params$rdmux[0][5][16]$b$1500 [5]
      New connections: { $memory\params$rdmux[0][5][16]$b$1500 [7:6] $memory\params$rdmux[0][5][16]$b$1500 [4:0] } = { $memory\params$rdmux[0][5][16]$b$1500 [5] 6'000000 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][34]$1648:
      Old ports: A=8'00000001, B=8'00000000, Y=$memory\params$rdmux[0][5][17]$a$1502
      New ports: A=1'1, B=1'0, Y=$memory\params$rdmux[0][5][17]$a$1502 [0]
      New connections: $memory\params$rdmux[0][5][17]$a$1502 [7:1] = 7'0000000
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][35]$1651:
      Old ports: A=8'10100000, B=8'00000000, Y=$memory\params$rdmux[0][5][17]$b$1503
      New ports: A=1'1, B=1'0, Y=$memory\params$rdmux[0][5][17]$b$1503 [5]
      New connections: { $memory\params$rdmux[0][5][17]$b$1503 [7:6] $memory\params$rdmux[0][5][17]$b$1503 [4:0] } = { $memory\params$rdmux[0][5][17]$b$1503 [5] 6'000000 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][36]$1654:
      Old ports: A=8'00011010, B=8'00000000, Y=$memory\params$rdmux[0][5][18]$a$1505
      New ports: A=1'1, B=1'0, Y=$memory\params$rdmux[0][5][18]$a$1505 [1]
      New connections: { $memory\params$rdmux[0][5][18]$a$1505 [7:2] $memory\params$rdmux[0][5][18]$a$1505 [0] } = { 3'000 $memory\params$rdmux[0][5][18]$a$1505 [1] $memory\params$rdmux[0][5][18]$a$1505 [1] 2'00 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][37]$1657:
      Old ports: A=8'01101001, B=8'11111111, Y=$memory\params$rdmux[0][5][18]$b$1506
      New ports: A=1'0, B=1'1, Y=$memory\params$rdmux[0][5][18]$b$1506 [1]
      New connections: { $memory\params$rdmux[0][5][18]$b$1506 [7:2] $memory\params$rdmux[0][5][18]$b$1506 [0] } = { $memory\params$rdmux[0][5][18]$b$1506 [1] 2'11 $memory\params$rdmux[0][5][18]$b$1506 [1] 1'1 $memory\params$rdmux[0][5][18]$b$1506 [1] 1'1 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][38]$1660:
      Old ports: A=8'00000000, B=8'00000001, Y=$memory\params$rdmux[0][5][19]$a$1508
      New ports: A=1'0, B=1'1, Y=$memory\params$rdmux[0][5][19]$a$1508 [0]
      New connections: $memory\params$rdmux[0][5][19]$a$1508 [7:1] = 7'0000000
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][39]$1663:
      Old ports: A=8'00000000, B=8'10100000, Y=$memory\params$rdmux[0][5][19]$b$1509
      New ports: A=1'0, B=1'1, Y=$memory\params$rdmux[0][5][19]$b$1509 [5]
      New connections: { $memory\params$rdmux[0][5][19]$b$1509 [7:6] $memory\params$rdmux[0][5][19]$b$1509 [4:0] } = { $memory\params$rdmux[0][5][19]$b$1509 [5] 6'000000 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][3]$1555:
      Old ports: A=8'00000101, B=8'00111100, Y=$memory\params$rdmux[0][5][1]$b$1455
      New ports: A=2'01, B=2'10, Y={ $memory\params$rdmux[0][5][1]$b$1455 [3] $memory\params$rdmux[0][5][1]$b$1455 [0] }
      New connections: { $memory\params$rdmux[0][5][1]$b$1455 [7:4] $memory\params$rdmux[0][5][1]$b$1455 [2:1] } = { 2'00 $memory\params$rdmux[0][5][1]$b$1455 [3] $memory\params$rdmux[0][5][1]$b$1455 [3] 2'10 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][40]$1666:
      Old ports: A=8'00000000, B=8'00011010, Y=$memory\params$rdmux[0][5][20]$a$1511
      New ports: A=1'0, B=1'1, Y=$memory\params$rdmux[0][5][20]$a$1511 [1]
      New connections: { $memory\params$rdmux[0][5][20]$a$1511 [7:2] $memory\params$rdmux[0][5][20]$a$1511 [0] } = { 3'000 $memory\params$rdmux[0][5][20]$a$1511 [1] $memory\params$rdmux[0][5][20]$a$1511 [1] 2'00 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][41]$1669:
      Old ports: A=8'00000000, B=8'01101001, Y=$memory\params$rdmux[0][5][20]$b$1512
      New ports: A=1'0, B=1'1, Y=$memory\params$rdmux[0][5][20]$b$1512 [0]
      New connections: $memory\params$rdmux[0][5][20]$b$1512 [7:1] = { 1'0 $memory\params$rdmux[0][5][20]$b$1512 [0] $memory\params$rdmux[0][5][20]$b$1512 [0] 1'0 $memory\params$rdmux[0][5][20]$b$1512 [0] 2'00 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][4]$1558:
      Old ports: A=8'00111100, B=8'00000101, Y=$memory\params$rdmux[0][5][2]$a$1457
      New ports: A=2'10, B=2'01, Y={ $memory\params$rdmux[0][5][2]$a$1457 [3] $memory\params$rdmux[0][5][2]$a$1457 [0] }
      New connections: { $memory\params$rdmux[0][5][2]$a$1457 [7:4] $memory\params$rdmux[0][5][2]$a$1457 [2:1] } = { 2'00 $memory\params$rdmux[0][5][2]$a$1457 [3] $memory\params$rdmux[0][5][2]$a$1457 [3] 2'10 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][6]$1564:
      Old ports: A=8'00000011, B=8'10101011, Y=$memory\params$rdmux[0][5][3]$a$1460
      New ports: A=1'0, B=1'1, Y=$memory\params$rdmux[0][5][3]$a$1460 [3]
      New connections: { $memory\params$rdmux[0][5][3]$a$1460 [7:4] $memory\params$rdmux[0][5][3]$a$1460 [2:0] } = { $memory\params$rdmux[0][5][3]$a$1460 [3] 1'0 $memory\params$rdmux[0][5][3]$a$1460 [3] 4'0011 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][7]$1567:
      Old ports: A=8'00001011, B=8'00000100, Y=$memory\params$rdmux[0][5][3]$b$1461
      New ports: A=2'01, B=2'10, Y={ $memory\params$rdmux[0][5][3]$b$1461 [2] $memory\params$rdmux[0][5][3]$b$1461 [0] }
      New connections: { $memory\params$rdmux[0][5][3]$b$1461 [7:3] $memory\params$rdmux[0][5][3]$b$1461 [1] } = { 4'0000 $memory\params$rdmux[0][5][3]$b$1461 [0] $memory\params$rdmux[0][5][3]$b$1461 [0] }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][8]$1570:
      Old ports: A=8'11000101, B=8'00001101, Y=$memory\params$rdmux[0][5][4]$a$1463
      New ports: A=2'10, B=2'01, Y={ $memory\params$rdmux[0][5][4]$a$1463 [6] $memory\params$rdmux[0][5][4]$a$1463 [3] }
      New connections: { $memory\params$rdmux[0][5][4]$a$1463 [7] $memory\params$rdmux[0][5][4]$a$1463 [5:4] $memory\params$rdmux[0][5][4]$a$1463 [2:0] } = { $memory\params$rdmux[0][5][4]$a$1463 [6] 5'00101 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][9]$1573:
      Old ports: A=8'00000000, B=8'10001101, Y=$memory\params$rdmux[0][5][4]$b$1464
      New ports: A=1'0, B=1'1, Y=$memory\params$rdmux[0][5][4]$b$1464 [0]
      New connections: $memory\params$rdmux[0][5][4]$b$1464 [7:1] = { $memory\params$rdmux[0][5][4]$b$1464 [0] 3'000 $memory\params$rdmux[0][5][4]$b$1464 [0] $memory\params$rdmux[0][5][4]$b$1464 [0] 1'0 }
  Optimizing cells in module \demo.
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][3][0]$974:
      Old ports: A=$memory\cmd$rdmux[0][3][0]$a$975, B=$memory\cmd$rdmux[0][3][0]$b$976, Y=$memory\cmd$rdmux[0][2][0]$a$963
      New ports: A={ $memory\cmd$rdmux[0][3][0]$a$975 [5] 2'01 }, B={ 2'11 $memory\cmd$rdmux[0][3][0]$b$976 [0] }, Y={ $memory\cmd$rdmux[0][2][0]$a$963 [5] $memory\cmd$rdmux[0][2][0]$a$963 [1:0] }
      New connections: { $memory\cmd$rdmux[0][2][0]$a$963 [7:6] $memory\cmd$rdmux[0][2][0]$a$963 [4:2] } = { $memory\cmd$rdmux[0][2][0]$a$963 [5] 4'0100 }
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][3][1]$977:
      Old ports: A=$memory\cmd$rdmux[0][3][1]$a$978, B=$memory\cmd$rdmux[0][3][1]$b$979, Y=$memory\cmd$rdmux[0][2][0]$b$964
      New ports: A={ $memory\cmd$rdmux[0][3][1]$a$978 [6] $memory\cmd$rdmux[0][3][1]$a$978 [2] 2'00 }, B={ 2'10 $memory\cmd$rdmux[0][3][1]$b$979 [1:0] }, Y={ $memory\cmd$rdmux[0][2][0]$b$964 [6] $memory\cmd$rdmux[0][2][0]$b$964 [2:0] }
      New connections: { $memory\cmd$rdmux[0][2][0]$b$964 [7] $memory\cmd$rdmux[0][2][0]$b$964 [5:3] } = { 1'1 $memory\cmd$rdmux[0][2][0]$b$964 [2] $memory\cmd$rdmux[0][2][0]$b$964 [2] 1'0 }
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][3][2]$980:
      Old ports: A=$memory\cmd$rdmux[0][3][2]$a$981, B=$memory\cmd$rdmux[0][3][2]$b$982, Y=$memory\cmd$rdmux[0][2][1]$a$966
      New ports: A={ 1'0 $memory\cmd$rdmux[0][3][2]$a$981 [2] $memory\cmd$rdmux[0][3][2]$a$981 [0] $memory\cmd$rdmux[0][3][2]$a$981 [0] }, B={ $memory\cmd$rdmux[0][3][2]$b$982 [5] $memory\cmd$rdmux[0][3][2]$b$982 [0] 1'0 $memory\cmd$rdmux[0][3][2]$b$982 [0] }, Y={ $memory\cmd$rdmux[0][2][1]$a$966 [5] $memory\cmd$rdmux[0][2][1]$a$966 [2:0] }
      New connections: { $memory\cmd$rdmux[0][2][1]$a$966 [7:6] $memory\cmd$rdmux[0][2][1]$a$966 [4:3] } = 4'1100
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][3][3]$983:
      Old ports: A=$memory\cmd$rdmux[0][3][3]$a$984, B=$memory\cmd$rdmux[0][3][3]$b$985, Y=$memory\cmd$rdmux[0][2][1]$b$967
      New ports: A={ 1'1 $memory\cmd$rdmux[0][3][3]$a$984 [2] $memory\cmd$rdmux[0][3][3]$a$984 [2] $memory\cmd$rdmux[0][3][3]$a$984 [2] 1'0 $memory\cmd$rdmux[0][3][3]$a$984 [0] }, B={ 2'01 $memory\cmd$rdmux[0][3][3]$b$985 [3:2] 2'10 }, Y={ $memory\cmd$rdmux[0][2][1]$b$967 [6] $memory\cmd$rdmux[0][2][1]$b$967 [4:0] }
      New connections: { $memory\cmd$rdmux[0][2][1]$b$967 [7] $memory\cmd$rdmux[0][2][1]$b$967 [5] } = { $memory\cmd$rdmux[0][2][1]$b$967 [6] 1'1 }
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][3][4]$986:
      Old ports: A=$memory\cmd$rdmux[0][3][4]$a$987, B=$memory\cmd$rdmux[0][3][4]$b$988, Y=$memory\cmd$rdmux[0][2][2]$a$969
      New ports: A={ $memory\cmd$rdmux[0][3][4]$a$987 [3] 2'01 }, B={ 2'11 $memory\cmd$rdmux[0][3][4]$b$988 [0] }, Y={ $memory\cmd$rdmux[0][2][2]$a$969 [3] $memory\cmd$rdmux[0][2][2]$a$969 [1:0] }
      New connections: { $memory\cmd$rdmux[0][2][2]$a$969 [7:4] $memory\cmd$rdmux[0][2][2]$a$969 [2] } = 5'00100
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][3][5]$989:
      Old ports: A=$memory\cmd$rdmux[0][3][5]$a$990, B=$memory\cmd$rdmux[0][3][5]$b$991, Y=$memory\cmd$rdmux[0][2][2]$b$970
      New ports: A={ $memory\cmd$rdmux[0][3][5]$a$990 [2:1] 1'0 }, B={ $memory\cmd$rdmux[0][3][5]$b$991 [2] $memory\cmd$rdmux[0][3][5]$b$991 [0] $memory\cmd$rdmux[0][3][5]$b$991 [0] }, Y=$memory\cmd$rdmux[0][2][2]$b$970 [2:0]
      New connections: $memory\cmd$rdmux[0][2][2]$b$970 [7:3] = 5'00101
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][3][6]$992:
      Old ports: A=$memory\cmd$rdmux[0][3][6]$a$993, B=$memory\cmd$rdmux[0][3][6]$b$994, Y=$memory\cmd$rdmux[0][2][3]$a$972
      New ports: A={ 2'01 $memory\cmd$rdmux[0][3][6]$a$993 [0] }, B={ $memory\cmd$rdmux[0][3][6]$b$994 [0] $memory\cmd$rdmux[0][3][6]$b$994 [0] $memory\cmd$rdmux[0][3][6]$b$994 [0] }, Y=$memory\cmd$rdmux[0][2][3]$a$972 [2:0]
      New connections: $memory\cmd$rdmux[0][2][3]$a$972 [7:3] = { $memory\cmd$rdmux[0][2][3]$a$972 [2] $memory\cmd$rdmux[0][2][3]$a$972 [2:1] $memory\cmd$rdmux[0][2][3]$a$972 [2:1] }
    Consolidated identical input bits for $mux cell $memory\num_params$rdmux[0][3][0]$1117:
      Old ports: A=$memory\num_params$rdmux[0][3][0]$a$1118, B=$memory\num_params$rdmux[0][3][0]$b$1119, Y=$memory\num_params$rdmux[0][2][0]$a$1106
      New ports: A={ 1'0 $memory\num_params$rdmux[0][3][0]$a$1118 [0] $memory\num_params$rdmux[0][3][0]$a$1118 [0] }, B={ $memory\num_params$rdmux[0][3][0]$b$1119 [2] 1'1 $memory\num_params$rdmux[0][3][0]$b$1119 [0] }, Y=$memory\num_params$rdmux[0][2][0]$a$1106 [2:0]
      New connections: $memory\num_params$rdmux[0][2][0]$a$1106 [13:3] = 11'00000000000
    Consolidated identical input bits for $mux cell $memory\num_params$rdmux[0][3][1]$1120:
      Old ports: A=$memory\num_params$rdmux[0][3][1]$a$1121, B=$memory\num_params$rdmux[0][3][1]$b$1122, Y=$memory\num_params$rdmux[0][2][0]$b$1107
      New ports: A={ $memory\num_params$rdmux[0][3][1]$a$1121 [1] 1'1 }, B=$memory\num_params$rdmux[0][3][1]$b$1122 [1:0], Y=$memory\num_params$rdmux[0][2][0]$b$1107 [1:0]
      New connections: $memory\num_params$rdmux[0][2][0]$b$1107 [13:2] = 12'000000000000
    Consolidated identical input bits for $mux cell $memory\num_params$rdmux[0][3][2]$1123:
      Old ports: A=$memory\num_params$rdmux[0][3][2]$a$1124, B=$memory\num_params$rdmux[0][3][2]$b$1125, Y=$memory\num_params$rdmux[0][2][1]$a$1109
      New ports: A=3'010, B={ $memory\num_params$rdmux[0][3][2]$b$1125 [4] 1'0 $memory\num_params$rdmux[0][3][2]$b$1125 [0] }, Y={ $memory\num_params$rdmux[0][2][1]$a$1109 [4] $memory\num_params$rdmux[0][2][1]$a$1109 [1:0] }
      New connections: { $memory\num_params$rdmux[0][2][1]$a$1109 [13:5] $memory\num_params$rdmux[0][2][1]$a$1109 [3:2] } = 11'00000000000
    Consolidated identical input bits for $mux cell $memory\num_params$rdmux[0][3][3]$1126:
      Old ports: A=$memory\num_params$rdmux[0][3][3]$a$1127, B=14'00000000000001, Y=$memory\num_params$rdmux[0][2][1]$b$1110
      New ports: A={ $memory\num_params$rdmux[0][3][3]$a$1127 [4] $memory\num_params$rdmux[0][3][3]$a$1127 [0] }, B=2'01, Y={ $memory\num_params$rdmux[0][2][1]$b$1110 [4] $memory\num_params$rdmux[0][2][1]$b$1110 [0] }
      New connections: { $memory\num_params$rdmux[0][2][1]$b$1110 [13:5] $memory\num_params$rdmux[0][2][1]$b$1110 [3:1] } = 12'000000000000
    Consolidated identical input bits for $mux cell $memory\num_params$rdmux[0][3][5]$1132:
      Old ports: A=$memory\num_params$rdmux[0][3][5]$a$1133, B=$memory\num_params$rdmux[0][3][5]$b$1134, Y=$memory\num_params$rdmux[0][2][2]$b$1113
      New ports: A={ 1'0 $memory\num_params$rdmux[0][3][5]$a$1133 [2] }, B={ $memory\num_params$rdmux[0][3][5]$b$1134 [9] $memory\num_params$rdmux[0][3][5]$b$1134 [2] }, Y={ $memory\num_params$rdmux[0][2][2]$b$1113 [9] $memory\num_params$rdmux[0][2][2]$b$1113 [2] }
      New connections: { $memory\num_params$rdmux[0][2][2]$b$1113 [13:10] $memory\num_params$rdmux[0][2][2]$b$1113 [8:3] $memory\num_params$rdmux[0][2][2]$b$1113 [1:0] } = { $memory\num_params$rdmux[0][2][2]$b$1113 [9] $memory\num_params$rdmux[0][2][2]$b$1113 [9] 10'0000000000 }
    Consolidated identical input bits for $mux cell $memory\num_params$rdmux[0][3][6]$1135:
      Old ports: A=$memory\num_params$rdmux[0][3][6]$a$1136, B=14'xxxxxxxxxxxxxx, Y=$memory\num_params$rdmux[0][2][3]$a$1115
      New ports: A={ $memory\num_params$rdmux[0][3][6]$a$1136 [2] $memory\num_params$rdmux[0][3][6]$a$1136 [0] }, B=2'xx, Y={ $memory\num_params$rdmux[0][2][3]$a$1115 [2] $memory\num_params$rdmux[0][2][3]$a$1115 [0] }
      New connections: { $memory\num_params$rdmux[0][2][3]$a$1115 [13:3] $memory\num_params$rdmux[0][2][3]$a$1115 [1] } = { $memory\num_params$rdmux[0][2][3]$a$1115 [0] $memory\num_params$rdmux[0][2][3]$a$1115 [0] $memory\num_params$rdmux[0][2][3]$a$1115 [0] $memory\num_params$rdmux[0][2][3]$a$1115 [0] $memory\num_params$rdmux[0][2][3]$a$1115 [0] $memory\num_params$rdmux[0][2][3]$a$1115 [0] $memory\num_params$rdmux[0][2][3]$a$1115 [0] $memory\num_params$rdmux[0][2][3]$a$1115 [0] $memory\num_params$rdmux[0][2][3]$a$1115 [0] $memory\num_params$rdmux[0][2][3]$a$1115 [0] $memory\num_params$rdmux[0][2][3]$a$1115 [0] $memory\num_params$rdmux[0][2][3]$a$1115 [0] }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][0]$1450:
      Old ports: A=$memory\params$rdmux[0][5][0]$a$1451, B=$memory\params$rdmux[0][5][0]$b$1452, Y=$memory\params$rdmux[0][4][0]$a$1403
      New ports: A={ $memory\params$rdmux[0][5][0]$a$1451 [3] $memory\params$rdmux[0][5][0]$a$1451 [0] }, B={ $memory\params$rdmux[0][5][0]$b$1452 [3] $memory\params$rdmux[0][5][0]$b$1452 [0] }, Y={ $memory\params$rdmux[0][4][0]$a$1403 [3] $memory\params$rdmux[0][4][0]$a$1403 [0] }
      New connections: { $memory\params$rdmux[0][4][0]$a$1403 [7:4] $memory\params$rdmux[0][4][0]$a$1403 [2:1] } = { 2'00 $memory\params$rdmux[0][4][0]$a$1403 [3] $memory\params$rdmux[0][4][0]$a$1403 [3] 2'10 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][10]$1480:
      Old ports: A=$memory\params$rdmux[0][5][10]$a$1481, B=$memory\params$rdmux[0][5][10]$b$1482, Y=$memory\params$rdmux[0][4][5]$a$1418
      New ports: A={ 1'1 $memory\params$rdmux[0][5][10]$a$1481 [1:0] }, B={ $memory\params$rdmux[0][5][10]$b$1482 [3] $memory\params$rdmux[0][5][10]$b$1482 [0] $memory\params$rdmux[0][5][10]$b$1482 [0] }, Y={ $memory\params$rdmux[0][4][5]$a$1418 [3] $memory\params$rdmux[0][4][5]$a$1418 [1:0] }
      New connections: { $memory\params$rdmux[0][4][5]$a$1418 [7:4] $memory\params$rdmux[0][4][5]$a$1418 [2] } = { 4'0000 $memory\params$rdmux[0][4][5]$a$1418 [0] }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][11]$1483:
      Old ports: A=$memory\params$rdmux[0][5][11]$a$1484, B=$memory\params$rdmux[0][5][11]$b$1485, Y=$memory\params$rdmux[0][4][5]$b$1419
      New ports: A={ $memory\params$rdmux[0][5][11]$a$1484 [3] 1'1 }, B={ 1'0 $memory\params$rdmux[0][5][11]$b$1485 [0] }, Y={ $memory\params$rdmux[0][4][5]$b$1419 [3] $memory\params$rdmux[0][4][5]$b$1419 [0] }
      New connections: { $memory\params$rdmux[0][4][5]$b$1419 [7:4] $memory\params$rdmux[0][4][5]$b$1419 [2:1] } = { 4'0000 $memory\params$rdmux[0][4][5]$b$1419 [0] 1'1 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][12]$1486:
      Old ports: A=$memory\params$rdmux[0][5][12]$a$1487, B=$memory\params$rdmux[0][5][12]$b$1488, Y=$memory\params$rdmux[0][4][6]$a$1421
      New ports: A={ 3'001 $memory\params$rdmux[0][5][12]$a$1487 [1] $memory\params$rdmux[0][5][12]$a$1487 [1] }, B={ 1'1 $memory\params$rdmux[0][5][12]$b$1488 [4] 3'010 }, Y=$memory\params$rdmux[0][4][6]$a$1421 [5:1]
      New connections: { $memory\params$rdmux[0][4][6]$a$1421 [7:6] $memory\params$rdmux[0][4][6]$a$1421 [0] } = 3'001
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][13]$1489:
      Old ports: A=$memory\params$rdmux[0][5][13]$a$1490, B=$memory\params$rdmux[0][5][13]$b$1491, Y=$memory\params$rdmux[0][4][6]$b$1422
      New ports: A={ 2'00 $memory\params$rdmux[0][5][13]$a$1490 [0] }, B={ $memory\params$rdmux[0][5][13]$b$1491 [4] $memory\params$rdmux[0][5][13]$b$1491 [2] 1'0 }, Y={ $memory\params$rdmux[0][4][6]$b$1422 [4] $memory\params$rdmux[0][4][6]$b$1422 [2] $memory\params$rdmux[0][4][6]$b$1422 [0] }
      New connections: { $memory\params$rdmux[0][4][6]$b$1422 [7:5] $memory\params$rdmux[0][4][6]$b$1422 [3] $memory\params$rdmux[0][4][6]$b$1422 [1] } = { 3'000 $memory\params$rdmux[0][4][6]$b$1422 [0] 1'0 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][14]$1492:
      Old ports: A=$memory\params$rdmux[0][5][14]$a$1493, B=$memory\params$rdmux[0][5][14]$b$1494, Y=$memory\params$rdmux[0][4][7]$a$1424
      New ports: A={ $memory\params$rdmux[0][5][14]$a$1493 [7] 1'0 $memory\params$rdmux[0][5][14]$a$1493 [0] }, B={ 1'0 $memory\params$rdmux[0][5][14]$b$1494 [3] 1'0 }, Y={ $memory\params$rdmux[0][4][7]$a$1424 [7] $memory\params$rdmux[0][4][7]$a$1424 [3] $memory\params$rdmux[0][4][7]$a$1424 [0] }
      New connections: { $memory\params$rdmux[0][4][7]$a$1424 [6:4] $memory\params$rdmux[0][4][7]$a$1424 [2:1] } = { $memory\params$rdmux[0][4][7]$a$1424 [3] $memory\params$rdmux[0][4][7]$a$1424 [3] $memory\params$rdmux[0][4][7]$a$1424 [3] $memory\params$rdmux[0][4][7]$a$1424 [0] 1'0 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][15]$1495:
      Old ports: A=$memory\params$rdmux[0][5][15]$a$1496, B=$memory\params$rdmux[0][5][15]$b$1497, Y=$memory\params$rdmux[0][4][7]$b$1425
      New ports: A={ $memory\params$rdmux[0][5][15]$a$1496 [1] $memory\params$rdmux[0][5][15]$a$1496 [1] 1'0 }, B={ $memory\params$rdmux[0][5][15]$b$1497 [0] 1'0 $memory\params$rdmux[0][5][15]$b$1497 [0] }, Y={ $memory\params$rdmux[0][4][7]$b$1425 [3] $memory\params$rdmux[0][4][7]$b$1425 [1:0] }
      New connections: { $memory\params$rdmux[0][4][7]$b$1425 [7:4] $memory\params$rdmux[0][4][7]$b$1425 [2] } = { 1'0 $memory\params$rdmux[0][4][7]$b$1425 [0] $memory\params$rdmux[0][4][7]$b$1425 [0] $memory\params$rdmux[0][4][7]$b$1425 [1] 1'0 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][16]$1498:
      Old ports: A=$memory\params$rdmux[0][5][16]$a$1499, B=$memory\params$rdmux[0][5][16]$b$1500, Y=$memory\params$rdmux[0][4][8]$a$1427
      New ports: A={ 1'0 $memory\params$rdmux[0][5][16]$a$1499 [0] }, B={ $memory\params$rdmux[0][5][16]$b$1500 [5] 1'0 }, Y={ $memory\params$rdmux[0][4][8]$a$1427 [5] $memory\params$rdmux[0][4][8]$a$1427 [0] }
      New connections: { $memory\params$rdmux[0][4][8]$a$1427 [7:6] $memory\params$rdmux[0][4][8]$a$1427 [4:1] } = { $memory\params$rdmux[0][4][8]$a$1427 [5] 5'00000 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][17]$1501:
      Old ports: A=$memory\params$rdmux[0][5][17]$a$1502, B=$memory\params$rdmux[0][5][17]$b$1503, Y=$memory\params$rdmux[0][4][8]$b$1428
      New ports: A={ 1'0 $memory\params$rdmux[0][5][17]$a$1502 [0] }, B={ $memory\params$rdmux[0][5][17]$b$1503 [5] 1'0 }, Y={ $memory\params$rdmux[0][4][8]$b$1428 [5] $memory\params$rdmux[0][4][8]$b$1428 [0] }
      New connections: { $memory\params$rdmux[0][4][8]$b$1428 [7:6] $memory\params$rdmux[0][4][8]$b$1428 [4:1] } = { $memory\params$rdmux[0][4][8]$b$1428 [5] 5'00000 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][18]$1504:
      Old ports: A=$memory\params$rdmux[0][5][18]$a$1505, B=$memory\params$rdmux[0][5][18]$b$1506, Y=$memory\params$rdmux[0][4][9]$a$1430
      New ports: A={ $memory\params$rdmux[0][5][18]$a$1505 [1] 1'0 $memory\params$rdmux[0][5][18]$a$1505 [1] 1'0 }, B={ 1'1 $memory\params$rdmux[0][5][18]$b$1506 [1] $memory\params$rdmux[0][5][18]$b$1506 [1] 1'1 }, Y=$memory\params$rdmux[0][4][9]$a$1430 [3:0]
      New connections: $memory\params$rdmux[0][4][9]$a$1430 [7:4] = { $memory\params$rdmux[0][4][9]$a$1430 [2] $memory\params$rdmux[0][4][9]$a$1430 [0] $memory\params$rdmux[0][4][9]$a$1430 [0] $memory\params$rdmux[0][4][9]$a$1430 [1] }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][19]$1507:
      Old ports: A=$memory\params$rdmux[0][5][19]$a$1508, B=$memory\params$rdmux[0][5][19]$b$1509, Y=$memory\params$rdmux[0][4][9]$b$1431
      New ports: A={ 1'0 $memory\params$rdmux[0][5][19]$a$1508 [0] }, B={ $memory\params$rdmux[0][5][19]$b$1509 [5] 1'0 }, Y={ $memory\params$rdmux[0][4][9]$b$1431 [5] $memory\params$rdmux[0][4][9]$b$1431 [0] }
      New connections: { $memory\params$rdmux[0][4][9]$b$1431 [7:6] $memory\params$rdmux[0][4][9]$b$1431 [4:1] } = { $memory\params$rdmux[0][4][9]$b$1431 [5] 5'00000 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][1]$1453:
      Old ports: A=$memory\params$rdmux[0][5][1]$a$1454, B=$memory\params$rdmux[0][5][1]$b$1455, Y=$memory\params$rdmux[0][4][0]$b$1404
      New ports: A=2'10, B={ $memory\params$rdmux[0][5][1]$b$1455 [3] $memory\params$rdmux[0][5][1]$b$1455 [0] }, Y={ $memory\params$rdmux[0][4][0]$b$1404 [3] $memory\params$rdmux[0][4][0]$b$1404 [0] }
      New connections: { $memory\params$rdmux[0][4][0]$b$1404 [7:4] $memory\params$rdmux[0][4][0]$b$1404 [2:1] } = { 2'00 $memory\params$rdmux[0][4][0]$b$1404 [3] $memory\params$rdmux[0][4][0]$b$1404 [3] 2'10 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][20]$1510:
      Old ports: A=$memory\params$rdmux[0][5][20]$a$1511, B=$memory\params$rdmux[0][5][20]$b$1512, Y=$memory\params$rdmux[0][4][10]$a$1433
      New ports: A={ $memory\params$rdmux[0][5][20]$a$1511 [1] $memory\params$rdmux[0][5][20]$a$1511 [1] 1'0 }, B={ $memory\params$rdmux[0][5][20]$b$1512 [0] 1'0 $memory\params$rdmux[0][5][20]$b$1512 [0] }, Y={ $memory\params$rdmux[0][4][10]$a$1433 [3] $memory\params$rdmux[0][4][10]$a$1433 [1:0] }
      New connections: { $memory\params$rdmux[0][4][10]$a$1433 [7:4] $memory\params$rdmux[0][4][10]$a$1433 [2] } = { 1'0 $memory\params$rdmux[0][4][10]$a$1433 [0] $memory\params$rdmux[0][4][10]$a$1433 [0] $memory\params$rdmux[0][4][10]$a$1433 [1] 1'0 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][2]$1456:
      Old ports: A=$memory\params$rdmux[0][5][2]$a$1457, B=8'00111100, Y=$memory\params$rdmux[0][4][1]$a$1406
      New ports: A={ $memory\params$rdmux[0][5][2]$a$1457 [3] $memory\params$rdmux[0][5][2]$a$1457 [0] }, B=2'10, Y={ $memory\params$rdmux[0][4][1]$a$1406 [3] $memory\params$rdmux[0][4][1]$a$1406 [0] }
      New connections: { $memory\params$rdmux[0][4][1]$a$1406 [7:4] $memory\params$rdmux[0][4][1]$a$1406 [2:1] } = { 2'00 $memory\params$rdmux[0][4][1]$a$1406 [3] $memory\params$rdmux[0][4][1]$a$1406 [3] 2'10 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][3]$1459:
      Old ports: A=$memory\params$rdmux[0][5][3]$a$1460, B=$memory\params$rdmux[0][5][3]$b$1461, Y=$memory\params$rdmux[0][4][1]$b$1407
      New ports: A={ $memory\params$rdmux[0][5][3]$a$1460 [3] $memory\params$rdmux[0][5][3]$a$1460 [3] 2'01 }, B={ 1'0 $memory\params$rdmux[0][5][3]$b$1461 [0] $memory\params$rdmux[0][5][3]$b$1461 [2] $memory\params$rdmux[0][5][3]$b$1461 [0] }, Y={ $memory\params$rdmux[0][4][1]$b$1407 [5] $memory\params$rdmux[0][4][1]$b$1407 [3:2] $memory\params$rdmux[0][4][1]$b$1407 [0] }
      New connections: { $memory\params$rdmux[0][4][1]$b$1407 [7:6] $memory\params$rdmux[0][4][1]$b$1407 [4] $memory\params$rdmux[0][4][1]$b$1407 [1] } = { $memory\params$rdmux[0][4][1]$b$1407 [5] 2'00 $memory\params$rdmux[0][4][1]$b$1407 [0] }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][4]$1462:
      Old ports: A=$memory\params$rdmux[0][5][4]$a$1463, B=$memory\params$rdmux[0][5][4]$b$1464, Y=$memory\params$rdmux[0][4][2]$a$1409
      New ports: A={ $memory\params$rdmux[0][5][4]$a$1463 [6] $memory\params$rdmux[0][5][4]$a$1463 [6] $memory\params$rdmux[0][5][4]$a$1463 [3] 1'1 }, B={ $memory\params$rdmux[0][5][4]$b$1464 [0] 1'0 $memory\params$rdmux[0][5][4]$b$1464 [0] $memory\params$rdmux[0][5][4]$b$1464 [0] }, Y={ $memory\params$rdmux[0][4][2]$a$1409 [7:6] $memory\params$rdmux[0][4][2]$a$1409 [3] $memory\params$rdmux[0][4][2]$a$1409 [0] }
      New connections: { $memory\params$rdmux[0][4][2]$a$1409 [5:4] $memory\params$rdmux[0][4][2]$a$1409 [2:1] } = { 2'00 $memory\params$rdmux[0][4][2]$a$1409 [0] 1'0 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][5]$1465:
      Old ports: A=$memory\params$rdmux[0][5][5]$a$1466, B=$memory\params$rdmux[0][5][5]$b$1467, Y=$memory\params$rdmux[0][4][2]$b$1410
      New ports: A={ $memory\params$rdmux[0][5][5]$a$1466 [0] $memory\params$rdmux[0][5][5]$a$1466 [1:0] $memory\params$rdmux[0][5][5]$a$1466 [1:0] }, B={ $memory\params$rdmux[0][5][5]$b$1467 [5] $memory\params$rdmux[0][5][5]$b$1467 [5] 2'11 $memory\params$rdmux[0][5][5]$b$1467 [0] }, Y={ $memory\params$rdmux[0][4][2]$b$1410 [7] $memory\params$rdmux[0][4][2]$b$1410 [5] $memory\params$rdmux[0][4][2]$b$1410 [2:0] }
      New connections: { $memory\params$rdmux[0][4][2]$b$1410 [6] $memory\params$rdmux[0][4][2]$b$1410 [4:3] } = { $memory\params$rdmux[0][4][2]$b$1410 [5] 2'01 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][6]$1468:
      Old ports: A=$memory\params$rdmux[0][5][6]$a$1469, B=$memory\params$rdmux[0][5][6]$b$1470, Y=$memory\params$rdmux[0][4][3]$a$1412
      New ports: A={ $memory\params$rdmux[0][5][6]$a$1469 [3] 1'1 $memory\params$rdmux[0][5][6]$a$1469 [0] }, B={ $memory\params$rdmux[0][5][6]$b$1470 [3] $memory\params$rdmux[0][5][6]$b$1470 [0] $memory\params$rdmux[0][5][6]$b$1470 [0] }, Y={ $memory\params$rdmux[0][4][3]$a$1412 [3] $memory\params$rdmux[0][4][3]$a$1412 [1:0] }
      New connections: { $memory\params$rdmux[0][4][3]$a$1412 [7:4] $memory\params$rdmux[0][4][3]$a$1412 [2] } = { 4'0000 $memory\params$rdmux[0][4][3]$a$1412 [1] }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][7]$1471:
      Old ports: A=$memory\params$rdmux[0][5][7]$a$1472, B=$memory\params$rdmux[0][5][7]$b$1473, Y=$memory\params$rdmux[0][4][3]$b$1413
      New ports: A={ $memory\params$rdmux[0][5][7]$a$1472 [4] $memory\params$rdmux[0][5][7]$a$1472 [0] $memory\params$rdmux[0][5][7]$a$1472 [0] }, B={ 2'01 $memory\params$rdmux[0][5][7]$b$1473 [0] }, Y={ $memory\params$rdmux[0][4][3]$b$1413 [4] $memory\params$rdmux[0][4][3]$b$1413 [1:0] }
      New connections: { $memory\params$rdmux[0][4][3]$b$1413 [7:5] $memory\params$rdmux[0][4][3]$b$1413 [3:2] } = { 4'0000 $memory\params$rdmux[0][4][3]$b$1413 [0] }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][8]$1474:
      Old ports: A=$memory\params$rdmux[0][5][8]$a$1475, B=$memory\params$rdmux[0][5][8]$b$1476, Y=$memory\params$rdmux[0][4][4]$a$1415
      New ports: A={ 3'001 $memory\params$rdmux[0][5][8]$a$1475 [1] $memory\params$rdmux[0][5][8]$a$1475 [1] 1'1 }, B={ 1'1 $memory\params$rdmux[0][5][8]$b$1476 [1] 2'01 $memory\params$rdmux[0][5][8]$b$1476 [1:0] }, Y=$memory\params$rdmux[0][4][4]$a$1415 [5:0]
      New connections: $memory\params$rdmux[0][4][4]$a$1415 [7:6] = 2'00
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][9]$1477:
      Old ports: A=$memory\params$rdmux[0][5][9]$a$1478, B=$memory\params$rdmux[0][5][9]$b$1479, Y=$memory\params$rdmux[0][4][4]$b$1416
      New ports: A={ 1'0 $memory\params$rdmux[0][5][9]$a$1478 [3] 1'0 }, B={ $memory\params$rdmux[0][5][9]$b$1479 [4] 1'0 $memory\params$rdmux[0][5][9]$b$1479 [2] }, Y=$memory\params$rdmux[0][4][4]$b$1416 [4:2]
      New connections: { $memory\params$rdmux[0][4][4]$b$1416 [7:5] $memory\params$rdmux[0][4][4]$b$1416 [1:0] } = 5'00000
  Optimizing cells in module \demo.
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][2][0]$962:
      Old ports: A=$memory\cmd$rdmux[0][2][0]$a$963, B=$memory\cmd$rdmux[0][2][0]$b$964, Y=$memory\cmd$rdmux[0][1][0]$a$957
      New ports: A={ $memory\cmd$rdmux[0][2][0]$a$963 [5] 1'0 $memory\cmd$rdmux[0][2][0]$a$963 [5] 2'10 $memory\cmd$rdmux[0][2][0]$a$963 [1:0] }, B={ 1'1 $memory\cmd$rdmux[0][2][0]$b$964 [6] $memory\cmd$rdmux[0][2][0]$b$964 [2] $memory\cmd$rdmux[0][2][0]$b$964 [2] $memory\cmd$rdmux[0][2][0]$b$964 [2:0] }, Y={ $memory\cmd$rdmux[0][1][0]$a$957 [7:4] $memory\cmd$rdmux[0][1][0]$a$957 [2:0] }
      New connections: $memory\cmd$rdmux[0][1][0]$a$957 [3] = 1'0
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][2][1]$965:
      Old ports: A=$memory\cmd$rdmux[0][2][1]$a$966, B=$memory\cmd$rdmux[0][2][1]$b$967, Y=$memory\cmd$rdmux[0][1][0]$b$958
      New ports: A={ 1'1 $memory\cmd$rdmux[0][2][1]$a$966 [5] 2'00 $memory\cmd$rdmux[0][2][1]$a$966 [2:0] }, B={ $memory\cmd$rdmux[0][2][1]$b$967 [6] 1'1 $memory\cmd$rdmux[0][2][1]$b$967 [4:0] }, Y=$memory\cmd$rdmux[0][1][0]$b$958 [6:0]
      New connections: $memory\cmd$rdmux[0][1][0]$b$958 [7] = $memory\cmd$rdmux[0][1][0]$b$958 [6]
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][2][2]$968:
      Old ports: A=$memory\cmd$rdmux[0][2][2]$a$969, B=$memory\cmd$rdmux[0][2][2]$b$970, Y=$memory\cmd$rdmux[0][1][1]$a$960
      New ports: A={ $memory\cmd$rdmux[0][2][2]$a$969 [3] 1'0 $memory\cmd$rdmux[0][2][2]$a$969 [1:0] }, B={ 1'1 $memory\cmd$rdmux[0][2][2]$b$970 [2:0] }, Y=$memory\cmd$rdmux[0][1][1]$a$960 [3:0]
      New connections: $memory\cmd$rdmux[0][1][1]$a$960 [7:4] = 4'0010
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][2][3]$971:
      Old ports: A=$memory\cmd$rdmux[0][2][3]$a$972, B=8'xxxxxxxx, Y=$memory\cmd$rdmux[0][1][1]$b$961
      New ports: A=$memory\cmd$rdmux[0][2][3]$a$972 [2:0], B=3'xxx, Y=$memory\cmd$rdmux[0][1][1]$b$961 [2:0]
      New connections: $memory\cmd$rdmux[0][1][1]$b$961 [7:3] = { $memory\cmd$rdmux[0][1][1]$b$961 [2] $memory\cmd$rdmux[0][1][1]$b$961 [2:1] $memory\cmd$rdmux[0][1][1]$b$961 [2:1] }
    Consolidated identical input bits for $mux cell $memory\num_params$rdmux[0][2][0]$1105:
      Old ports: A=$memory\num_params$rdmux[0][2][0]$a$1106, B=$memory\num_params$rdmux[0][2][0]$b$1107, Y=$memory\num_params$rdmux[0][1][0]$a$1100
      New ports: A=$memory\num_params$rdmux[0][2][0]$a$1106 [2:0], B={ 1'0 $memory\num_params$rdmux[0][2][0]$b$1107 [1:0] }, Y=$memory\num_params$rdmux[0][1][0]$a$1100 [2:0]
      New connections: $memory\num_params$rdmux[0][1][0]$a$1100 [13:3] = 11'00000000000
    Consolidated identical input bits for $mux cell $memory\num_params$rdmux[0][2][1]$1108:
      Old ports: A=$memory\num_params$rdmux[0][2][1]$a$1109, B=$memory\num_params$rdmux[0][2][1]$b$1110, Y=$memory\num_params$rdmux[0][1][0]$b$1101
      New ports: A={ $memory\num_params$rdmux[0][2][1]$a$1109 [4] $memory\num_params$rdmux[0][2][1]$a$1109 [1:0] }, B={ $memory\num_params$rdmux[0][2][1]$b$1110 [4] 1'0 $memory\num_params$rdmux[0][2][1]$b$1110 [0] }, Y={ $memory\num_params$rdmux[0][1][0]$b$1101 [4] $memory\num_params$rdmux[0][1][0]$b$1101 [1:0] }
      New connections: { $memory\num_params$rdmux[0][1][0]$b$1101 [13:5] $memory\num_params$rdmux[0][1][0]$b$1101 [3:2] } = 11'00000000000
    Consolidated identical input bits for $mux cell $memory\num_params$rdmux[0][2][2]$1111:
      Old ports: A=$memory\num_params$rdmux[0][2][2]$a$1112, B=$memory\num_params$rdmux[0][2][2]$b$1113, Y=$memory\num_params$rdmux[0][1][1]$a$1103
      New ports: A={ 1'0 $memory\num_params$rdmux[0][2][2]$a$1112 [2] }, B={ $memory\num_params$rdmux[0][2][2]$b$1113 [9] $memory\num_params$rdmux[0][2][2]$b$1113 [2] }, Y={ $memory\num_params$rdmux[0][1][1]$a$1103 [9] $memory\num_params$rdmux[0][1][1]$a$1103 [2] }
      New connections: { $memory\num_params$rdmux[0][1][1]$a$1103 [13:10] $memory\num_params$rdmux[0][1][1]$a$1103 [8:3] $memory\num_params$rdmux[0][1][1]$a$1103 [1:0] } = { $memory\num_params$rdmux[0][1][1]$a$1103 [9] $memory\num_params$rdmux[0][1][1]$a$1103 [9] 10'0000000000 }
    Consolidated identical input bits for $mux cell $memory\num_params$rdmux[0][2][3]$1114:
      Old ports: A=$memory\num_params$rdmux[0][2][3]$a$1115, B=14'xxxxxxxxxxxxxx, Y=$memory\num_params$rdmux[0][1][1]$b$1104
      New ports: A={ $memory\num_params$rdmux[0][2][3]$a$1115 [2] $memory\num_params$rdmux[0][2][3]$a$1115 [0] }, B=2'xx, Y={ $memory\num_params$rdmux[0][1][1]$b$1104 [2] $memory\num_params$rdmux[0][1][1]$b$1104 [0] }
      New connections: { $memory\num_params$rdmux[0][1][1]$b$1104 [13:3] $memory\num_params$rdmux[0][1][1]$b$1104 [1] } = { $memory\num_params$rdmux[0][1][1]$b$1104 [0] $memory\num_params$rdmux[0][1][1]$b$1104 [0] $memory\num_params$rdmux[0][1][1]$b$1104 [0] $memory\num_params$rdmux[0][1][1]$b$1104 [0] $memory\num_params$rdmux[0][1][1]$b$1104 [0] $memory\num_params$rdmux[0][1][1]$b$1104 [0] $memory\num_params$rdmux[0][1][1]$b$1104 [0] $memory\num_params$rdmux[0][1][1]$b$1104 [0] $memory\num_params$rdmux[0][1][1]$b$1104 [0] $memory\num_params$rdmux[0][1][1]$b$1104 [0] $memory\num_params$rdmux[0][1][1]$b$1104 [0] $memory\num_params$rdmux[0][1][1]$b$1104 [0] }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][4][0]$1402:
      Old ports: A=$memory\params$rdmux[0][4][0]$a$1403, B=$memory\params$rdmux[0][4][0]$b$1404, Y=$memory\params$rdmux[0][3][0]$a$1379
      New ports: A={ $memory\params$rdmux[0][4][0]$a$1403 [3] $memory\params$rdmux[0][4][0]$a$1403 [0] }, B={ $memory\params$rdmux[0][4][0]$b$1404 [3] $memory\params$rdmux[0][4][0]$b$1404 [0] }, Y={ $memory\params$rdmux[0][3][0]$a$1379 [3] $memory\params$rdmux[0][3][0]$a$1379 [0] }
      New connections: { $memory\params$rdmux[0][3][0]$a$1379 [7:4] $memory\params$rdmux[0][3][0]$a$1379 [2:1] } = { 2'00 $memory\params$rdmux[0][3][0]$a$1379 [3] $memory\params$rdmux[0][3][0]$a$1379 [3] 2'10 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][4][10]$1432:
      Old ports: A=$memory\params$rdmux[0][4][10]$a$1433, B=8'xxxxxxxx, Y=$memory\params$rdmux[0][3][5]$a$1394
      New ports: A={ $memory\params$rdmux[0][4][10]$a$1433 [3] 1'0 $memory\params$rdmux[0][4][10]$a$1433 [1:0] }, B=4'xxxx, Y=$memory\params$rdmux[0][3][5]$a$1394 [3:0]
      New connections: $memory\params$rdmux[0][3][5]$a$1394 [7:4] = { $memory\params$rdmux[0][3][5]$a$1394 [2] $memory\params$rdmux[0][3][5]$a$1394 [0] $memory\params$rdmux[0][3][5]$a$1394 [0] $memory\params$rdmux[0][3][5]$a$1394 [1] }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][4][1]$1405:
      Old ports: A=$memory\params$rdmux[0][4][1]$a$1406, B=$memory\params$rdmux[0][4][1]$b$1407, Y=$memory\params$rdmux[0][3][0]$b$1380
      New ports: A={ 1'0 $memory\params$rdmux[0][4][1]$a$1406 [3] $memory\params$rdmux[0][4][1]$a$1406 [3] $memory\params$rdmux[0][4][1]$a$1406 [3] 2'10 $memory\params$rdmux[0][4][1]$a$1406 [0] }, B={ $memory\params$rdmux[0][4][1]$b$1407 [5] $memory\params$rdmux[0][4][1]$b$1407 [5] 1'0 $memory\params$rdmux[0][4][1]$b$1407 [3:2] $memory\params$rdmux[0][4][1]$b$1407 [0] $memory\params$rdmux[0][4][1]$b$1407 [0] }, Y={ $memory\params$rdmux[0][3][0]$b$1380 [7] $memory\params$rdmux[0][3][0]$b$1380 [5:0] }
      New connections: $memory\params$rdmux[0][3][0]$b$1380 [6] = 1'0
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][4][2]$1408:
      Old ports: A=$memory\params$rdmux[0][4][2]$a$1409, B=$memory\params$rdmux[0][4][2]$b$1410, Y=$memory\params$rdmux[0][3][1]$a$1382
      New ports: A={ $memory\params$rdmux[0][4][2]$a$1409 [7:6] 1'0 $memory\params$rdmux[0][4][2]$a$1409 [3] $memory\params$rdmux[0][4][2]$a$1409 [0] 1'0 $memory\params$rdmux[0][4][2]$a$1409 [0] }, B={ $memory\params$rdmux[0][4][2]$b$1410 [7] $memory\params$rdmux[0][4][2]$b$1410 [5] $memory\params$rdmux[0][4][2]$b$1410 [5] 1'1 $memory\params$rdmux[0][4][2]$b$1410 [2:0] }, Y={ $memory\params$rdmux[0][3][1]$a$1382 [7:5] $memory\params$rdmux[0][3][1]$a$1382 [3:0] }
      New connections: $memory\params$rdmux[0][3][1]$a$1382 [4] = 1'0
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][4][3]$1411:
      Old ports: A=$memory\params$rdmux[0][4][3]$a$1412, B=$memory\params$rdmux[0][4][3]$b$1413, Y=$memory\params$rdmux[0][3][1]$b$1383
      New ports: A={ 1'0 $memory\params$rdmux[0][4][3]$a$1412 [3] $memory\params$rdmux[0][4][3]$a$1412 [1] $memory\params$rdmux[0][4][3]$a$1412 [1:0] }, B={ $memory\params$rdmux[0][4][3]$b$1413 [4] 1'0 $memory\params$rdmux[0][4][3]$b$1413 [0] $memory\params$rdmux[0][4][3]$b$1413 [1:0] }, Y=$memory\params$rdmux[0][3][1]$b$1383 [4:0]
      New connections: $memory\params$rdmux[0][3][1]$b$1383 [7:5] = 3'000
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][4][4]$1414:
      Old ports: A=$memory\params$rdmux[0][4][4]$a$1415, B=$memory\params$rdmux[0][4][4]$b$1416, Y=$memory\params$rdmux[0][3][2]$a$1385
      New ports: A=$memory\params$rdmux[0][4][4]$a$1415 [5:0], B={ 1'0 $memory\params$rdmux[0][4][4]$b$1416 [4:2] 2'00 }, Y=$memory\params$rdmux[0][3][2]$a$1385 [5:0]
      New connections: $memory\params$rdmux[0][3][2]$a$1385 [7:6] = 2'00
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][4][5]$1417:
      Old ports: A=$memory\params$rdmux[0][4][5]$a$1418, B=$memory\params$rdmux[0][4][5]$b$1419, Y=$memory\params$rdmux[0][3][2]$b$1386
      New ports: A={ $memory\params$rdmux[0][4][5]$a$1418 [3] $memory\params$rdmux[0][4][5]$a$1418 [1:0] }, B={ $memory\params$rdmux[0][4][5]$b$1419 [3] 1'1 $memory\params$rdmux[0][4][5]$b$1419 [0] }, Y={ $memory\params$rdmux[0][3][2]$b$1386 [3] $memory\params$rdmux[0][3][2]$b$1386 [1:0] }
      New connections: { $memory\params$rdmux[0][3][2]$b$1386 [7:4] $memory\params$rdmux[0][3][2]$b$1386 [2] } = { 4'0000 $memory\params$rdmux[0][3][2]$b$1386 [0] }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][4][6]$1420:
      Old ports: A=$memory\params$rdmux[0][4][6]$a$1421, B=$memory\params$rdmux[0][4][6]$b$1422, Y=$memory\params$rdmux[0][3][3]$a$1388
      New ports: A={ $memory\params$rdmux[0][4][6]$a$1421 [5:1] 1'1 }, B={ 1'0 $memory\params$rdmux[0][4][6]$b$1422 [4] $memory\params$rdmux[0][4][6]$b$1422 [0] $memory\params$rdmux[0][4][6]$b$1422 [2] 1'0 $memory\params$rdmux[0][4][6]$b$1422 [0] }, Y=$memory\params$rdmux[0][3][3]$a$1388 [5:0]
      New connections: $memory\params$rdmux[0][3][3]$a$1388 [7:6] = 2'00
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][4][7]$1423:
      Old ports: A=$memory\params$rdmux[0][4][7]$a$1424, B=$memory\params$rdmux[0][4][7]$b$1425, Y=$memory\params$rdmux[0][3][3]$b$1389
      New ports: A={ $memory\params$rdmux[0][4][7]$a$1424 [7] $memory\params$rdmux[0][4][7]$a$1424 [3] $memory\params$rdmux[0][4][7]$a$1424 [3] $memory\params$rdmux[0][4][7]$a$1424 [3] $memory\params$rdmux[0][4][7]$a$1424 [0] 1'0 $memory\params$rdmux[0][4][7]$a$1424 [0] }, B={ 1'0 $memory\params$rdmux[0][4][7]$b$1425 [0] $memory\params$rdmux[0][4][7]$b$1425 [1] $memory\params$rdmux[0][4][7]$b$1425 [3] 1'0 $memory\params$rdmux[0][4][7]$b$1425 [1:0] }, Y={ $memory\params$rdmux[0][3][3]$b$1389 [7] $memory\params$rdmux[0][3][3]$b$1389 [5:0] }
      New connections: $memory\params$rdmux[0][3][3]$b$1389 [6] = $memory\params$rdmux[0][3][3]$b$1389 [5]
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][4][8]$1426:
      Old ports: A=$memory\params$rdmux[0][4][8]$a$1427, B=$memory\params$rdmux[0][4][8]$b$1428, Y=$memory\params$rdmux[0][3][4]$a$1391
      New ports: A={ $memory\params$rdmux[0][4][8]$a$1427 [5] $memory\params$rdmux[0][4][8]$a$1427 [0] }, B={ $memory\params$rdmux[0][4][8]$b$1428 [5] $memory\params$rdmux[0][4][8]$b$1428 [0] }, Y={ $memory\params$rdmux[0][3][4]$a$1391 [5] $memory\params$rdmux[0][3][4]$a$1391 [0] }
      New connections: { $memory\params$rdmux[0][3][4]$a$1391 [7:6] $memory\params$rdmux[0][3][4]$a$1391 [4:1] } = { $memory\params$rdmux[0][3][4]$a$1391 [5] 5'00000 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][4][9]$1429:
      Old ports: A=$memory\params$rdmux[0][4][9]$a$1430, B=$memory\params$rdmux[0][4][9]$b$1431, Y=$memory\params$rdmux[0][3][4]$b$1392
      New ports: A={ $memory\params$rdmux[0][4][9]$a$1430 [2] $memory\params$rdmux[0][4][9]$a$1430 [0] $memory\params$rdmux[0][4][9]$a$1430 [0] $memory\params$rdmux[0][4][9]$a$1430 [3:0] }, B={ $memory\params$rdmux[0][4][9]$b$1431 [5] 1'0 $memory\params$rdmux[0][4][9]$b$1431 [5] 3'000 $memory\params$rdmux[0][4][9]$b$1431 [0] }, Y={ $memory\params$rdmux[0][3][4]$b$1392 [7:5] $memory\params$rdmux[0][3][4]$b$1392 [3:0] }
      New connections: $memory\params$rdmux[0][3][4]$b$1392 [4] = $memory\params$rdmux[0][3][4]$b$1392 [1]
  Optimizing cells in module \demo.
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][1][1]$959:
      Old ports: A=$memory\cmd$rdmux[0][1][1]$a$960, B=$memory\cmd$rdmux[0][1][1]$b$961, Y=$memory\cmd$rdmux[0][0][0]$b$955
      New ports: A={ 2'10 $memory\cmd$rdmux[0][1][1]$a$960 [3:0] }, B={ $memory\cmd$rdmux[0][1][1]$b$961 [1] $memory\cmd$rdmux[0][1][1]$b$961 [2:1] $memory\cmd$rdmux[0][1][1]$b$961 [2:0] }, Y=$memory\cmd$rdmux[0][0][0]$b$955 [5:0]
      New connections: $memory\cmd$rdmux[0][0][0]$b$955 [7:6] = { $memory\cmd$rdmux[0][0][0]$b$955 [4] $memory\cmd$rdmux[0][0][0]$b$955 [4] }
    Consolidated identical input bits for $mux cell $memory\num_params$rdmux[0][1][0]$1099:
      Old ports: A=$memory\num_params$rdmux[0][1][0]$a$1100, B=$memory\num_params$rdmux[0][1][0]$b$1101, Y=$memory\num_params$rdmux[0][0][0]$a$1097
      New ports: A={ 1'0 $memory\num_params$rdmux[0][1][0]$a$1100 [2:0] }, B={ $memory\num_params$rdmux[0][1][0]$b$1101 [4] 1'0 $memory\num_params$rdmux[0][1][0]$b$1101 [1:0] }, Y={ $memory\num_params$rdmux[0][0][0]$a$1097 [4] $memory\num_params$rdmux[0][0][0]$a$1097 [2:0] }
      New connections: { $memory\num_params$rdmux[0][0][0]$a$1097 [13:5] $memory\num_params$rdmux[0][0][0]$a$1097 [3] } = 10'0000000000
    Consolidated identical input bits for $mux cell $memory\num_params$rdmux[0][1][1]$1102:
      Old ports: A=$memory\num_params$rdmux[0][1][1]$a$1103, B=$memory\num_params$rdmux[0][1][1]$b$1104, Y=$memory\num_params$rdmux[0][0][0]$b$1098
      New ports: A={ $memory\num_params$rdmux[0][1][1]$a$1103 [9] $memory\num_params$rdmux[0][1][1]$a$1103 [2] 1'0 }, B={ $memory\num_params$rdmux[0][1][1]$b$1104 [0] $memory\num_params$rdmux[0][1][1]$b$1104 [2] $memory\num_params$rdmux[0][1][1]$b$1104 [0] }, Y={ $memory\num_params$rdmux[0][0][0]$b$1098 [9] $memory\num_params$rdmux[0][0][0]$b$1098 [2] $memory\num_params$rdmux[0][0][0]$b$1098 [0] }
      New connections: { $memory\num_params$rdmux[0][0][0]$b$1098 [13:10] $memory\num_params$rdmux[0][0][0]$b$1098 [8:3] $memory\num_params$rdmux[0][0][0]$b$1098 [1] } = { $memory\num_params$rdmux[0][0][0]$b$1098 [9] $memory\num_params$rdmux[0][0][0]$b$1098 [9] $memory\num_params$rdmux[0][0][0]$b$1098 [0] $memory\num_params$rdmux[0][0][0]$b$1098 [0] $memory\num_params$rdmux[0][0][0]$b$1098 [0] $memory\num_params$rdmux[0][0][0]$b$1098 [0] $memory\num_params$rdmux[0][0][0]$b$1098 [0] $memory\num_params$rdmux[0][0][0]$b$1098 [0] $memory\num_params$rdmux[0][0][0]$b$1098 [0] $memory\num_params$rdmux[0][0][0]$b$1098 [0] $memory\num_params$rdmux[0][0][0]$b$1098 [0] }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][3][0]$1378:
      Old ports: A=$memory\params$rdmux[0][3][0]$a$1379, B=$memory\params$rdmux[0][3][0]$b$1380, Y=$memory\params$rdmux[0][2][0]$a$1367
      New ports: A={ 1'0 $memory\params$rdmux[0][3][0]$a$1379 [3] $memory\params$rdmux[0][3][0]$a$1379 [3] $memory\params$rdmux[0][3][0]$a$1379 [3] 2'10 $memory\params$rdmux[0][3][0]$a$1379 [0] }, B={ $memory\params$rdmux[0][3][0]$b$1380 [7] $memory\params$rdmux[0][3][0]$b$1380 [5:0] }, Y={ $memory\params$rdmux[0][2][0]$a$1367 [7] $memory\params$rdmux[0][2][0]$a$1367 [5:0] }
      New connections: $memory\params$rdmux[0][2][0]$a$1367 [6] = 1'0
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][3][2]$1384:
      Old ports: A=$memory\params$rdmux[0][3][2]$a$1385, B=$memory\params$rdmux[0][3][2]$b$1386, Y=$memory\params$rdmux[0][2][1]$a$1370
      New ports: A=$memory\params$rdmux[0][3][2]$a$1385 [5:0], B={ 2'00 $memory\params$rdmux[0][3][2]$b$1386 [3] $memory\params$rdmux[0][3][2]$b$1386 [0] $memory\params$rdmux[0][3][2]$b$1386 [1:0] }, Y=$memory\params$rdmux[0][2][1]$a$1370 [5:0]
      New connections: $memory\params$rdmux[0][2][1]$a$1370 [7:6] = 2'00
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][3][4]$1390:
      Old ports: A=$memory\params$rdmux[0][3][4]$a$1391, B=$memory\params$rdmux[0][3][4]$b$1392, Y=$memory\params$rdmux[0][2][2]$a$1373
      New ports: A={ $memory\params$rdmux[0][3][4]$a$1391 [5] 1'0 $memory\params$rdmux[0][3][4]$a$1391 [5] 3'000 $memory\params$rdmux[0][3][4]$a$1391 [0] }, B={ $memory\params$rdmux[0][3][4]$b$1392 [7:5] $memory\params$rdmux[0][3][4]$b$1392 [3:0] }, Y={ $memory\params$rdmux[0][2][2]$a$1373 [7:5] $memory\params$rdmux[0][2][2]$a$1373 [3:0] }
      New connections: $memory\params$rdmux[0][2][2]$a$1373 [4] = $memory\params$rdmux[0][2][2]$a$1373 [1]
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][3][5]$1393:
      Old ports: A=$memory\params$rdmux[0][3][5]$a$1394, B=8'xxxxxxxx, Y=$memory\params$rdmux[0][2][2]$b$1374
      New ports: A=$memory\params$rdmux[0][3][5]$a$1394 [3:0], B=4'xxxx, Y=$memory\params$rdmux[0][2][2]$b$1374 [3:0]
      New connections: $memory\params$rdmux[0][2][2]$b$1374 [7:4] = { $memory\params$rdmux[0][2][2]$b$1374 [2] $memory\params$rdmux[0][2][2]$b$1374 [0] $memory\params$rdmux[0][2][2]$b$1374 [0] $memory\params$rdmux[0][2][2]$b$1374 [1] }
  Optimizing cells in module \demo.
    Consolidated identical input bits for $mux cell $memory\num_params$rdmux[0][0][0]$1096:
      Old ports: A=$memory\num_params$rdmux[0][0][0]$a$1097, B=$memory\num_params$rdmux[0][0][0]$b$1098, Y=$memrd$\num_params$demo.v:405$169_DATA
      New ports: A={ 1'0 $memory\num_params$rdmux[0][0][0]$a$1097 [4] 1'0 $memory\num_params$rdmux[0][0][0]$a$1097 [2:0] }, B={ $memory\num_params$rdmux[0][0][0]$b$1098 [9] $memory\num_params$rdmux[0][0][0]$b$1098 [0] $memory\num_params$rdmux[0][0][0]$b$1098 [0] $memory\num_params$rdmux[0][0][0]$b$1098 [2] $memory\num_params$rdmux[0][0][0]$b$1098 [0] $memory\num_params$rdmux[0][0][0]$b$1098 [0] }, Y={ $memrd$\num_params$demo.v:405$169_DATA [9] $memrd$\num_params$demo.v:405$169_DATA [4:0] }
      New connections: { $memrd$\num_params$demo.v:405$169_DATA [13:10] $memrd$\num_params$demo.v:405$169_DATA [8:5] } = { $memrd$\num_params$demo.v:405$169_DATA [9] $memrd$\num_params$demo.v:405$169_DATA [9] $memrd$\num_params$demo.v:405$169_DATA [3] $memrd$\num_params$demo.v:405$169_DATA [3] $memrd$\num_params$demo.v:405$169_DATA [3] $memrd$\num_params$demo.v:405$169_DATA [3] $memrd$\num_params$demo.v:405$169_DATA [3] $memrd$\num_params$demo.v:405$169_DATA [3] }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][2][2]$1372:
      Old ports: A=$memory\params$rdmux[0][2][2]$a$1373, B=$memory\params$rdmux[0][2][2]$b$1374, Y=$memory\params$rdmux[0][1][1]$a$1364
      New ports: A={ $memory\params$rdmux[0][2][2]$a$1373 [7:5] $memory\params$rdmux[0][2][2]$a$1373 [3:0] }, B={ $memory\params$rdmux[0][2][2]$b$1374 [2] $memory\params$rdmux[0][2][2]$b$1374 [0] $memory\params$rdmux[0][2][2]$b$1374 [0] $memory\params$rdmux[0][2][2]$b$1374 [3:0] }, Y={ $memory\params$rdmux[0][1][1]$a$1364 [7:5] $memory\params$rdmux[0][1][1]$a$1364 [3:0] }
      New connections: $memory\params$rdmux[0][1][1]$a$1364 [4] = $memory\params$rdmux[0][1][1]$a$1364 [1]
  Optimizing cells in module \demo.
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][1][1]$1363:
      Old ports: A=$memory\params$rdmux[0][1][1]$a$1364, B=8'xxxxxxxx, Y=$memory\params$rdmux[0][0][0]$b$1359
      New ports: A={ $memory\params$rdmux[0][1][1]$a$1364 [7:5] $memory\params$rdmux[0][1][1]$a$1364 [3:0] }, B=7'xxxxxxx, Y={ $memory\params$rdmux[0][0][0]$b$1359 [7:5] $memory\params$rdmux[0][0][0]$b$1359 [3:0] }
      New connections: $memory\params$rdmux[0][0][0]$b$1359 [4] = $memory\params$rdmux[0][0][0]$b$1359 [1]
  Optimizing cells in module \demo.
Performed a total of 127 changes.

2.29.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\demo'.
<suppressed ~159 debug messages>
Removed a total of 53 cells.

2.29.13. Executing OPT_RMDFF pass (remove dff with constant values).

2.29.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..
Removed 0 unused cells and 59 unused wires.
<suppressed ~1 debug messages>

2.29.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.
<suppressed ~1 debug messages>

2.29.16. Rerunning OPT passes. (Maybe there is more to do..)

2.29.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \demo..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~27 debug messages>

2.29.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \demo.
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][3][2]$980:
      Old ports: A={ 1'0 $memory\cmd$rdmux[0][3][1]$a$978 [6:5] $memory\cmd$rdmux[0][3][1]$a$978 [5] }, B={ $memory\cmd$rdmux[0][3][1]$a$978 [6:5] 1'0 $memory\cmd$rdmux[0][3][1]$a$978 [5] }, Y={ $memory\cmd$rdmux[0][2][1]$a$966 [5] $memory\cmd$rdmux[0][2][1]$a$966 [2:0] }
      New ports: A={ 1'0 $memory\cmd$rdmux[0][3][1]$a$978 [6:5] }, B={ $memory\cmd$rdmux[0][3][1]$a$978 [6:5] 1'0 }, Y={ $memory\cmd$rdmux[0][2][1]$a$966 [5] $memory\cmd$rdmux[0][2][1]$a$966 [2:1] }
      New connections: $memory\cmd$rdmux[0][2][1]$a$966 [0] = $memory\cmd$rdmux[0][3][1]$a$978 [5]
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][10]$1480:
      Old ports: A={ 1'1 $memory\params$rdmux[0][5][0]$b$1452 [5] $memory\params$rdmux[0][5][0]$b$1452 [0] }, B={ $memory\params$rdmux[0][5][0]$b$1452 [5] $memory\params$rdmux[0][5][0]$b$1452 [0] $memory\params$rdmux[0][5][0]$b$1452 [0] }, Y={ $memory\params$rdmux[0][4][5]$a$1418 [3] $memory\params$rdmux[0][4][5]$a$1418 [1] $memory\params$rdmux[0][4][5]$a$1418 [2] }
      New ports: A={ 1'1 $memory\params$rdmux[0][5][0]$b$1452 [5] }, B={ $memory\params$rdmux[0][5][0]$b$1452 [5] $memory\params$rdmux[0][5][0]$b$1452 [0] }, Y={ $memory\params$rdmux[0][4][5]$a$1418 [3] $memory\params$rdmux[0][4][5]$a$1418 [1] }
      New connections: $memory\params$rdmux[0][4][5]$a$1418 [2] = $memory\params$rdmux[0][5][0]$b$1452 [0]
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][15]$1495:
      Old ports: A={ $memory\params$rdmux[0][5][11]$a$1484 [3] $memory\params$rdmux[0][5][11]$a$1484 [3] 1'0 }, B={ $memory\params$rdmux[0][5][11]$a$1484 [3] 1'0 $memory\params$rdmux[0][5][11]$a$1484 [3] }, Y={ $memory\params$rdmux[0][4][7]$b$1425 [3] $memory\params$rdmux[0][4][7]$b$1425 [4] $memory\params$rdmux[0][4][7]$b$1425 [6] }
      New ports: A={ $memory\params$rdmux[0][5][11]$a$1484 [3] 1'0 }, B={ 1'0 $memory\params$rdmux[0][5][11]$a$1484 [3] }, Y={ $memory\params$rdmux[0][4][7]$b$1425 [4] $memory\params$rdmux[0][4][7]$b$1425 [6] }
      New connections: $memory\params$rdmux[0][4][7]$b$1425 [3] = $memory\params$rdmux[0][5][11]$a$1484 [3]
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][20]$1510:
      Old ports: A={ $memory\params$rdmux[0][5][11]$b$1485 [2] $memory\params$rdmux[0][5][11]$b$1485 [2] 1'0 }, B={ $memory\params$rdmux[0][5][11]$b$1485 [2] 1'0 $memory\params$rdmux[0][5][11]$b$1485 [2] }, Y={ $memory\params$rdmux[0][4][10]$a$1433 [3] $memory\params$rdmux[0][4][10]$a$1433 [4] $memory\params$rdmux[0][4][10]$a$1433 [6] }
      New ports: A={ $memory\params$rdmux[0][5][11]$b$1485 [2] 1'0 }, B={ 1'0 $memory\params$rdmux[0][5][11]$b$1485 [2] }, Y={ $memory\params$rdmux[0][4][10]$a$1433 [4] $memory\params$rdmux[0][4][10]$a$1433 [6] }
      New connections: $memory\params$rdmux[0][4][10]$a$1433 [3] = $memory\params$rdmux[0][5][11]$b$1485 [2]
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][5]$1465:
      Old ports: A={ $memory\params$rdmux[0][5][0]$b$1452 [0] $memory\params$rdmux[0][5][0]$b$1452 [5] $memory\params$rdmux[0][5][0]$b$1452 [0] $memory\params$rdmux[0][5][0]$b$1452 [5] $memory\params$rdmux[0][5][0]$b$1452 [0] }, B={ $memory\params$rdmux[0][5][0]$b$1452 [5] $memory\params$rdmux[0][5][0]$b$1452 [5] 2'11 $memory\params$rdmux[0][5][0]$b$1452 [0] }, Y={ $memory\params$rdmux[0][4][2]$b$1410 [7:6] $memory\params$rdmux[0][4][2]$b$1410 [2:0] }
      New ports: A={ $memory\params$rdmux[0][5][0]$b$1452 [0] $memory\params$rdmux[0][5][0]$b$1452 [0] $memory\params$rdmux[0][5][0]$b$1452 [5] }, B={ $memory\params$rdmux[0][5][0]$b$1452 [5] 2'11 }, Y={ $memory\params$rdmux[0][4][2]$b$1410 [7] $memory\params$rdmux[0][4][2]$b$1410 [2:1] }
      New connections: { $memory\params$rdmux[0][4][2]$b$1410 [6] $memory\params$rdmux[0][4][2]$b$1410 [0] } = { $memory\params$rdmux[0][5][0]$b$1452 [5] $memory\params$rdmux[0][5][0]$b$1452 [0] }
  Optimizing cells in module \demo.
Performed a total of 5 changes.

2.29.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\demo'.
Removed a total of 0 cells.

2.29.20. Executing OPT_RMDFF pass (remove dff with constant values).

2.29.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..
Removed 0 unused cells and 4 unused wires.
<suppressed ~1 debug messages>

2.29.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.

2.29.23. Rerunning OPT passes. (Maybe there is more to do..)

2.29.24. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \demo..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~27 debug messages>

2.29.25. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \demo.
Performed a total of 0 changes.

2.29.26. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\demo'.
Removed a total of 0 cells.

2.29.27. Executing OPT_RMDFF pass (remove dff with constant values).

2.29.28. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..

2.29.29. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.

2.29.30. Finished OPT passes. (There is nothing left to do.)

2.30. Executing TECHMAP pass (map to technology primitives).

2.30.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

2.30.2. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/arith_map.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/arith_map.v' to AST representation.
Generating RTLIL representation for module `\_80_ice40_alu'.
Successfully finished Verilog frontend.

2.30.3. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $reduce_and.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $logic_and.
Using template $paramod$constmap:446553370afc6c2aa6cc0b8f657b7f64b237ff7c$paramod$55f49a009a975a30a28fdd971adb6110903d4740\_90_shift_shiftx for cells of type $shiftx.
Using template $paramod$constmap:ee5af906ae0d3d414c6a0471604c553ef70c8e09$paramod$1297efc30c1e19551d1f4e269f2cbfa7dd15f801\_90_shift_shiftx for cells of type $shiftx.
Using extmapper simplemap for cells of type $reduce_or.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=5\Y_WIDTH=5 for cells of type $alu.
Using extmapper simplemap for cells of type $lut.
Using extmapper simplemap for cells of type $ne.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=14\B_WIDTH=1\Y_WIDTH=14 for cells of type $alu.
Using template $paramod\_90_pmux\WIDTH=14\S_WIDTH=2 for cells of type $pmux.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=3\B_WIDTH=1\Y_WIDTH=3 for cells of type $alu.
Using template $paramod\_90_pmux\WIDTH=8\S_WIDTH=2 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=16\S_WIDTH=4 for cells of type $pmux.
Using extmapper simplemap for cells of type $or.
Using template $paramod\_90_pmux\WIDTH=6\S_WIDTH=14 for cells of type $pmux.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=7\Y_WIDTH=7 for cells of type $alu.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=5\B_WIDTH=1\Y_WIDTH=5 for cells of type $alu.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=15\B_WIDTH=16\Y_WIDTH=16 for cells of type $alu.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=4\B_WIDTH=1\Y_WIDTH=4 for cells of type $alu.
Using template $paramod\_90_pmux\WIDTH=1\S_WIDTH=2 for cells of type $pmux.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=16\Y_WIDTH=16 for cells of type $alu.
Using template $paramod\_90_pmux\WIDTH=1\S_WIDTH=3 for cells of type $pmux.
Using extmapper simplemap for cells of type $dff.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $pos.
Using extmapper simplemap for cells of type $and.
No more expansions possible.
<suppressed ~731 debug messages>

2.31. Executing ICE40_OPT pass (performing simple optimizations).

2.31.1. Running ICE40 specific optimizations.

2.31.2. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.
<suppressed ~598 debug messages>

2.31.3. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\demo'.
<suppressed ~654 debug messages>
Removed a total of 218 cells.

2.31.4. Executing OPT_RMDFF pass (remove dff with constant values).

2.31.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..
Removed 137 unused cells and 502 unused wires.
<suppressed ~138 debug messages>

2.31.6. Rerunning OPT passes. (Removed registers in this run.)

2.31.7. Running ICE40 specific optimizations.
Optimized away SB_CARRY cell demo.$auto$alumacc.cc:474:replace_alu$835.slice[0].carry: CO=$auto$alumacc.cc:474:replace_alu$835.BB [0]
Optimized away SB_CARRY cell demo.$auto$alumacc.cc:474:replace_alu$846.slice[0].carry: CO=$auto$alumacc.cc:474:replace_alu$835.BB [0]
Optimized away SB_CARRY cell demo.$auto$alumacc.cc:474:replace_alu$859.slice[0].carry: CO=1'1
Optimized away SB_CARRY cell demo.$auto$alumacc.cc:474:replace_alu$872.slice[0].carry: CO=\delay [0]
Optimized away SB_CARRY cell demo.$auto$alumacc.cc:474:replace_alu$875.slice[0].carry: CO=\cmd_counter [0]
Optimized away SB_CARRY cell demo.$auto$alumacc.cc:474:replace_alu$878.slice[0].carry: CO=\param_counter [0]
Optimized away SB_CARRY cell demo.$auto$alumacc.cc:474:replace_alu$881.slice[0].carry: CO=\cmd_counter [0]
Optimized away SB_CARRY cell demo.$auto$alumacc.cc:474:replace_alu$884.slice[0].carry: CO=\pixel_bit_counter [0]
Optimized away SB_CARRY cell demo.$auto$alumacc.cc:474:replace_alu$887.slice[0].carry: CO=\bit_counter [0]
Optimized away SB_CARRY cell demo.$auto$alumacc.cc:474:replace_alu$890.slice[0].carry: CO=\params_left [0]
Mapping SB_LUT4 cell demo.$auto$alumacc.cc:474:replace_alu$872.slice[1].adder back to logic.
Mapping SB_LUT4 cell demo.$auto$alumacc.cc:474:replace_alu$875.slice[1].adder back to logic.
Mapping SB_LUT4 cell demo.$auto$alumacc.cc:474:replace_alu$878.slice[1].adder back to logic.
Mapping SB_LUT4 cell demo.$auto$alumacc.cc:474:replace_alu$881.slice[1].adder back to logic.
Mapping SB_LUT4 cell demo.$auto$alumacc.cc:474:replace_alu$884.slice[1].adder back to logic.
Mapping SB_LUT4 cell demo.$auto$alumacc.cc:474:replace_alu$887.slice[1].adder back to logic.
Mapping SB_LUT4 cell demo.$auto$alumacc.cc:474:replace_alu$890.slice[1].adder back to logic.

2.31.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.
<suppressed ~89 debug messages>

2.31.9. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\demo'.
<suppressed ~21 debug messages>
Removed a total of 7 cells.

2.31.10. Executing OPT_RMDFF pass (remove dff with constant values).

2.31.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..
Removed 0 unused cells and 21 unused wires.
<suppressed ~1 debug messages>

2.31.12. Rerunning OPT passes. (Removed registers in this run.)

2.31.13. Running ICE40 specific optimizations.
Optimized away SB_CARRY cell demo.$auto$alumacc.cc:474:replace_alu$859.slice[1].carry: CO=$auto$alumacc.cc:474:replace_alu$835.BB [1]

2.31.14. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.

2.31.15. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\demo'.
Removed a total of 0 cells.

2.31.16. Executing OPT_RMDFF pass (remove dff with constant values).

2.31.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..

2.31.18. Rerunning OPT passes. (Removed registers in this run.)

2.31.19. Running ICE40 specific optimizations.

2.31.20. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.

2.31.21. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\demo'.
Removed a total of 0 cells.

2.31.22. Executing OPT_RMDFF pass (remove dff with constant values).

2.31.23. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..

2.31.24. Finished OPT passes. (There is nothing left to do.)

2.32. Executing DFFSR2DFF pass (mapping DFFSR cells to simpler FFs).

2.33. Executing DFF2DFFE pass (transform $dff to $dffe where applicable).
Selected cell types for direct conversion:
  $_DFF_PP1_ -> $__DFFE_PP1
  $_DFF_PP0_ -> $__DFFE_PP0
  $_DFF_PN1_ -> $__DFFE_PN1
  $_DFF_PN0_ -> $__DFFE_PN0
  $_DFF_NP1_ -> $__DFFE_NP1
  $_DFF_NP0_ -> $__DFFE_NP0
  $_DFF_NN1_ -> $__DFFE_NN1
  $_DFF_NN0_ -> $__DFFE_NN0
  $_DFF_N_ -> $_DFFE_NP_
  $_DFF_P_ -> $_DFFE_PP_
Transforming FF to FF+Enable cells in module demo:
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2970 to $_DFFE_PP_ for $0\rst[0:0] -> \rst.
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2971 to $_DFFE_PP_ for $0\dc[0:0] -> \dc.
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2972 to $_DFFE_PP_ for $0\mosi[0:0] -> \mosi.
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2973 to $_DFFE_PP_ for $0\cs[0:0] -> \cs.
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2974 to $_DFFE_PP_ for $0\state[5:0] [0] -> \state [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2975 to $_DFFE_PP_ for $0\state[5:0] [1] -> \state [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2976 to $_DFFE_PP_ for $0\state[5:0] [2] -> \state [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2977 to $_DFFE_PP_ for $0\state[5:0] [3] -> \state [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2978 to $_DFFE_PP_ for $0\state[5:0] [4] -> \state [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2979 to $_DFFE_PP_ for $0\state[5:0] [5] -> \state [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2980 to $_DFFE_PP_ for $0\delay[15:0] [0] -> \delay [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2981 to $_DFFE_PP_ for $0\delay[15:0] [1] -> \delay [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2982 to $_DFFE_PP_ for $0\delay[15:0] [2] -> \delay [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2983 to $_DFFE_PP_ for $0\delay[15:0] [3] -> \delay [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2984 to $_DFFE_PP_ for $0\delay[15:0] [4] -> \delay [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2985 to $_DFFE_PP_ for $0\delay[15:0] [5] -> \delay [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2986 to $_DFFE_PP_ for $0\delay[15:0] [6] -> \delay [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2987 to $_DFFE_PP_ for $0\delay[15:0] [7] -> \delay [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2988 to $_DFFE_PP_ for $0\delay[15:0] [8] -> \delay [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2989 to $_DFFE_PP_ for $0\delay[15:0] [9] -> \delay [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2990 to $_DFFE_PP_ for $0\delay[15:0] [10] -> \delay [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2991 to $_DFFE_PP_ for $0\delay[15:0] [11] -> \delay [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2992 to $_DFFE_PP_ for $0\delay[15:0] [12] -> \delay [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2993 to $_DFFE_PP_ for $0\delay[15:0] [13] -> \delay [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2994 to $_DFFE_PP_ for $0\delay[15:0] [14] -> \delay [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2995 to $_DFFE_PP_ for $0\delay[15:0] [15] -> \delay [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2996 to $_DFFE_PP_ for $0\data[7:0] [0] -> \data [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2997 to $_DFFE_PP_ for $0\data[7:0] [1] -> \data [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2998 to $_DFFE_PP_ for $0\data[7:0] [2] -> \data [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2999 to $_DFFE_PP_ for $0\data[7:0] [3] -> \data [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3000 to $_DFFE_PP_ for $0\data[7:0] [4] -> \data [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3001 to $_DFFE_PP_ for $0\data[7:0] [5] -> \data [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3002 to $_DFFE_PP_ for $0\data[7:0] [6] -> \data [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3003 to $_DFFE_PP_ for $0\data[7:0] [7] -> \data [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3004 to $_DFFE_PP_ for $0\bit_counter[2:0] [0] -> \bit_counter [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3005 to $_DFFE_PP_ for $0\bit_counter[2:0] [1] -> \bit_counter [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3006 to $_DFFE_PP_ for $0\bit_counter[2:0] [2] -> \bit_counter [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3007 to $_DFFE_PP_ for $0\pixel_data[15:0] [0] -> \pixel_data [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3008 to $_DFFE_PP_ for $0\pixel_data[15:0] [1] -> \pixel_data [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3009 to $_DFFE_PP_ for $0\pixel_data[15:0] [2] -> \pixel_data [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3010 to $_DFFE_PP_ for $0\pixel_data[15:0] [3] -> \pixel_data [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3011 to $_DFFE_PP_ for $0\pixel_data[15:0] [4] -> \pixel_data [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3012 to $_DFFE_PP_ for $0\pixel_data[15:0] [5] -> \pixel_data [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3013 to $_DFFE_PP_ for $0\pixel_data[15:0] [6] -> \pixel_data [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3014 to $_DFFE_PP_ for $0\pixel_data[15:0] [7] -> \pixel_data [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3015 to $_DFFE_PP_ for $0\pixel_data[15:0] [8] -> \pixel_data [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3016 to $_DFFE_PP_ for $0\pixel_data[15:0] [9] -> \pixel_data [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3017 to $_DFFE_PP_ for $0\pixel_data[15:0] [10] -> \pixel_data [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3018 to $_DFFE_PP_ for $0\pixel_data[15:0] [11] -> \pixel_data [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3019 to $_DFFE_PP_ for $0\pixel_data[15:0] [12] -> \pixel_data [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3020 to $_DFFE_PP_ for $0\pixel_data[15:0] [13] -> \pixel_data [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3021 to $_DFFE_PP_ for $0\pixel_data[15:0] [14] -> \pixel_data [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3022 to $_DFFE_PP_ for $0\pixel_data[15:0] [15] -> \pixel_data [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3023 to $_DFFE_PP_ for $0\pixel_bit_counter[3:0] [0] -> \pixel_bit_counter [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3024 to $_DFFE_PP_ for $0\pixel_bit_counter[3:0] [1] -> \pixel_bit_counter [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3025 to $_DFFE_PP_ for $0\pixel_bit_counter[3:0] [2] -> \pixel_bit_counter [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3026 to $_DFFE_PP_ for $0\pixel_bit_counter[3:0] [3] -> \pixel_bit_counter [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3027 to $_DFFE_PP_ for $0\cmd_counter[4:0] [0] -> \cmd_counter [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3028 to $_DFFE_PP_ for $0\cmd_counter[4:0] [1] -> \cmd_counter [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3029 to $_DFFE_PP_ for $0\cmd_counter[4:0] [2] -> \cmd_counter [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3030 to $_DFFE_PP_ for $0\cmd_counter[4:0] [3] -> \cmd_counter [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3031 to $_DFFE_PP_ for $0\cmd_counter[4:0] [4] -> \cmd_counter [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3032 to $_DFFE_PP_ for $0\param_counter[6:0] [0] -> \param_counter [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3033 to $_DFFE_PP_ for $0\param_counter[6:0] [1] -> \param_counter [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3034 to $_DFFE_PP_ for $0\param_counter[6:0] [2] -> \param_counter [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3035 to $_DFFE_PP_ for $0\param_counter[6:0] [3] -> \param_counter [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3036 to $_DFFE_PP_ for $0\param_counter[6:0] [4] -> \param_counter [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3037 to $_DFFE_PP_ for $0\param_counter[6:0] [5] -> \param_counter [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3038 to $_DFFE_PP_ for $0\param_counter[6:0] [6] -> \param_counter [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3039 to $_DFFE_PP_ for $0\params_left[13:0] [0] -> \params_left [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3040 to $_DFFE_PP_ for $0\params_left[13:0] [1] -> \params_left [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3041 to $_DFFE_PP_ for $0\params_left[13:0] [2] -> \params_left [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3042 to $_DFFE_PP_ for $0\params_left[13:0] [3] -> \params_left [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3043 to $_DFFE_PP_ for $0\params_left[13:0] [4] -> \params_left [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3044 to $_DFFE_PP_ for $0\params_left[13:0] [5] -> \params_left [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3045 to $_DFFE_PP_ for $0\params_left[13:0] [6] -> \params_left [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3046 to $_DFFE_PP_ for $0\params_left[13:0] [7] -> \params_left [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3047 to $_DFFE_PP_ for $0\params_left[13:0] [8] -> \params_left [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3048 to $_DFFE_PP_ for $0\params_left[13:0] [9] -> \params_left [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3049 to $_DFFE_PP_ for $0\params_left[13:0] [10] -> \params_left [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3050 to $_DFFE_PP_ for $0\params_left[13:0] [11] -> \params_left [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3051 to $_DFFE_PP_ for $0\params_left[13:0] [12] -> \params_left [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3052 to $_DFFE_PP_ for $0\params_left[13:0] [13] -> \params_left [13].

2.34. Executing TECHMAP pass (map to technology primitives).

2.34.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/cells_map.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$__DFFE_NN0'.
Generating RTLIL representation for module `\$__DFFE_NN1'.
Generating RTLIL representation for module `\$__DFFE_PN0'.
Generating RTLIL representation for module `\$__DFFE_PN1'.
Generating RTLIL representation for module `\$__DFFE_NP0'.
Generating RTLIL representation for module `\$__DFFE_NP1'.
Generating RTLIL representation for module `\$__DFFE_PP0'.
Generating RTLIL representation for module `\$__DFFE_PP1'.
Successfully finished Verilog frontend.

2.34.2. Continuing TECHMAP pass.
Using template \$_DFFE_PP_ for cells of type $_DFFE_PP_.
Using template \$_DFF_P_ for cells of type $_DFF_P_.
No more expansions possible.
<suppressed ~84 debug messages>

2.35. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.
<suppressed ~249 debug messages>

2.36. Executing SIMPLEMAP pass (map simple cells to gate primitives).

2.37. Executing ICE40_FFINIT pass (implement FF init values).
Handling FF init values in demo.
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3053 (SB_DFF): \scl = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2976 (SB_DFFE): \state [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3039 (SB_DFFE): \params_left [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2975 (SB_DFFE): \state [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2977 (SB_DFFE): \state [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2978 (SB_DFFE): \state [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2979 (SB_DFFE): \state [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2974 (SB_DFFE): \state [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2996 (SB_DFFE): \data [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2997 (SB_DFFE): \data [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2998 (SB_DFFE): \data [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2999 (SB_DFFE): \data [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3000 (SB_DFFE): \data [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3001 (SB_DFFE): \data [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3002 (SB_DFFE): \data [6] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3003 (SB_DFFE): \data [7] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3005 (SB_DFFE): \bit_counter [1] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3012 (SB_DFFE): \pixel_data [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3006 (SB_DFFE): \bit_counter [2] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3008 (SB_DFFE): \pixel_data [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3009 (SB_DFFE): \pixel_data [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3010 (SB_DFFE): \pixel_data [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3004 (SB_DFFE): \bit_counter [0] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3011 (SB_DFFE): \pixel_data [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3013 (SB_DFFE): \pixel_data [6] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3014 (SB_DFFE): \pixel_data [7] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3015 (SB_DFFE): \pixel_data [8] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3016 (SB_DFFE): \pixel_data [9] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3017 (SB_DFFE): \pixel_data [10] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3018 (SB_DFFE): \pixel_data [11] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3019 (SB_DFFE): \pixel_data [12] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3020 (SB_DFFE): \pixel_data [13] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3021 (SB_DFFE): \pixel_data [14] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3022 (SB_DFFE): \pixel_data [15] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3023 (SB_DFFE): \pixel_bit_counter [0] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3024 (SB_DFFE): \pixel_bit_counter [1] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3025 (SB_DFFE): \pixel_bit_counter [2] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3031 (SB_DFFE): \cmd_counter [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3026 (SB_DFFE): \pixel_bit_counter [3] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3028 (SB_DFFE): \cmd_counter [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3029 (SB_DFFE): \cmd_counter [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3007 (SB_DFFE): \pixel_data [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3030 (SB_DFFE): \cmd_counter [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3032 (SB_DFFE): \param_counter [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3033 (SB_DFFE): \param_counter [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3034 (SB_DFFE): \param_counter [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3035 (SB_DFFE): \param_counter [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3036 (SB_DFFE): \param_counter [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3037 (SB_DFFE): \param_counter [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3040 (SB_DFFE): \params_left [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3027 (SB_DFFE): \cmd_counter [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3038 (SB_DFFE): \param_counter [6] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3041 (SB_DFFE): \params_left [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3042 (SB_DFFE): \params_left [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3043 (SB_DFFE): \params_left [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3044 (SB_DFFE): \params_left [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3045 (SB_DFFE): \params_left [6] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3046 (SB_DFFE): \params_left [7] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3047 (SB_DFFE): \params_left [8] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3048 (SB_DFFE): \params_left [9] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3049 (SB_DFFE): \params_left [10] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3050 (SB_DFFE): \params_left [11] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3051 (SB_DFFE): \params_left [12] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3052 (SB_DFFE): \params_left [13] = 0

2.38. Executing ICE40_FFSSR pass (merge synchronous set/reset into FF cells).
Merging set/reset $_MUX_ cells into SB_FFs in demo.

2.39. Executing ICE40_OPT pass (performing simple optimizations).

2.39.1. Running ICE40 specific optimizations.

2.39.2. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.
<suppressed ~119 debug messages>

2.39.3. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\demo'.
<suppressed ~399 debug messages>
Removed a total of 133 cells.

2.39.4. Executing OPT_RMDFF pass (remove dff with constant values).

2.39.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..
Removed 0 unused cells and 727 unused wires.
<suppressed ~1 debug messages>

2.39.6. Rerunning OPT passes. (Removed registers in this run.)

2.39.7. Running ICE40 specific optimizations.

2.39.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.

2.39.9. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\demo'.
Removed a total of 0 cells.

2.39.10. Executing OPT_RMDFF pass (remove dff with constant values).

2.39.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..

2.39.12. Finished OPT passes. (There is nothing left to do.)

2.40. Executing TECHMAP pass (map to technology primitives).

2.40.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/latches_map.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/latches_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Successfully finished Verilog frontend.

2.40.2. Continuing TECHMAP pass.
No more expansions possible.

2.41. Executing ABC pass (technology mapping using ABC).

2.41.1. Extracting gate netlist of module `\demo' to `<abc-temp-dir>/input.blif'..
Extracted 799 gates and 924 wires to a netlist network with 123 inputs and 104 outputs.

2.41.1.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + lutpack -S 1 
ABC: + dress 
ABC: Total number of equiv classes                =     209.
ABC: Participating nodes from both networks       =     484.
ABC: Participating nodes from the first network   =     210. (  69.08 % of nodes)
ABC: Participating nodes from the second network  =     274. (  90.13 % of nodes)
ABC: Node pairs (any polarity)                    =     210. (  69.08 % of names can be moved)
ABC: Node pairs (same polarity)                   =     176. (  57.89 % of names can be moved)
ABC: Total runtime =     0.09 sec
ABC: + write_blif <abc-temp-dir>/output.blif 

2.41.1.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:      602
ABC RESULTS:        internal signals:      697
ABC RESULTS:           input signals:      123
ABC RESULTS:          output signals:      104
Removing temp directory.
Removed 0 unused cells and 426 unused wires.

2.42. Executing TECHMAP pass (map to technology primitives).

2.42.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/cells_map.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$__DFFE_NN0'.
Generating RTLIL representation for module `\$__DFFE_NN1'.
Generating RTLIL representation for module `\$__DFFE_PN0'.
Generating RTLIL representation for module `\$__DFFE_PN1'.
Generating RTLIL representation for module `\$__DFFE_NP0'.
Generating RTLIL representation for module `\$__DFFE_NP1'.
Generating RTLIL representation for module `\$__DFFE_PP0'.
Generating RTLIL representation for module `\$__DFFE_PP1'.
Generating RTLIL representation for module `\$lut'.
Successfully finished Verilog frontend.

2.42.2. Continuing TECHMAP pass.
Using template $paramod\$lut\WIDTH=2\LUT=4'0100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111010000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1110101011001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000010111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111000100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000011110100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0110100100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11110100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000011101111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000010001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01100001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1110000011111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1010011111111100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011101011111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001100000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000111111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100000011111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0101001100110011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000011111111000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00000111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01100000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11110001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100111100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100101011111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11111110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1110111100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100111110100000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000001111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111111100000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000001100000101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000010100000011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00001011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011010100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111100000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01010011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000110100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111001011111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000001011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000011100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1010110011001100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000011101110111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111110000001010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1110111111111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0010111111111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001000001111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0010110000000111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01001011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0101001111111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0010010000001011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011000011111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111111111000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1010110000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100101000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0101110011111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000111100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100001110101000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000111111111000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001010000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100000100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000011111111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00010100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000111101000100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000101111111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000001110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1110101110101010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0101001111000100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111010001000100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0010001100110101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1010001100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000000111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111001111111010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0111000011111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111000001000100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00011111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0111000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000001001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01101111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=1\LUT=2'01 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111110110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11111000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000011100001000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000111000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0101110000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111100010001000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011111100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001000111110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11001010 for cells of type $lut.
No more expansions possible.
<suppressed ~1489 debug messages>
Removed 0 unused cells and 602 unused wires.

2.43. Executing HIERARCHY pass (managing design hierarchy).

2.43.1. Analyzing design hierarchy..
Top module:  \demo

2.43.2. Analyzing design hierarchy..
Top module:  \demo
Removed 0 unused modules.

2.44. Printing statistics.

=== demo ===

   Number of wires:                457
   Number of wire bits:           1791
   Number of public wires:         156
   Number of public wire bits:    1328
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                516
     SB_CARRY                       84
     SB_DFF                          1
     SB_DFFE                        83
     SB_LUT4                       348

2.45. Executing CHECK pass (checking for obvious problems).
checking module demo..
found and reported 0 problems.

2.46. Executing BLIF backend.

2.47. Executing JSON backend.

Warnings: 1 unique messages, 1 total
End of script. Logfile hash: d0e7ef40f9
CPU: user 3.29s system 0.06s, MEM: 51.80 MB total, 46.16 MB resident
Yosys 0.9 (git sha1 1979e0b)
Time spent: 16% 23x opt_clean (0 sec), 15% 24x opt_expr (0 sec), ...
