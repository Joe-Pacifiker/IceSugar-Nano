
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2019  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9 (git sha1 1979e0b)


-- Parsing `lcd_rst.v' using frontend `verilog' --

1. Executing Verilog-2005 frontend: lcd_rst.v
Parsing Verilog input from `lcd_rst.v' to AST representation.
Generating RTLIL representation for module `\lcd_rst'.
Successfully finished Verilog frontend.

-- Running command `synth_ice40 -json lcd_rst.json -blif lcd_rst.blif' --

2. Executing SYNTH_ICE40 pass.

2.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/cells_sim.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\SB_IO'.
Generating RTLIL representation for module `\SB_GB_IO'.
Generating RTLIL representation for module `\SB_GB'.
Generating RTLIL representation for module `\SB_LUT4'.
Generating RTLIL representation for module `\SB_CARRY'.
Generating RTLIL representation for module `\SB_DFF'.
Generating RTLIL representation for module `\SB_DFFE'.
Generating RTLIL representation for module `\SB_DFFSR'.
Generating RTLIL representation for module `\SB_DFFR'.
Generating RTLIL representation for module `\SB_DFFSS'.
Generating RTLIL representation for module `\SB_DFFS'.
Generating RTLIL representation for module `\SB_DFFESR'.
Generating RTLIL representation for module `\SB_DFFER'.
Generating RTLIL representation for module `\SB_DFFESS'.
Generating RTLIL representation for module `\SB_DFFES'.
Generating RTLIL representation for module `\SB_DFFN'.
Generating RTLIL representation for module `\SB_DFFNE'.
Generating RTLIL representation for module `\SB_DFFNSR'.
Generating RTLIL representation for module `\SB_DFFNR'.
Generating RTLIL representation for module `\SB_DFFNSS'.
Generating RTLIL representation for module `\SB_DFFNS'.
Generating RTLIL representation for module `\SB_DFFNESR'.
Generating RTLIL representation for module `\SB_DFFNER'.
Generating RTLIL representation for module `\SB_DFFNESS'.
Generating RTLIL representation for module `\SB_DFFNES'.
Generating RTLIL representation for module `\SB_RAM40_4K'.
Generating RTLIL representation for module `\SB_RAM40_4KNR'.
Generating RTLIL representation for module `\SB_RAM40_4KNW'.
Generating RTLIL representation for module `\SB_RAM40_4KNRNW'.
Generating RTLIL representation for module `\ICESTORM_LC'.
Generating RTLIL representation for module `\SB_PLL40_CORE'.
Generating RTLIL representation for module `\SB_PLL40_PAD'.
Generating RTLIL representation for module `\SB_PLL40_2_PAD'.
Generating RTLIL representation for module `\SB_PLL40_2F_CORE'.
Generating RTLIL representation for module `\SB_PLL40_2F_PAD'.
Generating RTLIL representation for module `\SB_WARMBOOT'.
Generating RTLIL representation for module `\SB_SPRAM256KA'.
Generating RTLIL representation for module `\SB_HFOSC'.
Generating RTLIL representation for module `\SB_LFOSC'.
Generating RTLIL representation for module `\SB_RGBA_DRV'.
Generating RTLIL representation for module `\SB_LED_DRV_CUR'.
Generating RTLIL representation for module `\SB_RGB_DRV'.
Generating RTLIL representation for module `\SB_I2C'.
Generating RTLIL representation for module `\SB_SPI'.
Generating RTLIL representation for module `\SB_LEDDA_IP'.
Generating RTLIL representation for module `\SB_FILTER_50NS'.
Generating RTLIL representation for module `\SB_IO_I3C'.
Generating RTLIL representation for module `\SB_IO_OD'.
Generating RTLIL representation for module `\SB_MAC16'.
Successfully finished Verilog frontend.

2.2. Executing HIERARCHY pass (managing design hierarchy).

2.2.1. Finding top of design hierarchy..
root of   0 design levels: lcd_rst             
Automatically selected lcd_rst as design top module.

2.2.2. Analyzing design hierarchy..
Top module:  \lcd_rst

2.2.3. Analyzing design hierarchy..
Top module:  \lcd_rst
Removed 0 unused modules.

2.3. Executing PROC pass (convert processes to netlists).

2.3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

2.3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 2 switch rules as full_case in process $proc$lcd_rst.v:29$1 in module lcd_rst.
Removed a total of 0 dead cases.

2.3.3. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\lcd_rst.$proc$lcd_rst.v:24$5'.
  Set init value: \state = 2'00
  Set init value: \counter = 26'00000000000000000000000000

2.3.4. Executing PROC_ARST pass (detect async resets in processes).

2.3.5. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\lcd_rst.$proc$lcd_rst.v:24$5'.
     1/2: $1\state[1:0]
     2/2: $1\counter[25:0]
Creating decoders for process `\lcd_rst.$proc$lcd_rst.v:29$1'.
     1/8: $0\DC[0:0]
     2/8: $0\RST[0:0]
     3/8: $0\SCK[0:0]
     4/8: $0\CS[0:0]
     5/8: $0\SDA[0:0]
     6/8: $0\LED[0:0]
     7/8: $0\counter[25:0]
     8/8: $0\state[1:0]

2.3.6. Executing PROC_DLATCH pass (convert process syncs to latches).

2.3.7. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\lcd_rst.\state' using process `\lcd_rst.$proc$lcd_rst.v:29$1'.
  created $dff cell `$procdff$55' with positive edge clock.
Creating register for signal `\lcd_rst.\counter' using process `\lcd_rst.$proc$lcd_rst.v:29$1'.
  created $dff cell `$procdff$56' with positive edge clock.
Creating register for signal `\lcd_rst.\LED' using process `\lcd_rst.$proc$lcd_rst.v:29$1'.
  created $dff cell `$procdff$57' with positive edge clock.
Creating register for signal `\lcd_rst.\SDA' using process `\lcd_rst.$proc$lcd_rst.v:29$1'.
  created $dff cell `$procdff$58' with positive edge clock.
Creating register for signal `\lcd_rst.\CS' using process `\lcd_rst.$proc$lcd_rst.v:29$1'.
  created $dff cell `$procdff$59' with positive edge clock.
Creating register for signal `\lcd_rst.\SCK' using process `\lcd_rst.$proc$lcd_rst.v:29$1'.
  created $dff cell `$procdff$60' with positive edge clock.
Creating register for signal `\lcd_rst.\RST' using process `\lcd_rst.$proc$lcd_rst.v:29$1'.
  created $dff cell `$procdff$61' with positive edge clock.
Creating register for signal `\lcd_rst.\DC' using process `\lcd_rst.$proc$lcd_rst.v:29$1'.
  created $dff cell `$procdff$62' with positive edge clock.

2.3.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `lcd_rst.$proc$lcd_rst.v:24$5'.
Found and cleaned up 3 empty switches in `\lcd_rst.$proc$lcd_rst.v:29$1'.
Removing empty process `lcd_rst.$proc$lcd_rst.v:29$1'.
Cleaned up 3 empty switches.

2.4. Executing FLATTEN pass (flatten design).
No more expansions possible.

2.5. Executing TRIBUF pass.

2.6. Executing DEMINOUT pass (demote inout ports to input or output).

2.7. Executing OPT_EXPR pass (perform const folding).
Optimizing module lcd_rst.
<suppressed ~12 debug messages>

2.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \lcd_rst..
Removed 1 unused cells and 16 unused wires.
<suppressed ~2 debug messages>

2.9. Executing CHECK pass (checking for obvious problems).
checking module lcd_rst..
found and reported 0 problems.

2.10. Executing OPT pass (performing simple optimizations).

2.10.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module lcd_rst.

2.10.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\lcd_rst'.
<suppressed ~36 debug messages>
Removed a total of 12 cells.

2.10.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \lcd_rst..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~8 debug messages>

2.10.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \lcd_rst.
    New ctrl vector for $pmux cell $procmux$41: { $procmux$38_CMP $auto$opt_reduce.cc:132:opt_mux$64 }
    New ctrl vector for $pmux cell $procmux$46: { $procmux$38_CMP $auto$opt_reduce.cc:132:opt_mux$66 }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$63: { $procmux$13_CMP $procmux$10_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$65: { $procmux$13_CMP $procmux$10_CMP }
  Optimizing cells in module \lcd_rst.
Performed a total of 4 changes.

2.10.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\lcd_rst'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

2.10.6. Executing OPT_RMDFF pass (remove dff with constant values).
Removing $procdff$58 ($dff) from module lcd_rst.
Removing $procdff$59 ($dff) from module lcd_rst.
Removing $procdff$60 ($dff) from module lcd_rst.
Removing $procdff$62 ($dff) from module lcd_rst.
Replaced 4 DFF cells.

2.10.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \lcd_rst..
Removed 4 unused cells and 17 unused wires.
<suppressed ~5 debug messages>

2.10.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module lcd_rst.

2.10.9. Rerunning OPT passes. (Maybe there is more to do..)

2.10.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \lcd_rst..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~4 debug messages>

2.10.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \lcd_rst.
Performed a total of 0 changes.

2.10.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\lcd_rst'.
Removed a total of 0 cells.

2.10.13. Executing OPT_RMDFF pass (remove dff with constant values).

2.10.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \lcd_rst..

2.10.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module lcd_rst.

2.10.16. Finished OPT passes. (There is nothing left to do.)

2.11. Executing WREDUCE pass (reducing word size of cells).
Removed top 1 bits (of 2) from port B of cell lcd_rst.$procmux$38_CMP0 ($eq).

2.12. Executing PEEPOPT pass (run peephole optimizers).

2.13. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \lcd_rst..

2.14. Executing SHARE pass (SAT-based resource sharing).

2.15. Executing TECHMAP pass (map to technology primitives).

2.15.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/cmp2lut.v
Parsing Verilog input from `/usr/bin/../share/yosys/cmp2lut.v' to AST representation.
Generating RTLIL representation for module `\_90_lut_cmp_'.
Successfully finished Verilog frontend.

2.15.2. Continuing TECHMAP pass.
Using template $paramod$99e5b0ecd4c7f9fb6cd3a733593eba894c42613f\_90_lut_cmp_ for cells of type $eq.
Using template $paramod$6816abac91a51b405c3de5bceb2855c03dd44485\_90_lut_cmp_ for cells of type $eq.
No more expansions possible.
<suppressed ~40 debug messages>

2.16. Executing OPT_EXPR pass (perform const folding).
Optimizing module lcd_rst.

2.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \lcd_rst..
Removed 0 unused cells and 6 unused wires.
<suppressed ~1 debug messages>

2.18. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module lcd_rst:
  creating $macc model for $add$lcd_rst.v:57$4 ($add).
  creating $alu model for $macc $add$lcd_rst.v:57$4.
  creating $alu cell for $add$lcd_rst.v:57$4: $auto$alumacc.cc:474:replace_alu$71
  created 1 $alu and 0 $macc cells.

2.19. Executing OPT pass (performing simple optimizations).

2.19.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module lcd_rst.

2.19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\lcd_rst'.
Removed a total of 0 cells.

2.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \lcd_rst..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~4 debug messages>

2.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \lcd_rst.
Performed a total of 0 changes.

2.19.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\lcd_rst'.
Removed a total of 0 cells.

2.19.6. Executing OPT_RMDFF pass (remove dff with constant values).

2.19.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \lcd_rst..

2.19.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module lcd_rst.

2.19.9. Finished OPT passes. (There is nothing left to do.)

2.20. Executing FSM pass (extract and optimize FSM).

2.20.1. Executing FSM_DETECT pass (finding FSMs in design).
Not marking lcd_rst.state as FSM state register:
    Users of register don't seem to benefit from recoding.
    Register has an initialization value.

2.20.2. Executing FSM_EXTRACT pass (extracting FSM from design).

2.20.3. Executing FSM_OPT pass (simple optimizations of FSMs).

2.20.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \lcd_rst..

2.20.5. Executing FSM_OPT pass (simple optimizations of FSMs).

2.20.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

2.20.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

2.20.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

2.21. Executing OPT pass (performing simple optimizations).

2.21.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module lcd_rst.

2.21.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\lcd_rst'.
Removed a total of 0 cells.

2.21.3. Executing OPT_RMDFF pass (remove dff with constant values).

2.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \lcd_rst..

2.21.5. Finished fast OPT passes.

2.22. Executing MEMORY pass.

2.22.1. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

2.22.2. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \lcd_rst..

2.22.3. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

2.22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \lcd_rst..

2.22.5. Executing MEMORY_COLLECT pass (generating $mem cells).

2.23. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \lcd_rst..

2.24. Executing MEMORY_BRAM pass (mapping $mem cells to block memories).

2.25. Executing TECHMAP pass (map to technology primitives).

2.25.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/brams_map.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/brams_map.v' to AST representation.
Generating RTLIL representation for module `\$__ICE40_RAM4K'.
Generating RTLIL representation for module `\$__ICE40_RAM4K_M0'.
Generating RTLIL representation for module `\$__ICE40_RAM4K_M123'.
Successfully finished Verilog frontend.

2.25.2. Continuing TECHMAP pass.
No more expansions possible.

2.26. Executing ICE40_BRAMINIT pass.

2.27. Executing OPT pass (performing simple optimizations).

2.27.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module lcd_rst.

2.27.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\lcd_rst'.
Removed a total of 0 cells.

2.27.3. Executing OPT_RMDFF pass (remove dff with constant values).

2.27.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \lcd_rst..

2.27.5. Finished fast OPT passes.

2.28. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).

2.29. Executing OPT pass (performing simple optimizations).

2.29.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module lcd_rst.

2.29.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\lcd_rst'.
Removed a total of 0 cells.

2.29.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \lcd_rst..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~4 debug messages>

2.29.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \lcd_rst.
    Consolidated identical input bits for $mux cell $procmux$49:
      Old ports: A=2'10, B=2'00, Y=$procmux$49_Y
      New ports: A=1'1, B=1'0, Y=$procmux$49_Y [1]
      New connections: $procmux$49_Y [0] = 1'0
  Optimizing cells in module \lcd_rst.
Performed a total of 1 changes.

2.29.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\lcd_rst'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

2.29.6. Executing OPT_RMDFF pass (remove dff with constant values).

2.29.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \lcd_rst..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

2.29.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module lcd_rst.

2.29.9. Rerunning OPT passes. (Maybe there is more to do..)

2.29.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \lcd_rst..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~5 debug messages>

2.29.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \lcd_rst.
Performed a total of 0 changes.

2.29.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\lcd_rst'.
Removed a total of 0 cells.

2.29.13. Executing OPT_RMDFF pass (remove dff with constant values).

2.29.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \lcd_rst..

2.29.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module lcd_rst.

2.29.16. Finished OPT passes. (There is nothing left to do.)

2.30. Executing TECHMAP pass (map to technology primitives).

2.30.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

2.30.2. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/arith_map.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/arith_map.v' to AST representation.
Generating RTLIL representation for module `\_80_ice40_alu'.
Successfully finished Verilog frontend.

2.30.3. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $logic_not.
Using template $paramod\_90_pmux\WIDTH=1\S_WIDTH=2 for cells of type $pmux.
Using extmapper simplemap for cells of type $lut.
Using template $paramod\_90_pmux\WIDTH=1\S_WIDTH=3 for cells of type $pmux.
Using extmapper simplemap for cells of type $mux.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=26\Y_WIDTH=26 for cells of type $alu.
Using template $paramod\_90_pmux\WIDTH=26\S_WIDTH=2 for cells of type $pmux.
Using extmapper simplemap for cells of type $reduce_or.
Using template $paramod\_90_pmux\WIDTH=2\S_WIDTH=2 for cells of type $pmux.
Using extmapper simplemap for cells of type $dff.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $pos.
No more expansions possible.
<suppressed ~126 debug messages>

2.31. Executing ICE40_OPT pass (performing simple optimizations).

2.31.1. Running ICE40 specific optimizations.

2.31.2. Executing OPT_EXPR pass (perform const folding).
Optimizing module lcd_rst.
<suppressed ~115 debug messages>

2.31.3. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\lcd_rst'.
<suppressed ~6 debug messages>
Removed a total of 2 cells.

2.31.4. Executing OPT_RMDFF pass (remove dff with constant values).

2.31.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \lcd_rst..
Removed 53 unused cells and 150 unused wires.
<suppressed ~54 debug messages>

2.31.6. Rerunning OPT passes. (Removed registers in this run.)

2.31.7. Running ICE40 specific optimizations.
Optimized away SB_CARRY cell lcd_rst.$auto$alumacc.cc:474:replace_alu$71.slice[0].carry: CO=\counter [0]
Mapping SB_LUT4 cell lcd_rst.$auto$alumacc.cc:474:replace_alu$71.slice[1].adder back to logic.

2.31.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module lcd_rst.
<suppressed ~19 debug messages>

2.31.9. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\lcd_rst'.
Removed a total of 0 cells.

2.31.10. Executing OPT_RMDFF pass (remove dff with constant values).

2.31.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \lcd_rst..
Removed 0 unused cells and 3 unused wires.
<suppressed ~1 debug messages>

2.31.12. Rerunning OPT passes. (Removed registers in this run.)

2.31.13. Running ICE40 specific optimizations.

2.31.14. Executing OPT_EXPR pass (perform const folding).
Optimizing module lcd_rst.

2.31.15. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\lcd_rst'.
Removed a total of 0 cells.

2.31.16. Executing OPT_RMDFF pass (remove dff with constant values).

2.31.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \lcd_rst..

2.31.18. Finished OPT passes. (There is nothing left to do.)

2.32. Executing DFFSR2DFF pass (mapping DFFSR cells to simpler FFs).

2.33. Executing DFF2DFFE pass (transform $dff to $dffe where applicable).
Selected cell types for direct conversion:
  $_DFF_PP1_ -> $__DFFE_PP1
  $_DFF_PP0_ -> $__DFFE_PP0
  $_DFF_PN1_ -> $__DFFE_PN1
  $_DFF_PN0_ -> $__DFFE_PN0
  $_DFF_NP1_ -> $__DFFE_NP1
  $_DFF_NP0_ -> $__DFFE_NP0
  $_DFF_NN1_ -> $__DFFE_NN1
  $_DFF_NN0_ -> $__DFFE_NN0
  $_DFF_N_ -> $_DFFE_NP_
  $_DFF_P_ -> $_DFFE_PP_
Transforming FF to FF+Enable cells in module lcd_rst:
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$195 to $_DFFE_PP_ for $0\counter[25:0] [0] -> \counter [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$196 to $_DFFE_PP_ for $0\counter[25:0] [1] -> \counter [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$197 to $_DFFE_PP_ for $0\counter[25:0] [2] -> \counter [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$198 to $_DFFE_PP_ for $0\counter[25:0] [3] -> \counter [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$199 to $_DFFE_PP_ for $0\counter[25:0] [4] -> \counter [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$200 to $_DFFE_PP_ for $0\counter[25:0] [5] -> \counter [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$201 to $_DFFE_PP_ for $0\counter[25:0] [6] -> \counter [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$202 to $_DFFE_PP_ for $0\counter[25:0] [7] -> \counter [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$203 to $_DFFE_PP_ for $0\counter[25:0] [8] -> \counter [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$204 to $_DFFE_PP_ for $0\counter[25:0] [9] -> \counter [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$205 to $_DFFE_PP_ for $0\counter[25:0] [10] -> \counter [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$206 to $_DFFE_PP_ for $0\counter[25:0] [11] -> \counter [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$207 to $_DFFE_PP_ for $0\counter[25:0] [12] -> \counter [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$208 to $_DFFE_PP_ for $0\counter[25:0] [13] -> \counter [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$209 to $_DFFE_PP_ for $0\counter[25:0] [14] -> \counter [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$210 to $_DFFE_PP_ for $0\counter[25:0] [15] -> \counter [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$211 to $_DFFE_PP_ for $0\counter[25:0] [16] -> \counter [16].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$212 to $_DFFE_PP_ for $0\counter[25:0] [17] -> \counter [17].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$213 to $_DFFE_PP_ for $0\counter[25:0] [18] -> \counter [18].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$214 to $_DFFE_PP_ for $0\counter[25:0] [19] -> \counter [19].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$215 to $_DFFE_PP_ for $0\counter[25:0] [20] -> \counter [20].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$221 to $_DFFE_PP_ for $0\LED[0:0] -> \LED.
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$222 to $_DFFE_PP_ for $0\RST[0:0] -> \RST.

2.34. Executing TECHMAP pass (map to technology primitives).

2.34.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/cells_map.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$__DFFE_NN0'.
Generating RTLIL representation for module `\$__DFFE_NN1'.
Generating RTLIL representation for module `\$__DFFE_PN0'.
Generating RTLIL representation for module `\$__DFFE_PN1'.
Generating RTLIL representation for module `\$__DFFE_NP0'.
Generating RTLIL representation for module `\$__DFFE_NP1'.
Generating RTLIL representation for module `\$__DFFE_PP0'.
Generating RTLIL representation for module `\$__DFFE_PP1'.
Successfully finished Verilog frontend.

2.34.2. Continuing TECHMAP pass.
Using template \$_DFFE_PP_ for cells of type $_DFFE_PP_.
Using template \$_DFF_P_ for cells of type $_DFF_P_.
No more expansions possible.
<suppressed ~25 debug messages>

2.35. Executing OPT_EXPR pass (perform const folding).
Optimizing module lcd_rst.
<suppressed ~46 debug messages>

2.36. Executing SIMPLEMAP pass (map simple cells to gate primitives).

2.37. Executing ICE40_FFINIT pass (implement FF init values).
Handling FF init values in lcd_rst.
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$197 (SB_DFFE): \counter [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$199 (SB_DFFE): \counter [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$193 (SB_DFF): \state [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$196 (SB_DFFE): \counter [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$194 (SB_DFF): \state [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$198 (SB_DFFE): \counter [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$200 (SB_DFFE): \counter [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$201 (SB_DFFE): \counter [6] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$202 (SB_DFFE): \counter [7] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$203 (SB_DFFE): \counter [8] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$204 (SB_DFFE): \counter [9] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$205 (SB_DFFE): \counter [10] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$206 (SB_DFFE): \counter [11] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$207 (SB_DFFE): \counter [12] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$208 (SB_DFFE): \counter [13] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$209 (SB_DFFE): \counter [14] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$210 (SB_DFFE): \counter [15] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$211 (SB_DFFE): \counter [16] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$212 (SB_DFFE): \counter [17] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$213 (SB_DFFE): \counter [18] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$214 (SB_DFFE): \counter [19] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$215 (SB_DFFE): \counter [20] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$195 (SB_DFFE): \counter [0] = 0

2.38. Executing ICE40_FFSSR pass (merge synchronous set/reset into FF cells).
Merging set/reset $_MUX_ cells into SB_FFs in lcd_rst.
  Merging $auto$simplemap.cc:277:simplemap_mux$460 (A=1'0, B=$procmux$46.Y_B [0], S=$techmap$procmux$41.$reduce_or$/usr/bin/../share/yosys/techmap.v:445$153_Y) into $auto$simplemap.cc:420:simplemap_dff$193 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$461 (A=1'0, B=$procmux$46.B_AND_S [3], S=$techmap$procmux$41.$reduce_or$/usr/bin/../share/yosys/techmap.v:445$153_Y) into $auto$simplemap.cc:420:simplemap_dff$194 (SB_DFF).
  Merging $auto$simplemap.cc:311:simplemap_lut$141 (A=1'0, B=$auto$simplemap.cc:309:simplemap_lut$137 [1], S=\state [1]) into $auto$simplemap.cc:420:simplemap_dff$222 (SB_DFFE).

2.39. Executing ICE40_OPT pass (performing simple optimizations).

2.39.1. Running ICE40 specific optimizations.

2.39.2. Executing OPT_EXPR pass (perform const folding).
Optimizing module lcd_rst.
<suppressed ~3 debug messages>

2.39.3. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\lcd_rst'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

2.39.4. Executing OPT_RMDFF pass (remove dff with constant values).

2.39.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \lcd_rst..
Removed 2 unused cells and 149 unused wires.
<suppressed ~3 debug messages>

2.39.6. Rerunning OPT passes. (Removed registers in this run.)

2.39.7. Running ICE40 specific optimizations.

2.39.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module lcd_rst.

2.39.9. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\lcd_rst'.
Removed a total of 0 cells.

2.39.10. Executing OPT_RMDFF pass (remove dff with constant values).

2.39.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \lcd_rst..

2.39.12. Finished OPT passes. (There is nothing left to do.)

2.40. Executing TECHMAP pass (map to technology primitives).

2.40.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/latches_map.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/latches_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Successfully finished Verilog frontend.

2.40.2. Continuing TECHMAP pass.
No more expansions possible.

2.41. Executing ABC pass (technology mapping using ABC).

2.41.1. Extracting gate netlist of module `\lcd_rst' to `<abc-temp-dir>/input.blif'..
Extracted 43 gates and 71 wires to a netlist network with 27 inputs and 30 outputs.

2.41.1.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + lutpack -S 1 
ABC: + dress 
ABC: Total number of equiv classes                =      28.
ABC: Participating nodes from both networks       =      61.
ABC: Participating nodes from the first network   =      30. (  93.75 % of nodes)
ABC: Participating nodes from the second network  =      31. (  96.88 % of nodes)
ABC: Node pairs (any polarity)                    =      30. (  93.75 % of names can be moved)
ABC: Node pairs (same polarity)                   =      30. (  93.75 % of names can be moved)
ABC: Total runtime =     0.01 sec
ABC: + write_blif <abc-temp-dir>/output.blif 

2.41.1.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:       62
ABC RESULTS:        internal signals:       14
ABC RESULTS:           input signals:       27
ABC RESULTS:          output signals:       30
Removing temp directory.
Removed 0 unused cells and 48 unused wires.

2.42. Executing TECHMAP pass (map to technology primitives).

2.42.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/cells_map.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$__DFFE_NN0'.
Generating RTLIL representation for module `\$__DFFE_NN1'.
Generating RTLIL representation for module `\$__DFFE_PN0'.
Generating RTLIL representation for module `\$__DFFE_PN1'.
Generating RTLIL representation for module `\$__DFFE_NP0'.
Generating RTLIL representation for module `\$__DFFE_NP1'.
Generating RTLIL representation for module `\$__DFFE_PP0'.
Generating RTLIL representation for module `\$__DFFE_PP1'.
Generating RTLIL representation for module `\$lut'.
Successfully finished Verilog frontend.

2.42.2. Continuing TECHMAP pass.
Using template $paramod\$lut\WIDTH=3\LUT=8'01000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001010000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111101100001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=1\LUT=2'01 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00011111 for cells of type $lut.
No more expansions possible.
<suppressed ~119 debug messages>
Removed 0 unused cells and 62 unused wires.

2.43. Executing HIERARCHY pass (managing design hierarchy).

2.43.1. Analyzing design hierarchy..
Top module:  \lcd_rst

2.43.2. Analyzing design hierarchy..
Top module:  \lcd_rst
Removed 0 unused modules.

2.44. Printing statistics.

=== lcd_rst ===

   Number of wires:                 41
   Number of wire bits:            117
   Number of public wires:           9
   Number of public wire bits:      35
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 95
     SB_CARRY                       19
     SB_DFFE                        22
     SB_DFFESR                       1
     SB_DFFSR                        2
     SB_LUT4                        51

2.45. Executing CHECK pass (checking for obvious problems).
checking module lcd_rst..
found and reported 0 problems.

2.46. Executing BLIF backend.

2.47. Executing JSON backend.

End of script. Logfile hash: aeabcf9893
CPU: user 0.55s system 0.10s, MEM: 45.78 MB total, 40.21 MB resident
Yosys 0.9 (git sha1 1979e0b)
Time spent: 39% 10x read_verilog (0 sec), 10% 1x share (0 sec), ...
