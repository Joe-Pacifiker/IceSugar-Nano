
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2019  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9 (git sha1 1979e0b)


-- Parsing `frmctr1.v' using frontend `verilog' --

1. Executing Verilog-2005 frontend: frmctr1.v
Parsing Verilog input from `frmctr1.v' to AST representation.
Generating RTLIL representation for module `\reset'.
Successfully finished Verilog frontend.

-- Running command `synth_ice40 -json frmctr1.json -blif frmctr1.blif' --

2. Executing SYNTH_ICE40 pass.

2.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/cells_sim.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\SB_IO'.
Generating RTLIL representation for module `\SB_GB_IO'.
Generating RTLIL representation for module `\SB_GB'.
Generating RTLIL representation for module `\SB_LUT4'.
Generating RTLIL representation for module `\SB_CARRY'.
Generating RTLIL representation for module `\SB_DFF'.
Generating RTLIL representation for module `\SB_DFFE'.
Generating RTLIL representation for module `\SB_DFFSR'.
Generating RTLIL representation for module `\SB_DFFR'.
Generating RTLIL representation for module `\SB_DFFSS'.
Generating RTLIL representation for module `\SB_DFFS'.
Generating RTLIL representation for module `\SB_DFFESR'.
Generating RTLIL representation for module `\SB_DFFER'.
Generating RTLIL representation for module `\SB_DFFESS'.
Generating RTLIL representation for module `\SB_DFFES'.
Generating RTLIL representation for module `\SB_DFFN'.
Generating RTLIL representation for module `\SB_DFFNE'.
Generating RTLIL representation for module `\SB_DFFNSR'.
Generating RTLIL representation for module `\SB_DFFNR'.
Generating RTLIL representation for module `\SB_DFFNSS'.
Generating RTLIL representation for module `\SB_DFFNS'.
Generating RTLIL representation for module `\SB_DFFNESR'.
Generating RTLIL representation for module `\SB_DFFNER'.
Generating RTLIL representation for module `\SB_DFFNESS'.
Generating RTLIL representation for module `\SB_DFFNES'.
Generating RTLIL representation for module `\SB_RAM40_4K'.
Generating RTLIL representation for module `\SB_RAM40_4KNR'.
Generating RTLIL representation for module `\SB_RAM40_4KNW'.
Generating RTLIL representation for module `\SB_RAM40_4KNRNW'.
Generating RTLIL representation for module `\ICESTORM_LC'.
Generating RTLIL representation for module `\SB_PLL40_CORE'.
Generating RTLIL representation for module `\SB_PLL40_PAD'.
Generating RTLIL representation for module `\SB_PLL40_2_PAD'.
Generating RTLIL representation for module `\SB_PLL40_2F_CORE'.
Generating RTLIL representation for module `\SB_PLL40_2F_PAD'.
Generating RTLIL representation for module `\SB_WARMBOOT'.
Generating RTLIL representation for module `\SB_SPRAM256KA'.
Generating RTLIL representation for module `\SB_HFOSC'.
Generating RTLIL representation for module `\SB_LFOSC'.
Generating RTLIL representation for module `\SB_RGBA_DRV'.
Generating RTLIL representation for module `\SB_LED_DRV_CUR'.
Generating RTLIL representation for module `\SB_RGB_DRV'.
Generating RTLIL representation for module `\SB_I2C'.
Generating RTLIL representation for module `\SB_SPI'.
Generating RTLIL representation for module `\SB_LEDDA_IP'.
Generating RTLIL representation for module `\SB_FILTER_50NS'.
Generating RTLIL representation for module `\SB_IO_I3C'.
Generating RTLIL representation for module `\SB_IO_OD'.
Generating RTLIL representation for module `\SB_MAC16'.
Successfully finished Verilog frontend.

2.2. Executing HIERARCHY pass (managing design hierarchy).

2.2.1. Finding top of design hierarchy..
root of   0 design levels: reset               
Automatically selected reset as design top module.

2.2.2. Analyzing design hierarchy..
Top module:  \reset

2.2.3. Analyzing design hierarchy..
Top module:  \reset
Removed 0 unused modules.

2.3. Executing PROC pass (convert processes to netlists).

2.3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

2.3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 10 switch rules as full_case in process $proc$frmctr1.v:72$10 in module reset.
Removed a total of 0 dead cases.

2.3.3. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\reset.$proc$frmctr1.v:47$40'.
  Set init value: \scl = 1'1
  Set init value: \state = 6'000000
  Set init value: \data = 8'00000000
  Set init value: \bit_counter = 3'111
  Set init value: \cmd_counter = 1'0
  Set init value: \param_counter = 2'00
  Set init value: \params_left = 8'00000000

2.3.4. Executing PROC_ARST pass (detect async resets in processes).

2.3.5. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\reset.$proc$frmctr1.v:47$40'.
     1/21: $1\params_left[7:0]
     2/21: $1\param_counter[1:0]
     3/21: $1\cmd_counter[0:0]
     4/21: $1\bit_counter[2:0]
     5/21: $1\data[7:0]
     6/21: $0$memwr$\frmctr1_p$frmctr1.v:59$7_DATA[7:0]$54
     7/21: $0$memwr$\frmctr1_p$frmctr1.v:59$7_ADDR[31:0]$53
     8/21: $0$memwr$\frmctr1_p$frmctr1.v:58$6_DATA[7:0]$52
     9/21: $0$memwr$\frmctr1_p$frmctr1.v:58$6_ADDR[31:0]$51
    10/21: $0$memwr$\frmctr1_p$frmctr1.v:57$5_DATA[7:0]$50
    11/21: $0$memwr$\frmctr1_p$frmctr1.v:57$5_ADDR[31:0]$49
    12/21: $0$memwr$\frmctr1_num_params$frmctr1.v:55$4_DATA[7:0]$48
    13/21: $0$memwr$\frmctr1_num_params$frmctr1.v:55$4_ADDR[31:0]$47
    14/21: $0$memwr$\frmctr1_num_params$frmctr1.v:54$3_DATA[7:0]$46
    15/21: $0$memwr$\frmctr1_num_params$frmctr1.v:54$3_ADDR[31:0]$45
    16/21: $0$memwr$\frmctr1_c$frmctr1.v:53$2_DATA[7:0]$44
    17/21: $0$memwr$\frmctr1_c$frmctr1.v:53$2_ADDR[31:0]$43
    18/21: $0$memwr$\frmctr1_c$frmctr1.v:52$1_DATA[7:0]$42
    19/21: $0$memwr$\frmctr1_c$frmctr1.v:52$1_ADDR[31:0]$41
    20/21: $1\scl[0:0]
    21/21: $1\state[5:0]
Creating decoders for process `\reset.$proc$frmctr1.v:72$10'.
     1/11: $0\params_left[7:0]
     2/11: $0\param_counter[1:0]
     3/11: $0\cmd_counter[0:0]
     4/11: $0\bit_counter[2:0]
     5/11: $0\data[7:0]
     6/11: $0\delay[15:0]
     7/11: $0\state[5:0]
     8/11: $0\cs[0:0]
     9/11: $0\mosi[0:0]
    10/11: $0\dc[0:0]
    11/11: $0\rst[0:0]
Creating decoders for process `\reset.$proc$frmctr1.v:69$8'.
     1/1: $0\scl[0:0]

2.3.6. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\reset.$memwr$\frmctr1_c$frmctr1.v:52$1_ADDR' from process `\reset.$proc$frmctr1.v:47$40'.
No latch inferred for signal `\reset.$memwr$\frmctr1_c$frmctr1.v:52$1_DATA' from process `\reset.$proc$frmctr1.v:47$40'.
No latch inferred for signal `\reset.$memwr$\frmctr1_c$frmctr1.v:53$2_ADDR' from process `\reset.$proc$frmctr1.v:47$40'.
No latch inferred for signal `\reset.$memwr$\frmctr1_c$frmctr1.v:53$2_DATA' from process `\reset.$proc$frmctr1.v:47$40'.
No latch inferred for signal `\reset.$memwr$\frmctr1_num_params$frmctr1.v:54$3_ADDR' from process `\reset.$proc$frmctr1.v:47$40'.
No latch inferred for signal `\reset.$memwr$\frmctr1_num_params$frmctr1.v:54$3_DATA' from process `\reset.$proc$frmctr1.v:47$40'.
No latch inferred for signal `\reset.$memwr$\frmctr1_num_params$frmctr1.v:55$4_ADDR' from process `\reset.$proc$frmctr1.v:47$40'.
No latch inferred for signal `\reset.$memwr$\frmctr1_num_params$frmctr1.v:55$4_DATA' from process `\reset.$proc$frmctr1.v:47$40'.
No latch inferred for signal `\reset.$memwr$\frmctr1_p$frmctr1.v:57$5_ADDR' from process `\reset.$proc$frmctr1.v:47$40'.
No latch inferred for signal `\reset.$memwr$\frmctr1_p$frmctr1.v:57$5_DATA' from process `\reset.$proc$frmctr1.v:47$40'.
No latch inferred for signal `\reset.$memwr$\frmctr1_p$frmctr1.v:58$6_ADDR' from process `\reset.$proc$frmctr1.v:47$40'.
No latch inferred for signal `\reset.$memwr$\frmctr1_p$frmctr1.v:58$6_DATA' from process `\reset.$proc$frmctr1.v:47$40'.
No latch inferred for signal `\reset.$memwr$\frmctr1_p$frmctr1.v:59$7_ADDR' from process `\reset.$proc$frmctr1.v:47$40'.
No latch inferred for signal `\reset.$memwr$\frmctr1_p$frmctr1.v:59$7_DATA' from process `\reset.$proc$frmctr1.v:47$40'.

2.3.7. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\reset.\rst' using process `\reset.$proc$frmctr1.v:72$10'.
  created $dff cell `$procdff$190' with positive edge clock.
Creating register for signal `\reset.\dc' using process `\reset.$proc$frmctr1.v:72$10'.
  created $dff cell `$procdff$191' with positive edge clock.
Creating register for signal `\reset.\mosi' using process `\reset.$proc$frmctr1.v:72$10'.
  created $dff cell `$procdff$192' with positive edge clock.
Creating register for signal `\reset.\cs' using process `\reset.$proc$frmctr1.v:72$10'.
  created $dff cell `$procdff$193' with positive edge clock.
Creating register for signal `\reset.\state' using process `\reset.$proc$frmctr1.v:72$10'.
  created $dff cell `$procdff$194' with positive edge clock.
Creating register for signal `\reset.\delay' using process `\reset.$proc$frmctr1.v:72$10'.
  created $dff cell `$procdff$195' with positive edge clock.
Creating register for signal `\reset.\data' using process `\reset.$proc$frmctr1.v:72$10'.
  created $dff cell `$procdff$196' with positive edge clock.
Creating register for signal `\reset.\bit_counter' using process `\reset.$proc$frmctr1.v:72$10'.
  created $dff cell `$procdff$197' with positive edge clock.
Creating register for signal `\reset.\cmd_counter' using process `\reset.$proc$frmctr1.v:72$10'.
  created $dff cell `$procdff$198' with positive edge clock.
Creating register for signal `\reset.\param_counter' using process `\reset.$proc$frmctr1.v:72$10'.
  created $dff cell `$procdff$199' with positive edge clock.
Creating register for signal `\reset.\params_left' using process `\reset.$proc$frmctr1.v:72$10'.
  created $dff cell `$procdff$200' with positive edge clock.
Creating register for signal `\reset.\scl' using process `\reset.$proc$frmctr1.v:69$8'.
  created $dff cell `$procdff$201' with positive edge clock.

2.3.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `reset.$proc$frmctr1.v:47$40'.
Found and cleaned up 11 empty switches in `\reset.$proc$frmctr1.v:72$10'.
Removing empty process `reset.$proc$frmctr1.v:72$10'.
Removing empty process `reset.$proc$frmctr1.v:69$8'.
Cleaned up 11 empty switches.

2.4. Executing FLATTEN pass (flatten design).
No more expansions possible.

2.5. Executing TRIBUF pass.

2.6. Executing DEMINOUT pass (demote inout ports to input or output).

2.7. Executing OPT_EXPR pass (perform const folding).
Optimizing module reset.
<suppressed ~14 debug messages>

2.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \reset..
Removed 1 unused cells and 67 unused wires.
<suppressed ~2 debug messages>

2.9. Executing CHECK pass (checking for obvious problems).
checking module reset..
found and reported 0 problems.

2.10. Executing OPT pass (performing simple optimizations).

2.10.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module reset.

2.10.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\reset'.
<suppressed ~69 debug messages>
Removed a total of 23 cells.

2.10.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \reset..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~11 debug messages>

2.10.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \reset.
    New ctrl vector for $pmux cell $procmux$106: { $procmux$105_CMP $procmux$148_CMP $procmux$104_CMP $procmux$100_CMP $procmux$139_CMP $procmux$134_CMP $procmux$127_CMP $procmux$123_CMP $procmux$119_CMP $procmux$115_CMP $procmux$108_CMP $auto$opt_reduce.cc:132:opt_mux$203 }
    New ctrl vector for $pmux cell $procmux$152: { $procmux$127_CMP $auto$opt_reduce.cc:132:opt_mux$205 }
    New ctrl vector for $pmux cell $procmux$169: { $procmux$135_CMP $auto$opt_reduce.cc:132:opt_mux$207 }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$202: { $procmux$107_CMP $procmux$135_CMP }
  Optimizing cells in module \reset.
Performed a total of 4 changes.

2.10.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\reset'.
Removed a total of 0 cells.

2.10.6. Executing OPT_RMDFF pass (remove dff with constant values).

2.10.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \reset..
Removed 0 unused cells and 23 unused wires.
<suppressed ~1 debug messages>

2.10.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module reset.

2.10.9. Rerunning OPT passes. (Maybe there is more to do..)

2.10.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \reset..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~11 debug messages>

2.10.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \reset.
Performed a total of 0 changes.

2.10.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\reset'.
Removed a total of 0 cells.

2.10.13. Executing OPT_RMDFF pass (remove dff with constant values).

2.10.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \reset..

2.10.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module reset.

2.10.16. Finished OPT passes. (There is nothing left to do.)

2.11. Executing WREDUCE pass (reducing word size of cells).
Removed top 31 address bits (of 32) from memory init port reset.$meminit$\frmctr1_c$frmctr1.v:52$33 (frmctr1_c).
Removed top 31 address bits (of 32) from memory init port reset.$meminit$\frmctr1_c$frmctr1.v:53$34 (frmctr1_c).
Removed top 31 address bits (of 32) from memory init port reset.$meminit$\frmctr1_num_params$frmctr1.v:54$35 (frmctr1_num_params).
Removed top 31 address bits (of 32) from memory init port reset.$meminit$\frmctr1_num_params$frmctr1.v:55$36 (frmctr1_num_params).
Removed top 30 address bits (of 32) from memory init port reset.$meminit$\frmctr1_p$frmctr1.v:57$37 (frmctr1_p).
Removed top 30 address bits (of 32) from memory init port reset.$meminit$\frmctr1_p$frmctr1.v:58$38 (frmctr1_p).
Removed top 30 address bits (of 32) from memory init port reset.$meminit$\frmctr1_p$frmctr1.v:59$39 (frmctr1_p).
Removed top 9 bits (of 16) from port B of cell reset.$le$frmctr1.v:88$11 ($le).
Removed top 15 bits (of 16) from port B of cell reset.$add$frmctr1.v:102$14 ($add).
Removed top 2 bits (of 3) from port B of cell reset.$sub$frmctr1.v:142$22 ($sub).
Removed top 7 bits (of 8) from port B of cell reset.$sub$frmctr1.v:201$31 ($sub).
Removed top 1 bits (of 2) from port B of cell reset.$add$frmctr1.v:202$32 ($add).
Removed top 4 bits (of 6) from port B of cell reset.$procmux$100_CMP0 ($eq).
Removed top 4 bits (of 6) from port B of cell reset.$procmux$104_CMP0 ($eq).
Removed top 2 bits (of 6) from mux cell reset.$procmux$110 ($mux).
Removed top 2 bits (of 6) from port B of cell reset.$procmux$107_CMP0 ($eq).
Removed top 2 bits (of 6) from port B of cell reset.$procmux$108_CMP0 ($eq).
Removed top 2 bits (of 6) from mux cell reset.$procmux$113 ($mux).
Removed top 2 bits (of 6) from port B of cell reset.$procmux$115_CMP0 ($eq).
Removed top 5 bits (of 6) from mux cell reset.$procmux$117 ($mux).
Removed top 2 bits (of 6) from port B of cell reset.$procmux$119_CMP0 ($eq).
Removed top 2 bits (of 6) from mux cell reset.$procmux$121 ($mux).
Removed top 2 bits (of 6) from port B of cell reset.$procmux$123_CMP0 ($eq).
Removed top 2 bits (of 6) from mux cell reset.$procmux$125 ($mux).
Removed top 3 bits (of 6) from port B of cell reset.$procmux$127_CMP0 ($eq).
Removed top 4 bits (of 6) from mux cell reset.$procmux$129 ($mux).
Removed top 2 bits (of 6) from mux cell reset.$procmux$132 ($mux).
Removed top 3 bits (of 6) from port B of cell reset.$procmux$134_CMP0 ($eq).
Removed top 3 bits (of 6) from port B of cell reset.$procmux$135_CMP0 ($eq).
Removed top 5 bits (of 6) from mux cell reset.$procmux$137 ($mux).
Removed top 3 bits (of 6) from port B of cell reset.$procmux$139_CMP0 ($eq).
Removed top 5 bits (of 6) from port B of cell reset.$procmux$148_CMP0 ($eq).
Removed top 2 bits (of 6) from wire reset.$procmux$110_Y.
Removed top 2 bits (of 6) from wire reset.$procmux$113_Y.
Removed top 5 bits (of 6) from wire reset.$procmux$117_Y.
Removed top 2 bits (of 6) from wire reset.$procmux$121_Y.
Removed top 2 bits (of 6) from wire reset.$procmux$125_Y.
Removed top 2 bits (of 6) from wire reset.$procmux$132_Y.

2.12. Executing PEEPOPT pass (run peephole optimizers).

2.13. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \reset..
Removed 0 unused cells and 6 unused wires.
<suppressed ~1 debug messages>

2.14. Executing SHARE pass (SAT-based resource sharing).
Found 3 cells in module reset that may be considered for resource sharing.
  Analyzing resource sharing options for $memrd$\frmctr1_p$frmctr1.v:200$30 ($memrd):
    Found 1 activation_patterns using ctrl signal $procmux$107_CMP.
    No candidates found.
  Analyzing resource sharing options for $memrd$\frmctr1_num_params$frmctr1.v:196$28 ($memrd):
    Found 1 activation_patterns using ctrl signal $procmux$108_CMP.
    No candidates found.
  Analyzing resource sharing options for $memrd$\frmctr1_c$frmctr1.v:111$15 ($memrd):
    Found 2 activation_patterns using ctrl signal { $procmux$139_CMP $eq$frmctr1.v:111$16_Y }.
    No candidates found.

2.15. Executing TECHMAP pass (map to technology primitives).

2.15.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/cmp2lut.v
Parsing Verilog input from `/usr/bin/../share/yosys/cmp2lut.v' to AST representation.
Generating RTLIL representation for module `\_90_lut_cmp_'.
Successfully finished Verilog frontend.

2.15.2. Continuing TECHMAP pass.
Using template $paramod$77ad031fce233083715243f95e3cd2547d931e42\_90_lut_cmp_ for cells of type $eq.
No more expansions possible.
<suppressed ~248 debug messages>

2.16. Executing OPT_EXPR pass (perform const folding).
Optimizing module reset.

2.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \reset..
Removed 0 unused cells and 3 unused wires.
<suppressed ~1 debug messages>

2.18. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module reset:
  creating $macc model for $add$frmctr1.v:102$14 ($add).
  creating $macc model for $add$frmctr1.v:118$18 ($add).
  creating $macc model for $add$frmctr1.v:202$32 ($add).
  creating $macc model for $sub$frmctr1.v:142$22 ($sub).
  creating $macc model for $sub$frmctr1.v:196$29 ($sub).
  creating $macc model for $sub$frmctr1.v:201$31 ($sub).
  creating $alu model for $macc $sub$frmctr1.v:201$31.
  creating $alu model for $macc $sub$frmctr1.v:196$29.
  creating $alu model for $macc $sub$frmctr1.v:142$22.
  creating $alu model for $macc $add$frmctr1.v:202$32.
  creating $alu model for $macc $add$frmctr1.v:118$18.
  creating $alu model for $macc $add$frmctr1.v:102$14.
  creating $alu model for $le$frmctr1.v:100$13 ($le): new $alu
  creating $alu model for $le$frmctr1.v:88$11 ($le): new $alu
  creating $alu cell for $le$frmctr1.v:88$11: $auto$alumacc.cc:474:replace_alu$218
  creating $alu cell for $le$frmctr1.v:100$13: $auto$alumacc.cc:474:replace_alu$231
  creating $alu cell for $add$frmctr1.v:102$14: $auto$alumacc.cc:474:replace_alu$240
  creating $alu cell for $add$frmctr1.v:118$18: $auto$alumacc.cc:474:replace_alu$243
  creating $alu cell for $add$frmctr1.v:202$32: $auto$alumacc.cc:474:replace_alu$246
  creating $alu cell for $sub$frmctr1.v:142$22: $auto$alumacc.cc:474:replace_alu$249
  creating $alu cell for $sub$frmctr1.v:196$29: $auto$alumacc.cc:474:replace_alu$252
  creating $alu cell for $sub$frmctr1.v:201$31: $auto$alumacc.cc:474:replace_alu$255
  created 8 $alu and 0 $macc cells.

2.19. Executing OPT pass (performing simple optimizations).

2.19.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module reset.

2.19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\reset'.
Removed a total of 0 cells.

2.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \reset..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~11 debug messages>

2.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \reset.
    New input vector for $reduce_or cell $auto$alumacc.cc:509:replace_alu$229: { $auto$rtlil.cc:1832:Not$228 $auto$rtlil.cc:1835:ReduceAnd$222 }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$221: { $auto$alumacc.cc:490:replace_alu$219 [0] $auto$alumacc.cc:490:replace_alu$219 [1] $auto$alumacc.cc:490:replace_alu$219 [2] $auto$alumacc.cc:490:replace_alu$219 [3] $auto$alumacc.cc:490:replace_alu$219 [4] $auto$alumacc.cc:490:replace_alu$219 [5] $auto$alumacc.cc:490:replace_alu$219 [6] $auto$alumacc.cc:490:replace_alu$219 [7] $auto$alumacc.cc:490:replace_alu$219 [8] $auto$alumacc.cc:490:replace_alu$219 [9] $auto$alumacc.cc:490:replace_alu$219 [10] $auto$alumacc.cc:490:replace_alu$219 [11] $auto$alumacc.cc:490:replace_alu$219 [12] $auto$alumacc.cc:490:replace_alu$219 [13] $auto$alumacc.cc:490:replace_alu$219 [14] $auto$alumacc.cc:490:replace_alu$219 [15] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$236: { $auto$alumacc.cc:490:replace_alu$232 [0] $auto$alumacc.cc:490:replace_alu$232 [1] $auto$alumacc.cc:490:replace_alu$232 [2] $auto$alumacc.cc:490:replace_alu$232 [3] $auto$alumacc.cc:490:replace_alu$232 [4] $auto$alumacc.cc:490:replace_alu$232 [5] $auto$alumacc.cc:490:replace_alu$232 [6] $auto$alumacc.cc:490:replace_alu$232 [7] $auto$alumacc.cc:490:replace_alu$232 [8] $auto$alumacc.cc:490:replace_alu$232 [9] $auto$alumacc.cc:490:replace_alu$232 [10] $auto$alumacc.cc:490:replace_alu$232 [11] $auto$alumacc.cc:490:replace_alu$232 [12] $auto$alumacc.cc:490:replace_alu$232 [13] $auto$alumacc.cc:490:replace_alu$232 [14] $auto$alumacc.cc:490:replace_alu$232 [15] }
  Optimizing cells in module \reset.
Performed a total of 3 changes.

2.19.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\reset'.
Removed a total of 0 cells.

2.19.6. Executing OPT_RMDFF pass (remove dff with constant values).

2.19.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \reset..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

2.19.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module reset.

2.19.9. Rerunning OPT passes. (Maybe there is more to do..)

2.19.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \reset..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~11 debug messages>

2.19.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \reset.
Performed a total of 0 changes.

2.19.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\reset'.
Removed a total of 0 cells.

2.19.13. Executing OPT_RMDFF pass (remove dff with constant values).

2.19.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \reset..

2.19.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module reset.

2.19.16. Finished OPT passes. (There is nothing left to do.)

2.20. Executing FSM pass (extract and optimize FSM).

2.20.1. Executing FSM_DETECT pass (finding FSMs in design).
Not marking reset.state as FSM state register:
    Register has an initialization value.

2.20.2. Executing FSM_EXTRACT pass (extracting FSM from design).

2.20.3. Executing FSM_OPT pass (simple optimizations of FSMs).

2.20.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \reset..

2.20.5. Executing FSM_OPT pass (simple optimizations of FSMs).

2.20.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

2.20.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

2.20.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

2.21. Executing OPT pass (performing simple optimizations).

2.21.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module reset.

2.21.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\reset'.
Removed a total of 0 cells.

2.21.3. Executing OPT_RMDFF pass (remove dff with constant values).

2.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \reset..

2.21.5. Finished fast OPT passes.

2.22. Executing MEMORY pass.

2.22.1. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).
Checking cell `$memrd$\frmctr1_c$frmctr1.v:111$15' in module `\reset': no (compatible) $dff found.
Checking cell `$memrd$\frmctr1_num_params$frmctr1.v:196$28' in module `\reset': no (compatible) $dff found.
Checking cell `$memrd$\frmctr1_p$frmctr1.v:200$30' in module `\reset': no (compatible) $dff found.

2.22.2. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \reset..

2.22.3. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

2.22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \reset..

2.22.5. Executing MEMORY_COLLECT pass (generating $mem cells).
Collecting $memrd, $memwr and $meminit for memory `\frmctr1_c' in module `\reset':
  $meminit$\frmctr1_c$frmctr1.v:52$33 ($meminit)
  $meminit$\frmctr1_c$frmctr1.v:53$34 ($meminit)
  $memrd$\frmctr1_c$frmctr1.v:111$15 ($memrd)
Collecting $memrd, $memwr and $meminit for memory `\frmctr1_num_params' in module `\reset':
  $meminit$\frmctr1_num_params$frmctr1.v:54$35 ($meminit)
  $meminit$\frmctr1_num_params$frmctr1.v:55$36 ($meminit)
  $memrd$\frmctr1_num_params$frmctr1.v:196$28 ($memrd)
Collecting $memrd, $memwr and $meminit for memory `\frmctr1_p' in module `\reset':
  $meminit$\frmctr1_p$frmctr1.v:57$37 ($meminit)
  $meminit$\frmctr1_p$frmctr1.v:58$38 ($meminit)
  $meminit$\frmctr1_p$frmctr1.v:59$39 ($meminit)
  $memrd$\frmctr1_p$frmctr1.v:200$30 ($memrd)

2.23. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \reset..

2.24. Executing MEMORY_BRAM pass (mapping $mem cells to block memories).
Processing reset.frmctr1_c:
  Properties: ports=1 bits=16 rports=1 wports=0 dbits=8 abits=1 words=2
  Checking rule #1 for bram type $__ICE40_RAM4K_M0 (variant 1):
    Bram geometry: abits=8 dbits=16 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M0: awaste=254 dwaste=8 bwaste=4080 waste=4080 efficiency=0
    Rule #1 for bram type $__ICE40_RAM4K_M0 (variant 1) rejected: requirement 'min efficiency 2' not met.
  Checking rule #2 for bram type $__ICE40_RAM4K_M123 (variant 1):
    Bram geometry: abits=9 dbits=8 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=510 dwaste=0 bwaste=4080 waste=4080 efficiency=0
    Rule #2 for bram type $__ICE40_RAM4K_M123 (variant 1) rejected: requirement 'min efficiency 2' not met.
  Checking rule #2 for bram type $__ICE40_RAM4K_M123 (variant 2):
    Bram geometry: abits=10 dbits=4 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=1022 dwaste=0 bwaste=4088 waste=4088 efficiency=0
    Rule #2 for bram type $__ICE40_RAM4K_M123 (variant 2) rejected: requirement 'min efficiency 2' not met.
  Checking rule #2 for bram type $__ICE40_RAM4K_M123 (variant 3):
    Bram geometry: abits=11 dbits=2 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=2046 dwaste=0 bwaste=4092 waste=4092 efficiency=0
    Rule #2 for bram type $__ICE40_RAM4K_M123 (variant 3) rejected: requirement 'min efficiency 2' not met.
  No acceptable bram resources found.
Processing reset.frmctr1_num_params:
  Properties: ports=1 bits=16 rports=1 wports=0 dbits=8 abits=1 words=2
  Checking rule #1 for bram type $__ICE40_RAM4K_M0 (variant 1):
    Bram geometry: abits=8 dbits=16 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M0: awaste=254 dwaste=8 bwaste=4080 waste=4080 efficiency=0
    Rule #1 for bram type $__ICE40_RAM4K_M0 (variant 1) rejected: requirement 'min efficiency 2' not met.
  Checking rule #2 for bram type $__ICE40_RAM4K_M123 (variant 1):
    Bram geometry: abits=9 dbits=8 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=510 dwaste=0 bwaste=4080 waste=4080 efficiency=0
    Rule #2 for bram type $__ICE40_RAM4K_M123 (variant 1) rejected: requirement 'min efficiency 2' not met.
  Checking rule #2 for bram type $__ICE40_RAM4K_M123 (variant 2):
    Bram geometry: abits=10 dbits=4 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=1022 dwaste=0 bwaste=4088 waste=4088 efficiency=0
    Rule #2 for bram type $__ICE40_RAM4K_M123 (variant 2) rejected: requirement 'min efficiency 2' not met.
  Checking rule #2 for bram type $__ICE40_RAM4K_M123 (variant 3):
    Bram geometry: abits=11 dbits=2 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=2046 dwaste=0 bwaste=4092 waste=4092 efficiency=0
    Rule #2 for bram type $__ICE40_RAM4K_M123 (variant 3) rejected: requirement 'min efficiency 2' not met.
  No acceptable bram resources found.
Processing reset.frmctr1_p:
  Properties: ports=1 bits=24 rports=1 wports=0 dbits=8 abits=2 words=3
  Checking rule #1 for bram type $__ICE40_RAM4K_M0 (variant 1):
    Bram geometry: abits=8 dbits=16 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M0: awaste=253 dwaste=8 bwaste=4072 waste=4072 efficiency=0
    Rule #1 for bram type $__ICE40_RAM4K_M0 (variant 1) rejected: requirement 'min efficiency 2' not met.
  Checking rule #2 for bram type $__ICE40_RAM4K_M123 (variant 1):
    Bram geometry: abits=9 dbits=8 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=509 dwaste=0 bwaste=4072 waste=4072 efficiency=0
    Rule #2 for bram type $__ICE40_RAM4K_M123 (variant 1) rejected: requirement 'min efficiency 2' not met.
  Checking rule #2 for bram type $__ICE40_RAM4K_M123 (variant 2):
    Bram geometry: abits=10 dbits=4 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=1021 dwaste=0 bwaste=4084 waste=4084 efficiency=0
    Rule #2 for bram type $__ICE40_RAM4K_M123 (variant 2) rejected: requirement 'min efficiency 2' not met.
  Checking rule #2 for bram type $__ICE40_RAM4K_M123 (variant 3):
    Bram geometry: abits=11 dbits=2 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=2045 dwaste=0 bwaste=4090 waste=4090 efficiency=0
    Rule #2 for bram type $__ICE40_RAM4K_M123 (variant 3) rejected: requirement 'min efficiency 2' not met.
  No acceptable bram resources found.

2.25. Executing TECHMAP pass (map to technology primitives).

2.25.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/brams_map.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/brams_map.v' to AST representation.
Generating RTLIL representation for module `\$__ICE40_RAM4K'.
Generating RTLIL representation for module `\$__ICE40_RAM4K_M0'.
Generating RTLIL representation for module `\$__ICE40_RAM4K_M123'.
Successfully finished Verilog frontend.

2.25.2. Continuing TECHMAP pass.
No more expansions possible.

2.26. Executing ICE40_BRAMINIT pass.

2.27. Executing OPT pass (performing simple optimizations).

2.27.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module reset.
<suppressed ~1 debug messages>

2.27.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\reset'.
Removed a total of 0 cells.

2.27.3. Executing OPT_RMDFF pass (remove dff with constant values).

2.27.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \reset..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

2.27.5. Finished fast OPT passes.

2.28. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).
Mapping memory cell \frmctr1_c in module \reset:
  created 2 $dff cells and 0 static cells of width 8.
  read interface: 0 $dff and 1 $mux cells.
  write interface: 0 write mux blocks.
Mapping memory cell \frmctr1_num_params in module \reset:
  created 2 $dff cells and 0 static cells of width 8.
  read interface: 0 $dff and 1 $mux cells.
  write interface: 0 write mux blocks.
Mapping memory cell \frmctr1_p in module \reset:
  created 3 $dff cells and 0 static cells of width 8.
  read interface: 0 $dff and 3 $mux cells.
  write interface: 0 write mux blocks.

2.29. Executing OPT pass (performing simple optimizations).

2.29.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module reset.
<suppressed ~1 debug messages>

2.29.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\reset'.
Removed a total of 0 cells.

2.29.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \reset..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~12 debug messages>

2.29.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \reset.
    Consolidated identical input bits for $mux cell $procmux$110:
      Old ports: A=4'1100, B=4'0100, Y=$auto$wreduce.cc:455:run$208 [3:0]
      New ports: A=1'1, B=1'0, Y=$auto$wreduce.cc:455:run$208 [3]
      New connections: $auto$wreduce.cc:455:run$208 [2:0] = 3'100
    Consolidated identical input bits for $mux cell $procmux$121:
      Old ports: A=4'1010, B=4'0110, Y=$auto$wreduce.cc:455:run$211 [3:0]
      New ports: A=2'10, B=2'01, Y=$auto$wreduce.cc:455:run$211 [3:2]
      New connections: $auto$wreduce.cc:455:run$211 [1:0] = 2'10
    Consolidated identical input bits for $mux cell $procmux$125:
      Old ports: A=4'0111, B=4'1010, Y=$auto$wreduce.cc:455:run$212 [3:0]
      New ports: A=2'01, B=2'10, Y={ $auto$wreduce.cc:455:run$212 [3] $auto$wreduce.cc:455:run$212 [0] }
      New connections: $auto$wreduce.cc:455:run$212 [2:1] = { $auto$wreduce.cc:455:run$212 [0] 1'1 }
    Consolidated identical input bits for $mux cell $procmux$129:
      Old ports: A=2'10, B=2'00, Y=$procmux$129_Y [1:0]
      New ports: A=1'1, B=1'0, Y=$procmux$129_Y [1]
      New connections: $procmux$129_Y [0] = 1'0
  Optimizing cells in module \reset.
    Consolidated identical input bits for $mux cell $procmux$113:
      Old ports: A=4'1011, B=$auto$wreduce.cc:455:run$208 [3:0], Y=$auto$wreduce.cc:455:run$209 [3:0]
      New ports: A=3'101, B={ $auto$wreduce.cc:455:run$208 [3] 2'10 }, Y={ $auto$wreduce.cc:455:run$209 [3:2] $auto$wreduce.cc:455:run$209 [0] }
      New connections: $auto$wreduce.cc:455:run$209 [1] = $auto$wreduce.cc:455:run$209 [0]
    Consolidated identical input bits for $mux cell $procmux$132:
      Old ports: A={ 2'10 $procmux$129_Y [1:0] }, B=4'0111, Y=$auto$wreduce.cc:455:run$213 [3:0]
      New ports: A={ 1'1 $procmux$129_Y [1] 1'0 }, B=3'011, Y={ $auto$wreduce.cc:455:run$213 [3] $auto$wreduce.cc:455:run$213 [1:0] }
      New connections: $auto$wreduce.cc:455:run$213 [2] = $auto$wreduce.cc:455:run$213 [0]
  Optimizing cells in module \reset.
Performed a total of 6 changes.

2.29.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\reset'.
Removed a total of 0 cells.

2.29.6. Executing OPT_RMDFF pass (remove dff with constant values).
Removing $memory\frmctr1_p[2]$282 ($dff) from module reset.
Removing $memory\frmctr1_p[1]$280 ($dff) from module reset.
Removing $memory\frmctr1_p[0]$278 ($dff) from module reset.
Removing $memory\frmctr1_num_params[1]$273 ($dff) from module reset.
Removing $memory\frmctr1_num_params[0]$271 ($dff) from module reset.
Removing $memory\frmctr1_c[1]$266 ($dff) from module reset.
Removing $memory\frmctr1_c[0]$264 ($dff) from module reset.
Replaced 7 DFF cells.

2.29.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \reset..
Removed 0 unused cells and 15 unused wires.
<suppressed ~1 debug messages>

2.29.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module reset.

2.29.9. Rerunning OPT passes. (Maybe there is more to do..)

2.29.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \reset..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~12 debug messages>

2.29.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \reset.
    Consolidated identical input bits for $mux cell $memory\frmctr1_c$rdmux[0][0][0]$268:
      Old ports: A=8'10110001, B=8'00000000, Y=$memrd$\frmctr1_c$frmctr1.v:111$15_DATA
      New ports: A=1'1, B=1'0, Y=$memrd$\frmctr1_c$frmctr1.v:111$15_DATA [0]
      New connections: $memrd$\frmctr1_c$frmctr1.v:111$15_DATA [7:1] = { $memrd$\frmctr1_c$frmctr1.v:111$15_DATA [0] 1'0 $memrd$\frmctr1_c$frmctr1.v:111$15_DATA [0] $memrd$\frmctr1_c$frmctr1.v:111$15_DATA [0] 3'000 }
    Consolidated identical input bits for $mux cell $memory\frmctr1_num_params$rdmux[0][0][0]$275:
      Old ports: A=8'00000011, B=8'00000000, Y=$memrd$\frmctr1_num_params$frmctr1.v:196$28_DATA
      New ports: A=1'1, B=1'0, Y=$memrd$\frmctr1_num_params$frmctr1.v:196$28_DATA [0]
      New connections: $memrd$\frmctr1_num_params$frmctr1.v:196$28_DATA [7:1] = { 6'000000 $memrd$\frmctr1_num_params$frmctr1.v:196$28_DATA [0] }
    Consolidated identical input bits for $mux cell $memory\frmctr1_p$rdmux[0][1][0]$287:
      Old ports: A=8'00000101, B=8'00111100, Y=$memory\frmctr1_p$rdmux[0][0][0]$a$285
      New ports: A=2'01, B=2'10, Y={ $memory\frmctr1_p$rdmux[0][0][0]$a$285 [3] $memory\frmctr1_p$rdmux[0][0][0]$a$285 [0] }
      New connections: { $memory\frmctr1_p$rdmux[0][0][0]$a$285 [7:4] $memory\frmctr1_p$rdmux[0][0][0]$a$285 [2:1] } = { 2'00 $memory\frmctr1_p$rdmux[0][0][0]$a$285 [3] $memory\frmctr1_p$rdmux[0][0][0]$a$285 [3] 2'10 }
    Consolidated identical input bits for $mux cell $memory\frmctr1_p$rdmux[0][1][1]$290:
      Old ports: A=8'00111100, B=8'xxxxxxxx, Y=$memory\frmctr1_p$rdmux[0][0][0]$b$286
      New ports: A=2'10, B=2'xx, Y={ $memory\frmctr1_p$rdmux[0][0][0]$b$286 [2] $memory\frmctr1_p$rdmux[0][0][0]$b$286 [0] }
      New connections: { $memory\frmctr1_p$rdmux[0][0][0]$b$286 [7:3] $memory\frmctr1_p$rdmux[0][0][0]$b$286 [1] } = { $memory\frmctr1_p$rdmux[0][0][0]$b$286 [0] $memory\frmctr1_p$rdmux[0][0][0]$b$286 [0] $memory\frmctr1_p$rdmux[0][0][0]$b$286 [2] $memory\frmctr1_p$rdmux[0][0][0]$b$286 [2] $memory\frmctr1_p$rdmux[0][0][0]$b$286 [2] $memory\frmctr1_p$rdmux[0][0][0]$b$286 [0] }
  Optimizing cells in module \reset.
    Consolidated identical input bits for $mux cell $memory\frmctr1_p$rdmux[0][0][0]$284:
      Old ports: A=$memory\frmctr1_p$rdmux[0][0][0]$a$285, B=$memory\frmctr1_p$rdmux[0][0][0]$b$286, Y=$memrd$\frmctr1_p$frmctr1.v:200$30_DATA
      New ports: A={ $memory\frmctr1_p$rdmux[0][0][0]$a$285 [3] 2'10 $memory\frmctr1_p$rdmux[0][0][0]$a$285 [0] }, B={ $memory\frmctr1_p$rdmux[0][0][0]$b$286 [2] $memory\frmctr1_p$rdmux[0][0][0]$b$286 [2] $memory\frmctr1_p$rdmux[0][0][0]$b$286 [0] $memory\frmctr1_p$rdmux[0][0][0]$b$286 [0] }, Y=$memrd$\frmctr1_p$frmctr1.v:200$30_DATA [3:0]
      New connections: $memrd$\frmctr1_p$frmctr1.v:200$30_DATA [7:4] = { $memrd$\frmctr1_p$frmctr1.v:200$30_DATA [1] $memrd$\frmctr1_p$frmctr1.v:200$30_DATA [1] $memrd$\frmctr1_p$frmctr1.v:200$30_DATA [3] $memrd$\frmctr1_p$frmctr1.v:200$30_DATA [3] }
  Optimizing cells in module \reset.
Performed a total of 5 changes.

2.29.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\reset'.
Removed a total of 0 cells.

2.29.13. Executing OPT_RMDFF pass (remove dff with constant values).

2.29.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \reset..

2.29.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module reset.
<suppressed ~1 debug messages>

2.29.16. Rerunning OPT passes. (Maybe there is more to do..)

2.29.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \reset..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~12 debug messages>

2.29.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \reset.
Performed a total of 0 changes.

2.29.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\reset'.
Removed a total of 0 cells.

2.29.20. Executing OPT_RMDFF pass (remove dff with constant values).

2.29.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \reset..

2.29.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module reset.

2.29.23. Finished OPT passes. (There is nothing left to do.)

2.30. Executing TECHMAP pass (map to technology primitives).

2.30.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

2.30.2. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/arith_map.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/arith_map.v' to AST representation.
Generating RTLIL representation for module `\_80_ice40_alu'.
Successfully finished Verilog frontend.

2.30.3. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $not.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=8\B_WIDTH=1\Y_WIDTH=8 for cells of type $alu.
Using extmapper simplemap for cells of type $logic_not.
Using template $paramod$constmap:ee5af906ae0d3d414c6a0471604c553ef70c8e09$paramod$1297efc30c1e19551d1f4e269f2cbfa7dd15f801\_90_shift_shiftx for cells of type $shiftx.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=3\B_WIDTH=1\Y_WIDTH=3 for cells of type $alu.
Using extmapper simplemap for cells of type $mux.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=1\Y_WIDTH=1 for cells of type $alu.
Using template $paramod\_90_pmux\WIDTH=8\S_WIDTH=2 for cells of type $pmux.
Using extmapper simplemap for cells of type $reduce_or.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=2\Y_WIDTH=2 for cells of type $alu.
Using extmapper simplemap for cells of type $lut.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=7\B_WIDTH=16\Y_WIDTH=16 for cells of type $alu.
Using extmapper simplemap for cells of type $eq.
Using template $paramod\_90_pmux\WIDTH=16\S_WIDTH=3 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=6\S_WIDTH=12 for cells of type $pmux.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $reduce_and.
Using template $paramod\_90_pmux\WIDTH=1\S_WIDTH=2 for cells of type $pmux.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=16\B_WIDTH=16\Y_WIDTH=16 for cells of type $alu.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=16\Y_WIDTH=16 for cells of type $alu.
Using template $paramod\_90_pmux\WIDTH=1\S_WIDTH=3 for cells of type $pmux.
Using extmapper simplemap for cells of type $dff.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $pos.
Using extmapper simplemap for cells of type $and.
Using template $paramod\_90_lcu\WIDTH=1 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=2 for cells of type $lcu.
No more expansions possible.
<suppressed ~683 debug messages>

2.31. Executing ICE40_OPT pass (performing simple optimizations).

2.31.1. Running ICE40 specific optimizations.

2.31.2. Executing OPT_EXPR pass (perform const folding).
Optimizing module reset.
<suppressed ~369 debug messages>

2.31.3. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\reset'.
<suppressed ~240 debug messages>
Removed a total of 80 cells.

2.31.4. Executing OPT_RMDFF pass (remove dff with constant values).

2.31.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \reset..
Removed 58 unused cells and 438 unused wires.
<suppressed ~59 debug messages>

2.31.6. Rerunning OPT passes. (Removed registers in this run.)

2.31.7. Running ICE40 specific optimizations.
Optimized away SB_CARRY cell reset.$auto$alumacc.cc:474:replace_alu$218.slice[0].carry: CO=$auto$alumacc.cc:474:replace_alu$218.BB [0]
Optimized away SB_CARRY cell reset.$auto$alumacc.cc:474:replace_alu$231.slice[0].carry: CO=1'1
Optimized away SB_CARRY cell reset.$auto$alumacc.cc:474:replace_alu$240.slice[0].carry: CO=\delay [0]
Optimized away SB_CARRY cell reset.$auto$alumacc.cc:474:replace_alu$249.slice[0].carry: CO=\bit_counter [0]
Optimized away SB_CARRY cell reset.$auto$alumacc.cc:474:replace_alu$255.slice[0].carry: CO=\params_left [0]
Mapping SB_LUT4 cell reset.$auto$alumacc.cc:474:replace_alu$240.slice[1].adder back to logic.
Mapping SB_LUT4 cell reset.$auto$alumacc.cc:474:replace_alu$249.slice[1].adder back to logic.
Mapping SB_LUT4 cell reset.$auto$alumacc.cc:474:replace_alu$255.slice[1].adder back to logic.

2.31.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module reset.
<suppressed ~37 debug messages>

2.31.9. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\reset'.
<suppressed ~9 debug messages>
Removed a total of 3 cells.

2.31.10. Executing OPT_RMDFF pass (remove dff with constant values).

2.31.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \reset..
Removed 0 unused cells and 8 unused wires.
<suppressed ~1 debug messages>

2.31.12. Rerunning OPT passes. (Removed registers in this run.)

2.31.13. Running ICE40 specific optimizations.
Optimized away SB_CARRY cell reset.$auto$alumacc.cc:474:replace_alu$231.slice[1].carry: CO=1'1

2.31.14. Executing OPT_EXPR pass (perform const folding).
Optimizing module reset.

2.31.15. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\reset'.
Removed a total of 0 cells.

2.31.16. Executing OPT_RMDFF pass (remove dff with constant values).

2.31.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \reset..

2.31.18. Rerunning OPT passes. (Removed registers in this run.)

2.31.19. Running ICE40 specific optimizations.
Optimized away SB_CARRY cell reset.$auto$alumacc.cc:474:replace_alu$231.slice[2].carry: CO=1'1

2.31.20. Executing OPT_EXPR pass (perform const folding).
Optimizing module reset.

2.31.21. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\reset'.
Removed a total of 0 cells.

2.31.22. Executing OPT_RMDFF pass (remove dff with constant values).

2.31.23. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \reset..

2.31.24. Rerunning OPT passes. (Removed registers in this run.)

2.31.25. Running ICE40 specific optimizations.
Optimized away SB_CARRY cell reset.$auto$alumacc.cc:474:replace_alu$231.slice[3].carry: CO=1'1

2.31.26. Executing OPT_EXPR pass (perform const folding).
Optimizing module reset.

2.31.27. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\reset'.
Removed a total of 0 cells.

2.31.28. Executing OPT_RMDFF pass (remove dff with constant values).

2.31.29. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \reset..

2.31.30. Rerunning OPT passes. (Removed registers in this run.)

2.31.31. Running ICE40 specific optimizations.
Optimized away SB_CARRY cell reset.$auto$alumacc.cc:474:replace_alu$231.slice[4].carry: CO=1'1

2.31.32. Executing OPT_EXPR pass (perform const folding).
Optimizing module reset.

2.31.33. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\reset'.
Removed a total of 0 cells.

2.31.34. Executing OPT_RMDFF pass (remove dff with constant values).

2.31.35. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \reset..

2.31.36. Rerunning OPT passes. (Removed registers in this run.)

2.31.37. Running ICE40 specific optimizations.
Optimized away SB_CARRY cell reset.$auto$alumacc.cc:474:replace_alu$231.slice[5].carry: CO=\delay [5]

2.31.38. Executing OPT_EXPR pass (perform const folding).
Optimizing module reset.

2.31.39. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\reset'.
Removed a total of 0 cells.

2.31.40. Executing OPT_RMDFF pass (remove dff with constant values).

2.31.41. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \reset..

2.31.42. Rerunning OPT passes. (Removed registers in this run.)

2.31.43. Running ICE40 specific optimizations.

2.31.44. Executing OPT_EXPR pass (perform const folding).
Optimizing module reset.

2.31.45. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\reset'.
Removed a total of 0 cells.

2.31.46. Executing OPT_RMDFF pass (remove dff with constant values).

2.31.47. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \reset..

2.31.48. Finished OPT passes. (There is nothing left to do.)

2.32. Executing DFFSR2DFF pass (mapping DFFSR cells to simpler FFs).

2.33. Executing DFF2DFFE pass (transform $dff to $dffe where applicable).
Selected cell types for direct conversion:
  $_DFF_PP1_ -> $__DFFE_PP1
  $_DFF_PP0_ -> $__DFFE_PP0
  $_DFF_PN1_ -> $__DFFE_PN1
  $_DFF_PN0_ -> $__DFFE_PN0
  $_DFF_NP1_ -> $__DFFE_NP1
  $_DFF_NP0_ -> $__DFFE_NP0
  $_DFF_NN1_ -> $__DFFE_NN1
  $_DFF_NN0_ -> $__DFFE_NN0
  $_DFF_N_ -> $_DFFE_NP_
  $_DFF_P_ -> $_DFFE_PP_
Transforming FF to FF+Enable cells in module reset:
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$886 to $_DFFE_PP_ for $0\rst[0:0] -> \rst.
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$887 to $_DFFE_PP_ for $0\dc[0:0] -> \dc.
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$888 to $_DFFE_PP_ for $0\mosi[0:0] -> \mosi.
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$889 to $_DFFE_PP_ for $0\cs[0:0] -> \cs.
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$890 to $_DFFE_PP_ for $0\state[5:0] [0] -> \state [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$891 to $_DFFE_PP_ for $0\state[5:0] [1] -> \state [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$892 to $_DFFE_PP_ for $0\state[5:0] [2] -> \state [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$893 to $_DFFE_PP_ for $0\state[5:0] [3] -> \state [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$894 to $_DFFE_PP_ for $0\state[5:0] [4] -> \state [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$895 to $_DFFE_PP_ for $0\state[5:0] [5] -> \state [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$896 to $_DFFE_PP_ for $0\delay[15:0] [0] -> \delay [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$897 to $_DFFE_PP_ for $0\delay[15:0] [1] -> \delay [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$898 to $_DFFE_PP_ for $0\delay[15:0] [2] -> \delay [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$899 to $_DFFE_PP_ for $0\delay[15:0] [3] -> \delay [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$900 to $_DFFE_PP_ for $0\delay[15:0] [4] -> \delay [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$901 to $_DFFE_PP_ for $0\delay[15:0] [5] -> \delay [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$902 to $_DFFE_PP_ for $0\delay[15:0] [6] -> \delay [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$903 to $_DFFE_PP_ for $0\delay[15:0] [7] -> \delay [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$904 to $_DFFE_PP_ for $0\delay[15:0] [8] -> \delay [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$905 to $_DFFE_PP_ for $0\delay[15:0] [9] -> \delay [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$906 to $_DFFE_PP_ for $0\delay[15:0] [10] -> \delay [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$907 to $_DFFE_PP_ for $0\delay[15:0] [11] -> \delay [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$908 to $_DFFE_PP_ for $0\delay[15:0] [12] -> \delay [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$909 to $_DFFE_PP_ for $0\delay[15:0] [13] -> \delay [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$910 to $_DFFE_PP_ for $0\delay[15:0] [14] -> \delay [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$911 to $_DFFE_PP_ for $0\delay[15:0] [15] -> \delay [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$912 to $_DFFE_PP_ for $0\data[7:0] [0] -> \data [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$913 to $_DFFE_PP_ for $0\data[7:0] [1] -> \data [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$914 to $_DFFE_PP_ for $0\data[7:0] [2] -> \data [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$915 to $_DFFE_PP_ for $0\data[7:0] [3] -> \data [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$916 to $_DFFE_PP_ for $0\data[7:0] [4] -> \data [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$917 to $_DFFE_PP_ for $0\data[7:0] [5] -> \data [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$918 to $_DFFE_PP_ for $0\data[7:0] [6] -> \data [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$919 to $_DFFE_PP_ for $0\data[7:0] [7] -> \data [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$920 to $_DFFE_PP_ for $0\bit_counter[2:0] [0] -> \bit_counter [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$921 to $_DFFE_PP_ for $0\bit_counter[2:0] [1] -> \bit_counter [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$922 to $_DFFE_PP_ for $0\bit_counter[2:0] [2] -> \bit_counter [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$923 to $_DFFE_PP_ for $0\cmd_counter[0:0] -> \cmd_counter.
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$924 to $_DFFE_PP_ for $0\param_counter[1:0] [0] -> \param_counter [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$925 to $_DFFE_PP_ for $0\param_counter[1:0] [1] -> \param_counter [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$926 to $_DFFE_PP_ for $0\params_left[7:0] [0] -> \params_left [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$927 to $_DFFE_PP_ for $0\params_left[7:0] [1] -> \params_left [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$928 to $_DFFE_PP_ for $0\params_left[7:0] [2] -> \params_left [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$929 to $_DFFE_PP_ for $0\params_left[7:0] [3] -> \params_left [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$930 to $_DFFE_PP_ for $0\params_left[7:0] [4] -> \params_left [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$931 to $_DFFE_PP_ for $0\params_left[7:0] [5] -> \params_left [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$932 to $_DFFE_PP_ for $0\params_left[7:0] [6] -> \params_left [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$933 to $_DFFE_PP_ for $0\params_left[7:0] [7] -> \params_left [7].

2.34. Executing TECHMAP pass (map to technology primitives).

2.34.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/cells_map.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$__DFFE_NN0'.
Generating RTLIL representation for module `\$__DFFE_NN1'.
Generating RTLIL representation for module `\$__DFFE_PN0'.
Generating RTLIL representation for module `\$__DFFE_PN1'.
Generating RTLIL representation for module `\$__DFFE_NP0'.
Generating RTLIL representation for module `\$__DFFE_NP1'.
Generating RTLIL representation for module `\$__DFFE_PP0'.
Generating RTLIL representation for module `\$__DFFE_PP1'.
Successfully finished Verilog frontend.

2.34.2. Continuing TECHMAP pass.
Using template \$_DFFE_PP_ for cells of type $_DFFE_PP_.
Using template \$_DFF_P_ for cells of type $_DFF_P_.
No more expansions possible.
<suppressed ~49 debug messages>

2.35. Executing OPT_EXPR pass (perform const folding).
Optimizing module reset.
<suppressed ~94 debug messages>

2.36. Executing SIMPLEMAP pass (map simple cells to gate primitives).

2.37. Executing ICE40_FFINIT pass (implement FF init values).
Handling FF init values in reset.
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$934 (SB_DFF): \scl = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$893 (SB_DFFE): \state [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$892 (SB_DFFE): \state [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$926 (SB_DFFE): \params_left [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$891 (SB_DFFE): \state [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$894 (SB_DFFE): \state [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$895 (SB_DFFE): \state [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$890 (SB_DFFE): \state [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$912 (SB_DFFE): \data [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$913 (SB_DFFE): \data [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$914 (SB_DFFE): \data [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$915 (SB_DFFE): \data [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$916 (SB_DFFE): \data [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$917 (SB_DFFE): \data [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$918 (SB_DFFE): \data [6] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$919 (SB_DFFE): \data [7] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$921 (SB_DFFE): \bit_counter [1] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$928 (SB_DFFE): \params_left [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$923 (SB_DFFE): \cmd_counter = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$922 (SB_DFFE): \bit_counter [2] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$924 (SB_DFFE): \param_counter [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$925 (SB_DFFE): \param_counter [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$920 (SB_DFFE): \bit_counter [0] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$927 (SB_DFFE): \params_left [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$929 (SB_DFFE): \params_left [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$930 (SB_DFFE): \params_left [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$931 (SB_DFFE): \params_left [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$932 (SB_DFFE): \params_left [6] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$933 (SB_DFFE): \params_left [7] = 0

2.38. Executing ICE40_FFSSR pass (merge synchronous set/reset into FF cells).
Merging set/reset $_MUX_ cells into SB_FFs in reset.

2.39. Executing ICE40_OPT pass (performing simple optimizations).

2.39.1. Running ICE40 specific optimizations.

2.39.2. Executing OPT_EXPR pass (perform const folding).
Optimizing module reset.
<suppressed ~60 debug messages>

2.39.3. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\reset'.
<suppressed ~18 debug messages>
Removed a total of 6 cells.

2.39.4. Executing OPT_RMDFF pass (remove dff with constant values).

2.39.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \reset..
Removed 0 unused cells and 329 unused wires.
<suppressed ~1 debug messages>

2.39.6. Rerunning OPT passes. (Removed registers in this run.)

2.39.7. Running ICE40 specific optimizations.

2.39.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module reset.

2.39.9. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\reset'.
Removed a total of 0 cells.

2.39.10. Executing OPT_RMDFF pass (remove dff with constant values).

2.39.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \reset..

2.39.12. Finished OPT passes. (There is nothing left to do.)

2.40. Executing TECHMAP pass (map to technology primitives).

2.40.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/latches_map.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/latches_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Successfully finished Verilog frontend.

2.40.2. Continuing TECHMAP pass.
No more expansions possible.

2.41. Executing ABC pass (technology mapping using ABC).

2.41.1. Extracting gate netlist of module `\reset' to `<abc-temp-dir>/input.blif'..
Extracted 373 gates and 449 wires to a netlist network with 74 inputs and 79 outputs.

2.41.1.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + lutpack -S 1 
ABC: + dress 
ABC: Total number of equiv classes                =     104.
ABC: Participating nodes from both networks       =     247.
ABC: Participating nodes from the first network   =     105. (  78.36 % of nodes)
ABC: Participating nodes from the second network  =     142. ( 105.97 % of nodes)
ABC: Node pairs (any polarity)                    =     105. (  78.36 % of names can be moved)
ABC: Node pairs (same polarity)                   =     100. (  74.63 % of names can be moved)
ABC: Total runtime =     0.06 sec
ABC: + write_blif <abc-temp-dir>/output.blif 

2.41.1.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:      262
ABC RESULTS:        internal signals:      296
ABC RESULTS:           input signals:       74
ABC RESULTS:          output signals:       79
Removing temp directory.
Removed 0 unused cells and 228 unused wires.

2.42. Executing TECHMAP pass (map to technology primitives).

2.42.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/cells_map.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$__DFFE_NN0'.
Generating RTLIL representation for module `\$__DFFE_NN1'.
Generating RTLIL representation for module `\$__DFFE_PN0'.
Generating RTLIL representation for module `\$__DFFE_PN1'.
Generating RTLIL representation for module `\$__DFFE_NP0'.
Generating RTLIL representation for module `\$__DFFE_NP1'.
Generating RTLIL representation for module `\$__DFFE_PP0'.
Generating RTLIL representation for module `\$__DFFE_PP1'.
Generating RTLIL representation for module `\$lut'.
Successfully finished Verilog frontend.

2.42.2. Continuing TECHMAP pass.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111100000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11100000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111110000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=1\LUT=2'01 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00000111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000111100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111010000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111110110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100111110100000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111110000001010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000110000001010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100101000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000111000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111111111000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011000000111011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1101011100000011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111011111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000000111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000111110001000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0111000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011111111111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011010100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1110001100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111100010001000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11111000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000011100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11111110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1110111111111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111100010000 for cells of type $lut.
No more expansions possible.
<suppressed ~648 debug messages>
Removed 0 unused cells and 262 unused wires.

2.43. Executing HIERARCHY pass (managing design hierarchy).

2.43.1. Analyzing design hierarchy..
Top module:  \reset

2.43.2. Analyzing design hierarchy..
Top module:  \reset
Removed 0 unused modules.

2.44. Printing statistics.

=== reset ===

   Number of wires:                152
   Number of wire bits:            329
   Number of public wires:          25
   Number of public wire bits:     111
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                250
     SB_CARRY                       46
     SB_DFF                          1
     SB_DFFE                        48
     SB_LUT4                       155

2.45. Executing CHECK pass (checking for obvious problems).
checking module reset..
found and reported 0 problems.

2.46. Executing BLIF backend.

2.47. Executing JSON backend.

End of script. Logfile hash: 4ca5eb5d63
CPU: user 1.58s system 0.05s, MEM: 46.47 MB total, 40.90 MB resident
Yosys 0.9 (git sha1 1979e0b)
Time spent: 17% 28x opt_clean (0 sec), 17% 28x opt_expr (0 sec), ...
