
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2019  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9 (git sha1 1979e0b)


-- Parsing `demo.v' using frontend `verilog' --

1. Executing Verilog-2005 frontend: demo.v
Parsing Verilog input from `demo.v' to AST representation.
Generating RTLIL representation for module `\demo'.
Successfully finished Verilog frontend.

-- Running command `synth_ice40 -json demo.json -blif demo.blif' --

2. Executing SYNTH_ICE40 pass.

2.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/cells_sim.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\SB_IO'.
Generating RTLIL representation for module `\SB_GB_IO'.
Generating RTLIL representation for module `\SB_GB'.
Generating RTLIL representation for module `\SB_LUT4'.
Generating RTLIL representation for module `\SB_CARRY'.
Generating RTLIL representation for module `\SB_DFF'.
Generating RTLIL representation for module `\SB_DFFE'.
Generating RTLIL representation for module `\SB_DFFSR'.
Generating RTLIL representation for module `\SB_DFFR'.
Generating RTLIL representation for module `\SB_DFFSS'.
Generating RTLIL representation for module `\SB_DFFS'.
Generating RTLIL representation for module `\SB_DFFESR'.
Generating RTLIL representation for module `\SB_DFFER'.
Generating RTLIL representation for module `\SB_DFFESS'.
Generating RTLIL representation for module `\SB_DFFES'.
Generating RTLIL representation for module `\SB_DFFN'.
Generating RTLIL representation for module `\SB_DFFNE'.
Generating RTLIL representation for module `\SB_DFFNSR'.
Generating RTLIL representation for module `\SB_DFFNR'.
Generating RTLIL representation for module `\SB_DFFNSS'.
Generating RTLIL representation for module `\SB_DFFNS'.
Generating RTLIL representation for module `\SB_DFFNESR'.
Generating RTLIL representation for module `\SB_DFFNER'.
Generating RTLIL representation for module `\SB_DFFNESS'.
Generating RTLIL representation for module `\SB_DFFNES'.
Generating RTLIL representation for module `\SB_RAM40_4K'.
Generating RTLIL representation for module `\SB_RAM40_4KNR'.
Generating RTLIL representation for module `\SB_RAM40_4KNW'.
Generating RTLIL representation for module `\SB_RAM40_4KNRNW'.
Generating RTLIL representation for module `\ICESTORM_LC'.
Generating RTLIL representation for module `\SB_PLL40_CORE'.
Generating RTLIL representation for module `\SB_PLL40_PAD'.
Generating RTLIL representation for module `\SB_PLL40_2_PAD'.
Generating RTLIL representation for module `\SB_PLL40_2F_CORE'.
Generating RTLIL representation for module `\SB_PLL40_2F_PAD'.
Generating RTLIL representation for module `\SB_WARMBOOT'.
Generating RTLIL representation for module `\SB_SPRAM256KA'.
Generating RTLIL representation for module `\SB_HFOSC'.
Generating RTLIL representation for module `\SB_LFOSC'.
Generating RTLIL representation for module `\SB_RGBA_DRV'.
Generating RTLIL representation for module `\SB_LED_DRV_CUR'.
Generating RTLIL representation for module `\SB_RGB_DRV'.
Generating RTLIL representation for module `\SB_I2C'.
Generating RTLIL representation for module `\SB_SPI'.
Generating RTLIL representation for module `\SB_LEDDA_IP'.
Generating RTLIL representation for module `\SB_FILTER_50NS'.
Generating RTLIL representation for module `\SB_IO_I3C'.
Generating RTLIL representation for module `\SB_IO_OD'.
Generating RTLIL representation for module `\SB_MAC16'.
Successfully finished Verilog frontend.

2.2. Executing HIERARCHY pass (managing design hierarchy).

2.2.1. Finding top of design hierarchy..
root of   0 design levels: demo                
Automatically selected demo as design top module.

2.2.2. Analyzing design hierarchy..
Top module:  \demo

2.2.3. Analyzing design hierarchy..
Top module:  \demo
Removed 0 unused modules.

2.3. Executing PROC pass (convert processes to netlists).

2.3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

2.3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 35 switch rules as full_case in process $proc$demo.v:229$140 in module demo.
Removed a total of 0 dead cases.

2.3.3. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\demo.$proc$demo.v:66$376'.
  Set init value: \scl = 1'1
  Set init value: \state = 6'000000
  Set init value: \data = 8'00000000
  Set init value: \bit_counter = 3'111
  Set init value: \pixel_data = 16'0000000000000000
  Set init value: \pixel_bit_counter = 4'1111
  Set init value: \cmd_counter = 5'00000
  Set init value: \param_counter = 7'0000000
  Set init value: \params_left = 14'00000000000000

2.3.4. Executing PROC_ARST pass (detect async resets in processes).

2.3.5. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\demo.$proc$demo.v:66$376'.
     1/283: $1\pixel_bit_counter[3:0]
     2/283: $1\pixel_data[15:0]
     3/283: $1\bit_counter[2:0]
     4/283: $1\data[7:0]
     5/283: $1\params_left[13:0]
     6/283: $1\param_counter[6:0]
     7/283: $0$memwr$\params$demo.v:209$137_DATA[7:0]$650
     8/283: $0$memwr$\params$demo.v:209$137_ADDR[31:0]$649
     9/283: $0$memwr$\params$demo.v:208$136_DATA[7:0]$648
    10/283: $0$memwr$\params$demo.v:208$136_ADDR[31:0]$647
    11/283: $0$memwr$\params$demo.v:207$135_DATA[7:0]$646
    12/283: $0$memwr$\params$demo.v:207$135_ADDR[31:0]$645
    13/283: $0$memwr$\params$demo.v:206$134_DATA[7:0]$644
    14/283: $0$memwr$\params$demo.v:206$134_ADDR[31:0]$643
    15/283: $0$memwr$\params$demo.v:205$133_DATA[7:0]$642
    16/283: $0$memwr$\params$demo.v:205$133_ADDR[31:0]$641
    17/283: $0$memwr$\params$demo.v:204$132_DATA[7:0]$640
    18/283: $0$memwr$\params$demo.v:204$132_ADDR[31:0]$639
    19/283: $0$memwr$\params$demo.v:203$131_DATA[7:0]$638
    20/283: $0$memwr$\params$demo.v:203$131_ADDR[31:0]$637
    21/283: $0$memwr$\params$demo.v:202$130_DATA[7:0]$636
    22/283: $0$memwr$\params$demo.v:202$130_ADDR[31:0]$635
    23/283: $0$memwr$\params$demo.v:201$129_DATA[7:0]$634
    24/283: $0$memwr$\params$demo.v:201$129_ADDR[31:0]$633
    25/283: $0$memwr$\params$demo.v:200$128_DATA[7:0]$632
    26/283: $0$memwr$\params$demo.v:200$128_ADDR[31:0]$631
    27/283: $0$memwr$\params$demo.v:199$127_DATA[7:0]$630
    28/283: $0$memwr$\params$demo.v:199$127_ADDR[31:0]$629
    29/283: $0$memwr$\params$demo.v:198$126_DATA[7:0]$628
    30/283: $0$memwr$\params$demo.v:198$126_ADDR[31:0]$627
    31/283: $0$memwr$\params$demo.v:197$125_DATA[7:0]$626
    32/283: $0$memwr$\params$demo.v:197$125_ADDR[31:0]$625
    33/283: $0$memwr$\params$demo.v:196$124_DATA[7:0]$624
    34/283: $0$memwr$\params$demo.v:196$124_ADDR[31:0]$623
    35/283: $0$memwr$\params$demo.v:195$123_DATA[7:0]$622
    36/283: $0$memwr$\params$demo.v:195$123_ADDR[31:0]$621
    37/283: $0$memwr$\params$demo.v:194$122_DATA[7:0]$620
    38/283: $0$memwr$\params$demo.v:194$122_ADDR[31:0]$619
    39/283: $0$memwr$\params$demo.v:193$121_DATA[7:0]$618
    40/283: $0$memwr$\params$demo.v:193$121_ADDR[31:0]$617
    41/283: $0$memwr$\params$demo.v:192$120_DATA[7:0]$616
    42/283: $0$memwr$\params$demo.v:192$120_ADDR[31:0]$615
    43/283: $0$memwr$\params$demo.v:191$119_DATA[7:0]$614
    44/283: $0$memwr$\params$demo.v:191$119_ADDR[31:0]$613
    45/283: $0$memwr$\params$demo.v:190$118_DATA[7:0]$612
    46/283: $0$memwr$\params$demo.v:190$118_ADDR[31:0]$611
    47/283: $0$memwr$\params$demo.v:189$117_DATA[7:0]$610
    48/283: $0$memwr$\params$demo.v:189$117_ADDR[31:0]$609
    49/283: $0$memwr$\params$demo.v:188$116_DATA[7:0]$608
    50/283: $0$memwr$\params$demo.v:188$116_ADDR[31:0]$607
    51/283: $0$memwr$\params$demo.v:187$115_DATA[7:0]$606
    52/283: $0$memwr$\params$demo.v:187$115_ADDR[31:0]$605
    53/283: $0$memwr$\params$demo.v:186$114_DATA[7:0]$604
    54/283: $0$memwr$\params$demo.v:186$114_ADDR[31:0]$603
    55/283: $0$memwr$\params$demo.v:185$113_DATA[7:0]$602
    56/283: $0$memwr$\params$demo.v:185$113_ADDR[31:0]$601
    57/283: $0$memwr$\params$demo.v:184$112_DATA[7:0]$600
    58/283: $0$memwr$\params$demo.v:184$112_ADDR[31:0]$599
    59/283: $0$memwr$\params$demo.v:183$111_DATA[7:0]$598
    60/283: $0$memwr$\params$demo.v:183$111_ADDR[31:0]$597
    61/283: $0$memwr$\params$demo.v:182$110_DATA[7:0]$596
    62/283: $0$memwr$\params$demo.v:182$110_ADDR[31:0]$595
    63/283: $0$memwr$\params$demo.v:181$109_DATA[7:0]$594
    64/283: $0$memwr$\params$demo.v:181$109_ADDR[31:0]$593
    65/283: $0$memwr$\params$demo.v:180$108_DATA[7:0]$592
    66/283: $0$memwr$\params$demo.v:180$108_ADDR[31:0]$591
    67/283: $0$memwr$\params$demo.v:179$107_DATA[7:0]$590
    68/283: $0$memwr$\params$demo.v:179$107_ADDR[31:0]$589
    69/283: $0$memwr$\params$demo.v:178$106_DATA[7:0]$588
    70/283: $0$memwr$\params$demo.v:178$106_ADDR[31:0]$587
    71/283: $0$memwr$\params$demo.v:177$105_DATA[7:0]$586
    72/283: $0$memwr$\params$demo.v:177$105_ADDR[31:0]$585
    73/283: $0$memwr$\params$demo.v:176$104_DATA[7:0]$584
    74/283: $0$memwr$\params$demo.v:176$104_ADDR[31:0]$583
    75/283: $0$memwr$\params$demo.v:175$103_DATA[7:0]$582
    76/283: $0$memwr$\params$demo.v:175$103_ADDR[31:0]$581
    77/283: $0$memwr$\params$demo.v:174$102_DATA[7:0]$580
    78/283: $0$memwr$\params$demo.v:174$102_ADDR[31:0]$579
    79/283: $0$memwr$\params$demo.v:173$101_DATA[7:0]$578
    80/283: $0$memwr$\params$demo.v:173$101_ADDR[31:0]$577
    81/283: $0$memwr$\params$demo.v:172$100_DATA[7:0]$576
    82/283: $0$memwr$\params$demo.v:172$100_ADDR[31:0]$575
    83/283: $0$memwr$\params$demo.v:171$99_DATA[7:0]$574
    84/283: $0$memwr$\params$demo.v:171$99_ADDR[31:0]$573
    85/283: $0$memwr$\params$demo.v:170$98_DATA[7:0]$572
    86/283: $0$memwr$\params$demo.v:170$98_ADDR[31:0]$571
    87/283: $0$memwr$\params$demo.v:169$97_DATA[7:0]$570
    88/283: $0$memwr$\params$demo.v:169$97_ADDR[31:0]$569
    89/283: $0$memwr$\params$demo.v:168$96_DATA[7:0]$568
    90/283: $0$memwr$\params$demo.v:168$96_ADDR[31:0]$567
    91/283: $0$memwr$\params$demo.v:167$95_DATA[7:0]$566
    92/283: $0$memwr$\params$demo.v:167$95_ADDR[31:0]$565
    93/283: $0$memwr$\params$demo.v:166$94_DATA[7:0]$564
    94/283: $0$memwr$\params$demo.v:166$94_ADDR[31:0]$563
    95/283: $0$memwr$\params$demo.v:165$93_DATA[7:0]$562
    96/283: $0$memwr$\params$demo.v:165$93_ADDR[31:0]$561
    97/283: $0$memwr$\params$demo.v:164$92_DATA[7:0]$560
    98/283: $0$memwr$\params$demo.v:164$92_ADDR[31:0]$559
    99/283: $0$memwr$\params$demo.v:163$91_DATA[7:0]$558
   100/283: $0$memwr$\params$demo.v:163$91_ADDR[31:0]$557
   101/283: $0$memwr$\params$demo.v:162$90_DATA[7:0]$556
   102/283: $0$memwr$\params$demo.v:162$90_ADDR[31:0]$555
   103/283: $0$memwr$\params$demo.v:161$89_DATA[7:0]$554
   104/283: $0$memwr$\params$demo.v:161$89_ADDR[31:0]$553
   105/283: $0$memwr$\params$demo.v:160$88_DATA[7:0]$552
   106/283: $0$memwr$\params$demo.v:160$88_ADDR[31:0]$551
   107/283: $0$memwr$\params$demo.v:159$87_DATA[7:0]$550
   108/283: $0$memwr$\params$demo.v:159$87_ADDR[31:0]$549
   109/283: $0$memwr$\params$demo.v:158$86_DATA[7:0]$548
   110/283: $0$memwr$\params$demo.v:158$86_ADDR[31:0]$547
   111/283: $0$memwr$\params$demo.v:157$85_DATA[7:0]$546
   112/283: $0$memwr$\params$demo.v:157$85_ADDR[31:0]$545
   113/283: $0$memwr$\params$demo.v:156$84_DATA[7:0]$544
   114/283: $0$memwr$\params$demo.v:156$84_ADDR[31:0]$543
   115/283: $0$memwr$\params$demo.v:155$83_DATA[7:0]$542
   116/283: $0$memwr$\params$demo.v:155$83_ADDR[31:0]$541
   117/283: $0$memwr$\params$demo.v:154$82_DATA[7:0]$540
   118/283: $0$memwr$\params$demo.v:154$82_ADDR[31:0]$539
   119/283: $0$memwr$\params$demo.v:153$81_DATA[7:0]$538
   120/283: $0$memwr$\params$demo.v:153$81_ADDR[31:0]$537
   121/283: $0$memwr$\params$demo.v:152$80_DATA[7:0]$536
   122/283: $0$memwr$\params$demo.v:152$80_ADDR[31:0]$535
   123/283: $0$memwr$\params$demo.v:151$79_DATA[7:0]$534
   124/283: $0$memwr$\params$demo.v:151$79_ADDR[31:0]$533
   125/283: $0$memwr$\params$demo.v:150$78_DATA[7:0]$532
   126/283: $0$memwr$\params$demo.v:150$78_ADDR[31:0]$531
   127/283: $0$memwr$\params$demo.v:149$77_DATA[7:0]$530
   128/283: $0$memwr$\params$demo.v:149$77_ADDR[31:0]$529
   129/283: $0$memwr$\params$demo.v:148$76_DATA[7:0]$528
   130/283: $0$memwr$\params$demo.v:148$76_ADDR[31:0]$527
   131/283: $0$memwr$\params$demo.v:147$75_DATA[7:0]$526
   132/283: $0$memwr$\params$demo.v:147$75_ADDR[31:0]$525
   133/283: $0$memwr$\params$demo.v:146$74_DATA[7:0]$524
   134/283: $0$memwr$\params$demo.v:146$74_ADDR[31:0]$523
   135/283: $0$memwr$\params$demo.v:145$73_DATA[7:0]$522
   136/283: $0$memwr$\params$demo.v:145$73_ADDR[31:0]$521
   137/283: $0$memwr$\params$demo.v:144$72_DATA[7:0]$520
   138/283: $0$memwr$\params$demo.v:144$72_ADDR[31:0]$519
   139/283: $0$memwr$\params$demo.v:143$71_DATA[7:0]$518
   140/283: $0$memwr$\params$demo.v:143$71_ADDR[31:0]$517
   141/283: $0$memwr$\params$demo.v:142$70_DATA[7:0]$516
   142/283: $0$memwr$\params$demo.v:142$70_ADDR[31:0]$515
   143/283: $0$memwr$\params$demo.v:141$69_DATA[7:0]$514
   144/283: $0$memwr$\params$demo.v:141$69_ADDR[31:0]$513
   145/283: $0$memwr$\params$demo.v:140$68_DATA[7:0]$512
   146/283: $0$memwr$\params$demo.v:140$68_ADDR[31:0]$511
   147/283: $0$memwr$\params$demo.v:139$67_DATA[7:0]$510
   148/283: $0$memwr$\params$demo.v:139$67_ADDR[31:0]$509
   149/283: $0$memwr$\params$demo.v:138$66_DATA[7:0]$508
   150/283: $0$memwr$\params$demo.v:138$66_ADDR[31:0]$507
   151/283: $0$memwr$\params$demo.v:137$65_DATA[7:0]$506
   152/283: $0$memwr$\params$demo.v:137$65_ADDR[31:0]$505
   153/283: $0$memwr$\params$demo.v:136$64_DATA[7:0]$504
   154/283: $0$memwr$\params$demo.v:136$64_ADDR[31:0]$503
   155/283: $0$memwr$\params$demo.v:135$63_DATA[7:0]$502
   156/283: $0$memwr$\params$demo.v:135$63_ADDR[31:0]$501
   157/283: $0$memwr$\params$demo.v:134$62_DATA[7:0]$500
   158/283: $0$memwr$\params$demo.v:134$62_ADDR[31:0]$499
   159/283: $0$memwr$\params$demo.v:133$61_DATA[7:0]$498
   160/283: $0$memwr$\params$demo.v:133$61_ADDR[31:0]$497
   161/283: $0$memwr$\params$demo.v:132$60_DATA[7:0]$496
   162/283: $0$memwr$\params$demo.v:132$60_ADDR[31:0]$495
   163/283: $0$memwr$\params$demo.v:131$59_DATA[7:0]$494
   164/283: $0$memwr$\params$demo.v:131$59_ADDR[31:0]$493
   165/283: $0$memwr$\params$demo.v:130$58_DATA[7:0]$492
   166/283: $0$memwr$\params$demo.v:130$58_ADDR[31:0]$491
   167/283: $0$memwr$\params$demo.v:129$57_DATA[7:0]$490
   168/283: $0$memwr$\params$demo.v:129$57_ADDR[31:0]$489
   169/283: $0$memwr$\params$demo.v:128$56_DATA[7:0]$488
   170/283: $0$memwr$\params$demo.v:128$56_ADDR[31:0]$487
   171/283: $0$memwr$\params$demo.v:127$55_DATA[7:0]$486
   172/283: $0$memwr$\params$demo.v:127$55_ADDR[31:0]$485
   173/283: $0$memwr$\params$demo.v:126$54_DATA[7:0]$484
   174/283: $0$memwr$\params$demo.v:126$54_ADDR[31:0]$483
   175/283: $1\cmd_counter[4:0]
   176/283: $0$memwr$\num_params$demo.v:123$53_DATA[13:0]$482
   177/283: $0$memwr$\num_params$demo.v:123$53_ADDR[31:0]$481
   178/283: $0$memwr$\num_params$demo.v:122$52_DATA[13:0]$480
   179/283: $0$memwr$\num_params$demo.v:122$52_ADDR[31:0]$479
   180/283: $0$memwr$\num_params$demo.v:121$51_DATA[13:0]$478
   181/283: $0$memwr$\num_params$demo.v:121$51_ADDR[31:0]$477
   182/283: $0$memwr$\num_params$demo.v:120$50_DATA[13:0]$476
   183/283: $0$memwr$\num_params$demo.v:120$50_ADDR[31:0]$475
   184/283: $0$memwr$\num_params$demo.v:119$49_DATA[13:0]$474
   185/283: $0$memwr$\num_params$demo.v:119$49_ADDR[31:0]$473
   186/283: $0$memwr$\num_params$demo.v:118$48_DATA[13:0]$472
   187/283: $0$memwr$\num_params$demo.v:118$48_ADDR[31:0]$471
   188/283: $0$memwr$\num_params$demo.v:117$47_DATA[13:0]$470
   189/283: $0$memwr$\num_params$demo.v:117$47_ADDR[31:0]$469
   190/283: $0$memwr$\num_params$demo.v:116$46_DATA[13:0]$468
   191/283: $0$memwr$\num_params$demo.v:116$46_ADDR[31:0]$467
   192/283: $0$memwr$\num_params$demo.v:115$45_DATA[13:0]$466
   193/283: $0$memwr$\num_params$demo.v:115$45_ADDR[31:0]$465
   194/283: $0$memwr$\num_params$demo.v:114$44_DATA[13:0]$464
   195/283: $0$memwr$\num_params$demo.v:114$44_ADDR[31:0]$463
   196/283: $0$memwr$\num_params$demo.v:113$43_DATA[13:0]$462
   197/283: $0$memwr$\num_params$demo.v:113$43_ADDR[31:0]$461
   198/283: $0$memwr$\num_params$demo.v:112$42_DATA[13:0]$460
   199/283: $0$memwr$\num_params$demo.v:112$42_ADDR[31:0]$459
   200/283: $0$memwr$\num_params$demo.v:111$41_DATA[13:0]$458
   201/283: $0$memwr$\num_params$demo.v:111$41_ADDR[31:0]$457
   202/283: $0$memwr$\num_params$demo.v:110$40_DATA[13:0]$456
   203/283: $0$memwr$\num_params$demo.v:110$40_ADDR[31:0]$455
   204/283: $0$memwr$\num_params$demo.v:109$39_DATA[13:0]$454
   205/283: $0$memwr$\num_params$demo.v:109$39_ADDR[31:0]$453
   206/283: $0$memwr$\num_params$demo.v:108$38_DATA[13:0]$452
   207/283: $0$memwr$\num_params$demo.v:108$38_ADDR[31:0]$451
   208/283: $0$memwr$\num_params$demo.v:107$37_DATA[13:0]$450
   209/283: $0$memwr$\num_params$demo.v:107$37_ADDR[31:0]$449
   210/283: $0$memwr$\num_params$demo.v:106$36_DATA[13:0]$448
   211/283: $0$memwr$\num_params$demo.v:106$36_ADDR[31:0]$447
   212/283: $0$memwr$\num_params$demo.v:105$35_DATA[13:0]$446
   213/283: $0$memwr$\num_params$demo.v:105$35_ADDR[31:0]$445
   214/283: $0$memwr$\num_params$demo.v:104$34_DATA[13:0]$444
   215/283: $0$memwr$\num_params$demo.v:104$34_ADDR[31:0]$443
   216/283: $0$memwr$\num_params$demo.v:103$33_DATA[13:0]$442
   217/283: $0$memwr$\num_params$demo.v:103$33_ADDR[31:0]$441
   218/283: $0$memwr$\num_params$demo.v:102$32_DATA[13:0]$440
   219/283: $0$memwr$\num_params$demo.v:102$32_ADDR[31:0]$439
   220/283: $0$memwr$\num_params$demo.v:101$31_DATA[13:0]$438
   221/283: $0$memwr$\num_params$demo.v:101$31_ADDR[31:0]$437
   222/283: $0$memwr$\num_params$demo.v:100$30_DATA[13:0]$436
   223/283: $0$memwr$\num_params$demo.v:100$30_ADDR[31:0]$435
   224/283: $0$memwr$\num_params$demo.v:99$29_DATA[13:0]$434
   225/283: $0$memwr$\num_params$demo.v:99$29_ADDR[31:0]$433
   226/283: $0$memwr$\num_params$demo.v:98$28_DATA[13:0]$432
   227/283: $0$memwr$\num_params$demo.v:98$28_ADDR[31:0]$431
   228/283: $0$memwr$\cmd$demo.v:97$27_DATA[7:0]$430
   229/283: $0$memwr$\cmd$demo.v:97$27_ADDR[31:0]$429
   230/283: $0$memwr$\cmd$demo.v:96$26_DATA[7:0]$428
   231/283: $0$memwr$\cmd$demo.v:96$26_ADDR[31:0]$427
   232/283: $0$memwr$\cmd$demo.v:95$25_DATA[7:0]$426
   233/283: $0$memwr$\cmd$demo.v:95$25_ADDR[31:0]$425
   234/283: $0$memwr$\cmd$demo.v:94$24_DATA[7:0]$424
   235/283: $0$memwr$\cmd$demo.v:94$24_ADDR[31:0]$423
   236/283: $0$memwr$\cmd$demo.v:93$23_DATA[7:0]$422
   237/283: $0$memwr$\cmd$demo.v:93$23_ADDR[31:0]$421
   238/283: $0$memwr$\cmd$demo.v:92$22_DATA[7:0]$420
   239/283: $0$memwr$\cmd$demo.v:92$22_ADDR[31:0]$419
   240/283: $0$memwr$\cmd$demo.v:91$21_DATA[7:0]$418
   241/283: $0$memwr$\cmd$demo.v:91$21_ADDR[31:0]$417
   242/283: $0$memwr$\cmd$demo.v:90$20_DATA[7:0]$416
   243/283: $0$memwr$\cmd$demo.v:90$20_ADDR[31:0]$415
   244/283: $0$memwr$\cmd$demo.v:89$19_DATA[7:0]$414
   245/283: $0$memwr$\cmd$demo.v:89$19_ADDR[31:0]$413
   246/283: $0$memwr$\cmd$demo.v:88$18_DATA[7:0]$412
   247/283: $0$memwr$\cmd$demo.v:88$18_ADDR[31:0]$411
   248/283: $0$memwr$\cmd$demo.v:87$17_DATA[7:0]$410
   249/283: $0$memwr$\cmd$demo.v:87$17_ADDR[31:0]$409
   250/283: $0$memwr$\cmd$demo.v:86$16_DATA[7:0]$408
   251/283: $0$memwr$\cmd$demo.v:86$16_ADDR[31:0]$407
   252/283: $0$memwr$\cmd$demo.v:85$15_DATA[7:0]$406
   253/283: $0$memwr$\cmd$demo.v:85$15_ADDR[31:0]$405
   254/283: $0$memwr$\cmd$demo.v:84$14_DATA[7:0]$404
   255/283: $0$memwr$\cmd$demo.v:84$14_ADDR[31:0]$403
   256/283: $0$memwr$\cmd$demo.v:83$13_DATA[7:0]$402
   257/283: $0$memwr$\cmd$demo.v:83$13_ADDR[31:0]$401
   258/283: $0$memwr$\cmd$demo.v:82$12_DATA[7:0]$400
   259/283: $0$memwr$\cmd$demo.v:82$12_ADDR[31:0]$399
   260/283: $0$memwr$\cmd$demo.v:81$11_DATA[7:0]$398
   261/283: $0$memwr$\cmd$demo.v:81$11_ADDR[31:0]$397
   262/283: $0$memwr$\cmd$demo.v:80$10_DATA[7:0]$396
   263/283: $0$memwr$\cmd$demo.v:80$10_ADDR[31:0]$395
   264/283: $0$memwr$\cmd$demo.v:79$9_DATA[7:0]$394
   265/283: $0$memwr$\cmd$demo.v:79$9_ADDR[31:0]$393
   266/283: $0$memwr$\cmd$demo.v:78$8_DATA[7:0]$392
   267/283: $0$memwr$\cmd$demo.v:78$8_ADDR[31:0]$391
   268/283: $0$memwr$\cmd$demo.v:77$7_DATA[7:0]$390
   269/283: $0$memwr$\cmd$demo.v:77$7_ADDR[31:0]$389
   270/283: $0$memwr$\cmd$demo.v:76$6_DATA[7:0]$388
   271/283: $0$memwr$\cmd$demo.v:76$6_ADDR[31:0]$387
   272/283: $0$memwr$\cmd$demo.v:75$5_DATA[7:0]$386
   273/283: $0$memwr$\cmd$demo.v:75$5_ADDR[31:0]$385
   274/283: $0$memwr$\cmd$demo.v:74$4_DATA[7:0]$384
   275/283: $0$memwr$\cmd$demo.v:74$4_ADDR[31:0]$383
   276/283: $0$memwr$\cmd$demo.v:73$3_DATA[7:0]$382
   277/283: $0$memwr$\cmd$demo.v:73$3_ADDR[31:0]$381
   278/283: $0$memwr$\cmd$demo.v:72$2_DATA[7:0]$380
   279/283: $0$memwr$\cmd$demo.v:72$2_ADDR[31:0]$379
   280/283: $0$memwr$\cmd$demo.v:71$1_DATA[7:0]$378
   281/283: $0$memwr$\cmd$demo.v:71$1_ADDR[31:0]$377
   282/283: $1\scl[0:0]
   283/283: $1\state[5:0]
Creating decoders for process `\demo.$proc$demo.v:229$140'.
     1/14: $0\pixel_data[15:0] [15:8]
     2/14: $0\pixel_data[15:0] [7:0]
     3/14: $0\param_counter[6:0]
     4/14: $0\cmd_counter[4:0]
     5/14: $0\pixel_bit_counter[3:0]
     6/14: $0\params_left[13:0]
     7/14: $0\bit_counter[2:0]
     8/14: $0\data[7:0]
     9/14: $0\delay[15:0]
    10/14: $0\state[5:0]
    11/14: $0\cs[0:0]
    12/14: $0\mosi[0:0]
    13/14: $0\dc[0:0]
    14/14: $0\rst[0:0]
Creating decoders for process `\demo.$proc$demo.v:222$138'.
     1/1: $0\scl[0:0]

2.3.6. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:71$1_ADDR' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:71$1_DATA' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:72$2_ADDR' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:72$2_DATA' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:73$3_ADDR' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:73$3_DATA' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:74$4_ADDR' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:74$4_DATA' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:75$5_ADDR' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:75$5_DATA' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:76$6_ADDR' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:76$6_DATA' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:77$7_ADDR' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:77$7_DATA' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:78$8_ADDR' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:78$8_DATA' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:79$9_ADDR' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:79$9_DATA' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:80$10_ADDR' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:80$10_DATA' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:81$11_ADDR' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:81$11_DATA' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:82$12_ADDR' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:82$12_DATA' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:83$13_ADDR' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:83$13_DATA' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:84$14_ADDR' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:84$14_DATA' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:85$15_ADDR' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:85$15_DATA' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:86$16_ADDR' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:86$16_DATA' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:87$17_ADDR' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:87$17_DATA' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:88$18_ADDR' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:88$18_DATA' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:89$19_ADDR' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:89$19_DATA' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:90$20_ADDR' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:90$20_DATA' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:91$21_ADDR' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:91$21_DATA' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:92$22_ADDR' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:92$22_DATA' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:93$23_ADDR' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:93$23_DATA' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:94$24_ADDR' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:94$24_DATA' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:95$25_ADDR' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:95$25_DATA' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:96$26_ADDR' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:96$26_DATA' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:97$27_ADDR' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:97$27_DATA' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:98$28_ADDR' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:98$28_DATA' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:99$29_ADDR' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:99$29_DATA' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:100$30_ADDR' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:100$30_DATA' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:101$31_ADDR' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:101$31_DATA' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:102$32_ADDR' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:102$32_DATA' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:103$33_ADDR' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:103$33_DATA' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:104$34_ADDR' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:104$34_DATA' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:105$35_ADDR' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:105$35_DATA' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:106$36_ADDR' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:106$36_DATA' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:107$37_ADDR' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:107$37_DATA' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:108$38_ADDR' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:108$38_DATA' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:109$39_ADDR' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:109$39_DATA' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:110$40_ADDR' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:110$40_DATA' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:111$41_ADDR' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:111$41_DATA' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:112$42_ADDR' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:112$42_DATA' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:113$43_ADDR' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:113$43_DATA' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:114$44_ADDR' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:114$44_DATA' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:115$45_ADDR' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:115$45_DATA' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:116$46_ADDR' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:116$46_DATA' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:117$47_ADDR' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:117$47_DATA' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:118$48_ADDR' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:118$48_DATA' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:119$49_ADDR' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:119$49_DATA' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:120$50_ADDR' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:120$50_DATA' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:121$51_ADDR' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:121$51_DATA' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:122$52_ADDR' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:122$52_DATA' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:123$53_ADDR' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:123$53_DATA' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:126$54_ADDR' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:126$54_DATA' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:127$55_ADDR' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:127$55_DATA' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:128$56_ADDR' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:128$56_DATA' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:129$57_ADDR' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:129$57_DATA' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:130$58_ADDR' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:130$58_DATA' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:131$59_ADDR' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:131$59_DATA' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:132$60_ADDR' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:132$60_DATA' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:133$61_ADDR' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:133$61_DATA' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:134$62_ADDR' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:134$62_DATA' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:135$63_ADDR' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:135$63_DATA' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:136$64_ADDR' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:136$64_DATA' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:137$65_ADDR' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:137$65_DATA' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:138$66_ADDR' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:138$66_DATA' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:139$67_ADDR' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:139$67_DATA' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:140$68_ADDR' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:140$68_DATA' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:141$69_ADDR' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:141$69_DATA' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:142$70_ADDR' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:142$70_DATA' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:143$71_ADDR' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:143$71_DATA' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:144$72_ADDR' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:144$72_DATA' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:145$73_ADDR' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:145$73_DATA' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:146$74_ADDR' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:146$74_DATA' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:147$75_ADDR' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:147$75_DATA' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:148$76_ADDR' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:148$76_DATA' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:149$77_ADDR' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:149$77_DATA' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:150$78_ADDR' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:150$78_DATA' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:151$79_ADDR' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:151$79_DATA' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:152$80_ADDR' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:152$80_DATA' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:153$81_ADDR' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:153$81_DATA' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:154$82_ADDR' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:154$82_DATA' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:155$83_ADDR' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:155$83_DATA' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:156$84_ADDR' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:156$84_DATA' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:157$85_ADDR' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:157$85_DATA' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:158$86_ADDR' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:158$86_DATA' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:159$87_ADDR' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:159$87_DATA' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:160$88_ADDR' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:160$88_DATA' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:161$89_ADDR' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:161$89_DATA' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:162$90_ADDR' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:162$90_DATA' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:163$91_ADDR' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:163$91_DATA' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:164$92_ADDR' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:164$92_DATA' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:165$93_ADDR' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:165$93_DATA' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:166$94_ADDR' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:166$94_DATA' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:167$95_ADDR' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:167$95_DATA' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:168$96_ADDR' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:168$96_DATA' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:169$97_ADDR' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:169$97_DATA' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:170$98_ADDR' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:170$98_DATA' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:171$99_ADDR' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:171$99_DATA' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:172$100_ADDR' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:172$100_DATA' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:173$101_ADDR' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:173$101_DATA' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:174$102_ADDR' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:174$102_DATA' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:175$103_ADDR' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:175$103_DATA' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:176$104_ADDR' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:176$104_DATA' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:177$105_ADDR' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:177$105_DATA' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:178$106_ADDR' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:178$106_DATA' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:179$107_ADDR' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:179$107_DATA' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:180$108_ADDR' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:180$108_DATA' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:181$109_ADDR' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:181$109_DATA' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:182$110_ADDR' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:182$110_DATA' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:183$111_ADDR' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:183$111_DATA' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:184$112_ADDR' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:184$112_DATA' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:185$113_ADDR' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:185$113_DATA' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:186$114_ADDR' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:186$114_DATA' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:187$115_ADDR' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:187$115_DATA' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:188$116_ADDR' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:188$116_DATA' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:189$117_ADDR' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:189$117_DATA' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:190$118_ADDR' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:190$118_DATA' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:191$119_ADDR' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:191$119_DATA' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:192$120_ADDR' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:192$120_DATA' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:193$121_ADDR' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:193$121_DATA' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:194$122_ADDR' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:194$122_DATA' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:195$123_ADDR' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:195$123_DATA' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:196$124_ADDR' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:196$124_DATA' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:197$125_ADDR' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:197$125_DATA' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:198$126_ADDR' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:198$126_DATA' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:199$127_ADDR' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:199$127_DATA' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:200$128_ADDR' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:200$128_DATA' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:201$129_ADDR' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:201$129_DATA' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:202$130_ADDR' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:202$130_DATA' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:203$131_ADDR' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:203$131_DATA' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:204$132_ADDR' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:204$132_DATA' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:205$133_ADDR' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:205$133_DATA' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:206$134_ADDR' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:206$134_DATA' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:207$135_ADDR' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:207$135_DATA' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:208$136_ADDR' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:208$136_DATA' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:209$137_ADDR' from process `\demo.$proc$demo.v:66$376'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:209$137_DATA' from process `\demo.$proc$demo.v:66$376'.

2.3.7. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\demo.\rst' using process `\demo.$proc$demo.v:229$140'.
  created $dff cell `$procdff$1037' with positive edge clock.
Creating register for signal `\demo.\dc' using process `\demo.$proc$demo.v:229$140'.
  created $dff cell `$procdff$1038' with positive edge clock.
Creating register for signal `\demo.\mosi' using process `\demo.$proc$demo.v:229$140'.
  created $dff cell `$procdff$1039' with positive edge clock.
Creating register for signal `\demo.\cs' using process `\demo.$proc$demo.v:229$140'.
  created $dff cell `$procdff$1040' with positive edge clock.
Creating register for signal `\demo.\state' using process `\demo.$proc$demo.v:229$140'.
  created $dff cell `$procdff$1041' with positive edge clock.
Creating register for signal `\demo.\delay' using process `\demo.$proc$demo.v:229$140'.
  created $dff cell `$procdff$1042' with positive edge clock.
Creating register for signal `\demo.\data' using process `\demo.$proc$demo.v:229$140'.
  created $dff cell `$procdff$1043' with positive edge clock.
Creating register for signal `\demo.\bit_counter' using process `\demo.$proc$demo.v:229$140'.
  created $dff cell `$procdff$1044' with positive edge clock.
Creating register for signal `\demo.\pixel_data' using process `\demo.$proc$demo.v:229$140'.
  created $dff cell `$procdff$1045' with positive edge clock.
Creating register for signal `\demo.\pixel_bit_counter' using process `\demo.$proc$demo.v:229$140'.
  created $dff cell `$procdff$1046' with positive edge clock.
Creating register for signal `\demo.\cmd_counter' using process `\demo.$proc$demo.v:229$140'.
  created $dff cell `$procdff$1047' with positive edge clock.
Creating register for signal `\demo.\param_counter' using process `\demo.$proc$demo.v:229$140'.
  created $dff cell `$procdff$1048' with positive edge clock.
Creating register for signal `\demo.\params_left' using process `\demo.$proc$demo.v:229$140'.
  created $dff cell `$procdff$1049' with positive edge clock.
Creating register for signal `\demo.\scl' using process `\demo.$proc$demo.v:222$138'.
  created $dff cell `$procdff$1050' with positive edge clock.

2.3.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `demo.$proc$demo.v:66$376'.
Found and cleaned up 37 empty switches in `\demo.$proc$demo.v:229$140'.
Removing empty process `demo.$proc$demo.v:229$140'.
Removing empty process `demo.$proc$demo.v:222$138'.
Cleaned up 37 empty switches.

2.4. Executing FLATTEN pass (flatten design).
No more expansions possible.

2.5. Executing TRIBUF pass.

2.6. Executing DEMINOUT pass (demote inout ports to input or output).

2.7. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.
<suppressed ~16 debug messages>

2.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..
Removed 1 unused cells and 636 unused wires.
<suppressed ~2 debug messages>

2.9. Executing CHECK pass (checking for obvious problems).
checking module demo..
found and reported 0 problems.

2.10. Executing OPT pass (performing simple optimizations).

2.10.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.

2.10.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\demo'.
<suppressed ~267 debug messages>
Removed a total of 89 cells.

2.10.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \demo..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~14 debug messages>

2.10.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \demo.
    New ctrl vector for $pmux cell $procmux$1006: { $auto$opt_reduce.cc:132:opt_mux$1052 $procmux$1007_CMP }
    New ctrl vector for $pmux cell $procmux$970: { $procmux$920_CMP $auto$opt_reduce.cc:132:opt_mux$1054 }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$1051: { $procmux$1008_CMP $procmux$1009_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$1053: { $procmux$908_CMP $procmux$1009_CMP }
  Optimizing cells in module \demo.
Performed a total of 4 changes.

2.10.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\demo'.
<suppressed ~30 debug messages>
Removed a total of 10 cells.

2.10.6. Executing OPT_RMDFF pass (remove dff with constant values).

2.10.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..
Removed 0 unused cells and 99 unused wires.
<suppressed ~1 debug messages>

2.10.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.

2.10.9. Rerunning OPT passes. (Maybe there is more to do..)

2.10.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \demo..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~14 debug messages>

2.10.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \demo.
    New ctrl vector for $pmux cell $procmux$787: { $procmux$1009_CMP $procmux$1034_CMP $procmux$828_CMP $procmux$820_CMP $procmux$816_CMP $auto$opt_reduce.cc:132:opt_mux$1056 $procmux$788_CMP }
    New ctrl vector for $pmux cell $procmux$837: { $procmux$1009_CMP $procmux$1035_CMP $procmux$1034_CMP $procmux$828_CMP $procmux$714_CMP $procmux$824_CMP $procmux$820_CMP $procmux$1008_CMP $procmux$733_CMP $procmux$920_CMP $procmux$916_CMP $procmux$912_CMP $procmux$908_CMP $procmux$1007_CMP $procmux$663_CMP $procmux$816_CMP $auto$opt_reduce.cc:132:opt_mux$1060 $auto$opt_reduce.cc:132:opt_mux$1058 $procmux$788_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$1055: { $procmux$796_CMP $procmux$792_CMP $procmux$804_CMP $procmux$800_CMP $procmux$812_CMP $procmux$808_CMP $procmux$824_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$1057: { $procmux$792_CMP $procmux$800_CMP $procmux$808_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$1059: { $procmux$796_CMP $procmux$804_CMP $procmux$812_CMP }
  Optimizing cells in module \demo.
Performed a total of 5 changes.

2.10.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\demo'.
Removed a total of 0 cells.

2.10.13. Executing OPT_RMDFF pass (remove dff with constant values).

2.10.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..

2.10.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.

2.10.16. Rerunning OPT passes. (Maybe there is more to do..)

2.10.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \demo..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~14 debug messages>

2.10.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \demo.
Performed a total of 0 changes.

2.10.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\demo'.
Removed a total of 0 cells.

2.10.20. Executing OPT_RMDFF pass (remove dff with constant values).

2.10.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..

2.10.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.

2.10.23. Finished OPT passes. (There is nothing left to do.)

2.11. Executing WREDUCE pass (reducing word size of cells).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:71$239 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:72$240 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:73$241 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:74$242 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:75$243 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:76$244 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:77$245 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:78$246 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:79$247 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:80$248 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:81$249 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:82$250 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:83$251 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:84$252 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:85$253 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:86$254 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:87$255 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:88$256 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:89$257 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:90$258 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:91$259 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:92$260 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:93$261 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:94$262 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:95$263 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:96$264 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:97$265 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\num_params$demo.v:100$268 (num_params).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\num_params$demo.v:101$269 (num_params).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\num_params$demo.v:102$270 (num_params).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\num_params$demo.v:103$271 (num_params).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\num_params$demo.v:104$272 (num_params).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\num_params$demo.v:105$273 (num_params).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\num_params$demo.v:106$274 (num_params).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\num_params$demo.v:107$275 (num_params).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\num_params$demo.v:108$276 (num_params).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\num_params$demo.v:109$277 (num_params).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\num_params$demo.v:110$278 (num_params).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\num_params$demo.v:111$279 (num_params).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\num_params$demo.v:112$280 (num_params).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\num_params$demo.v:113$281 (num_params).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\num_params$demo.v:114$282 (num_params).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\num_params$demo.v:115$283 (num_params).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\num_params$demo.v:116$284 (num_params).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\num_params$demo.v:117$285 (num_params).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\num_params$demo.v:118$286 (num_params).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\num_params$demo.v:119$287 (num_params).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\num_params$demo.v:120$288 (num_params).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\num_params$demo.v:121$289 (num_params).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\num_params$demo.v:122$290 (num_params).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\num_params$demo.v:123$291 (num_params).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\num_params$demo.v:98$266 (num_params).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\num_params$demo.v:99$267 (num_params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:126$292 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:127$293 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:128$294 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:129$295 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:130$296 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:131$297 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:132$298 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:133$299 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:134$300 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:135$301 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:136$302 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:137$303 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:138$304 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:139$305 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:140$306 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:141$307 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:142$308 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:143$309 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:144$310 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:145$311 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:146$312 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:147$313 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:148$314 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:149$315 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:150$316 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:151$317 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:152$318 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:153$319 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:154$320 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:155$321 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:156$322 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:157$323 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:158$324 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:159$325 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:160$326 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:161$327 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:162$328 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:163$329 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:164$330 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:165$331 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:166$332 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:167$333 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:168$334 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:169$335 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:170$336 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:171$337 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:172$338 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:173$339 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:174$340 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:175$341 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:176$342 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:177$343 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:178$344 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:179$345 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:180$346 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:181$347 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:182$348 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:183$349 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:184$350 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:185$351 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:186$352 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:187$353 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:188$354 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:189$355 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:190$356 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:191$357 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:192$358 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:193$359 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:194$360 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:195$361 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:196$362 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:197$363 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:198$364 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:199$365 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:200$366 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:201$367 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:202$368 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:203$369 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:204$370 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:205$371 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:206$372 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:207$373 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:208$374 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:209$375 (params).
Removed top 1 bits (of 16) from port B of cell demo.$le$demo.v:273$143 ($le).
Removed top 1 bits (of 16) from port B of cell demo.$le$demo.v:257$141 ($le).
Removed top 15 bits (of 16) from port B of cell demo.$add$demo.v:259$142 ($add).
Removed top 4 bits (of 5) from port B of cell demo.$add$demo.v:295$148 ($add).
Removed top 6 bits (of 12) from port B of cell demo.$lt$demo.v:303$149 ($lt).
Removed top 3 bits (of 12) from port B of cell demo.$lt$demo.v:317$151 ($lt).
Removed top 4 bits (of 5) from port B of cell demo.$sub$demo.v:340$155 ($sub).
Removed top 3 bits (of 4) from port B of cell demo.$sub$demo.v:357$161 ($sub).
Removed top 2 bits (of 3) from port B of cell demo.$sub$demo.v:376$165 ($sub).
Removed top 2 bits (of 8) from port B of cell demo.$eq$demo.v:450$187 ($eq).
Removed top 2 bits (of 8) from port B of cell demo.$eq$demo.v:449$184 ($eq).
Removed top 3 bits (of 8) from port B of cell demo.$eq$demo.v:454$191 ($eq).
Removed top 2 bits (of 8) from port B of cell demo.$eq$demo.v:507$214 ($eq).
Removed top 6 bits (of 7) from port B of cell demo.$add$demo.v:525$220 ($add).
Removed top 13 bits (of 14) from port B of cell demo.$sub$demo.v:527$221 ($sub).
Removed top 5 bits (of 12) from port B of cell demo.$lt$demo.v:535$222 ($lt).
Removed top 1 bits (of 16) from port B of cell demo.$lt$demo.v:647$237 ($lt).
Removed top 2 bits (of 6) from port B of cell demo.$procmux$663_CMP0 ($eq).
Removed top 3 bits (of 6) from port B of cell demo.$procmux$714_CMP0 ($eq).
Removed top 3 bits (of 6) from port B of cell demo.$procmux$733_CMP0 ($eq).
Removed top 2 bits (of 6) from port B of cell demo.$procmux$788_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell demo.$procmux$792_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell demo.$procmux$796_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell demo.$procmux$800_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell demo.$procmux$804_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell demo.$procmux$808_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell demo.$procmux$812_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell demo.$procmux$816_CMP0 ($eq).
Removed top 2 bits (of 6) from port B of cell demo.$procmux$820_CMP0 ($eq).
Removed top 2 bits (of 6) from port B of cell demo.$procmux$824_CMP0 ($eq).
Removed top 4 bits (of 6) from port B of cell demo.$procmux$828_CMP0 ($eq).
Removed top 3 bits (of 6) from mux cell demo.$procmux$864 ($mux).
Removed top 2 bits (of 6) from mux cell demo.$procmux$871 ($mux).
Removed top 1 bits (of 6) from mux cell demo.$procmux$876 ($mux).
Removed top 1 bits (of 6) from mux cell demo.$procmux$879 ($mux).
Removed top 1 bits (of 6) from mux cell demo.$procmux$882 ($mux).
Removed top 1 bits (of 6) from mux cell demo.$procmux$885 ($mux).
Removed top 3 bits (of 6) from mux cell demo.$procmux$889 ($mux).
Removed top 1 bits (of 6) from mux cell demo.$procmux$892 ($mux).
Removed top 2 bits (of 6) from port B of cell demo.$procmux$908_CMP0 ($eq).
Removed top 5 bits (of 6) from mux cell demo.$procmux$910 ($mux).
Removed top 2 bits (of 6) from port B of cell demo.$procmux$912_CMP0 ($eq).
Removed top 2 bits (of 6) from mux cell demo.$procmux$914 ($mux).
Removed top 2 bits (of 6) from port B of cell demo.$procmux$916_CMP0 ($eq).
Removed top 2 bits (of 6) from mux cell demo.$procmux$918 ($mux).
Removed top 3 bits (of 6) from port B of cell demo.$procmux$920_CMP0 ($eq).
Removed top 4 bits (of 6) from mux cell demo.$procmux$922 ($mux).
Removed top 2 bits (of 6) from mux cell demo.$procmux$925 ($mux).
Removed top 4 bits (of 6) from mux cell demo.$procmux$929 ($mux).
Removed top 2 bits (of 6) from mux cell demo.$procmux$932 ($mux).
Removed top 5 bits (of 6) from mux cell demo.$procmux$947 ($mux).
Removed top 5 bits (of 6) from port B of cell demo.$procmux$1035_CMP0 ($eq).
Removed top 2 bits (of 6) from port B of cell demo.$procmux$1007_CMP0 ($eq).
Removed top 3 bits (of 6) from port B of cell demo.$procmux$1008_CMP0 ($eq).
Removed top 4 bits (of 6) from port B of cell demo.$procmux$1034_CMP0 ($eq).
Removed top 3 bits (of 6) from wire demo.$procmux$864_Y.
Removed top 2 bits (of 6) from wire demo.$procmux$871_Y.
Removed top 2 bits (of 6) from wire demo.$procmux$876_Y.
Removed top 1 bits (of 6) from wire demo.$procmux$879_Y.
Removed top 1 bits (of 6) from wire demo.$procmux$882_Y.
Removed top 1 bits (of 6) from wire demo.$procmux$885_Y.
Removed top 3 bits (of 6) from wire demo.$procmux$889_Y.
Removed top 1 bits (of 6) from wire demo.$procmux$892_Y.
Removed top 5 bits (of 6) from wire demo.$procmux$910_Y.
Removed top 2 bits (of 6) from wire demo.$procmux$914_Y.
Removed top 2 bits (of 6) from wire demo.$procmux$918_Y.
Removed top 4 bits (of 6) from wire demo.$procmux$922_Y.
Removed top 2 bits (of 6) from wire demo.$procmux$925_Y.
Removed top 4 bits (of 6) from wire demo.$procmux$929_Y.
Removed top 2 bits (of 6) from wire demo.$procmux$932_Y.
Removed top 5 bits (of 6) from wire demo.$procmux$947_Y.

2.12. Executing PEEPOPT pass (run peephole optimizers).

2.13. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..
Removed 0 unused cells and 16 unused wires.
<suppressed ~1 debug messages>

2.14. Executing SHARE pass (SAT-based resource sharing).
Found 4 cells in module demo that may be considered for resource sharing.
  Analyzing resource sharing options for $memrd$\params$demo.v:509$215 ($memrd):
    Found 1 activation_patterns using ctrl signal $procmux$663_CMP.
    No candidates found.
  Analyzing resource sharing options for $memrd$\num_params$demo.v:499$210 ($memrd):
    Found 1 activation_patterns using ctrl signal $procmux$1007_CMP.
    No candidates found.
  Analyzing resource sharing options for $memrd$\cmd$demo.v:340$154 ($memrd):
    Found 9 activation_patterns using ctrl signal { $procmux$908_CMP $procmux$733_CMP $procmux$663_CMP $logic_or$demo.v:450$188_Y $logic_or$demo.v:445$181_Y $eq$demo.v:440$174_Y $eq$demo.v:434$171_Y $eq$demo.v:430$170_Y \dc }.
    Found 1 candidates: $memrd$\cmd$demo.v:288$145
    Analyzing resource sharing with $memrd$\cmd$demo.v:288$145 ($memrd):
      Found 2 activation_patterns using ctrl signal { $procmux$714_CMP $eq$demo.v:288$146_Y }.
      Forbidden control signals for this pair of cells: { $eq$demo.v:454$191_Y $logic_or$demo.v:450$188_Y $logic_or$demo.v:445$181_Y $eq$demo.v:440$174_Y $logic_and$demo.v:340$157_Y $eq$demo.v:340$156_Y $eq$demo.v:288$146_Y }
      Activation pattern for cell $memrd$\cmd$demo.v:340$154: { $procmux$908_CMP $eq$demo.v:434$171_Y \dc } = 3'101
      Activation pattern for cell $memrd$\cmd$demo.v:340$154: { $procmux$908_CMP $eq$demo.v:434$171_Y $eq$demo.v:430$170_Y \dc } = 4'1000
      Activation pattern for cell $memrd$\cmd$demo.v:340$154: $procmux$663_CMP = 1'1
      Activation pattern for cell $memrd$\cmd$demo.v:340$154: $procmux$733_CMP = 1'1
      Activation pattern for cell $memrd$\cmd$demo.v:288$145: $procmux$714_CMP = 1'1
      Adding exclusive control bits: $procmux$663_CMP vs. $procmux$714_CMP
      Adding exclusive control bits: $procmux$663_CMP vs. $procmux$908_CMP
      Adding exclusive control bits: $procmux$663_CMP vs. $procmux$733_CMP
      Adding exclusive control bits: $procmux$663_CMP vs. $procmux$714_CMP
      Adding exclusive control bits: $procmux$733_CMP vs. $procmux$908_CMP
      Adding exclusive control bits: $procmux$714_CMP vs. $procmux$908_CMP
      Adding exclusive control bits: $procmux$714_CMP vs. $procmux$733_CMP
      Size of SAT problem: 14 cells, 197 variables, 552 clauses
      According to the SAT solver this pair of cells can be shared.
      Activation signal for $memrd$\cmd$demo.v:288$145: $auto$share.cc:976:make_cell_activation_logic$1077
      New cell: $auto$share.cc:710:make_supercell$1079 ($memrd)
  Analyzing resource sharing options for $auto$share.cc:710:make_supercell$1079 ($memrd):
    Found 5 activation_patterns using ctrl signal { $procmux$908_CMP $procmux$733_CMP $procmux$714_CMP $procmux$663_CMP $eq$demo.v:434$171_Y $eq$demo.v:430$170_Y \dc }.
    No candidates found.
Removing 2 cells in module demo:
  Removing cell $memrd$\cmd$demo.v:288$145 ($memrd).
  Removing cell $memrd$\cmd$demo.v:340$154 ($memrd).

2.15. Executing TECHMAP pass (map to technology primitives).

2.15.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/cmp2lut.v
Parsing Verilog input from `/usr/bin/../share/yosys/cmp2lut.v' to AST representation.
Generating RTLIL representation for module `\_90_lut_cmp_'.
Successfully finished Verilog frontend.

2.15.2. Continuing TECHMAP pass.
Using template $paramod$968c93632f950ce0f306709fa121c1e7a868940c\_90_lut_cmp_ for cells of type $eq.
Using template $paramod$77ad031fce233083715243f95e3cd2547d931e42\_90_lut_cmp_ for cells of type $eq.
Using template $paramod$b014af9c344b7c6e328d7df54af43048a86ccf04\_90_lut_cmp_ for cells of type $eq.
No more expansions possible.
<suppressed ~672 debug messages>

2.16. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.

2.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..
Removed 0 unused cells and 10 unused wires.
<suppressed ~2 debug messages>

2.18. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module demo:
  creating $macc model for $add$demo.v:259$142 ($add).
  creating $macc model for $add$demo.v:295$148 ($add).
  creating $macc model for $add$demo.v:525$220 ($add).
  creating $macc model for $sub$demo.v:340$155 ($sub).
  creating $macc model for $sub$demo.v:357$161 ($sub).
  creating $macc model for $sub$demo.v:376$165 ($sub).
  creating $macc model for $sub$demo.v:527$221 ($sub).
  creating $alu model for $macc $sub$demo.v:527$221.
  creating $alu model for $macc $sub$demo.v:376$165.
  creating $alu model for $macc $sub$demo.v:357$161.
  creating $alu model for $macc $sub$demo.v:340$155.
  creating $alu model for $macc $add$demo.v:525$220.
  creating $alu model for $macc $add$demo.v:295$148.
  creating $alu model for $macc $add$demo.v:259$142.
  creating $alu model for $le$demo.v:257$141 ($le): new $alu
  creating $alu model for $le$demo.v:273$143 ($le): new $alu
  creating $alu model for $lt$demo.v:303$149 ($lt): new $alu
  creating $alu model for $lt$demo.v:317$151 ($lt): new $alu
  creating $alu model for $lt$demo.v:535$222 ($lt): new $alu
  creating $alu model for $lt$demo.v:647$237 ($lt): new $alu
  creating $alu cell for $lt$demo.v:647$237: $auto$alumacc.cc:474:replace_alu$1095
  creating $alu cell for $lt$demo.v:535$222: $auto$alumacc.cc:474:replace_alu$1106
  creating $alu cell for $lt$demo.v:317$151: $auto$alumacc.cc:474:replace_alu$1117
  creating $alu cell for $lt$demo.v:303$149: $auto$alumacc.cc:474:replace_alu$1128
  creating $alu cell for $le$demo.v:273$143: $auto$alumacc.cc:474:replace_alu$1139
  creating $alu cell for $le$demo.v:257$141: $auto$alumacc.cc:474:replace_alu$1152
  creating $alu cell for $add$demo.v:259$142: $auto$alumacc.cc:474:replace_alu$1165
  creating $alu cell for $add$demo.v:295$148: $auto$alumacc.cc:474:replace_alu$1168
  creating $alu cell for $add$demo.v:525$220: $auto$alumacc.cc:474:replace_alu$1171
  creating $alu cell for $sub$demo.v:340$155: $auto$alumacc.cc:474:replace_alu$1174
  creating $alu cell for $sub$demo.v:357$161: $auto$alumacc.cc:474:replace_alu$1177
  creating $alu cell for $sub$demo.v:376$165: $auto$alumacc.cc:474:replace_alu$1180
  creating $alu cell for $sub$demo.v:527$221: $auto$alumacc.cc:474:replace_alu$1183
  created 13 $alu and 0 $macc cells.

2.19. Executing OPT pass (performing simple optimizations).

2.19.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.
<suppressed ~10 debug messages>

2.19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\demo'.
Removed a total of 0 cells.

2.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \demo..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~15 debug messages>

2.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \demo.
    New input vector for $reduce_or cell $auto$alumacc.cc:509:replace_alu$1150: { $auto$rtlil.cc:1832:Not$1149 $auto$rtlil.cc:1835:ReduceAnd$1143 }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$1098: { $auto$alumacc.cc:490:replace_alu$1096 [0] $auto$alumacc.cc:490:replace_alu$1096 [1] $auto$alumacc.cc:490:replace_alu$1096 [2] $auto$alumacc.cc:490:replace_alu$1096 [3] $auto$alumacc.cc:490:replace_alu$1096 [4] $auto$alumacc.cc:490:replace_alu$1096 [5] $auto$alumacc.cc:490:replace_alu$1096 [6] $auto$alumacc.cc:490:replace_alu$1096 [7] $auto$alumacc.cc:490:replace_alu$1096 [8] $auto$alumacc.cc:490:replace_alu$1096 [9] $auto$alumacc.cc:490:replace_alu$1096 [10] $auto$alumacc.cc:490:replace_alu$1096 [11] $auto$alumacc.cc:490:replace_alu$1096 [12] $auto$alumacc.cc:490:replace_alu$1096 [13] $auto$alumacc.cc:490:replace_alu$1096 [14] $auto$alumacc.cc:490:replace_alu$1096 [15] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$1109: { $auto$alumacc.cc:490:replace_alu$1107 [0] $auto$alumacc.cc:490:replace_alu$1107 [1] $auto$alumacc.cc:490:replace_alu$1107 [2] $auto$alumacc.cc:490:replace_alu$1107 [3] $auto$alumacc.cc:490:replace_alu$1107 [4] $auto$alumacc.cc:490:replace_alu$1107 [5] $auto$alumacc.cc:490:replace_alu$1107 [6] $auto$alumacc.cc:490:replace_alu$1107 [7] $auto$alumacc.cc:490:replace_alu$1107 [8] $auto$alumacc.cc:490:replace_alu$1107 [9] $auto$alumacc.cc:490:replace_alu$1107 [10] $auto$alumacc.cc:490:replace_alu$1107 [11] $auto$alumacc.cc:490:replace_alu$1107 [12] $auto$alumacc.cc:490:replace_alu$1107 [13] $auto$alumacc.cc:490:replace_alu$1107 [14] $auto$alumacc.cc:490:replace_alu$1107 [15] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$1120: { $auto$alumacc.cc:490:replace_alu$1118 [0] $auto$alumacc.cc:490:replace_alu$1118 [1] $auto$alumacc.cc:490:replace_alu$1118 [2] $auto$alumacc.cc:490:replace_alu$1118 [3] $auto$alumacc.cc:490:replace_alu$1118 [4] $auto$alumacc.cc:490:replace_alu$1118 [5] $auto$alumacc.cc:490:replace_alu$1118 [6] $auto$alumacc.cc:490:replace_alu$1118 [7] $auto$alumacc.cc:490:replace_alu$1118 [8] $auto$alumacc.cc:490:replace_alu$1118 [9] $auto$alumacc.cc:490:replace_alu$1118 [10] $auto$alumacc.cc:490:replace_alu$1118 [11] $auto$alumacc.cc:490:replace_alu$1118 [12] $auto$alumacc.cc:490:replace_alu$1118 [13] $auto$alumacc.cc:490:replace_alu$1118 [14] $auto$alumacc.cc:490:replace_alu$1118 [15] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$1131: { $auto$alumacc.cc:490:replace_alu$1129 [0] $auto$alumacc.cc:490:replace_alu$1129 [1] $auto$alumacc.cc:490:replace_alu$1129 [2] $auto$alumacc.cc:490:replace_alu$1129 [3] $auto$alumacc.cc:490:replace_alu$1129 [4] $auto$alumacc.cc:490:replace_alu$1129 [5] $auto$alumacc.cc:490:replace_alu$1129 [6] $auto$alumacc.cc:490:replace_alu$1129 [7] $auto$alumacc.cc:490:replace_alu$1129 [8] $auto$alumacc.cc:490:replace_alu$1129 [9] $auto$alumacc.cc:490:replace_alu$1129 [10] $auto$alumacc.cc:490:replace_alu$1129 [11] $auto$alumacc.cc:490:replace_alu$1129 [12] $auto$alumacc.cc:490:replace_alu$1129 [13] $auto$alumacc.cc:490:replace_alu$1129 [14] $auto$alumacc.cc:490:replace_alu$1129 [15] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$1142: { $auto$alumacc.cc:490:replace_alu$1140 [0] $auto$alumacc.cc:490:replace_alu$1140 [1] $auto$alumacc.cc:490:replace_alu$1140 [2] $auto$alumacc.cc:490:replace_alu$1140 [3] $auto$alumacc.cc:490:replace_alu$1140 [4] $auto$alumacc.cc:490:replace_alu$1140 [5] $auto$alumacc.cc:490:replace_alu$1140 [6] $auto$alumacc.cc:490:replace_alu$1140 [7] $auto$alumacc.cc:490:replace_alu$1140 [8] $auto$alumacc.cc:490:replace_alu$1140 [9] $auto$alumacc.cc:490:replace_alu$1140 [10] $auto$alumacc.cc:490:replace_alu$1140 [11] $auto$alumacc.cc:490:replace_alu$1140 [12] $auto$alumacc.cc:490:replace_alu$1140 [13] $auto$alumacc.cc:490:replace_alu$1140 [14] $auto$alumacc.cc:490:replace_alu$1140 [15] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$1155: { $auto$alumacc.cc:490:replace_alu$1153 [0] $auto$alumacc.cc:490:replace_alu$1153 [1] $auto$alumacc.cc:490:replace_alu$1153 [2] $auto$alumacc.cc:490:replace_alu$1153 [3] $auto$alumacc.cc:490:replace_alu$1153 [4] $auto$alumacc.cc:490:replace_alu$1153 [5] $auto$alumacc.cc:490:replace_alu$1153 [6] $auto$alumacc.cc:490:replace_alu$1153 [7] $auto$alumacc.cc:490:replace_alu$1153 [8] $auto$alumacc.cc:490:replace_alu$1153 [9] $auto$alumacc.cc:490:replace_alu$1153 [10] $auto$alumacc.cc:490:replace_alu$1153 [11] $auto$alumacc.cc:490:replace_alu$1153 [12] $auto$alumacc.cc:490:replace_alu$1153 [13] $auto$alumacc.cc:490:replace_alu$1153 [14] $auto$alumacc.cc:490:replace_alu$1153 [15] }
  Optimizing cells in module \demo.
Performed a total of 7 changes.

2.19.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\demo'.
Removed a total of 0 cells.

2.19.6. Executing OPT_RMDFF pass (remove dff with constant values).

2.19.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..
Removed 4 unused cells and 10 unused wires.
<suppressed ~5 debug messages>

2.19.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.

2.19.9. Rerunning OPT passes. (Maybe there is more to do..)

2.19.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \demo..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~15 debug messages>

2.19.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \demo.
Performed a total of 0 changes.

2.19.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\demo'.
Removed a total of 0 cells.

2.19.13. Executing OPT_RMDFF pass (remove dff with constant values).

2.19.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..

2.19.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.

2.19.16. Finished OPT passes. (There is nothing left to do.)

2.20. Executing FSM pass (extract and optimize FSM).

2.20.1. Executing FSM_DETECT pass (finding FSMs in design).
Not marking demo.state as FSM state register:
    Register has an initialization value.

2.20.2. Executing FSM_EXTRACT pass (extracting FSM from design).

2.20.3. Executing FSM_OPT pass (simple optimizations of FSMs).

2.20.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..

2.20.5. Executing FSM_OPT pass (simple optimizations of FSMs).

2.20.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

2.20.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

2.20.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

2.21. Executing OPT pass (performing simple optimizations).

2.21.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.

2.21.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\demo'.
Removed a total of 0 cells.

2.21.3. Executing OPT_RMDFF pass (remove dff with constant values).

2.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..

2.21.5. Finished fast OPT passes.

2.22. Executing MEMORY pass.

2.22.1. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).
Checking cell `$auto$share.cc:710:make_supercell$1079' in module `\demo': no (compatible) $dff found.
Checking cell `$memrd$\num_params$demo.v:499$210' in module `\demo': no (compatible) $dff found.
Checking cell `$memrd$\params$demo.v:509$215' in module `\demo': no (compatible) $dff found.

2.22.2. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..

2.22.3. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

2.22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..

2.22.5. Executing MEMORY_COLLECT pass (generating $mem cells).
Collecting $memrd, $memwr and $meminit for memory `\cmd' in module `\demo':
  $meminit$\cmd$demo.v:71$239 ($meminit)
  $meminit$\cmd$demo.v:72$240 ($meminit)
  $meminit$\cmd$demo.v:73$241 ($meminit)
  $meminit$\cmd$demo.v:74$242 ($meminit)
  $meminit$\cmd$demo.v:75$243 ($meminit)
  $meminit$\cmd$demo.v:76$244 ($meminit)
  $meminit$\cmd$demo.v:77$245 ($meminit)
  $meminit$\cmd$demo.v:78$246 ($meminit)
  $meminit$\cmd$demo.v:79$247 ($meminit)
  $meminit$\cmd$demo.v:80$248 ($meminit)
  $meminit$\cmd$demo.v:81$249 ($meminit)
  $meminit$\cmd$demo.v:82$250 ($meminit)
  $meminit$\cmd$demo.v:83$251 ($meminit)
  $meminit$\cmd$demo.v:84$252 ($meminit)
  $meminit$\cmd$demo.v:85$253 ($meminit)
  $meminit$\cmd$demo.v:86$254 ($meminit)
  $meminit$\cmd$demo.v:87$255 ($meminit)
  $meminit$\cmd$demo.v:88$256 ($meminit)
  $meminit$\cmd$demo.v:89$257 ($meminit)
  $meminit$\cmd$demo.v:90$258 ($meminit)
  $meminit$\cmd$demo.v:91$259 ($meminit)
  $meminit$\cmd$demo.v:92$260 ($meminit)
  $meminit$\cmd$demo.v:93$261 ($meminit)
  $meminit$\cmd$demo.v:94$262 ($meminit)
  $meminit$\cmd$demo.v:95$263 ($meminit)
  $meminit$\cmd$demo.v:96$264 ($meminit)
  $meminit$\cmd$demo.v:97$265 ($meminit)
  $auto$share.cc:710:make_supercell$1079 ($memrd)
Collecting $memrd, $memwr and $meminit for memory `\num_params' in module `\demo':
  $meminit$\num_params$demo.v:98$266 ($meminit)
  $meminit$\num_params$demo.v:99$267 ($meminit)
  $meminit$\num_params$demo.v:100$268 ($meminit)
  $meminit$\num_params$demo.v:101$269 ($meminit)
  $meminit$\num_params$demo.v:102$270 ($meminit)
  $meminit$\num_params$demo.v:103$271 ($meminit)
  $meminit$\num_params$demo.v:104$272 ($meminit)
  $meminit$\num_params$demo.v:105$273 ($meminit)
  $meminit$\num_params$demo.v:106$274 ($meminit)
  $meminit$\num_params$demo.v:107$275 ($meminit)
  $meminit$\num_params$demo.v:108$276 ($meminit)
  $meminit$\num_params$demo.v:109$277 ($meminit)
  $meminit$\num_params$demo.v:110$278 ($meminit)
  $meminit$\num_params$demo.v:111$279 ($meminit)
  $meminit$\num_params$demo.v:112$280 ($meminit)
  $meminit$\num_params$demo.v:113$281 ($meminit)
  $meminit$\num_params$demo.v:114$282 ($meminit)
  $meminit$\num_params$demo.v:115$283 ($meminit)
  $meminit$\num_params$demo.v:116$284 ($meminit)
  $meminit$\num_params$demo.v:117$285 ($meminit)
  $meminit$\num_params$demo.v:118$286 ($meminit)
  $meminit$\num_params$demo.v:119$287 ($meminit)
  $meminit$\num_params$demo.v:120$288 ($meminit)
  $meminit$\num_params$demo.v:121$289 ($meminit)
  $meminit$\num_params$demo.v:122$290 ($meminit)
  $meminit$\num_params$demo.v:123$291 ($meminit)
Warning: Address 5'11001 in memory initialization $meminit$\num_params$demo.v:123$291 is out-of-bounds.
  $memrd$\num_params$demo.v:499$210 ($memrd)
Collecting $memrd, $memwr and $meminit for memory `\params' in module `\demo':
  $meminit$\params$demo.v:126$292 ($meminit)
  $meminit$\params$demo.v:127$293 ($meminit)
  $meminit$\params$demo.v:128$294 ($meminit)
  $meminit$\params$demo.v:129$295 ($meminit)
  $meminit$\params$demo.v:130$296 ($meminit)
  $meminit$\params$demo.v:131$297 ($meminit)
  $meminit$\params$demo.v:132$298 ($meminit)
  $meminit$\params$demo.v:133$299 ($meminit)
  $meminit$\params$demo.v:134$300 ($meminit)
  $meminit$\params$demo.v:135$301 ($meminit)
  $meminit$\params$demo.v:136$302 ($meminit)
  $meminit$\params$demo.v:137$303 ($meminit)
  $meminit$\params$demo.v:138$304 ($meminit)
  $meminit$\params$demo.v:139$305 ($meminit)
  $meminit$\params$demo.v:140$306 ($meminit)
  $meminit$\params$demo.v:141$307 ($meminit)
  $meminit$\params$demo.v:142$308 ($meminit)
  $meminit$\params$demo.v:143$309 ($meminit)
  $meminit$\params$demo.v:144$310 ($meminit)
  $meminit$\params$demo.v:145$311 ($meminit)
  $meminit$\params$demo.v:146$312 ($meminit)
  $meminit$\params$demo.v:147$313 ($meminit)
  $meminit$\params$demo.v:148$314 ($meminit)
  $meminit$\params$demo.v:149$315 ($meminit)
  $meminit$\params$demo.v:150$316 ($meminit)
  $meminit$\params$demo.v:151$317 ($meminit)
  $meminit$\params$demo.v:152$318 ($meminit)
  $meminit$\params$demo.v:153$319 ($meminit)
  $meminit$\params$demo.v:154$320 ($meminit)
  $meminit$\params$demo.v:155$321 ($meminit)
  $meminit$\params$demo.v:156$322 ($meminit)
  $meminit$\params$demo.v:157$323 ($meminit)
  $meminit$\params$demo.v:158$324 ($meminit)
  $meminit$\params$demo.v:159$325 ($meminit)
  $meminit$\params$demo.v:160$326 ($meminit)
  $meminit$\params$demo.v:161$327 ($meminit)
  $meminit$\params$demo.v:162$328 ($meminit)
  $meminit$\params$demo.v:163$329 ($meminit)
  $meminit$\params$demo.v:164$330 ($meminit)
  $meminit$\params$demo.v:165$331 ($meminit)
  $meminit$\params$demo.v:166$332 ($meminit)
  $meminit$\params$demo.v:167$333 ($meminit)
  $meminit$\params$demo.v:168$334 ($meminit)
  $meminit$\params$demo.v:169$335 ($meminit)
  $meminit$\params$demo.v:170$336 ($meminit)
  $meminit$\params$demo.v:171$337 ($meminit)
  $meminit$\params$demo.v:172$338 ($meminit)
  $meminit$\params$demo.v:173$339 ($meminit)
  $meminit$\params$demo.v:174$340 ($meminit)
  $meminit$\params$demo.v:175$341 ($meminit)
  $meminit$\params$demo.v:176$342 ($meminit)
  $meminit$\params$demo.v:177$343 ($meminit)
  $meminit$\params$demo.v:178$344 ($meminit)
  $meminit$\params$demo.v:179$345 ($meminit)
  $meminit$\params$demo.v:180$346 ($meminit)
  $meminit$\params$demo.v:181$347 ($meminit)
  $meminit$\params$demo.v:182$348 ($meminit)
  $meminit$\params$demo.v:183$349 ($meminit)
  $meminit$\params$demo.v:184$350 ($meminit)
  $meminit$\params$demo.v:185$351 ($meminit)
  $meminit$\params$demo.v:186$352 ($meminit)
  $meminit$\params$demo.v:187$353 ($meminit)
  $meminit$\params$demo.v:188$354 ($meminit)
  $meminit$\params$demo.v:189$355 ($meminit)
  $meminit$\params$demo.v:190$356 ($meminit)
  $meminit$\params$demo.v:191$357 ($meminit)
  $meminit$\params$demo.v:192$358 ($meminit)
  $meminit$\params$demo.v:193$359 ($meminit)
  $meminit$\params$demo.v:194$360 ($meminit)
  $meminit$\params$demo.v:195$361 ($meminit)
  $meminit$\params$demo.v:196$362 ($meminit)
  $meminit$\params$demo.v:197$363 ($meminit)
  $meminit$\params$demo.v:198$364 ($meminit)
  $meminit$\params$demo.v:199$365 ($meminit)
  $meminit$\params$demo.v:200$366 ($meminit)
  $meminit$\params$demo.v:201$367 ($meminit)
  $meminit$\params$demo.v:202$368 ($meminit)
  $meminit$\params$demo.v:203$369 ($meminit)
  $meminit$\params$demo.v:204$370 ($meminit)
  $meminit$\params$demo.v:205$371 ($meminit)
  $meminit$\params$demo.v:206$372 ($meminit)
  $meminit$\params$demo.v:207$373 ($meminit)
  $meminit$\params$demo.v:208$374 ($meminit)
  $meminit$\params$demo.v:209$375 ($meminit)
  $memrd$\params$demo.v:509$215 ($memrd)

2.23. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..

2.24. Executing MEMORY_BRAM pass (mapping $mem cells to block memories).
Processing demo.cmd:
  Properties: ports=1 bits=216 rports=1 wports=0 dbits=8 abits=5 words=27
  Checking rule #1 for bram type $__ICE40_RAM4K_M0 (variant 1):
    Bram geometry: abits=8 dbits=16 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M0: awaste=229 dwaste=8 bwaste=3880 waste=3880 efficiency=5
    Rule #1 for bram type $__ICE40_RAM4K_M0 (variant 1) accepted.
    Mapping to bram type $__ICE40_RAM4K_M0 (variant 1):
      Read port #0 is in clock domain !~async~.
        Bram port A1.1 has incompatible clock type.
        Failed to map read port #0.
    Mapping to bram type $__ICE40_RAM4K_M0 failed.
  Checking rule #2 for bram type $__ICE40_RAM4K_M123 (variant 1):
    Bram geometry: abits=9 dbits=8 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=485 dwaste=0 bwaste=3880 waste=3880 efficiency=5
    Rule #2 for bram type $__ICE40_RAM4K_M123 (variant 1) accepted.
    Mapping to bram type $__ICE40_RAM4K_M123 (variant 1):
      Read port #0 is in clock domain !~async~.
        Bram port A1.1 has incompatible clock type.
        Failed to map read port #0.
    Mapping to bram type $__ICE40_RAM4K_M123 failed.
  Checking rule #2 for bram type $__ICE40_RAM4K_M123 (variant 2):
    Bram geometry: abits=10 dbits=4 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=997 dwaste=0 bwaste=3988 waste=3988 efficiency=2
    Rule #2 for bram type $__ICE40_RAM4K_M123 (variant 2) accepted.
    Mapping to bram type $__ICE40_RAM4K_M123 (variant 2):
      Read port #0 is in clock domain !~async~.
        Bram port A1.1 has incompatible clock type.
        Failed to map read port #0.
    Mapping to bram type $__ICE40_RAM4K_M123 failed.
  Checking rule #2 for bram type $__ICE40_RAM4K_M123 (variant 3):
    Bram geometry: abits=11 dbits=2 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=2021 dwaste=0 bwaste=4042 waste=4042 efficiency=1
    Rule #2 for bram type $__ICE40_RAM4K_M123 (variant 3) rejected: requirement 'min efficiency 2' not met.
  No acceptable bram resources found.
Processing demo.num_params:
  Properties: ports=1 bits=350 rports=1 wports=0 dbits=14 abits=5 words=25
  Checking rule #1 for bram type $__ICE40_RAM4K_M0 (variant 1):
    Bram geometry: abits=8 dbits=16 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M0: awaste=231 dwaste=2 bwaste=3746 waste=3746 efficiency=8
    Rule #1 for bram type $__ICE40_RAM4K_M0 (variant 1) accepted.
    Mapping to bram type $__ICE40_RAM4K_M0 (variant 1):
      Read port #0 is in clock domain !~async~.
        Bram port A1.1 has incompatible clock type.
        Failed to map read port #0.
    Mapping to bram type $__ICE40_RAM4K_M0 failed.
  Checking rule #2 for bram type $__ICE40_RAM4K_M123 (variant 1):
    Bram geometry: abits=9 dbits=8 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=487 dwaste=2 bwaste=3946 waste=3946 efficiency=4
    Rule #2 for bram type $__ICE40_RAM4K_M123 (variant 1) accepted.
    Mapping to bram type $__ICE40_RAM4K_M123 (variant 1):
      Read port #0 is in clock domain !~async~.
        Bram port A1.1 has incompatible clock type.
        Failed to map read port #0.
    Mapping to bram type $__ICE40_RAM4K_M123 failed.
  Checking rule #2 for bram type $__ICE40_RAM4K_M123 (variant 2):
    Bram geometry: abits=10 dbits=4 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=999 dwaste=2 bwaste=4046 waste=4046 efficiency=2
    Rule #2 for bram type $__ICE40_RAM4K_M123 (variant 2) accepted.
    Mapping to bram type $__ICE40_RAM4K_M123 (variant 2):
      Read port #0 is in clock domain !~async~.
        Bram port A1.1 has incompatible clock type.
        Failed to map read port #0.
    Mapping to bram type $__ICE40_RAM4K_M123 failed.
  Checking rule #2 for bram type $__ICE40_RAM4K_M123 (variant 3):
    Bram geometry: abits=11 dbits=2 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=2023 dwaste=0 bwaste=4046 waste=4046 efficiency=1
    Rule #2 for bram type $__ICE40_RAM4K_M123 (variant 3) rejected: requirement 'min efficiency 2' not met.
  No acceptable bram resources found.
Processing demo.params:
  Properties: ports=1 bits=672 rports=1 wports=0 dbits=8 abits=7 words=84
  Checking rule #1 for bram type $__ICE40_RAM4K_M0 (variant 1):
    Bram geometry: abits=8 dbits=16 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M0: awaste=172 dwaste=8 bwaste=3424 waste=3424 efficiency=16
    Rule #1 for bram type $__ICE40_RAM4K_M0 (variant 1) accepted.
    Mapping to bram type $__ICE40_RAM4K_M0 (variant 1):
      Read port #0 is in clock domain !~async~.
        Bram port A1.1 has incompatible clock type.
        Failed to map read port #0.
    Mapping to bram type $__ICE40_RAM4K_M0 failed.
  Checking rule #2 for bram type $__ICE40_RAM4K_M123 (variant 1):
    Bram geometry: abits=9 dbits=8 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=428 dwaste=0 bwaste=3424 waste=3424 efficiency=16
    Rule #2 for bram type $__ICE40_RAM4K_M123 (variant 1) accepted.
    Mapping to bram type $__ICE40_RAM4K_M123 (variant 1):
      Read port #0 is in clock domain !~async~.
        Bram port A1.1 has incompatible clock type.
        Failed to map read port #0.
    Mapping to bram type $__ICE40_RAM4K_M123 failed.
  Checking rule #2 for bram type $__ICE40_RAM4K_M123 (variant 2):
    Bram geometry: abits=10 dbits=4 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=940 dwaste=0 bwaste=3760 waste=3760 efficiency=8
    Rule #2 for bram type $__ICE40_RAM4K_M123 (variant 2) accepted.
    Mapping to bram type $__ICE40_RAM4K_M123 (variant 2):
      Read port #0 is in clock domain !~async~.
        Bram port A1.1 has incompatible clock type.
        Failed to map read port #0.
    Mapping to bram type $__ICE40_RAM4K_M123 failed.
  Checking rule #2 for bram type $__ICE40_RAM4K_M123 (variant 3):
    Bram geometry: abits=11 dbits=2 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=1964 dwaste=0 bwaste=3928 waste=3928 efficiency=4
    Rule #2 for bram type $__ICE40_RAM4K_M123 (variant 3) accepted.
    Mapping to bram type $__ICE40_RAM4K_M123 (variant 3):
      Read port #0 is in clock domain !~async~.
        Bram port A1.1 has incompatible clock type.
        Failed to map read port #0.
    Mapping to bram type $__ICE40_RAM4K_M123 failed.
  No acceptable bram resources found.

2.25. Executing TECHMAP pass (map to technology primitives).

2.25.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/brams_map.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/brams_map.v' to AST representation.
Generating RTLIL representation for module `\$__ICE40_RAM4K'.
Generating RTLIL representation for module `\$__ICE40_RAM4K_M0'.
Generating RTLIL representation for module `\$__ICE40_RAM4K_M123'.
Successfully finished Verilog frontend.

2.25.2. Continuing TECHMAP pass.
No more expansions possible.

2.26. Executing ICE40_BRAMINIT pass.

2.27. Executing OPT pass (performing simple optimizations).

2.27.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.
<suppressed ~1 debug messages>

2.27.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\demo'.
Removed a total of 0 cells.

2.27.3. Executing OPT_RMDFF pass (remove dff with constant values).

2.27.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

2.27.5. Finished fast OPT passes.

2.28. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).
Mapping memory cell \cmd in module \demo:
  created 27 $dff cells and 0 static cells of width 8.
  read interface: 0 $dff and 31 $mux cells.
  write interface: 0 write mux blocks.
Mapping memory cell \num_params in module \demo:
  created 25 $dff cells and 0 static cells of width 14.
  read interface: 0 $dff and 31 $mux cells.
  write interface: 0 write mux blocks.
Mapping memory cell \params in module \demo:
  created 84 $dff cells and 0 static cells of width 8.
  read interface: 0 $dff and 127 $mux cells.
  write interface: 0 write mux blocks.

2.29. Executing OPT pass (performing simple optimizations).

2.29.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.
<suppressed ~119 debug messages>

2.29.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\demo'.
Removed a total of 0 cells.

2.29.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \demo..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~17 debug messages>

2.29.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \demo.
    Consolidated identical input bits for $mux cell $procmux$864:
      Old ports: A=3'100, B=3'011, Y=$auto$wreduce.cc:455:run$1061 [2:0]
      New ports: A=2'10, B=2'01, Y={ $auto$wreduce.cc:455:run$1061 [2] $auto$wreduce.cc:455:run$1061 [0] }
      New connections: $auto$wreduce.cc:455:run$1061 [1] = $auto$wreduce.cc:455:run$1061 [0]
    Consolidated identical input bits for $mux cell $procmux$871:
      Old ports: A=4'0110, B=4'1110, Y=$auto$wreduce.cc:455:run$1062 [3:0]
      New ports: A=1'0, B=1'1, Y=$auto$wreduce.cc:455:run$1062 [3]
      New connections: $auto$wreduce.cc:455:run$1062 [2:0] = 3'110
    Consolidated identical input bits for $mux cell $procmux$876:
      Old ports: A=5'01100, B=5'10111, Y=$auto$wreduce.cc:455:run$1063 [4:0]
      New ports: A=2'10, B=2'01, Y={ $auto$wreduce.cc:455:run$1063 [3] $auto$wreduce.cc:455:run$1063 [0] }
      New connections: { $auto$wreduce.cc:455:run$1063 [4] $auto$wreduce.cc:455:run$1063 [2:1] } = { $auto$wreduce.cc:455:run$1063 [0] 1'1 $auto$wreduce.cc:455:run$1063 [0] }
    Consolidated identical input bits for $mux cell $procmux$889:
      Old ports: A=3'011, B=3'101, Y=$auto$wreduce.cc:455:run$1067 [2:0]
      New ports: A=2'01, B=2'10, Y=$auto$wreduce.cc:455:run$1067 [2:1]
      New connections: $auto$wreduce.cc:455:run$1067 [0] = 1'1
    Consolidated identical input bits for $mux cell $procmux$895:
      Old ports: A={ 1'0 $auto$wreduce.cc:455:run$1068 [4:0] }, B=6'010100, Y=$procmux$895_Y
      New ports: A=$auto$wreduce.cc:455:run$1068 [4:0], B=5'10100, Y=$procmux$895_Y [4:0]
      New connections: $procmux$895_Y [5] = 1'0
    Consolidated identical input bits for $mux cell $procmux$914:
      Old ports: A=4'1010, B=4'0110, Y=$auto$wreduce.cc:455:run$1070 [3:0]
      New ports: A=2'10, B=2'01, Y=$auto$wreduce.cc:455:run$1070 [3:2]
      New connections: $auto$wreduce.cc:455:run$1070 [1:0] = 2'10
    Consolidated identical input bits for $mux cell $procmux$918:
      Old ports: A=4'0111, B=4'1010, Y=$auto$wreduce.cc:455:run$1071 [3:0]
      New ports: A=2'01, B=2'10, Y={ $auto$wreduce.cc:455:run$1071 [3] $auto$wreduce.cc:455:run$1071 [0] }
      New connections: $auto$wreduce.cc:455:run$1071 [2:1] = { $auto$wreduce.cc:455:run$1071 [0] 1'1 }
    Consolidated identical input bits for $mux cell $procmux$922:
      Old ports: A=2'10, B=2'00, Y=$auto$wreduce.cc:455:run$1072 [1:0]
      New ports: A=1'1, B=1'0, Y=$auto$wreduce.cc:455:run$1072 [1]
      New connections: $auto$wreduce.cc:455:run$1072 [0] = 1'0
    Consolidated identical input bits for $mux cell $procmux$929:
      Old ports: A=2'10, B=2'00, Y=$auto$wreduce.cc:455:run$1074 [1:0]
      New ports: A=1'1, B=1'0, Y=$auto$wreduce.cc:455:run$1074 [1]
      New connections: $auto$wreduce.cc:455:run$1074 [0] = 1'0
    Consolidated identical input bits for $mux cell $procmux$934:
      Old ports: A={ 2'00 $auto$wreduce.cc:455:run$1073 [3:0] }, B={ 2'00 $auto$wreduce.cc:455:run$1075 [3:0] }, Y=$procmux$934_Y
      New ports: A=$auto$wreduce.cc:455:run$1073 [3:0], B=$auto$wreduce.cc:455:run$1075 [3:0], Y=$procmux$934_Y [3:0]
      New connections: $procmux$934_Y [5:4] = 2'00
  Optimizing cells in module \demo.
    Consolidated identical input bits for $mux cell $procmux$879:
      Old ports: A=$auto$wreduce.cc:455:run$1063 [4:0], B=5'10101, Y=$auto$wreduce.cc:455:run$1064 [4:0]
      New ports: A={ $auto$wreduce.cc:455:run$1063 [3] $auto$wreduce.cc:455:run$1063 [0] $auto$wreduce.cc:455:run$1063 [0] }, B=3'001, Y={ $auto$wreduce.cc:455:run$1064 [3] $auto$wreduce.cc:455:run$1064 [1:0] }
      New connections: { $auto$wreduce.cc:455:run$1064 [4] $auto$wreduce.cc:455:run$1064 [2] } = { $auto$wreduce.cc:455:run$1064 [0] 1'1 }
    Consolidated identical input bits for $mux cell $procmux$892:
      Old ports: A={ 2'01 $auto$wreduce.cc:455:run$1067 [2:0] }, B=5'10110, Y=$auto$wreduce.cc:455:run$1068 [4:0]
      New ports: A={ 1'0 $auto$wreduce.cc:455:run$1067 [2:1] 1'1 }, B=4'1110, Y={ $auto$wreduce.cc:455:run$1068 [4] $auto$wreduce.cc:455:run$1068 [2:0] }
      New connections: $auto$wreduce.cc:455:run$1068 [3] = $auto$wreduce.cc:455:run$1068 [0]
    Consolidated identical input bits for $mux cell $procmux$898:
      Old ports: A=$procmux$895_Y, B=6'010010, Y=$procmux$898_Y
      New ports: A=$procmux$895_Y [4:0], B=5'10010, Y=$procmux$898_Y [4:0]
      New connections: $procmux$898_Y [5] = 1'0
    Consolidated identical input bits for $mux cell $procmux$925:
      Old ports: A={ 2'10 $auto$wreduce.cc:455:run$1072 [1:0] }, B=4'0111, Y=$auto$wreduce.cc:455:run$1073 [3:0]
      New ports: A={ 1'1 $auto$wreduce.cc:455:run$1072 [1] 1'0 }, B=3'011, Y={ $auto$wreduce.cc:455:run$1073 [3] $auto$wreduce.cc:455:run$1073 [1:0] }
      New connections: $auto$wreduce.cc:455:run$1073 [2] = $auto$wreduce.cc:455:run$1073 [0]
    Consolidated identical input bits for $mux cell $procmux$932:
      Old ports: A={ 2'10 $auto$wreduce.cc:455:run$1074 [1:0] }, B=4'0111, Y=$auto$wreduce.cc:455:run$1075 [3:0]
      New ports: A={ 1'1 $auto$wreduce.cc:455:run$1074 [1] 1'0 }, B=3'011, Y={ $auto$wreduce.cc:455:run$1075 [3] $auto$wreduce.cc:455:run$1075 [1:0] }
      New connections: $auto$wreduce.cc:455:run$1075 [2] = $auto$wreduce.cc:455:run$1075 [0]
  Optimizing cells in module \demo.
    Consolidated identical input bits for $mux cell $procmux$882:
      Old ports: A=$auto$wreduce.cc:455:run$1064 [4:0], B=5'10011, Y=$auto$wreduce.cc:455:run$1065 [4:0]
      New ports: A={ $auto$wreduce.cc:455:run$1064 [3] 1'1 $auto$wreduce.cc:455:run$1064 [1:0] }, B=4'0011, Y=$auto$wreduce.cc:455:run$1065 [3:0]
      New connections: $auto$wreduce.cc:455:run$1065 [4] = $auto$wreduce.cc:455:run$1065 [0]
    Consolidated identical input bits for $mux cell $procmux$895:
      Old ports: A=$auto$wreduce.cc:455:run$1068 [4:0], B=5'10100, Y=$procmux$895_Y [4:0]
      New ports: A={ $auto$wreduce.cc:455:run$1068 [4] $auto$wreduce.cc:455:run$1068 [2:0] }, B=4'1100, Y={ $procmux$895_Y [4] $procmux$895_Y [2:0] }
      New connections: $procmux$895_Y [3] = $procmux$895_Y [0]
    Consolidated identical input bits for $mux cell $procmux$901:
      Old ports: A=$procmux$898_Y, B=6'001111, Y=$procmux$901_Y
      New ports: A=$procmux$898_Y [4:0], B=5'01111, Y=$procmux$901_Y [4:0]
      New connections: $procmux$901_Y [5] = 1'0
    Consolidated identical input bits for $mux cell $procmux$934:
      Old ports: A=$auto$wreduce.cc:455:run$1073 [3:0], B=$auto$wreduce.cc:455:run$1075 [3:0], Y=$procmux$934_Y [3:0]
      New ports: A={ $auto$wreduce.cc:455:run$1073 [3] $auto$wreduce.cc:455:run$1073 [1:0] }, B={ $auto$wreduce.cc:455:run$1075 [3] $auto$wreduce.cc:455:run$1075 [1:0] }, Y={ $procmux$934_Y [3] $procmux$934_Y [1:0] }
      New connections: $procmux$934_Y [2] = $procmux$934_Y [0]
  Optimizing cells in module \demo.
    Consolidated identical input bits for $mux cell $procmux$898:
      Old ports: A=$procmux$895_Y [4:0], B=5'10010, Y=$procmux$898_Y [4:0]
      New ports: A={ $procmux$895_Y [4] $procmux$895_Y [2:0] }, B=4'1010, Y={ $procmux$898_Y [4] $procmux$898_Y [2:0] }
      New connections: $procmux$898_Y [3] = $procmux$898_Y [0]
    Consolidated identical input bits for $mux cell $procmux$904:
      Old ports: A=$procmux$901_Y, B=6'010000, Y=$procmux$904_Y
      New ports: A=$procmux$901_Y [4:0], B=5'10000, Y=$procmux$904_Y [4:0]
      New connections: $procmux$904_Y [5] = 1'0
  Optimizing cells in module \demo.
    Consolidated identical input bits for $mux cell $procmux$901:
      Old ports: A=$procmux$898_Y [4:0], B=5'01111, Y=$procmux$901_Y [4:0]
      New ports: A={ $procmux$898_Y [4] $procmux$898_Y [2:0] }, B=4'0111, Y={ $procmux$901_Y [4] $procmux$901_Y [2:0] }
      New connections: $procmux$901_Y [3] = $procmux$901_Y [0]
    Consolidated identical input bits for $mux cell $procmux$906:
      Old ports: A=$procmux$904_Y, B={ 1'0 $auto$wreduce.cc:455:run$1066 [4:0] }, Y=$procmux$906_Y
      New ports: A=$procmux$904_Y [4:0], B=$auto$wreduce.cc:455:run$1066 [4:0], Y=$procmux$906_Y [4:0]
      New connections: $procmux$906_Y [5] = 1'0
  Optimizing cells in module \demo.
    Consolidated identical input bits for $mux cell $procmux$904:
      Old ports: A=$procmux$901_Y [4:0], B=5'10000, Y=$procmux$904_Y [4:0]
      New ports: A={ $procmux$901_Y [4] $procmux$901_Y [2:0] }, B=4'1000, Y={ $procmux$904_Y [4] $procmux$904_Y [2:0] }
      New connections: $procmux$904_Y [3] = $procmux$904_Y [0]
  Optimizing cells in module \demo.
Performed a total of 24 changes.

2.29.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\demo'.
Removed a total of 0 cells.

2.29.6. Executing OPT_RMDFF pass (remove dff with constant values).
Removing $memory\params[83]$1648 ($dff) from module demo.
Removing $memory\params[82]$1646 ($dff) from module demo.
Removing $memory\params[81]$1644 ($dff) from module demo.
Removing $memory\params[80]$1642 ($dff) from module demo.
Removing $memory\params[79]$1640 ($dff) from module demo.
Removing $memory\params[78]$1638 ($dff) from module demo.
Removing $memory\params[77]$1636 ($dff) from module demo.
Removing $memory\params[76]$1634 ($dff) from module demo.
Removing $memory\params[75]$1632 ($dff) from module demo.
Removing $memory\params[74]$1630 ($dff) from module demo.
Removing $memory\params[73]$1628 ($dff) from module demo.
Removing $memory\params[72]$1626 ($dff) from module demo.
Removing $memory\params[71]$1624 ($dff) from module demo.
Removing $memory\params[70]$1622 ($dff) from module demo.
Removing $memory\params[69]$1620 ($dff) from module demo.
Removing $memory\params[68]$1618 ($dff) from module demo.
Removing $memory\params[67]$1616 ($dff) from module demo.
Removing $memory\params[66]$1614 ($dff) from module demo.
Removing $memory\params[65]$1612 ($dff) from module demo.
Removing $memory\params[64]$1610 ($dff) from module demo.
Removing $memory\params[63]$1608 ($dff) from module demo.
Removing $memory\params[62]$1606 ($dff) from module demo.
Removing $memory\params[61]$1604 ($dff) from module demo.
Removing $memory\params[60]$1602 ($dff) from module demo.
Removing $memory\params[59]$1600 ($dff) from module demo.
Removing $memory\params[58]$1598 ($dff) from module demo.
Removing $memory\params[57]$1596 ($dff) from module demo.
Removing $memory\params[56]$1594 ($dff) from module demo.
Removing $memory\params[55]$1592 ($dff) from module demo.
Removing $memory\params[54]$1590 ($dff) from module demo.
Removing $memory\params[53]$1588 ($dff) from module demo.
Removing $memory\params[52]$1586 ($dff) from module demo.
Removing $memory\params[51]$1584 ($dff) from module demo.
Removing $memory\params[50]$1582 ($dff) from module demo.
Removing $memory\params[49]$1580 ($dff) from module demo.
Removing $memory\params[48]$1578 ($dff) from module demo.
Removing $memory\params[47]$1576 ($dff) from module demo.
Removing $memory\params[46]$1574 ($dff) from module demo.
Removing $memory\params[45]$1572 ($dff) from module demo.
Removing $memory\params[44]$1570 ($dff) from module demo.
Removing $memory\params[43]$1568 ($dff) from module demo.
Removing $memory\params[42]$1566 ($dff) from module demo.
Removing $memory\params[41]$1564 ($dff) from module demo.
Removing $memory\params[40]$1562 ($dff) from module demo.
Removing $memory\params[39]$1560 ($dff) from module demo.
Removing $memory\params[38]$1558 ($dff) from module demo.
Removing $memory\params[37]$1556 ($dff) from module demo.
Removing $memory\params[36]$1554 ($dff) from module demo.
Removing $memory\params[35]$1552 ($dff) from module demo.
Removing $memory\params[34]$1550 ($dff) from module demo.
Removing $memory\params[33]$1548 ($dff) from module demo.
Removing $memory\params[32]$1546 ($dff) from module demo.
Removing $memory\params[31]$1544 ($dff) from module demo.
Removing $memory\params[30]$1542 ($dff) from module demo.
Removing $memory\params[29]$1540 ($dff) from module demo.
Removing $memory\params[28]$1538 ($dff) from module demo.
Removing $memory\params[27]$1536 ($dff) from module demo.
Removing $memory\params[26]$1534 ($dff) from module demo.
Removing $memory\params[25]$1532 ($dff) from module demo.
Removing $memory\params[24]$1530 ($dff) from module demo.
Removing $memory\params[23]$1528 ($dff) from module demo.
Removing $memory\params[22]$1526 ($dff) from module demo.
Removing $memory\params[21]$1524 ($dff) from module demo.
Removing $memory\params[20]$1522 ($dff) from module demo.
Removing $memory\params[19]$1520 ($dff) from module demo.
Removing $memory\params[18]$1518 ($dff) from module demo.
Removing $memory\params[17]$1516 ($dff) from module demo.
Removing $memory\params[16]$1514 ($dff) from module demo.
Removing $memory\params[15]$1512 ($dff) from module demo.
Removing $memory\params[14]$1510 ($dff) from module demo.
Removing $memory\params[13]$1508 ($dff) from module demo.
Removing $memory\params[12]$1506 ($dff) from module demo.
Removing $memory\params[11]$1504 ($dff) from module demo.
Removing $memory\params[10]$1502 ($dff) from module demo.
Removing $memory\params[9]$1500 ($dff) from module demo.
Removing $memory\params[8]$1498 ($dff) from module demo.
Removing $memory\params[7]$1496 ($dff) from module demo.
Removing $memory\params[6]$1494 ($dff) from module demo.
Removing $memory\params[5]$1492 ($dff) from module demo.
Removing $memory\params[4]$1490 ($dff) from module demo.
Removing $memory\params[3]$1488 ($dff) from module demo.
Removing $memory\params[2]$1486 ($dff) from module demo.
Removing $memory\params[1]$1484 ($dff) from module demo.
Removing $memory\params[0]$1482 ($dff) from module demo.
Removing $memory\num_params[24]$1387 ($dff) from module demo.
Removing $memory\num_params[23]$1385 ($dff) from module demo.
Removing $memory\num_params[22]$1383 ($dff) from module demo.
Removing $memory\num_params[21]$1381 ($dff) from module demo.
Removing $memory\num_params[20]$1379 ($dff) from module demo.
Removing $memory\num_params[19]$1377 ($dff) from module demo.
Removing $memory\num_params[18]$1375 ($dff) from module demo.
Removing $memory\num_params[17]$1373 ($dff) from module demo.
Removing $memory\num_params[16]$1371 ($dff) from module demo.
Removing $memory\num_params[15]$1369 ($dff) from module demo.
Removing $memory\num_params[14]$1367 ($dff) from module demo.
Removing $memory\num_params[13]$1365 ($dff) from module demo.
Removing $memory\num_params[12]$1363 ($dff) from module demo.
Removing $memory\num_params[11]$1361 ($dff) from module demo.
Removing $memory\num_params[10]$1359 ($dff) from module demo.
Removing $memory\num_params[9]$1357 ($dff) from module demo.
Removing $memory\num_params[8]$1355 ($dff) from module demo.
Removing $memory\num_params[7]$1353 ($dff) from module demo.
Removing $memory\num_params[6]$1351 ($dff) from module demo.
Removing $memory\num_params[5]$1349 ($dff) from module demo.
Removing $memory\num_params[4]$1347 ($dff) from module demo.
Removing $memory\num_params[3]$1345 ($dff) from module demo.
Removing $memory\num_params[2]$1343 ($dff) from module demo.
Removing $memory\num_params[1]$1341 ($dff) from module demo.
Removing $memory\num_params[0]$1339 ($dff) from module demo.
Removing $memory\cmd[26]$1244 ($dff) from module demo.
Removing $memory\cmd[25]$1242 ($dff) from module demo.
Removing $memory\cmd[24]$1240 ($dff) from module demo.
Removing $memory\cmd[23]$1238 ($dff) from module demo.
Removing $memory\cmd[22]$1236 ($dff) from module demo.
Removing $memory\cmd[21]$1234 ($dff) from module demo.
Removing $memory\cmd[20]$1232 ($dff) from module demo.
Removing $memory\cmd[19]$1230 ($dff) from module demo.
Removing $memory\cmd[18]$1228 ($dff) from module demo.
Removing $memory\cmd[17]$1226 ($dff) from module demo.
Removing $memory\cmd[16]$1224 ($dff) from module demo.
Removing $memory\cmd[15]$1222 ($dff) from module demo.
Removing $memory\cmd[14]$1220 ($dff) from module demo.
Removing $memory\cmd[13]$1218 ($dff) from module demo.
Removing $memory\cmd[12]$1216 ($dff) from module demo.
Removing $memory\cmd[11]$1214 ($dff) from module demo.
Removing $memory\cmd[10]$1212 ($dff) from module demo.
Removing $memory\cmd[9]$1210 ($dff) from module demo.
Removing $memory\cmd[8]$1208 ($dff) from module demo.
Removing $memory\cmd[7]$1206 ($dff) from module demo.
Removing $memory\cmd[6]$1204 ($dff) from module demo.
Removing $memory\cmd[5]$1202 ($dff) from module demo.
Removing $memory\cmd[4]$1200 ($dff) from module demo.
Removing $memory\cmd[3]$1198 ($dff) from module demo.
Removing $memory\cmd[2]$1196 ($dff) from module demo.
Removing $memory\cmd[1]$1194 ($dff) from module demo.
Removing $memory\cmd[0]$1192 ($dff) from module demo.
Replaced 136 DFF cells.

2.29.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..
Removed 0 unused cells and 376 unused wires.
<suppressed ~1 debug messages>

2.29.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.
<suppressed ~6 debug messages>

2.29.9. Rerunning OPT passes. (Maybe there is more to do..)

2.29.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \demo..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~17 debug messages>

2.29.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \demo.
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][4][0]$1291:
      Old ports: A=8'00010001, B=8'10110001, Y=$memory\cmd$rdmux[0][3][0]$a$1268
      New ports: A=1'0, B=1'1, Y=$memory\cmd$rdmux[0][3][0]$a$1268 [5]
      New connections: { $memory\cmd$rdmux[0][3][0]$a$1268 [7:6] $memory\cmd$rdmux[0][3][0]$a$1268 [4:0] } = { $memory\cmd$rdmux[0][3][0]$a$1268 [5] 6'010001 }
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][4][10]$1321:
      Old ports: A=8'00101100, B=8'00101010, Y=$memory\cmd$rdmux[0][3][5]$a$1283
      New ports: A=2'10, B=2'01, Y=$memory\cmd$rdmux[0][3][5]$a$1283 [2:1]
      New connections: { $memory\cmd$rdmux[0][3][5]$a$1283 [7:3] $memory\cmd$rdmux[0][3][5]$a$1283 [0] } = 6'001010
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][4][11]$1324:
      Old ports: A=8'00101011, B=8'00101100, Y=$memory\cmd$rdmux[0][3][5]$b$1284
      New ports: A=2'01, B=2'10, Y={ $memory\cmd$rdmux[0][3][5]$b$1284 [2] $memory\cmd$rdmux[0][3][5]$b$1284 [0] }
      New connections: { $memory\cmd$rdmux[0][3][5]$b$1284 [7:3] $memory\cmd$rdmux[0][3][5]$b$1284 [1] } = { 5'00101 $memory\cmd$rdmux[0][3][5]$b$1284 [0] }
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][4][12]$1327:
      Old ports: A=8'00101010, B=8'00101011, Y=$memory\cmd$rdmux[0][3][6]$a$1286
      New ports: A=1'0, B=1'1, Y=$memory\cmd$rdmux[0][3][6]$a$1286 [0]
      New connections: $memory\cmd$rdmux[0][3][6]$a$1286 [7:1] = 7'0010101
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][4][13]$1330:
      Old ports: A=8'00000000, B=8'xxxxxxxx, Y=$memory\cmd$rdmux[0][3][6]$b$1287
      New ports: A=1'0, B=1'x, Y=$memory\cmd$rdmux[0][3][6]$b$1287 [0]
      New connections: $memory\cmd$rdmux[0][3][6]$b$1287 [7:1] = { $memory\cmd$rdmux[0][3][6]$b$1287 [0] $memory\cmd$rdmux[0][3][6]$b$1287 [0] $memory\cmd$rdmux[0][3][6]$b$1287 [0] $memory\cmd$rdmux[0][3][6]$b$1287 [0] $memory\cmd$rdmux[0][3][6]$b$1287 [0] $memory\cmd$rdmux[0][3][6]$b$1287 [0] $memory\cmd$rdmux[0][3][6]$b$1287 [0] }
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][4][1]$1294:
      Old ports: A=8'10110010, B=8'10110011, Y=$memory\cmd$rdmux[0][3][0]$b$1269
      New ports: A=1'0, B=1'1, Y=$memory\cmd$rdmux[0][3][0]$b$1269 [0]
      New connections: $memory\cmd$rdmux[0][3][0]$b$1269 [7:1] = 7'1011001
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][4][2]$1297:
      Old ports: A=8'10110100, B=8'11000000, Y=$memory\cmd$rdmux[0][3][1]$a$1271
      New ports: A=2'01, B=2'10, Y={ $memory\cmd$rdmux[0][3][1]$a$1271 [6] $memory\cmd$rdmux[0][3][1]$a$1271 [2] }
      New connections: { $memory\cmd$rdmux[0][3][1]$a$1271 [7] $memory\cmd$rdmux[0][3][1]$a$1271 [5:3] $memory\cmd$rdmux[0][3][1]$a$1271 [1:0] } = { 1'1 $memory\cmd$rdmux[0][3][1]$a$1271 [2] $memory\cmd$rdmux[0][3][1]$a$1271 [2] 3'000 }
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][4][3]$1300:
      Old ports: A=8'11000001, B=8'11000010, Y=$memory\cmd$rdmux[0][3][1]$b$1272
      New ports: A=2'01, B=2'10, Y=$memory\cmd$rdmux[0][3][1]$b$1272 [1:0]
      New connections: $memory\cmd$rdmux[0][3][1]$b$1272 [7:2] = 6'110000
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][4][4]$1303:
      Old ports: A=8'11000011, B=8'11000100, Y=$memory\cmd$rdmux[0][3][2]$a$1274
      New ports: A=2'01, B=2'10, Y={ $memory\cmd$rdmux[0][3][2]$a$1274 [2] $memory\cmd$rdmux[0][3][2]$a$1274 [0] }
      New connections: { $memory\cmd$rdmux[0][3][2]$a$1274 [7:3] $memory\cmd$rdmux[0][3][2]$a$1274 [1] } = { 5'11000 $memory\cmd$rdmux[0][3][2]$a$1274 [0] }
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][4][5]$1306:
      Old ports: A=8'11000101, B=8'11100000, Y=$memory\cmd$rdmux[0][3][2]$b$1275
      New ports: A=2'01, B=2'10, Y={ $memory\cmd$rdmux[0][3][2]$b$1275 [5] $memory\cmd$rdmux[0][3][2]$b$1275 [0] }
      New connections: { $memory\cmd$rdmux[0][3][2]$b$1275 [7:6] $memory\cmd$rdmux[0][3][2]$b$1275 [4:1] } = { 4'1100 $memory\cmd$rdmux[0][3][2]$b$1275 [0] 1'0 }
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][4][6]$1309:
      Old ports: A=8'11100001, B=8'11111100, Y=$memory\cmd$rdmux[0][3][3]$a$1277
      New ports: A=2'01, B=2'10, Y={ $memory\cmd$rdmux[0][3][3]$a$1277 [2] $memory\cmd$rdmux[0][3][3]$a$1277 [0] }
      New connections: { $memory\cmd$rdmux[0][3][3]$a$1277 [7:3] $memory\cmd$rdmux[0][3][3]$a$1277 [1] } = { 3'111 $memory\cmd$rdmux[0][3][3]$a$1277 [2] $memory\cmd$rdmux[0][3][3]$a$1277 [2] 1'0 }
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][4][7]$1312:
      Old ports: A=8'00111010, B=8'00110110, Y=$memory\cmd$rdmux[0][3][3]$b$1278
      New ports: A=2'10, B=2'01, Y=$memory\cmd$rdmux[0][3][3]$b$1278 [3:2]
      New connections: { $memory\cmd$rdmux[0][3][3]$b$1278 [7:4] $memory\cmd$rdmux[0][3][3]$b$1278 [1:0] } = 6'001110
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][4][8]$1315:
      Old ports: A=8'00100001, B=8'00101001, Y=$memory\cmd$rdmux[0][3][4]$a$1280
      New ports: A=1'0, B=1'1, Y=$memory\cmd$rdmux[0][3][4]$a$1280 [3]
      New connections: { $memory\cmd$rdmux[0][3][4]$a$1280 [7:4] $memory\cmd$rdmux[0][3][4]$a$1280 [2:0] } = 7'0010001
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][4][9]$1318:
      Old ports: A=8'00101010, B=8'00101011, Y=$memory\cmd$rdmux[0][3][4]$b$1281
      New ports: A=1'0, B=1'1, Y=$memory\cmd$rdmux[0][3][4]$b$1281 [0]
      New connections: $memory\cmd$rdmux[0][3][4]$b$1281 [7:1] = 7'0010101
    Consolidated identical input bits for $mux cell $memory\num_params$rdmux[0][3][4]$1422:
      Old ports: A=$memory\num_params$rdmux[0][3][4]$a$1423, B=$memory\num_params$rdmux[0][3][4]$b$1424, Y=$memory\num_params$rdmux[0][2][2]$a$1405
      New ports: A=1'0, B=1'1, Y=$memory\num_params$rdmux[0][2][2]$a$1405 [2]
      New connections: { $memory\num_params$rdmux[0][2][2]$a$1405 [13:3] $memory\num_params$rdmux[0][2][2]$a$1405 [1:0] } = 13'0000000000000
    Consolidated identical input bits for $mux cell $memory\num_params$rdmux[0][4][0]$1434:
      Old ports: A=14'00000000000000, B=14'00000000000011, Y=$memory\num_params$rdmux[0][3][0]$a$1411
      New ports: A=1'0, B=1'1, Y=$memory\num_params$rdmux[0][3][0]$a$1411 [0]
      New connections: $memory\num_params$rdmux[0][3][0]$a$1411 [13:1] = { 12'000000000000 $memory\num_params$rdmux[0][3][0]$a$1411 [0] }
    Consolidated identical input bits for $mux cell $memory\num_params$rdmux[0][4][10]$1464:
      Old ports: A=14'00000000000000, B=14'00000000000100, Y=$memory\num_params$rdmux[0][3][5]$a$1426
      New ports: A=1'0, B=1'1, Y=$memory\num_params$rdmux[0][3][5]$a$1426 [2]
      New connections: { $memory\num_params$rdmux[0][3][5]$a$1426 [13:3] $memory\num_params$rdmux[0][3][5]$a$1426 [1:0] } = 13'0000000000000
    Consolidated identical input bits for $mux cell $memory\num_params$rdmux[0][4][11]$1467:
      Old ports: A=14'00000000000100, B=14'11001000000000, Y=$memory\num_params$rdmux[0][3][5]$b$1427
      New ports: A=2'01, B=2'10, Y={ $memory\num_params$rdmux[0][3][5]$b$1427 [9] $memory\num_params$rdmux[0][3][5]$b$1427 [2] }
      New connections: { $memory\num_params$rdmux[0][3][5]$b$1427 [13:10] $memory\num_params$rdmux[0][3][5]$b$1427 [8:3] $memory\num_params$rdmux[0][3][5]$b$1427 [1:0] } = { $memory\num_params$rdmux[0][3][5]$b$1427 [9] $memory\num_params$rdmux[0][3][5]$b$1427 [9] 10'0000000000 }
    Consolidated identical input bits for $mux cell $memory\num_params$rdmux[0][4][12]$1470:
      Old ports: A=14'00000000000100, B=14'xxxxxxxxxxxxxx, Y=$memory\num_params$rdmux[0][3][6]$a$1429
      New ports: A=2'10, B=2'xx, Y={ $memory\num_params$rdmux[0][3][6]$a$1429 [2] $memory\num_params$rdmux[0][3][6]$a$1429 [0] }
      New connections: { $memory\num_params$rdmux[0][3][6]$a$1429 [13:3] $memory\num_params$rdmux[0][3][6]$a$1429 [1] } = { $memory\num_params$rdmux[0][3][6]$a$1429 [0] $memory\num_params$rdmux[0][3][6]$a$1429 [0] $memory\num_params$rdmux[0][3][6]$a$1429 [0] $memory\num_params$rdmux[0][3][6]$a$1429 [0] $memory\num_params$rdmux[0][3][6]$a$1429 [0] $memory\num_params$rdmux[0][3][6]$a$1429 [0] $memory\num_params$rdmux[0][3][6]$a$1429 [0] $memory\num_params$rdmux[0][3][6]$a$1429 [0] $memory\num_params$rdmux[0][3][6]$a$1429 [0] $memory\num_params$rdmux[0][3][6]$a$1429 [0] $memory\num_params$rdmux[0][3][6]$a$1429 [0] $memory\num_params$rdmux[0][3][6]$a$1429 [0] }
    Consolidated identical input bits for $mux cell $memory\num_params$rdmux[0][4][1]$1437:
      Old ports: A=14'00000000000011, B=14'00000000000110, Y=$memory\num_params$rdmux[0][3][0]$b$1412
      New ports: A=2'01, B=2'10, Y={ $memory\num_params$rdmux[0][3][0]$b$1412 [2] $memory\num_params$rdmux[0][3][0]$b$1412 [0] }
      New connections: { $memory\num_params$rdmux[0][3][0]$b$1412 [13:3] $memory\num_params$rdmux[0][3][0]$b$1412 [1] } = 12'000000000001
    Consolidated identical input bits for $mux cell $memory\num_params$rdmux[0][4][2]$1440:
      Old ports: A=14'00000000000001, B=14'00000000000011, Y=$memory\num_params$rdmux[0][3][1]$a$1414
      New ports: A=1'0, B=1'1, Y=$memory\num_params$rdmux[0][3][1]$a$1414 [1]
      New connections: { $memory\num_params$rdmux[0][3][1]$a$1414 [13:2] $memory\num_params$rdmux[0][3][1]$a$1414 [0] } = 13'0000000000001
    Consolidated identical input bits for $mux cell $memory\num_params$rdmux[0][4][3]$1443:
      Old ports: A=14'00000000000001, B=14'00000000000010, Y=$memory\num_params$rdmux[0][3][1]$b$1415
      New ports: A=2'01, B=2'10, Y=$memory\num_params$rdmux[0][3][1]$b$1415 [1:0]
      New connections: $memory\num_params$rdmux[0][3][1]$b$1415 [13:2] = 12'000000000000
    Consolidated identical input bits for $mux cell $memory\num_params$rdmux[0][4][5]$1449:
      Old ports: A=14'00000000000001, B=14'00000000010000, Y=$memory\num_params$rdmux[0][3][2]$b$1418
      New ports: A=2'01, B=2'10, Y={ $memory\num_params$rdmux[0][3][2]$b$1418 [4] $memory\num_params$rdmux[0][3][2]$b$1418 [0] }
      New connections: { $memory\num_params$rdmux[0][3][2]$b$1418 [13:5] $memory\num_params$rdmux[0][3][2]$b$1418 [3:1] } = 12'000000000000
    Consolidated identical input bits for $mux cell $memory\num_params$rdmux[0][4][6]$1452:
      Old ports: A=14'00000000010000, B=14'00000000000001, Y=$memory\num_params$rdmux[0][3][3]$a$1420
      New ports: A=2'10, B=2'01, Y={ $memory\num_params$rdmux[0][3][3]$a$1420 [4] $memory\num_params$rdmux[0][3][3]$a$1420 [0] }
      New connections: { $memory\num_params$rdmux[0][3][3]$a$1420 [13:5] $memory\num_params$rdmux[0][3][3]$a$1420 [3:1] } = 12'000000000000
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][0]$1839:
      Old ports: A=8'00000101, B=8'00111100, Y=$memory\params$rdmux[0][5][0]$a$1744
      New ports: A=2'01, B=2'10, Y={ $memory\params$rdmux[0][5][0]$a$1744 [3] $memory\params$rdmux[0][5][0]$a$1744 [0] }
      New connections: { $memory\params$rdmux[0][5][0]$a$1744 [7:4] $memory\params$rdmux[0][5][0]$a$1744 [2:1] } = { 2'00 $memory\params$rdmux[0][5][0]$a$1744 [3] $memory\params$rdmux[0][5][0]$a$1744 [3] 2'10 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][10]$1869:
      Old ports: A=8'01101010, B=8'10001101, Y=$memory\params$rdmux[0][5][5]$a$1759
      New ports: A=2'10, B=2'01, Y=$memory\params$rdmux[0][5][5]$a$1759 [1:0]
      New connections: $memory\params$rdmux[0][5][5]$a$1759 [7:2] = { $memory\params$rdmux[0][5][5]$a$1759 [0] $memory\params$rdmux[0][5][5]$a$1759 [1] $memory\params$rdmux[0][5][5]$a$1759 [1] 2'01 $memory\params$rdmux[0][5][5]$a$1759 [0] }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][11]$1872:
      Old ports: A=8'11101110, B=8'00001111, Y=$memory\params$rdmux[0][5][5]$b$1760
      New ports: A=2'10, B=2'01, Y={ $memory\params$rdmux[0][5][5]$b$1760 [5] $memory\params$rdmux[0][5][5]$b$1760 [0] }
      New connections: { $memory\params$rdmux[0][5][5]$b$1760 [7:6] $memory\params$rdmux[0][5][5]$b$1760 [4:1] } = { $memory\params$rdmux[0][5][5]$b$1760 [5] $memory\params$rdmux[0][5][5]$b$1760 [5] 4'0111 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][12]$1875:
      Old ports: A=8'00000111, B=8'00001110, Y=$memory\params$rdmux[0][5][6]$a$1762
      New ports: A=2'01, B=2'10, Y={ $memory\params$rdmux[0][5][6]$a$1762 [3] $memory\params$rdmux[0][5][6]$a$1762 [0] }
      New connections: { $memory\params$rdmux[0][5][6]$a$1762 [7:4] $memory\params$rdmux[0][5][6]$a$1762 [2:1] } = 6'000011
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][13]$1878:
      Old ports: A=8'00001000, B=8'00000111, Y=$memory\params$rdmux[0][5][6]$b$1763
      New ports: A=2'10, B=2'01, Y={ $memory\params$rdmux[0][5][6]$b$1763 [3] $memory\params$rdmux[0][5][6]$b$1763 [0] }
      New connections: { $memory\params$rdmux[0][5][6]$b$1763 [7:4] $memory\params$rdmux[0][5][6]$b$1763 [2:1] } = { 4'0000 $memory\params$rdmux[0][5][6]$b$1763 [0] $memory\params$rdmux[0][5][6]$b$1763 [0] }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][14]$1881:
      Old ports: A=8'00010000, B=8'00000111, Y=$memory\params$rdmux[0][5][7]$a$1765
      New ports: A=2'10, B=2'01, Y={ $memory\params$rdmux[0][5][7]$a$1765 [4] $memory\params$rdmux[0][5][7]$a$1765 [0] }
      New connections: { $memory\params$rdmux[0][5][7]$a$1765 [7:5] $memory\params$rdmux[0][5][7]$a$1765 [3:1] } = { 4'0000 $memory\params$rdmux[0][5][7]$a$1765 [0] $memory\params$rdmux[0][5][7]$a$1765 [0] }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][15]$1884:
      Old ports: A=8'00000010, B=8'00000111, Y=$memory\params$rdmux[0][5][7]$b$1766
      New ports: A=1'0, B=1'1, Y=$memory\params$rdmux[0][5][7]$b$1766 [0]
      New connections: $memory\params$rdmux[0][5][7]$b$1766 [7:1] = { 5'00000 $memory\params$rdmux[0][5][7]$b$1766 [0] 1'1 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][16]$1887:
      Old ports: A=8'00001001, B=8'00001111, Y=$memory\params$rdmux[0][5][8]$a$1768
      New ports: A=1'0, B=1'1, Y=$memory\params$rdmux[0][5][8]$a$1768 [1]
      New connections: { $memory\params$rdmux[0][5][8]$a$1768 [7:2] $memory\params$rdmux[0][5][8]$a$1768 [0] } = { 5'00001 $memory\params$rdmux[0][5][8]$a$1768 [1] 1'1 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][17]$1890:
      Old ports: A=8'00100101, B=8'00110110, Y=$memory\params$rdmux[0][5][8]$b$1769
      New ports: A=2'01, B=2'10, Y=$memory\params$rdmux[0][5][8]$b$1769 [1:0]
      New connections: $memory\params$rdmux[0][5][8]$b$1769 [7:2] = { 3'001 $memory\params$rdmux[0][5][8]$b$1769 [1] 2'01 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][18]$1893:
      Old ports: A=8'00000000, B=8'00001000, Y=$memory\params$rdmux[0][5][9]$a$1771
      New ports: A=1'0, B=1'1, Y=$memory\params$rdmux[0][5][9]$a$1771 [3]
      New connections: { $memory\params$rdmux[0][5][9]$a$1771 [7:4] $memory\params$rdmux[0][5][9]$a$1771 [2:0] } = 7'0000000
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][19]$1896:
      Old ports: A=8'00000100, B=8'00010000, Y=$memory\params$rdmux[0][5][9]$b$1772
      New ports: A=2'01, B=2'10, Y={ $memory\params$rdmux[0][5][9]$b$1772 [4] $memory\params$rdmux[0][5][9]$b$1772 [2] }
      New connections: { $memory\params$rdmux[0][5][9]$b$1772 [7:5] $memory\params$rdmux[0][5][9]$b$1772 [3] $memory\params$rdmux[0][5][9]$b$1772 [1:0] } = 6'000000
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][1]$1842:
      Old ports: A=8'00111100, B=8'00000101, Y=$memory\params$rdmux[0][5][0]$b$1745
      New ports: A=2'10, B=2'01, Y={ $memory\params$rdmux[0][5][0]$b$1745 [3] $memory\params$rdmux[0][5][0]$b$1745 [0] }
      New connections: { $memory\params$rdmux[0][5][0]$b$1745 [7:4] $memory\params$rdmux[0][5][0]$b$1745 [2:1] } = { 2'00 $memory\params$rdmux[0][5][0]$b$1745 [3] $memory\params$rdmux[0][5][0]$b$1745 [3] 2'10 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][20]$1899:
      Old ports: A=8'00001010, B=8'00001101, Y=$memory\params$rdmux[0][5][10]$a$1774
      New ports: A=2'10, B=2'01, Y=$memory\params$rdmux[0][5][10]$a$1774 [1:0]
      New connections: $memory\params$rdmux[0][5][10]$a$1774 [7:2] = { 5'00001 $memory\params$rdmux[0][5][10]$a$1774 [0] }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][21]$1902:
      Old ports: A=8'00001000, B=8'00000111, Y=$memory\params$rdmux[0][5][10]$b$1775
      New ports: A=2'10, B=2'01, Y={ $memory\params$rdmux[0][5][10]$b$1775 [3] $memory\params$rdmux[0][5][10]$b$1775 [0] }
      New connections: { $memory\params$rdmux[0][5][10]$b$1775 [7:4] $memory\params$rdmux[0][5][10]$b$1775 [2:1] } = { 4'0000 $memory\params$rdmux[0][5][10]$b$1775 [0] $memory\params$rdmux[0][5][10]$b$1775 [0] }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][22]$1905:
      Old ports: A=8'00001111, B=8'00000111, Y=$memory\params$rdmux[0][5][11]$a$1777
      New ports: A=1'1, B=1'0, Y=$memory\params$rdmux[0][5][11]$a$1777 [3]
      New connections: { $memory\params$rdmux[0][5][11]$a$1777 [7:4] $memory\params$rdmux[0][5][11]$a$1777 [2:0] } = 7'0000111
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][23]$1908:
      Old ports: A=8'00000010, B=8'00000111, Y=$memory\params$rdmux[0][5][11]$b$1778
      New ports: A=1'0, B=1'1, Y=$memory\params$rdmux[0][5][11]$b$1778 [0]
      New connections: $memory\params$rdmux[0][5][11]$b$1778 [7:1] = { 5'00000 $memory\params$rdmux[0][5][11]$b$1778 [0] 1'1 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][24]$1911:
      Old ports: A=8'00001001, B=8'00001111, Y=$memory\params$rdmux[0][5][12]$a$1780
      New ports: A=1'0, B=1'1, Y=$memory\params$rdmux[0][5][12]$a$1780 [1]
      New connections: { $memory\params$rdmux[0][5][12]$a$1780 [7:2] $memory\params$rdmux[0][5][12]$a$1780 [0] } = { 5'00001 $memory\params$rdmux[0][5][12]$a$1780 [1] 1'1 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][25]$1914:
      Old ports: A=8'00100101, B=8'00110101, Y=$memory\params$rdmux[0][5][12]$b$1781
      New ports: A=1'0, B=1'1, Y=$memory\params$rdmux[0][5][12]$b$1781 [4]
      New connections: { $memory\params$rdmux[0][5][12]$b$1781 [7:5] $memory\params$rdmux[0][5][12]$b$1781 [3:0] } = 7'0010101
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][26]$1917:
      Old ports: A=8'00000000, B=8'00001001, Y=$memory\params$rdmux[0][5][13]$a$1783
      New ports: A=1'0, B=1'1, Y=$memory\params$rdmux[0][5][13]$a$1783 [0]
      New connections: $memory\params$rdmux[0][5][13]$a$1783 [7:1] = { 4'0000 $memory\params$rdmux[0][5][13]$a$1783 [0] 2'00 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][27]$1920:
      Old ports: A=8'00000100, B=8'00010000, Y=$memory\params$rdmux[0][5][13]$b$1784
      New ports: A=2'01, B=2'10, Y={ $memory\params$rdmux[0][5][13]$b$1784 [4] $memory\params$rdmux[0][5][13]$b$1784 [2] }
      New connections: { $memory\params$rdmux[0][5][13]$b$1784 [7:5] $memory\params$rdmux[0][5][13]$b$1784 [3] $memory\params$rdmux[0][5][13]$b$1784 [1:0] } = 6'000000
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][28]$1923:
      Old ports: A=8'10000000, B=8'00000101, Y=$memory\params$rdmux[0][5][14]$a$1786
      New ports: A=2'10, B=2'01, Y={ $memory\params$rdmux[0][5][14]$a$1786 [7] $memory\params$rdmux[0][5][14]$a$1786 [0] }
      New connections: $memory\params$rdmux[0][5][14]$a$1786 [6:1] = { 4'0000 $memory\params$rdmux[0][5][14]$a$1786 [0] 1'0 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][29]$1926:
      Old ports: A=8'01111000, B=8'00000000, Y=$memory\params$rdmux[0][5][14]$b$1787
      New ports: A=1'1, B=1'0, Y=$memory\params$rdmux[0][5][14]$b$1787 [3]
      New connections: { $memory\params$rdmux[0][5][14]$b$1787 [7:4] $memory\params$rdmux[0][5][14]$b$1787 [2:0] } = { 1'0 $memory\params$rdmux[0][5][14]$b$1787 [3] $memory\params$rdmux[0][5][14]$b$1787 [3] $memory\params$rdmux[0][5][14]$b$1787 [3] 3'000 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][30]$1929:
      Old ports: A=8'00011010, B=8'00000000, Y=$memory\params$rdmux[0][5][15]$a$1789
      New ports: A=1'1, B=1'0, Y=$memory\params$rdmux[0][5][15]$a$1789 [1]
      New connections: { $memory\params$rdmux[0][5][15]$a$1789 [7:2] $memory\params$rdmux[0][5][15]$a$1789 [0] } = { 3'000 $memory\params$rdmux[0][5][15]$a$1789 [1] $memory\params$rdmux[0][5][15]$a$1789 [1] 2'00 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][31]$1932:
      Old ports: A=8'01101001, B=8'00000000, Y=$memory\params$rdmux[0][5][15]$b$1790
      New ports: A=1'1, B=1'0, Y=$memory\params$rdmux[0][5][15]$b$1790 [0]
      New connections: $memory\params$rdmux[0][5][15]$b$1790 [7:1] = { 1'0 $memory\params$rdmux[0][5][15]$b$1790 [0] $memory\params$rdmux[0][5][15]$b$1790 [0] 1'0 $memory\params$rdmux[0][5][15]$b$1790 [0] 2'00 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][32]$1935:
      Old ports: A=8'00000001, B=8'00000000, Y=$memory\params$rdmux[0][5][16]$a$1792
      New ports: A=1'1, B=1'0, Y=$memory\params$rdmux[0][5][16]$a$1792 [0]
      New connections: $memory\params$rdmux[0][5][16]$a$1792 [7:1] = 7'0000000
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][33]$1938:
      Old ports: A=8'10100000, B=8'00000000, Y=$memory\params$rdmux[0][5][16]$b$1793
      New ports: A=1'1, B=1'0, Y=$memory\params$rdmux[0][5][16]$b$1793 [5]
      New connections: { $memory\params$rdmux[0][5][16]$b$1793 [7:6] $memory\params$rdmux[0][5][16]$b$1793 [4:0] } = { $memory\params$rdmux[0][5][16]$b$1793 [5] 6'000000 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][34]$1941:
      Old ports: A=8'00000001, B=8'00000000, Y=$memory\params$rdmux[0][5][17]$a$1795
      New ports: A=1'1, B=1'0, Y=$memory\params$rdmux[0][5][17]$a$1795 [0]
      New connections: $memory\params$rdmux[0][5][17]$a$1795 [7:1] = 7'0000000
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][35]$1944:
      Old ports: A=8'10100000, B=8'00000000, Y=$memory\params$rdmux[0][5][17]$b$1796
      New ports: A=1'1, B=1'0, Y=$memory\params$rdmux[0][5][17]$b$1796 [5]
      New connections: { $memory\params$rdmux[0][5][17]$b$1796 [7:6] $memory\params$rdmux[0][5][17]$b$1796 [4:0] } = { $memory\params$rdmux[0][5][17]$b$1796 [5] 6'000000 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][36]$1947:
      Old ports: A=8'00011010, B=8'00000000, Y=$memory\params$rdmux[0][5][18]$a$1798
      New ports: A=1'1, B=1'0, Y=$memory\params$rdmux[0][5][18]$a$1798 [1]
      New connections: { $memory\params$rdmux[0][5][18]$a$1798 [7:2] $memory\params$rdmux[0][5][18]$a$1798 [0] } = { 3'000 $memory\params$rdmux[0][5][18]$a$1798 [1] $memory\params$rdmux[0][5][18]$a$1798 [1] 2'00 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][37]$1950:
      Old ports: A=8'01101001, B=8'11111111, Y=$memory\params$rdmux[0][5][18]$b$1799
      New ports: A=1'0, B=1'1, Y=$memory\params$rdmux[0][5][18]$b$1799 [1]
      New connections: { $memory\params$rdmux[0][5][18]$b$1799 [7:2] $memory\params$rdmux[0][5][18]$b$1799 [0] } = { $memory\params$rdmux[0][5][18]$b$1799 [1] 2'11 $memory\params$rdmux[0][5][18]$b$1799 [1] 1'1 $memory\params$rdmux[0][5][18]$b$1799 [1] 1'1 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][38]$1953:
      Old ports: A=8'00000000, B=8'00000001, Y=$memory\params$rdmux[0][5][19]$a$1801
      New ports: A=1'0, B=1'1, Y=$memory\params$rdmux[0][5][19]$a$1801 [0]
      New connections: $memory\params$rdmux[0][5][19]$a$1801 [7:1] = 7'0000000
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][39]$1956:
      Old ports: A=8'00000000, B=8'10100000, Y=$memory\params$rdmux[0][5][19]$b$1802
      New ports: A=1'0, B=1'1, Y=$memory\params$rdmux[0][5][19]$b$1802 [5]
      New connections: { $memory\params$rdmux[0][5][19]$b$1802 [7:6] $memory\params$rdmux[0][5][19]$b$1802 [4:0] } = { $memory\params$rdmux[0][5][19]$b$1802 [5] 6'000000 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][3]$1848:
      Old ports: A=8'00000101, B=8'00111100, Y=$memory\params$rdmux[0][5][1]$b$1748
      New ports: A=2'01, B=2'10, Y={ $memory\params$rdmux[0][5][1]$b$1748 [3] $memory\params$rdmux[0][5][1]$b$1748 [0] }
      New connections: { $memory\params$rdmux[0][5][1]$b$1748 [7:4] $memory\params$rdmux[0][5][1]$b$1748 [2:1] } = { 2'00 $memory\params$rdmux[0][5][1]$b$1748 [3] $memory\params$rdmux[0][5][1]$b$1748 [3] 2'10 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][40]$1959:
      Old ports: A=8'00000000, B=8'00011010, Y=$memory\params$rdmux[0][5][20]$a$1804
      New ports: A=1'0, B=1'1, Y=$memory\params$rdmux[0][5][20]$a$1804 [1]
      New connections: { $memory\params$rdmux[0][5][20]$a$1804 [7:2] $memory\params$rdmux[0][5][20]$a$1804 [0] } = { 3'000 $memory\params$rdmux[0][5][20]$a$1804 [1] $memory\params$rdmux[0][5][20]$a$1804 [1] 2'00 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][41]$1962:
      Old ports: A=8'00000000, B=8'01101001, Y=$memory\params$rdmux[0][5][20]$b$1805
      New ports: A=1'0, B=1'1, Y=$memory\params$rdmux[0][5][20]$b$1805 [0]
      New connections: $memory\params$rdmux[0][5][20]$b$1805 [7:1] = { 1'0 $memory\params$rdmux[0][5][20]$b$1805 [0] $memory\params$rdmux[0][5][20]$b$1805 [0] 1'0 $memory\params$rdmux[0][5][20]$b$1805 [0] 2'00 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][4]$1851:
      Old ports: A=8'00111100, B=8'00000101, Y=$memory\params$rdmux[0][5][2]$a$1750
      New ports: A=2'10, B=2'01, Y={ $memory\params$rdmux[0][5][2]$a$1750 [3] $memory\params$rdmux[0][5][2]$a$1750 [0] }
      New connections: { $memory\params$rdmux[0][5][2]$a$1750 [7:4] $memory\params$rdmux[0][5][2]$a$1750 [2:1] } = { 2'00 $memory\params$rdmux[0][5][2]$a$1750 [3] $memory\params$rdmux[0][5][2]$a$1750 [3] 2'10 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][6]$1857:
      Old ports: A=8'00000011, B=8'10101011, Y=$memory\params$rdmux[0][5][3]$a$1753
      New ports: A=1'0, B=1'1, Y=$memory\params$rdmux[0][5][3]$a$1753 [3]
      New connections: { $memory\params$rdmux[0][5][3]$a$1753 [7:4] $memory\params$rdmux[0][5][3]$a$1753 [2:0] } = { $memory\params$rdmux[0][5][3]$a$1753 [3] 1'0 $memory\params$rdmux[0][5][3]$a$1753 [3] 4'0011 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][7]$1860:
      Old ports: A=8'00001011, B=8'00000100, Y=$memory\params$rdmux[0][5][3]$b$1754
      New ports: A=2'01, B=2'10, Y={ $memory\params$rdmux[0][5][3]$b$1754 [2] $memory\params$rdmux[0][5][3]$b$1754 [0] }
      New connections: { $memory\params$rdmux[0][5][3]$b$1754 [7:3] $memory\params$rdmux[0][5][3]$b$1754 [1] } = { 4'0000 $memory\params$rdmux[0][5][3]$b$1754 [0] $memory\params$rdmux[0][5][3]$b$1754 [0] }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][8]$1863:
      Old ports: A=8'11000101, B=8'00001101, Y=$memory\params$rdmux[0][5][4]$a$1756
      New ports: A=2'10, B=2'01, Y={ $memory\params$rdmux[0][5][4]$a$1756 [6] $memory\params$rdmux[0][5][4]$a$1756 [3] }
      New connections: { $memory\params$rdmux[0][5][4]$a$1756 [7] $memory\params$rdmux[0][5][4]$a$1756 [5:4] $memory\params$rdmux[0][5][4]$a$1756 [2:0] } = { $memory\params$rdmux[0][5][4]$a$1756 [6] 5'00101 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][9]$1866:
      Old ports: A=8'00000000, B=8'10001101, Y=$memory\params$rdmux[0][5][4]$b$1757
      New ports: A=1'0, B=1'1, Y=$memory\params$rdmux[0][5][4]$b$1757 [0]
      New connections: $memory\params$rdmux[0][5][4]$b$1757 [7:1] = { $memory\params$rdmux[0][5][4]$b$1757 [0] 3'000 $memory\params$rdmux[0][5][4]$b$1757 [0] $memory\params$rdmux[0][5][4]$b$1757 [0] 1'0 }
  Optimizing cells in module \demo.
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][3][0]$1267:
      Old ports: A=$memory\cmd$rdmux[0][3][0]$a$1268, B=$memory\cmd$rdmux[0][3][0]$b$1269, Y=$memory\cmd$rdmux[0][2][0]$a$1256
      New ports: A={ $memory\cmd$rdmux[0][3][0]$a$1268 [5] 2'01 }, B={ 2'11 $memory\cmd$rdmux[0][3][0]$b$1269 [0] }, Y={ $memory\cmd$rdmux[0][2][0]$a$1256 [5] $memory\cmd$rdmux[0][2][0]$a$1256 [1:0] }
      New connections: { $memory\cmd$rdmux[0][2][0]$a$1256 [7:6] $memory\cmd$rdmux[0][2][0]$a$1256 [4:2] } = { $memory\cmd$rdmux[0][2][0]$a$1256 [5] 4'0100 }
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][3][1]$1270:
      Old ports: A=$memory\cmd$rdmux[0][3][1]$a$1271, B=$memory\cmd$rdmux[0][3][1]$b$1272, Y=$memory\cmd$rdmux[0][2][0]$b$1257
      New ports: A={ $memory\cmd$rdmux[0][3][1]$a$1271 [6] $memory\cmd$rdmux[0][3][1]$a$1271 [2] 2'00 }, B={ 2'10 $memory\cmd$rdmux[0][3][1]$b$1272 [1:0] }, Y={ $memory\cmd$rdmux[0][2][0]$b$1257 [6] $memory\cmd$rdmux[0][2][0]$b$1257 [2:0] }
      New connections: { $memory\cmd$rdmux[0][2][0]$b$1257 [7] $memory\cmd$rdmux[0][2][0]$b$1257 [5:3] } = { 1'1 $memory\cmd$rdmux[0][2][0]$b$1257 [2] $memory\cmd$rdmux[0][2][0]$b$1257 [2] 1'0 }
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][3][2]$1273:
      Old ports: A=$memory\cmd$rdmux[0][3][2]$a$1274, B=$memory\cmd$rdmux[0][3][2]$b$1275, Y=$memory\cmd$rdmux[0][2][1]$a$1259
      New ports: A={ 1'0 $memory\cmd$rdmux[0][3][2]$a$1274 [2] $memory\cmd$rdmux[0][3][2]$a$1274 [0] $memory\cmd$rdmux[0][3][2]$a$1274 [0] }, B={ $memory\cmd$rdmux[0][3][2]$b$1275 [5] $memory\cmd$rdmux[0][3][2]$b$1275 [0] 1'0 $memory\cmd$rdmux[0][3][2]$b$1275 [0] }, Y={ $memory\cmd$rdmux[0][2][1]$a$1259 [5] $memory\cmd$rdmux[0][2][1]$a$1259 [2:0] }
      New connections: { $memory\cmd$rdmux[0][2][1]$a$1259 [7:6] $memory\cmd$rdmux[0][2][1]$a$1259 [4:3] } = 4'1100
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][3][3]$1276:
      Old ports: A=$memory\cmd$rdmux[0][3][3]$a$1277, B=$memory\cmd$rdmux[0][3][3]$b$1278, Y=$memory\cmd$rdmux[0][2][1]$b$1260
      New ports: A={ 1'1 $memory\cmd$rdmux[0][3][3]$a$1277 [2] $memory\cmd$rdmux[0][3][3]$a$1277 [2] $memory\cmd$rdmux[0][3][3]$a$1277 [2] 1'0 $memory\cmd$rdmux[0][3][3]$a$1277 [0] }, B={ 2'01 $memory\cmd$rdmux[0][3][3]$b$1278 [3:2] 2'10 }, Y={ $memory\cmd$rdmux[0][2][1]$b$1260 [6] $memory\cmd$rdmux[0][2][1]$b$1260 [4:0] }
      New connections: { $memory\cmd$rdmux[0][2][1]$b$1260 [7] $memory\cmd$rdmux[0][2][1]$b$1260 [5] } = { $memory\cmd$rdmux[0][2][1]$b$1260 [6] 1'1 }
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][3][4]$1279:
      Old ports: A=$memory\cmd$rdmux[0][3][4]$a$1280, B=$memory\cmd$rdmux[0][3][4]$b$1281, Y=$memory\cmd$rdmux[0][2][2]$a$1262
      New ports: A={ $memory\cmd$rdmux[0][3][4]$a$1280 [3] 2'01 }, B={ 2'11 $memory\cmd$rdmux[0][3][4]$b$1281 [0] }, Y={ $memory\cmd$rdmux[0][2][2]$a$1262 [3] $memory\cmd$rdmux[0][2][2]$a$1262 [1:0] }
      New connections: { $memory\cmd$rdmux[0][2][2]$a$1262 [7:4] $memory\cmd$rdmux[0][2][2]$a$1262 [2] } = 5'00100
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][3][5]$1282:
      Old ports: A=$memory\cmd$rdmux[0][3][5]$a$1283, B=$memory\cmd$rdmux[0][3][5]$b$1284, Y=$memory\cmd$rdmux[0][2][2]$b$1263
      New ports: A={ $memory\cmd$rdmux[0][3][5]$a$1283 [2:1] 1'0 }, B={ $memory\cmd$rdmux[0][3][5]$b$1284 [2] $memory\cmd$rdmux[0][3][5]$b$1284 [0] $memory\cmd$rdmux[0][3][5]$b$1284 [0] }, Y=$memory\cmd$rdmux[0][2][2]$b$1263 [2:0]
      New connections: $memory\cmd$rdmux[0][2][2]$b$1263 [7:3] = 5'00101
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][3][6]$1285:
      Old ports: A=$memory\cmd$rdmux[0][3][6]$a$1286, B=$memory\cmd$rdmux[0][3][6]$b$1287, Y=$memory\cmd$rdmux[0][2][3]$a$1265
      New ports: A={ 2'01 $memory\cmd$rdmux[0][3][6]$a$1286 [0] }, B={ $memory\cmd$rdmux[0][3][6]$b$1287 [0] $memory\cmd$rdmux[0][3][6]$b$1287 [0] $memory\cmd$rdmux[0][3][6]$b$1287 [0] }, Y=$memory\cmd$rdmux[0][2][3]$a$1265 [2:0]
      New connections: $memory\cmd$rdmux[0][2][3]$a$1265 [7:3] = { $memory\cmd$rdmux[0][2][3]$a$1265 [2] $memory\cmd$rdmux[0][2][3]$a$1265 [2:1] $memory\cmd$rdmux[0][2][3]$a$1265 [2:1] }
    Consolidated identical input bits for $mux cell $memory\num_params$rdmux[0][3][0]$1410:
      Old ports: A=$memory\num_params$rdmux[0][3][0]$a$1411, B=$memory\num_params$rdmux[0][3][0]$b$1412, Y=$memory\num_params$rdmux[0][2][0]$a$1399
      New ports: A={ 1'0 $memory\num_params$rdmux[0][3][0]$a$1411 [0] $memory\num_params$rdmux[0][3][0]$a$1411 [0] }, B={ $memory\num_params$rdmux[0][3][0]$b$1412 [2] 1'1 $memory\num_params$rdmux[0][3][0]$b$1412 [0] }, Y=$memory\num_params$rdmux[0][2][0]$a$1399 [2:0]
      New connections: $memory\num_params$rdmux[0][2][0]$a$1399 [13:3] = 11'00000000000
    Consolidated identical input bits for $mux cell $memory\num_params$rdmux[0][3][1]$1413:
      Old ports: A=$memory\num_params$rdmux[0][3][1]$a$1414, B=$memory\num_params$rdmux[0][3][1]$b$1415, Y=$memory\num_params$rdmux[0][2][0]$b$1400
      New ports: A={ $memory\num_params$rdmux[0][3][1]$a$1414 [1] 1'1 }, B=$memory\num_params$rdmux[0][3][1]$b$1415 [1:0], Y=$memory\num_params$rdmux[0][2][0]$b$1400 [1:0]
      New connections: $memory\num_params$rdmux[0][2][0]$b$1400 [13:2] = 12'000000000000
    Consolidated identical input bits for $mux cell $memory\num_params$rdmux[0][3][2]$1416:
      Old ports: A=$memory\num_params$rdmux[0][3][2]$a$1417, B=$memory\num_params$rdmux[0][3][2]$b$1418, Y=$memory\num_params$rdmux[0][2][1]$a$1402
      New ports: A=3'010, B={ $memory\num_params$rdmux[0][3][2]$b$1418 [4] 1'0 $memory\num_params$rdmux[0][3][2]$b$1418 [0] }, Y={ $memory\num_params$rdmux[0][2][1]$a$1402 [4] $memory\num_params$rdmux[0][2][1]$a$1402 [1:0] }
      New connections: { $memory\num_params$rdmux[0][2][1]$a$1402 [13:5] $memory\num_params$rdmux[0][2][1]$a$1402 [3:2] } = 11'00000000000
    Consolidated identical input bits for $mux cell $memory\num_params$rdmux[0][3][3]$1419:
      Old ports: A=$memory\num_params$rdmux[0][3][3]$a$1420, B=14'00000000000001, Y=$memory\num_params$rdmux[0][2][1]$b$1403
      New ports: A={ $memory\num_params$rdmux[0][3][3]$a$1420 [4] $memory\num_params$rdmux[0][3][3]$a$1420 [0] }, B=2'01, Y={ $memory\num_params$rdmux[0][2][1]$b$1403 [4] $memory\num_params$rdmux[0][2][1]$b$1403 [0] }
      New connections: { $memory\num_params$rdmux[0][2][1]$b$1403 [13:5] $memory\num_params$rdmux[0][2][1]$b$1403 [3:1] } = 12'000000000000
    Consolidated identical input bits for $mux cell $memory\num_params$rdmux[0][3][5]$1425:
      Old ports: A=$memory\num_params$rdmux[0][3][5]$a$1426, B=$memory\num_params$rdmux[0][3][5]$b$1427, Y=$memory\num_params$rdmux[0][2][2]$b$1406
      New ports: A={ 1'0 $memory\num_params$rdmux[0][3][5]$a$1426 [2] }, B={ $memory\num_params$rdmux[0][3][5]$b$1427 [9] $memory\num_params$rdmux[0][3][5]$b$1427 [2] }, Y={ $memory\num_params$rdmux[0][2][2]$b$1406 [9] $memory\num_params$rdmux[0][2][2]$b$1406 [2] }
      New connections: { $memory\num_params$rdmux[0][2][2]$b$1406 [13:10] $memory\num_params$rdmux[0][2][2]$b$1406 [8:3] $memory\num_params$rdmux[0][2][2]$b$1406 [1:0] } = { $memory\num_params$rdmux[0][2][2]$b$1406 [9] $memory\num_params$rdmux[0][2][2]$b$1406 [9] 10'0000000000 }
    Consolidated identical input bits for $mux cell $memory\num_params$rdmux[0][3][6]$1428:
      Old ports: A=$memory\num_params$rdmux[0][3][6]$a$1429, B=14'xxxxxxxxxxxxxx, Y=$memory\num_params$rdmux[0][2][3]$a$1408
      New ports: A={ $memory\num_params$rdmux[0][3][6]$a$1429 [2] $memory\num_params$rdmux[0][3][6]$a$1429 [0] }, B=2'xx, Y={ $memory\num_params$rdmux[0][2][3]$a$1408 [2] $memory\num_params$rdmux[0][2][3]$a$1408 [0] }
      New connections: { $memory\num_params$rdmux[0][2][3]$a$1408 [13:3] $memory\num_params$rdmux[0][2][3]$a$1408 [1] } = { $memory\num_params$rdmux[0][2][3]$a$1408 [0] $memory\num_params$rdmux[0][2][3]$a$1408 [0] $memory\num_params$rdmux[0][2][3]$a$1408 [0] $memory\num_params$rdmux[0][2][3]$a$1408 [0] $memory\num_params$rdmux[0][2][3]$a$1408 [0] $memory\num_params$rdmux[0][2][3]$a$1408 [0] $memory\num_params$rdmux[0][2][3]$a$1408 [0] $memory\num_params$rdmux[0][2][3]$a$1408 [0] $memory\num_params$rdmux[0][2][3]$a$1408 [0] $memory\num_params$rdmux[0][2][3]$a$1408 [0] $memory\num_params$rdmux[0][2][3]$a$1408 [0] $memory\num_params$rdmux[0][2][3]$a$1408 [0] }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][0]$1743:
      Old ports: A=$memory\params$rdmux[0][5][0]$a$1744, B=$memory\params$rdmux[0][5][0]$b$1745, Y=$memory\params$rdmux[0][4][0]$a$1696
      New ports: A={ $memory\params$rdmux[0][5][0]$a$1744 [3] $memory\params$rdmux[0][5][0]$a$1744 [0] }, B={ $memory\params$rdmux[0][5][0]$b$1745 [3] $memory\params$rdmux[0][5][0]$b$1745 [0] }, Y={ $memory\params$rdmux[0][4][0]$a$1696 [3] $memory\params$rdmux[0][4][0]$a$1696 [0] }
      New connections: { $memory\params$rdmux[0][4][0]$a$1696 [7:4] $memory\params$rdmux[0][4][0]$a$1696 [2:1] } = { 2'00 $memory\params$rdmux[0][4][0]$a$1696 [3] $memory\params$rdmux[0][4][0]$a$1696 [3] 2'10 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][10]$1773:
      Old ports: A=$memory\params$rdmux[0][5][10]$a$1774, B=$memory\params$rdmux[0][5][10]$b$1775, Y=$memory\params$rdmux[0][4][5]$a$1711
      New ports: A={ 1'1 $memory\params$rdmux[0][5][10]$a$1774 [1:0] }, B={ $memory\params$rdmux[0][5][10]$b$1775 [3] $memory\params$rdmux[0][5][10]$b$1775 [0] $memory\params$rdmux[0][5][10]$b$1775 [0] }, Y={ $memory\params$rdmux[0][4][5]$a$1711 [3] $memory\params$rdmux[0][4][5]$a$1711 [1:0] }
      New connections: { $memory\params$rdmux[0][4][5]$a$1711 [7:4] $memory\params$rdmux[0][4][5]$a$1711 [2] } = { 4'0000 $memory\params$rdmux[0][4][5]$a$1711 [0] }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][11]$1776:
      Old ports: A=$memory\params$rdmux[0][5][11]$a$1777, B=$memory\params$rdmux[0][5][11]$b$1778, Y=$memory\params$rdmux[0][4][5]$b$1712
      New ports: A={ $memory\params$rdmux[0][5][11]$a$1777 [3] 1'1 }, B={ 1'0 $memory\params$rdmux[0][5][11]$b$1778 [0] }, Y={ $memory\params$rdmux[0][4][5]$b$1712 [3] $memory\params$rdmux[0][4][5]$b$1712 [0] }
      New connections: { $memory\params$rdmux[0][4][5]$b$1712 [7:4] $memory\params$rdmux[0][4][5]$b$1712 [2:1] } = { 4'0000 $memory\params$rdmux[0][4][5]$b$1712 [0] 1'1 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][12]$1779:
      Old ports: A=$memory\params$rdmux[0][5][12]$a$1780, B=$memory\params$rdmux[0][5][12]$b$1781, Y=$memory\params$rdmux[0][4][6]$a$1714
      New ports: A={ 3'001 $memory\params$rdmux[0][5][12]$a$1780 [1] $memory\params$rdmux[0][5][12]$a$1780 [1] }, B={ 1'1 $memory\params$rdmux[0][5][12]$b$1781 [4] 3'010 }, Y=$memory\params$rdmux[0][4][6]$a$1714 [5:1]
      New connections: { $memory\params$rdmux[0][4][6]$a$1714 [7:6] $memory\params$rdmux[0][4][6]$a$1714 [0] } = 3'001
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][13]$1782:
      Old ports: A=$memory\params$rdmux[0][5][13]$a$1783, B=$memory\params$rdmux[0][5][13]$b$1784, Y=$memory\params$rdmux[0][4][6]$b$1715
      New ports: A={ 2'00 $memory\params$rdmux[0][5][13]$a$1783 [0] }, B={ $memory\params$rdmux[0][5][13]$b$1784 [4] $memory\params$rdmux[0][5][13]$b$1784 [2] 1'0 }, Y={ $memory\params$rdmux[0][4][6]$b$1715 [4] $memory\params$rdmux[0][4][6]$b$1715 [2] $memory\params$rdmux[0][4][6]$b$1715 [0] }
      New connections: { $memory\params$rdmux[0][4][6]$b$1715 [7:5] $memory\params$rdmux[0][4][6]$b$1715 [3] $memory\params$rdmux[0][4][6]$b$1715 [1] } = { 3'000 $memory\params$rdmux[0][4][6]$b$1715 [0] 1'0 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][14]$1785:
      Old ports: A=$memory\params$rdmux[0][5][14]$a$1786, B=$memory\params$rdmux[0][5][14]$b$1787, Y=$memory\params$rdmux[0][4][7]$a$1717
      New ports: A={ $memory\params$rdmux[0][5][14]$a$1786 [7] 1'0 $memory\params$rdmux[0][5][14]$a$1786 [0] }, B={ 1'0 $memory\params$rdmux[0][5][14]$b$1787 [3] 1'0 }, Y={ $memory\params$rdmux[0][4][7]$a$1717 [7] $memory\params$rdmux[0][4][7]$a$1717 [3] $memory\params$rdmux[0][4][7]$a$1717 [0] }
      New connections: { $memory\params$rdmux[0][4][7]$a$1717 [6:4] $memory\params$rdmux[0][4][7]$a$1717 [2:1] } = { $memory\params$rdmux[0][4][7]$a$1717 [3] $memory\params$rdmux[0][4][7]$a$1717 [3] $memory\params$rdmux[0][4][7]$a$1717 [3] $memory\params$rdmux[0][4][7]$a$1717 [0] 1'0 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][15]$1788:
      Old ports: A=$memory\params$rdmux[0][5][15]$a$1789, B=$memory\params$rdmux[0][5][15]$b$1790, Y=$memory\params$rdmux[0][4][7]$b$1718
      New ports: A={ $memory\params$rdmux[0][5][15]$a$1789 [1] $memory\params$rdmux[0][5][15]$a$1789 [1] 1'0 }, B={ $memory\params$rdmux[0][5][15]$b$1790 [0] 1'0 $memory\params$rdmux[0][5][15]$b$1790 [0] }, Y={ $memory\params$rdmux[0][4][7]$b$1718 [3] $memory\params$rdmux[0][4][7]$b$1718 [1:0] }
      New connections: { $memory\params$rdmux[0][4][7]$b$1718 [7:4] $memory\params$rdmux[0][4][7]$b$1718 [2] } = { 1'0 $memory\params$rdmux[0][4][7]$b$1718 [0] $memory\params$rdmux[0][4][7]$b$1718 [0] $memory\params$rdmux[0][4][7]$b$1718 [1] 1'0 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][16]$1791:
      Old ports: A=$memory\params$rdmux[0][5][16]$a$1792, B=$memory\params$rdmux[0][5][16]$b$1793, Y=$memory\params$rdmux[0][4][8]$a$1720
      New ports: A={ 1'0 $memory\params$rdmux[0][5][16]$a$1792 [0] }, B={ $memory\params$rdmux[0][5][16]$b$1793 [5] 1'0 }, Y={ $memory\params$rdmux[0][4][8]$a$1720 [5] $memory\params$rdmux[0][4][8]$a$1720 [0] }
      New connections: { $memory\params$rdmux[0][4][8]$a$1720 [7:6] $memory\params$rdmux[0][4][8]$a$1720 [4:1] } = { $memory\params$rdmux[0][4][8]$a$1720 [5] 5'00000 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][17]$1794:
      Old ports: A=$memory\params$rdmux[0][5][17]$a$1795, B=$memory\params$rdmux[0][5][17]$b$1796, Y=$memory\params$rdmux[0][4][8]$b$1721
      New ports: A={ 1'0 $memory\params$rdmux[0][5][17]$a$1795 [0] }, B={ $memory\params$rdmux[0][5][17]$b$1796 [5] 1'0 }, Y={ $memory\params$rdmux[0][4][8]$b$1721 [5] $memory\params$rdmux[0][4][8]$b$1721 [0] }
      New connections: { $memory\params$rdmux[0][4][8]$b$1721 [7:6] $memory\params$rdmux[0][4][8]$b$1721 [4:1] } = { $memory\params$rdmux[0][4][8]$b$1721 [5] 5'00000 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][18]$1797:
      Old ports: A=$memory\params$rdmux[0][5][18]$a$1798, B=$memory\params$rdmux[0][5][18]$b$1799, Y=$memory\params$rdmux[0][4][9]$a$1723
      New ports: A={ $memory\params$rdmux[0][5][18]$a$1798 [1] 1'0 $memory\params$rdmux[0][5][18]$a$1798 [1] 1'0 }, B={ 1'1 $memory\params$rdmux[0][5][18]$b$1799 [1] $memory\params$rdmux[0][5][18]$b$1799 [1] 1'1 }, Y=$memory\params$rdmux[0][4][9]$a$1723 [3:0]
      New connections: $memory\params$rdmux[0][4][9]$a$1723 [7:4] = { $memory\params$rdmux[0][4][9]$a$1723 [2] $memory\params$rdmux[0][4][9]$a$1723 [0] $memory\params$rdmux[0][4][9]$a$1723 [0] $memory\params$rdmux[0][4][9]$a$1723 [1] }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][19]$1800:
      Old ports: A=$memory\params$rdmux[0][5][19]$a$1801, B=$memory\params$rdmux[0][5][19]$b$1802, Y=$memory\params$rdmux[0][4][9]$b$1724
      New ports: A={ 1'0 $memory\params$rdmux[0][5][19]$a$1801 [0] }, B={ $memory\params$rdmux[0][5][19]$b$1802 [5] 1'0 }, Y={ $memory\params$rdmux[0][4][9]$b$1724 [5] $memory\params$rdmux[0][4][9]$b$1724 [0] }
      New connections: { $memory\params$rdmux[0][4][9]$b$1724 [7:6] $memory\params$rdmux[0][4][9]$b$1724 [4:1] } = { $memory\params$rdmux[0][4][9]$b$1724 [5] 5'00000 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][1]$1746:
      Old ports: A=$memory\params$rdmux[0][5][1]$a$1747, B=$memory\params$rdmux[0][5][1]$b$1748, Y=$memory\params$rdmux[0][4][0]$b$1697
      New ports: A=2'10, B={ $memory\params$rdmux[0][5][1]$b$1748 [3] $memory\params$rdmux[0][5][1]$b$1748 [0] }, Y={ $memory\params$rdmux[0][4][0]$b$1697 [3] $memory\params$rdmux[0][4][0]$b$1697 [0] }
      New connections: { $memory\params$rdmux[0][4][0]$b$1697 [7:4] $memory\params$rdmux[0][4][0]$b$1697 [2:1] } = { 2'00 $memory\params$rdmux[0][4][0]$b$1697 [3] $memory\params$rdmux[0][4][0]$b$1697 [3] 2'10 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][20]$1803:
      Old ports: A=$memory\params$rdmux[0][5][20]$a$1804, B=$memory\params$rdmux[0][5][20]$b$1805, Y=$memory\params$rdmux[0][4][10]$a$1726
      New ports: A={ $memory\params$rdmux[0][5][20]$a$1804 [1] $memory\params$rdmux[0][5][20]$a$1804 [1] 1'0 }, B={ $memory\params$rdmux[0][5][20]$b$1805 [0] 1'0 $memory\params$rdmux[0][5][20]$b$1805 [0] }, Y={ $memory\params$rdmux[0][4][10]$a$1726 [3] $memory\params$rdmux[0][4][10]$a$1726 [1:0] }
      New connections: { $memory\params$rdmux[0][4][10]$a$1726 [7:4] $memory\params$rdmux[0][4][10]$a$1726 [2] } = { 1'0 $memory\params$rdmux[0][4][10]$a$1726 [0] $memory\params$rdmux[0][4][10]$a$1726 [0] $memory\params$rdmux[0][4][10]$a$1726 [1] 1'0 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][2]$1749:
      Old ports: A=$memory\params$rdmux[0][5][2]$a$1750, B=8'00111100, Y=$memory\params$rdmux[0][4][1]$a$1699
      New ports: A={ $memory\params$rdmux[0][5][2]$a$1750 [3] $memory\params$rdmux[0][5][2]$a$1750 [0] }, B=2'10, Y={ $memory\params$rdmux[0][4][1]$a$1699 [3] $memory\params$rdmux[0][4][1]$a$1699 [0] }
      New connections: { $memory\params$rdmux[0][4][1]$a$1699 [7:4] $memory\params$rdmux[0][4][1]$a$1699 [2:1] } = { 2'00 $memory\params$rdmux[0][4][1]$a$1699 [3] $memory\params$rdmux[0][4][1]$a$1699 [3] 2'10 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][3]$1752:
      Old ports: A=$memory\params$rdmux[0][5][3]$a$1753, B=$memory\params$rdmux[0][5][3]$b$1754, Y=$memory\params$rdmux[0][4][1]$b$1700
      New ports: A={ $memory\params$rdmux[0][5][3]$a$1753 [3] $memory\params$rdmux[0][5][3]$a$1753 [3] 2'01 }, B={ 1'0 $memory\params$rdmux[0][5][3]$b$1754 [0] $memory\params$rdmux[0][5][3]$b$1754 [2] $memory\params$rdmux[0][5][3]$b$1754 [0] }, Y={ $memory\params$rdmux[0][4][1]$b$1700 [5] $memory\params$rdmux[0][4][1]$b$1700 [3:2] $memory\params$rdmux[0][4][1]$b$1700 [0] }
      New connections: { $memory\params$rdmux[0][4][1]$b$1700 [7:6] $memory\params$rdmux[0][4][1]$b$1700 [4] $memory\params$rdmux[0][4][1]$b$1700 [1] } = { $memory\params$rdmux[0][4][1]$b$1700 [5] 2'00 $memory\params$rdmux[0][4][1]$b$1700 [0] }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][4]$1755:
      Old ports: A=$memory\params$rdmux[0][5][4]$a$1756, B=$memory\params$rdmux[0][5][4]$b$1757, Y=$memory\params$rdmux[0][4][2]$a$1702
      New ports: A={ $memory\params$rdmux[0][5][4]$a$1756 [6] $memory\params$rdmux[0][5][4]$a$1756 [6] $memory\params$rdmux[0][5][4]$a$1756 [3] 1'1 }, B={ $memory\params$rdmux[0][5][4]$b$1757 [0] 1'0 $memory\params$rdmux[0][5][4]$b$1757 [0] $memory\params$rdmux[0][5][4]$b$1757 [0] }, Y={ $memory\params$rdmux[0][4][2]$a$1702 [7:6] $memory\params$rdmux[0][4][2]$a$1702 [3] $memory\params$rdmux[0][4][2]$a$1702 [0] }
      New connections: { $memory\params$rdmux[0][4][2]$a$1702 [5:4] $memory\params$rdmux[0][4][2]$a$1702 [2:1] } = { 2'00 $memory\params$rdmux[0][4][2]$a$1702 [0] 1'0 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][5]$1758:
      Old ports: A=$memory\params$rdmux[0][5][5]$a$1759, B=$memory\params$rdmux[0][5][5]$b$1760, Y=$memory\params$rdmux[0][4][2]$b$1703
      New ports: A={ $memory\params$rdmux[0][5][5]$a$1759 [0] $memory\params$rdmux[0][5][5]$a$1759 [1:0] $memory\params$rdmux[0][5][5]$a$1759 [1:0] }, B={ $memory\params$rdmux[0][5][5]$b$1760 [5] $memory\params$rdmux[0][5][5]$b$1760 [5] 2'11 $memory\params$rdmux[0][5][5]$b$1760 [0] }, Y={ $memory\params$rdmux[0][4][2]$b$1703 [7] $memory\params$rdmux[0][4][2]$b$1703 [5] $memory\params$rdmux[0][4][2]$b$1703 [2:0] }
      New connections: { $memory\params$rdmux[0][4][2]$b$1703 [6] $memory\params$rdmux[0][4][2]$b$1703 [4:3] } = { $memory\params$rdmux[0][4][2]$b$1703 [5] 2'01 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][6]$1761:
      Old ports: A=$memory\params$rdmux[0][5][6]$a$1762, B=$memory\params$rdmux[0][5][6]$b$1763, Y=$memory\params$rdmux[0][4][3]$a$1705
      New ports: A={ $memory\params$rdmux[0][5][6]$a$1762 [3] 1'1 $memory\params$rdmux[0][5][6]$a$1762 [0] }, B={ $memory\params$rdmux[0][5][6]$b$1763 [3] $memory\params$rdmux[0][5][6]$b$1763 [0] $memory\params$rdmux[0][5][6]$b$1763 [0] }, Y={ $memory\params$rdmux[0][4][3]$a$1705 [3] $memory\params$rdmux[0][4][3]$a$1705 [1:0] }
      New connections: { $memory\params$rdmux[0][4][3]$a$1705 [7:4] $memory\params$rdmux[0][4][3]$a$1705 [2] } = { 4'0000 $memory\params$rdmux[0][4][3]$a$1705 [1] }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][7]$1764:
      Old ports: A=$memory\params$rdmux[0][5][7]$a$1765, B=$memory\params$rdmux[0][5][7]$b$1766, Y=$memory\params$rdmux[0][4][3]$b$1706
      New ports: A={ $memory\params$rdmux[0][5][7]$a$1765 [4] $memory\params$rdmux[0][5][7]$a$1765 [0] $memory\params$rdmux[0][5][7]$a$1765 [0] }, B={ 2'01 $memory\params$rdmux[0][5][7]$b$1766 [0] }, Y={ $memory\params$rdmux[0][4][3]$b$1706 [4] $memory\params$rdmux[0][4][3]$b$1706 [1:0] }
      New connections: { $memory\params$rdmux[0][4][3]$b$1706 [7:5] $memory\params$rdmux[0][4][3]$b$1706 [3:2] } = { 4'0000 $memory\params$rdmux[0][4][3]$b$1706 [0] }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][8]$1767:
      Old ports: A=$memory\params$rdmux[0][5][8]$a$1768, B=$memory\params$rdmux[0][5][8]$b$1769, Y=$memory\params$rdmux[0][4][4]$a$1708
      New ports: A={ 3'001 $memory\params$rdmux[0][5][8]$a$1768 [1] $memory\params$rdmux[0][5][8]$a$1768 [1] 1'1 }, B={ 1'1 $memory\params$rdmux[0][5][8]$b$1769 [1] 2'01 $memory\params$rdmux[0][5][8]$b$1769 [1:0] }, Y=$memory\params$rdmux[0][4][4]$a$1708 [5:0]
      New connections: $memory\params$rdmux[0][4][4]$a$1708 [7:6] = 2'00
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][9]$1770:
      Old ports: A=$memory\params$rdmux[0][5][9]$a$1771, B=$memory\params$rdmux[0][5][9]$b$1772, Y=$memory\params$rdmux[0][4][4]$b$1709
      New ports: A={ 1'0 $memory\params$rdmux[0][5][9]$a$1771 [3] 1'0 }, B={ $memory\params$rdmux[0][5][9]$b$1772 [4] 1'0 $memory\params$rdmux[0][5][9]$b$1772 [2] }, Y=$memory\params$rdmux[0][4][4]$b$1709 [4:2]
      New connections: { $memory\params$rdmux[0][4][4]$b$1709 [7:5] $memory\params$rdmux[0][4][4]$b$1709 [1:0] } = 5'00000
  Optimizing cells in module \demo.
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][2][0]$1255:
      Old ports: A=$memory\cmd$rdmux[0][2][0]$a$1256, B=$memory\cmd$rdmux[0][2][0]$b$1257, Y=$memory\cmd$rdmux[0][1][0]$a$1250
      New ports: A={ $memory\cmd$rdmux[0][2][0]$a$1256 [5] 1'0 $memory\cmd$rdmux[0][2][0]$a$1256 [5] 2'10 $memory\cmd$rdmux[0][2][0]$a$1256 [1:0] }, B={ 1'1 $memory\cmd$rdmux[0][2][0]$b$1257 [6] $memory\cmd$rdmux[0][2][0]$b$1257 [2] $memory\cmd$rdmux[0][2][0]$b$1257 [2] $memory\cmd$rdmux[0][2][0]$b$1257 [2:0] }, Y={ $memory\cmd$rdmux[0][1][0]$a$1250 [7:4] $memory\cmd$rdmux[0][1][0]$a$1250 [2:0] }
      New connections: $memory\cmd$rdmux[0][1][0]$a$1250 [3] = 1'0
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][2][1]$1258:
      Old ports: A=$memory\cmd$rdmux[0][2][1]$a$1259, B=$memory\cmd$rdmux[0][2][1]$b$1260, Y=$memory\cmd$rdmux[0][1][0]$b$1251
      New ports: A={ 1'1 $memory\cmd$rdmux[0][2][1]$a$1259 [5] 2'00 $memory\cmd$rdmux[0][2][1]$a$1259 [2:0] }, B={ $memory\cmd$rdmux[0][2][1]$b$1260 [6] 1'1 $memory\cmd$rdmux[0][2][1]$b$1260 [4:0] }, Y=$memory\cmd$rdmux[0][1][0]$b$1251 [6:0]
      New connections: $memory\cmd$rdmux[0][1][0]$b$1251 [7] = $memory\cmd$rdmux[0][1][0]$b$1251 [6]
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][2][2]$1261:
      Old ports: A=$memory\cmd$rdmux[0][2][2]$a$1262, B=$memory\cmd$rdmux[0][2][2]$b$1263, Y=$memory\cmd$rdmux[0][1][1]$a$1253
      New ports: A={ $memory\cmd$rdmux[0][2][2]$a$1262 [3] 1'0 $memory\cmd$rdmux[0][2][2]$a$1262 [1:0] }, B={ 1'1 $memory\cmd$rdmux[0][2][2]$b$1263 [2:0] }, Y=$memory\cmd$rdmux[0][1][1]$a$1253 [3:0]
      New connections: $memory\cmd$rdmux[0][1][1]$a$1253 [7:4] = 4'0010
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][2][3]$1264:
      Old ports: A=$memory\cmd$rdmux[0][2][3]$a$1265, B=8'xxxxxxxx, Y=$memory\cmd$rdmux[0][1][1]$b$1254
      New ports: A=$memory\cmd$rdmux[0][2][3]$a$1265 [2:0], B=3'xxx, Y=$memory\cmd$rdmux[0][1][1]$b$1254 [2:0]
      New connections: $memory\cmd$rdmux[0][1][1]$b$1254 [7:3] = { $memory\cmd$rdmux[0][1][1]$b$1254 [2] $memory\cmd$rdmux[0][1][1]$b$1254 [2:1] $memory\cmd$rdmux[0][1][1]$b$1254 [2:1] }
    Consolidated identical input bits for $mux cell $memory\num_params$rdmux[0][2][0]$1398:
      Old ports: A=$memory\num_params$rdmux[0][2][0]$a$1399, B=$memory\num_params$rdmux[0][2][0]$b$1400, Y=$memory\num_params$rdmux[0][1][0]$a$1393
      New ports: A=$memory\num_params$rdmux[0][2][0]$a$1399 [2:0], B={ 1'0 $memory\num_params$rdmux[0][2][0]$b$1400 [1:0] }, Y=$memory\num_params$rdmux[0][1][0]$a$1393 [2:0]
      New connections: $memory\num_params$rdmux[0][1][0]$a$1393 [13:3] = 11'00000000000
    Consolidated identical input bits for $mux cell $memory\num_params$rdmux[0][2][1]$1401:
      Old ports: A=$memory\num_params$rdmux[0][2][1]$a$1402, B=$memory\num_params$rdmux[0][2][1]$b$1403, Y=$memory\num_params$rdmux[0][1][0]$b$1394
      New ports: A={ $memory\num_params$rdmux[0][2][1]$a$1402 [4] $memory\num_params$rdmux[0][2][1]$a$1402 [1:0] }, B={ $memory\num_params$rdmux[0][2][1]$b$1403 [4] 1'0 $memory\num_params$rdmux[0][2][1]$b$1403 [0] }, Y={ $memory\num_params$rdmux[0][1][0]$b$1394 [4] $memory\num_params$rdmux[0][1][0]$b$1394 [1:0] }
      New connections: { $memory\num_params$rdmux[0][1][0]$b$1394 [13:5] $memory\num_params$rdmux[0][1][0]$b$1394 [3:2] } = 11'00000000000
    Consolidated identical input bits for $mux cell $memory\num_params$rdmux[0][2][2]$1404:
      Old ports: A=$memory\num_params$rdmux[0][2][2]$a$1405, B=$memory\num_params$rdmux[0][2][2]$b$1406, Y=$memory\num_params$rdmux[0][1][1]$a$1396
      New ports: A={ 1'0 $memory\num_params$rdmux[0][2][2]$a$1405 [2] }, B={ $memory\num_params$rdmux[0][2][2]$b$1406 [9] $memory\num_params$rdmux[0][2][2]$b$1406 [2] }, Y={ $memory\num_params$rdmux[0][1][1]$a$1396 [9] $memory\num_params$rdmux[0][1][1]$a$1396 [2] }
      New connections: { $memory\num_params$rdmux[0][1][1]$a$1396 [13:10] $memory\num_params$rdmux[0][1][1]$a$1396 [8:3] $memory\num_params$rdmux[0][1][1]$a$1396 [1:0] } = { $memory\num_params$rdmux[0][1][1]$a$1396 [9] $memory\num_params$rdmux[0][1][1]$a$1396 [9] 10'0000000000 }
    Consolidated identical input bits for $mux cell $memory\num_params$rdmux[0][2][3]$1407:
      Old ports: A=$memory\num_params$rdmux[0][2][3]$a$1408, B=14'xxxxxxxxxxxxxx, Y=$memory\num_params$rdmux[0][1][1]$b$1397
      New ports: A={ $memory\num_params$rdmux[0][2][3]$a$1408 [2] $memory\num_params$rdmux[0][2][3]$a$1408 [0] }, B=2'xx, Y={ $memory\num_params$rdmux[0][1][1]$b$1397 [2] $memory\num_params$rdmux[0][1][1]$b$1397 [0] }
      New connections: { $memory\num_params$rdmux[0][1][1]$b$1397 [13:3] $memory\num_params$rdmux[0][1][1]$b$1397 [1] } = { $memory\num_params$rdmux[0][1][1]$b$1397 [0] $memory\num_params$rdmux[0][1][1]$b$1397 [0] $memory\num_params$rdmux[0][1][1]$b$1397 [0] $memory\num_params$rdmux[0][1][1]$b$1397 [0] $memory\num_params$rdmux[0][1][1]$b$1397 [0] $memory\num_params$rdmux[0][1][1]$b$1397 [0] $memory\num_params$rdmux[0][1][1]$b$1397 [0] $memory\num_params$rdmux[0][1][1]$b$1397 [0] $memory\num_params$rdmux[0][1][1]$b$1397 [0] $memory\num_params$rdmux[0][1][1]$b$1397 [0] $memory\num_params$rdmux[0][1][1]$b$1397 [0] $memory\num_params$rdmux[0][1][1]$b$1397 [0] }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][4][0]$1695:
      Old ports: A=$memory\params$rdmux[0][4][0]$a$1696, B=$memory\params$rdmux[0][4][0]$b$1697, Y=$memory\params$rdmux[0][3][0]$a$1672
      New ports: A={ $memory\params$rdmux[0][4][0]$a$1696 [3] $memory\params$rdmux[0][4][0]$a$1696 [0] }, B={ $memory\params$rdmux[0][4][0]$b$1697 [3] $memory\params$rdmux[0][4][0]$b$1697 [0] }, Y={ $memory\params$rdmux[0][3][0]$a$1672 [3] $memory\params$rdmux[0][3][0]$a$1672 [0] }
      New connections: { $memory\params$rdmux[0][3][0]$a$1672 [7:4] $memory\params$rdmux[0][3][0]$a$1672 [2:1] } = { 2'00 $memory\params$rdmux[0][3][0]$a$1672 [3] $memory\params$rdmux[0][3][0]$a$1672 [3] 2'10 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][4][10]$1725:
      Old ports: A=$memory\params$rdmux[0][4][10]$a$1726, B=8'xxxxxxxx, Y=$memory\params$rdmux[0][3][5]$a$1687
      New ports: A={ $memory\params$rdmux[0][4][10]$a$1726 [3] 1'0 $memory\params$rdmux[0][4][10]$a$1726 [1:0] }, B=4'xxxx, Y=$memory\params$rdmux[0][3][5]$a$1687 [3:0]
      New connections: $memory\params$rdmux[0][3][5]$a$1687 [7:4] = { $memory\params$rdmux[0][3][5]$a$1687 [2] $memory\params$rdmux[0][3][5]$a$1687 [0] $memory\params$rdmux[0][3][5]$a$1687 [0] $memory\params$rdmux[0][3][5]$a$1687 [1] }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][4][1]$1698:
      Old ports: A=$memory\params$rdmux[0][4][1]$a$1699, B=$memory\params$rdmux[0][4][1]$b$1700, Y=$memory\params$rdmux[0][3][0]$b$1673
      New ports: A={ 1'0 $memory\params$rdmux[0][4][1]$a$1699 [3] $memory\params$rdmux[0][4][1]$a$1699 [3] $memory\params$rdmux[0][4][1]$a$1699 [3] 2'10 $memory\params$rdmux[0][4][1]$a$1699 [0] }, B={ $memory\params$rdmux[0][4][1]$b$1700 [5] $memory\params$rdmux[0][4][1]$b$1700 [5] 1'0 $memory\params$rdmux[0][4][1]$b$1700 [3:2] $memory\params$rdmux[0][4][1]$b$1700 [0] $memory\params$rdmux[0][4][1]$b$1700 [0] }, Y={ $memory\params$rdmux[0][3][0]$b$1673 [7] $memory\params$rdmux[0][3][0]$b$1673 [5:0] }
      New connections: $memory\params$rdmux[0][3][0]$b$1673 [6] = 1'0
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][4][2]$1701:
      Old ports: A=$memory\params$rdmux[0][4][2]$a$1702, B=$memory\params$rdmux[0][4][2]$b$1703, Y=$memory\params$rdmux[0][3][1]$a$1675
      New ports: A={ $memory\params$rdmux[0][4][2]$a$1702 [7:6] 1'0 $memory\params$rdmux[0][4][2]$a$1702 [3] $memory\params$rdmux[0][4][2]$a$1702 [0] 1'0 $memory\params$rdmux[0][4][2]$a$1702 [0] }, B={ $memory\params$rdmux[0][4][2]$b$1703 [7] $memory\params$rdmux[0][4][2]$b$1703 [5] $memory\params$rdmux[0][4][2]$b$1703 [5] 1'1 $memory\params$rdmux[0][4][2]$b$1703 [2:0] }, Y={ $memory\params$rdmux[0][3][1]$a$1675 [7:5] $memory\params$rdmux[0][3][1]$a$1675 [3:0] }
      New connections: $memory\params$rdmux[0][3][1]$a$1675 [4] = 1'0
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][4][3]$1704:
      Old ports: A=$memory\params$rdmux[0][4][3]$a$1705, B=$memory\params$rdmux[0][4][3]$b$1706, Y=$memory\params$rdmux[0][3][1]$b$1676
      New ports: A={ 1'0 $memory\params$rdmux[0][4][3]$a$1705 [3] $memory\params$rdmux[0][4][3]$a$1705 [1] $memory\params$rdmux[0][4][3]$a$1705 [1:0] }, B={ $memory\params$rdmux[0][4][3]$b$1706 [4] 1'0 $memory\params$rdmux[0][4][3]$b$1706 [0] $memory\params$rdmux[0][4][3]$b$1706 [1:0] }, Y=$memory\params$rdmux[0][3][1]$b$1676 [4:0]
      New connections: $memory\params$rdmux[0][3][1]$b$1676 [7:5] = 3'000
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][4][4]$1707:
      Old ports: A=$memory\params$rdmux[0][4][4]$a$1708, B=$memory\params$rdmux[0][4][4]$b$1709, Y=$memory\params$rdmux[0][3][2]$a$1678
      New ports: A=$memory\params$rdmux[0][4][4]$a$1708 [5:0], B={ 1'0 $memory\params$rdmux[0][4][4]$b$1709 [4:2] 2'00 }, Y=$memory\params$rdmux[0][3][2]$a$1678 [5:0]
      New connections: $memory\params$rdmux[0][3][2]$a$1678 [7:6] = 2'00
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][4][5]$1710:
      Old ports: A=$memory\params$rdmux[0][4][5]$a$1711, B=$memory\params$rdmux[0][4][5]$b$1712, Y=$memory\params$rdmux[0][3][2]$b$1679
      New ports: A={ $memory\params$rdmux[0][4][5]$a$1711 [3] $memory\params$rdmux[0][4][5]$a$1711 [1:0] }, B={ $memory\params$rdmux[0][4][5]$b$1712 [3] 1'1 $memory\params$rdmux[0][4][5]$b$1712 [0] }, Y={ $memory\params$rdmux[0][3][2]$b$1679 [3] $memory\params$rdmux[0][3][2]$b$1679 [1:0] }
      New connections: { $memory\params$rdmux[0][3][2]$b$1679 [7:4] $memory\params$rdmux[0][3][2]$b$1679 [2] } = { 4'0000 $memory\params$rdmux[0][3][2]$b$1679 [0] }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][4][6]$1713:
      Old ports: A=$memory\params$rdmux[0][4][6]$a$1714, B=$memory\params$rdmux[0][4][6]$b$1715, Y=$memory\params$rdmux[0][3][3]$a$1681
      New ports: A={ $memory\params$rdmux[0][4][6]$a$1714 [5:1] 1'1 }, B={ 1'0 $memory\params$rdmux[0][4][6]$b$1715 [4] $memory\params$rdmux[0][4][6]$b$1715 [0] $memory\params$rdmux[0][4][6]$b$1715 [2] 1'0 $memory\params$rdmux[0][4][6]$b$1715 [0] }, Y=$memory\params$rdmux[0][3][3]$a$1681 [5:0]
      New connections: $memory\params$rdmux[0][3][3]$a$1681 [7:6] = 2'00
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][4][7]$1716:
      Old ports: A=$memory\params$rdmux[0][4][7]$a$1717, B=$memory\params$rdmux[0][4][7]$b$1718, Y=$memory\params$rdmux[0][3][3]$b$1682
      New ports: A={ $memory\params$rdmux[0][4][7]$a$1717 [7] $memory\params$rdmux[0][4][7]$a$1717 [3] $memory\params$rdmux[0][4][7]$a$1717 [3] $memory\params$rdmux[0][4][7]$a$1717 [3] $memory\params$rdmux[0][4][7]$a$1717 [0] 1'0 $memory\params$rdmux[0][4][7]$a$1717 [0] }, B={ 1'0 $memory\params$rdmux[0][4][7]$b$1718 [0] $memory\params$rdmux[0][4][7]$b$1718 [1] $memory\params$rdmux[0][4][7]$b$1718 [3] 1'0 $memory\params$rdmux[0][4][7]$b$1718 [1:0] }, Y={ $memory\params$rdmux[0][3][3]$b$1682 [7] $memory\params$rdmux[0][3][3]$b$1682 [5:0] }
      New connections: $memory\params$rdmux[0][3][3]$b$1682 [6] = $memory\params$rdmux[0][3][3]$b$1682 [5]
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][4][8]$1719:
      Old ports: A=$memory\params$rdmux[0][4][8]$a$1720, B=$memory\params$rdmux[0][4][8]$b$1721, Y=$memory\params$rdmux[0][3][4]$a$1684
      New ports: A={ $memory\params$rdmux[0][4][8]$a$1720 [5] $memory\params$rdmux[0][4][8]$a$1720 [0] }, B={ $memory\params$rdmux[0][4][8]$b$1721 [5] $memory\params$rdmux[0][4][8]$b$1721 [0] }, Y={ $memory\params$rdmux[0][3][4]$a$1684 [5] $memory\params$rdmux[0][3][4]$a$1684 [0] }
      New connections: { $memory\params$rdmux[0][3][4]$a$1684 [7:6] $memory\params$rdmux[0][3][4]$a$1684 [4:1] } = { $memory\params$rdmux[0][3][4]$a$1684 [5] 5'00000 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][4][9]$1722:
      Old ports: A=$memory\params$rdmux[0][4][9]$a$1723, B=$memory\params$rdmux[0][4][9]$b$1724, Y=$memory\params$rdmux[0][3][4]$b$1685
      New ports: A={ $memory\params$rdmux[0][4][9]$a$1723 [2] $memory\params$rdmux[0][4][9]$a$1723 [0] $memory\params$rdmux[0][4][9]$a$1723 [0] $memory\params$rdmux[0][4][9]$a$1723 [3:0] }, B={ $memory\params$rdmux[0][4][9]$b$1724 [5] 1'0 $memory\params$rdmux[0][4][9]$b$1724 [5] 3'000 $memory\params$rdmux[0][4][9]$b$1724 [0] }, Y={ $memory\params$rdmux[0][3][4]$b$1685 [7:5] $memory\params$rdmux[0][3][4]$b$1685 [3:0] }
      New connections: $memory\params$rdmux[0][3][4]$b$1685 [4] = $memory\params$rdmux[0][3][4]$b$1685 [1]
  Optimizing cells in module \demo.
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][1][1]$1252:
      Old ports: A=$memory\cmd$rdmux[0][1][1]$a$1253, B=$memory\cmd$rdmux[0][1][1]$b$1254, Y=$memory\cmd$rdmux[0][0][0]$b$1248
      New ports: A={ 2'10 $memory\cmd$rdmux[0][1][1]$a$1253 [3:0] }, B={ $memory\cmd$rdmux[0][1][1]$b$1254 [1] $memory\cmd$rdmux[0][1][1]$b$1254 [2:1] $memory\cmd$rdmux[0][1][1]$b$1254 [2:0] }, Y=$memory\cmd$rdmux[0][0][0]$b$1248 [5:0]
      New connections: $memory\cmd$rdmux[0][0][0]$b$1248 [7:6] = { $memory\cmd$rdmux[0][0][0]$b$1248 [4] $memory\cmd$rdmux[0][0][0]$b$1248 [4] }
    Consolidated identical input bits for $mux cell $memory\num_params$rdmux[0][1][0]$1392:
      Old ports: A=$memory\num_params$rdmux[0][1][0]$a$1393, B=$memory\num_params$rdmux[0][1][0]$b$1394, Y=$memory\num_params$rdmux[0][0][0]$a$1390
      New ports: A={ 1'0 $memory\num_params$rdmux[0][1][0]$a$1393 [2:0] }, B={ $memory\num_params$rdmux[0][1][0]$b$1394 [4] 1'0 $memory\num_params$rdmux[0][1][0]$b$1394 [1:0] }, Y={ $memory\num_params$rdmux[0][0][0]$a$1390 [4] $memory\num_params$rdmux[0][0][0]$a$1390 [2:0] }
      New connections: { $memory\num_params$rdmux[0][0][0]$a$1390 [13:5] $memory\num_params$rdmux[0][0][0]$a$1390 [3] } = 10'0000000000
    Consolidated identical input bits for $mux cell $memory\num_params$rdmux[0][1][1]$1395:
      Old ports: A=$memory\num_params$rdmux[0][1][1]$a$1396, B=$memory\num_params$rdmux[0][1][1]$b$1397, Y=$memory\num_params$rdmux[0][0][0]$b$1391
      New ports: A={ $memory\num_params$rdmux[0][1][1]$a$1396 [9] $memory\num_params$rdmux[0][1][1]$a$1396 [2] 1'0 }, B={ $memory\num_params$rdmux[0][1][1]$b$1397 [0] $memory\num_params$rdmux[0][1][1]$b$1397 [2] $memory\num_params$rdmux[0][1][1]$b$1397 [0] }, Y={ $memory\num_params$rdmux[0][0][0]$b$1391 [9] $memory\num_params$rdmux[0][0][0]$b$1391 [2] $memory\num_params$rdmux[0][0][0]$b$1391 [0] }
      New connections: { $memory\num_params$rdmux[0][0][0]$b$1391 [13:10] $memory\num_params$rdmux[0][0][0]$b$1391 [8:3] $memory\num_params$rdmux[0][0][0]$b$1391 [1] } = { $memory\num_params$rdmux[0][0][0]$b$1391 [9] $memory\num_params$rdmux[0][0][0]$b$1391 [9] $memory\num_params$rdmux[0][0][0]$b$1391 [0] $memory\num_params$rdmux[0][0][0]$b$1391 [0] $memory\num_params$rdmux[0][0][0]$b$1391 [0] $memory\num_params$rdmux[0][0][0]$b$1391 [0] $memory\num_params$rdmux[0][0][0]$b$1391 [0] $memory\num_params$rdmux[0][0][0]$b$1391 [0] $memory\num_params$rdmux[0][0][0]$b$1391 [0] $memory\num_params$rdmux[0][0][0]$b$1391 [0] $memory\num_params$rdmux[0][0][0]$b$1391 [0] }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][3][0]$1671:
      Old ports: A=$memory\params$rdmux[0][3][0]$a$1672, B=$memory\params$rdmux[0][3][0]$b$1673, Y=$memory\params$rdmux[0][2][0]$a$1660
      New ports: A={ 1'0 $memory\params$rdmux[0][3][0]$a$1672 [3] $memory\params$rdmux[0][3][0]$a$1672 [3] $memory\params$rdmux[0][3][0]$a$1672 [3] 2'10 $memory\params$rdmux[0][3][0]$a$1672 [0] }, B={ $memory\params$rdmux[0][3][0]$b$1673 [7] $memory\params$rdmux[0][3][0]$b$1673 [5:0] }, Y={ $memory\params$rdmux[0][2][0]$a$1660 [7] $memory\params$rdmux[0][2][0]$a$1660 [5:0] }
      New connections: $memory\params$rdmux[0][2][0]$a$1660 [6] = 1'0
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][3][2]$1677:
      Old ports: A=$memory\params$rdmux[0][3][2]$a$1678, B=$memory\params$rdmux[0][3][2]$b$1679, Y=$memory\params$rdmux[0][2][1]$a$1663
      New ports: A=$memory\params$rdmux[0][3][2]$a$1678 [5:0], B={ 2'00 $memory\params$rdmux[0][3][2]$b$1679 [3] $memory\params$rdmux[0][3][2]$b$1679 [0] $memory\params$rdmux[0][3][2]$b$1679 [1:0] }, Y=$memory\params$rdmux[0][2][1]$a$1663 [5:0]
      New connections: $memory\params$rdmux[0][2][1]$a$1663 [7:6] = 2'00
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][3][4]$1683:
      Old ports: A=$memory\params$rdmux[0][3][4]$a$1684, B=$memory\params$rdmux[0][3][4]$b$1685, Y=$memory\params$rdmux[0][2][2]$a$1666
      New ports: A={ $memory\params$rdmux[0][3][4]$a$1684 [5] 1'0 $memory\params$rdmux[0][3][4]$a$1684 [5] 3'000 $memory\params$rdmux[0][3][4]$a$1684 [0] }, B={ $memory\params$rdmux[0][3][4]$b$1685 [7:5] $memory\params$rdmux[0][3][4]$b$1685 [3:0] }, Y={ $memory\params$rdmux[0][2][2]$a$1666 [7:5] $memory\params$rdmux[0][2][2]$a$1666 [3:0] }
      New connections: $memory\params$rdmux[0][2][2]$a$1666 [4] = $memory\params$rdmux[0][2][2]$a$1666 [1]
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][3][5]$1686:
      Old ports: A=$memory\params$rdmux[0][3][5]$a$1687, B=8'xxxxxxxx, Y=$memory\params$rdmux[0][2][2]$b$1667
      New ports: A=$memory\params$rdmux[0][3][5]$a$1687 [3:0], B=4'xxxx, Y=$memory\params$rdmux[0][2][2]$b$1667 [3:0]
      New connections: $memory\params$rdmux[0][2][2]$b$1667 [7:4] = { $memory\params$rdmux[0][2][2]$b$1667 [2] $memory\params$rdmux[0][2][2]$b$1667 [0] $memory\params$rdmux[0][2][2]$b$1667 [0] $memory\params$rdmux[0][2][2]$b$1667 [1] }
  Optimizing cells in module \demo.
    Consolidated identical input bits for $mux cell $memory\num_params$rdmux[0][0][0]$1389:
      Old ports: A=$memory\num_params$rdmux[0][0][0]$a$1390, B=$memory\num_params$rdmux[0][0][0]$b$1391, Y=$memrd$\num_params$demo.v:499$210_DATA
      New ports: A={ 1'0 $memory\num_params$rdmux[0][0][0]$a$1390 [4] 1'0 $memory\num_params$rdmux[0][0][0]$a$1390 [2:0] }, B={ $memory\num_params$rdmux[0][0][0]$b$1391 [9] $memory\num_params$rdmux[0][0][0]$b$1391 [0] $memory\num_params$rdmux[0][0][0]$b$1391 [0] $memory\num_params$rdmux[0][0][0]$b$1391 [2] $memory\num_params$rdmux[0][0][0]$b$1391 [0] $memory\num_params$rdmux[0][0][0]$b$1391 [0] }, Y={ $memrd$\num_params$demo.v:499$210_DATA [9] $memrd$\num_params$demo.v:499$210_DATA [4:0] }
      New connections: { $memrd$\num_params$demo.v:499$210_DATA [13:10] $memrd$\num_params$demo.v:499$210_DATA [8:5] } = { $memrd$\num_params$demo.v:499$210_DATA [9] $memrd$\num_params$demo.v:499$210_DATA [9] $memrd$\num_params$demo.v:499$210_DATA [3] $memrd$\num_params$demo.v:499$210_DATA [3] $memrd$\num_params$demo.v:499$210_DATA [3] $memrd$\num_params$demo.v:499$210_DATA [3] $memrd$\num_params$demo.v:499$210_DATA [3] $memrd$\num_params$demo.v:499$210_DATA [3] }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][2][2]$1665:
      Old ports: A=$memory\params$rdmux[0][2][2]$a$1666, B=$memory\params$rdmux[0][2][2]$b$1667, Y=$memory\params$rdmux[0][1][1]$a$1657
      New ports: A={ $memory\params$rdmux[0][2][2]$a$1666 [7:5] $memory\params$rdmux[0][2][2]$a$1666 [3:0] }, B={ $memory\params$rdmux[0][2][2]$b$1667 [2] $memory\params$rdmux[0][2][2]$b$1667 [0] $memory\params$rdmux[0][2][2]$b$1667 [0] $memory\params$rdmux[0][2][2]$b$1667 [3:0] }, Y={ $memory\params$rdmux[0][1][1]$a$1657 [7:5] $memory\params$rdmux[0][1][1]$a$1657 [3:0] }
      New connections: $memory\params$rdmux[0][1][1]$a$1657 [4] = $memory\params$rdmux[0][1][1]$a$1657 [1]
  Optimizing cells in module \demo.
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][1][1]$1656:
      Old ports: A=$memory\params$rdmux[0][1][1]$a$1657, B=8'xxxxxxxx, Y=$memory\params$rdmux[0][0][0]$b$1652
      New ports: A={ $memory\params$rdmux[0][1][1]$a$1657 [7:5] $memory\params$rdmux[0][1][1]$a$1657 [3:0] }, B=7'xxxxxxx, Y={ $memory\params$rdmux[0][0][0]$b$1652 [7:5] $memory\params$rdmux[0][0][0]$b$1652 [3:0] }
      New connections: $memory\params$rdmux[0][0][0]$b$1652 [4] = $memory\params$rdmux[0][0][0]$b$1652 [1]
  Optimizing cells in module \demo.
Performed a total of 127 changes.

2.29.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\demo'.
<suppressed ~159 debug messages>
Removed a total of 53 cells.

2.29.13. Executing OPT_RMDFF pass (remove dff with constant values).

2.29.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..
Removed 0 unused cells and 59 unused wires.
<suppressed ~1 debug messages>

2.29.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.
<suppressed ~1 debug messages>

2.29.16. Rerunning OPT passes. (Maybe there is more to do..)

2.29.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \demo..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~27 debug messages>

2.29.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \demo.
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][3][2]$1273:
      Old ports: A={ 1'0 $memory\cmd$rdmux[0][3][1]$a$1271 [6:5] $memory\cmd$rdmux[0][3][1]$a$1271 [5] }, B={ $memory\cmd$rdmux[0][3][1]$a$1271 [6:5] 1'0 $memory\cmd$rdmux[0][3][1]$a$1271 [5] }, Y={ $memory\cmd$rdmux[0][2][1]$a$1259 [5] $memory\cmd$rdmux[0][2][1]$a$1259 [2:0] }
      New ports: A={ 1'0 $memory\cmd$rdmux[0][3][1]$a$1271 [6:5] }, B={ $memory\cmd$rdmux[0][3][1]$a$1271 [6:5] 1'0 }, Y={ $memory\cmd$rdmux[0][2][1]$a$1259 [5] $memory\cmd$rdmux[0][2][1]$a$1259 [2:1] }
      New connections: $memory\cmd$rdmux[0][2][1]$a$1259 [0] = $memory\cmd$rdmux[0][3][1]$a$1271 [5]
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][10]$1773:
      Old ports: A={ 1'1 $memory\params$rdmux[0][5][0]$b$1745 [5] $memory\params$rdmux[0][5][0]$b$1745 [0] }, B={ $memory\params$rdmux[0][5][0]$b$1745 [5] $memory\params$rdmux[0][5][0]$b$1745 [0] $memory\params$rdmux[0][5][0]$b$1745 [0] }, Y={ $memory\params$rdmux[0][4][5]$a$1711 [3] $memory\params$rdmux[0][4][5]$a$1711 [1] $memory\params$rdmux[0][4][5]$a$1711 [2] }
      New ports: A={ 1'1 $memory\params$rdmux[0][5][0]$b$1745 [5] }, B={ $memory\params$rdmux[0][5][0]$b$1745 [5] $memory\params$rdmux[0][5][0]$b$1745 [0] }, Y={ $memory\params$rdmux[0][4][5]$a$1711 [3] $memory\params$rdmux[0][4][5]$a$1711 [1] }
      New connections: $memory\params$rdmux[0][4][5]$a$1711 [2] = $memory\params$rdmux[0][5][0]$b$1745 [0]
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][15]$1788:
      Old ports: A={ $memory\params$rdmux[0][5][11]$a$1777 [3] $memory\params$rdmux[0][5][11]$a$1777 [3] 1'0 }, B={ $memory\params$rdmux[0][5][11]$a$1777 [3] 1'0 $memory\params$rdmux[0][5][11]$a$1777 [3] }, Y={ $memory\params$rdmux[0][4][7]$b$1718 [3] $memory\params$rdmux[0][4][7]$b$1718 [4] $memory\params$rdmux[0][4][7]$b$1718 [6] }
      New ports: A={ $memory\params$rdmux[0][5][11]$a$1777 [3] 1'0 }, B={ 1'0 $memory\params$rdmux[0][5][11]$a$1777 [3] }, Y={ $memory\params$rdmux[0][4][7]$b$1718 [4] $memory\params$rdmux[0][4][7]$b$1718 [6] }
      New connections: $memory\params$rdmux[0][4][7]$b$1718 [3] = $memory\params$rdmux[0][5][11]$a$1777 [3]
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][20]$1803:
      Old ports: A={ $memory\params$rdmux[0][5][11]$b$1778 [2] $memory\params$rdmux[0][5][11]$b$1778 [2] 1'0 }, B={ $memory\params$rdmux[0][5][11]$b$1778 [2] 1'0 $memory\params$rdmux[0][5][11]$b$1778 [2] }, Y={ $memory\params$rdmux[0][4][10]$a$1726 [3] $memory\params$rdmux[0][4][10]$a$1726 [4] $memory\params$rdmux[0][4][10]$a$1726 [6] }
      New ports: A={ $memory\params$rdmux[0][5][11]$b$1778 [2] 1'0 }, B={ 1'0 $memory\params$rdmux[0][5][11]$b$1778 [2] }, Y={ $memory\params$rdmux[0][4][10]$a$1726 [4] $memory\params$rdmux[0][4][10]$a$1726 [6] }
      New connections: $memory\params$rdmux[0][4][10]$a$1726 [3] = $memory\params$rdmux[0][5][11]$b$1778 [2]
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][5]$1758:
      Old ports: A={ $memory\params$rdmux[0][5][0]$b$1745 [0] $memory\params$rdmux[0][5][0]$b$1745 [5] $memory\params$rdmux[0][5][0]$b$1745 [0] $memory\params$rdmux[0][5][0]$b$1745 [5] $memory\params$rdmux[0][5][0]$b$1745 [0] }, B={ $memory\params$rdmux[0][5][0]$b$1745 [5] $memory\params$rdmux[0][5][0]$b$1745 [5] 2'11 $memory\params$rdmux[0][5][0]$b$1745 [0] }, Y={ $memory\params$rdmux[0][4][2]$b$1703 [7:6] $memory\params$rdmux[0][4][2]$b$1703 [2:0] }
      New ports: A={ $memory\params$rdmux[0][5][0]$b$1745 [0] $memory\params$rdmux[0][5][0]$b$1745 [0] $memory\params$rdmux[0][5][0]$b$1745 [5] }, B={ $memory\params$rdmux[0][5][0]$b$1745 [5] 2'11 }, Y={ $memory\params$rdmux[0][4][2]$b$1703 [7] $memory\params$rdmux[0][4][2]$b$1703 [2:1] }
      New connections: { $memory\params$rdmux[0][4][2]$b$1703 [6] $memory\params$rdmux[0][4][2]$b$1703 [0] } = { $memory\params$rdmux[0][5][0]$b$1745 [5] $memory\params$rdmux[0][5][0]$b$1745 [0] }
  Optimizing cells in module \demo.
Performed a total of 5 changes.

2.29.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\demo'.
Removed a total of 0 cells.

2.29.20. Executing OPT_RMDFF pass (remove dff with constant values).

2.29.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..
Removed 0 unused cells and 4 unused wires.
<suppressed ~1 debug messages>

2.29.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.

2.29.23. Rerunning OPT passes. (Maybe there is more to do..)

2.29.24. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \demo..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~27 debug messages>

2.29.25. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \demo.
Performed a total of 0 changes.

2.29.26. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\demo'.
Removed a total of 0 cells.

2.29.27. Executing OPT_RMDFF pass (remove dff with constant values).

2.29.28. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..

2.29.29. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.

2.29.30. Finished OPT passes. (There is nothing left to do.)

2.30. Executing TECHMAP pass (map to technology primitives).

2.30.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

2.30.2. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/arith_map.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/arith_map.v' to AST representation.
Generating RTLIL representation for module `\_80_ice40_alu'.
Successfully finished Verilog frontend.

2.30.3. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $logic_and.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=15\B_WIDTH=16\Y_WIDTH=16 for cells of type $alu.
Using template $paramod$constmap:446553370afc6c2aa6cc0b8f657b7f64b237ff7c$paramod$55f49a009a975a30a28fdd971adb6110903d4740\_90_shift_shiftx for cells of type $shiftx.
Using template $paramod$constmap:ee5af906ae0d3d414c6a0471604c553ef70c8e09$paramod$1297efc30c1e19551d1f4e269f2cbfa7dd15f801\_90_shift_shiftx for cells of type $shiftx.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $reduce_and.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=5\Y_WIDTH=5 for cells of type $alu.
Using extmapper simplemap for cells of type $logic_or.
Using extmapper simplemap for cells of type $lut.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=7\Y_WIDTH=7 for cells of type $alu.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=5\B_WIDTH=1\Y_WIDTH=5 for cells of type $alu.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=4\B_WIDTH=1\Y_WIDTH=4 for cells of type $alu.
Using extmapper simplemap for cells of type $ne.
Using template $paramod\_90_pmux\WIDTH=14\S_WIDTH=2 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=8\S_WIDTH=2 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=16\S_WIDTH=7 for cells of type $pmux.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=14\B_WIDTH=1\Y_WIDTH=14 for cells of type $alu.
Using template $paramod\_90_pmux\WIDTH=6\S_WIDTH=19 for cells of type $pmux.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=6\B_WIDTH=16\Y_WIDTH=16 for cells of type $alu.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=3\B_WIDTH=1\Y_WIDTH=3 for cells of type $alu.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=9\B_WIDTH=16\Y_WIDTH=16 for cells of type $alu.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=7\B_WIDTH=16\Y_WIDTH=16 for cells of type $alu.
Using template $paramod\_90_pmux\WIDTH=1\S_WIDTH=2 for cells of type $pmux.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=16\Y_WIDTH=16 for cells of type $alu.
Using template $paramod\_90_pmux\WIDTH=1\S_WIDTH=3 for cells of type $pmux.
Using extmapper simplemap for cells of type $dff.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $pos.
Using extmapper simplemap for cells of type $and.
No more expansions possible.
<suppressed ~847 debug messages>

2.31. Executing ICE40_OPT pass (performing simple optimizations).

2.31.1. Running ICE40 specific optimizations.

2.31.2. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.
<suppressed ~762 debug messages>

2.31.3. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\demo'.
<suppressed ~1239 debug messages>
Removed a total of 413 cells.

2.31.4. Executing OPT_RMDFF pass (remove dff with constant values).

2.31.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..
Removed 182 unused cells and 606 unused wires.
<suppressed ~183 debug messages>

2.31.6. Rerunning OPT passes. (Removed registers in this run.)

2.31.7. Running ICE40 specific optimizations.
Optimized away SB_CARRY cell demo.$auto$alumacc.cc:474:replace_alu$1095.slice[0].carry: CO=$auto$alumacc.cc:474:replace_alu$1095.BB [0]
Optimized away SB_CARRY cell demo.$auto$alumacc.cc:474:replace_alu$1106.slice[0].carry: CO=$auto$alumacc.cc:474:replace_alu$1095.BB [0]
Optimized away SB_CARRY cell demo.$auto$alumacc.cc:474:replace_alu$1117.slice[0].carry: CO=$auto$alumacc.cc:474:replace_alu$1095.BB [0]
Optimized away SB_CARRY cell demo.$auto$alumacc.cc:474:replace_alu$1128.slice[0].carry: CO=$auto$alumacc.cc:474:replace_alu$1095.BB [0]
Optimized away SB_CARRY cell demo.$auto$alumacc.cc:474:replace_alu$1139.slice[0].carry: CO=$auto$alumacc.cc:474:replace_alu$1095.BB [0]
Optimized away SB_CARRY cell demo.$auto$alumacc.cc:474:replace_alu$1152.slice[0].carry: CO=1'1
Optimized away SB_CARRY cell demo.$auto$alumacc.cc:474:replace_alu$1165.slice[0].carry: CO=\delay [0]
Optimized away SB_CARRY cell demo.$auto$alumacc.cc:474:replace_alu$1168.slice[0].carry: CO=\cmd_counter [0]
Optimized away SB_CARRY cell demo.$auto$alumacc.cc:474:replace_alu$1171.slice[0].carry: CO=\param_counter [0]
Optimized away SB_CARRY cell demo.$auto$alumacc.cc:474:replace_alu$1174.slice[0].carry: CO=\cmd_counter [0]
Optimized away SB_CARRY cell demo.$auto$alumacc.cc:474:replace_alu$1177.slice[0].carry: CO=\pixel_bit_counter [0]
Optimized away SB_CARRY cell demo.$auto$alumacc.cc:474:replace_alu$1180.slice[0].carry: CO=\bit_counter [0]
Optimized away SB_CARRY cell demo.$auto$alumacc.cc:474:replace_alu$1183.slice[0].carry: CO=\params_left [0]
Mapping SB_LUT4 cell demo.$auto$alumacc.cc:474:replace_alu$1165.slice[1].adder back to logic.
Mapping SB_LUT4 cell demo.$auto$alumacc.cc:474:replace_alu$1168.slice[1].adder back to logic.
Mapping SB_LUT4 cell demo.$auto$alumacc.cc:474:replace_alu$1171.slice[1].adder back to logic.
Mapping SB_LUT4 cell demo.$auto$alumacc.cc:474:replace_alu$1174.slice[1].adder back to logic.
Mapping SB_LUT4 cell demo.$auto$alumacc.cc:474:replace_alu$1177.slice[1].adder back to logic.
Mapping SB_LUT4 cell demo.$auto$alumacc.cc:474:replace_alu$1180.slice[1].adder back to logic.
Mapping SB_LUT4 cell demo.$auto$alumacc.cc:474:replace_alu$1183.slice[1].adder back to logic.

2.31.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.
<suppressed ~89 debug messages>

2.31.9. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\demo'.
<suppressed ~21 debug messages>
Removed a total of 7 cells.

2.31.10. Executing OPT_RMDFF pass (remove dff with constant values).

2.31.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..
Removed 0 unused cells and 21 unused wires.
<suppressed ~1 debug messages>

2.31.12. Rerunning OPT passes. (Removed registers in this run.)

2.31.13. Running ICE40 specific optimizations.
Optimized away SB_CARRY cell demo.$auto$alumacc.cc:474:replace_alu$1152.slice[1].carry: CO=$auto$alumacc.cc:474:replace_alu$1095.BB [1]

2.31.14. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.

2.31.15. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\demo'.
Removed a total of 0 cells.

2.31.16. Executing OPT_RMDFF pass (remove dff with constant values).

2.31.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..

2.31.18. Rerunning OPT passes. (Removed registers in this run.)

2.31.19. Running ICE40 specific optimizations.

2.31.20. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.

2.31.21. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\demo'.
Removed a total of 0 cells.

2.31.22. Executing OPT_RMDFF pass (remove dff with constant values).

2.31.23. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..

2.31.24. Finished OPT passes. (There is nothing left to do.)

2.32. Executing DFFSR2DFF pass (mapping DFFSR cells to simpler FFs).

2.33. Executing DFF2DFFE pass (transform $dff to $dffe where applicable).
Selected cell types for direct conversion:
  $_DFF_PP1_ -> $__DFFE_PP1
  $_DFF_PP0_ -> $__DFFE_PP0
  $_DFF_PN1_ -> $__DFFE_PN1
  $_DFF_PN0_ -> $__DFFE_PN0
  $_DFF_NP1_ -> $__DFFE_NP1
  $_DFF_NP0_ -> $__DFFE_NP0
  $_DFF_NN1_ -> $__DFFE_NN1
  $_DFF_NN0_ -> $__DFFE_NN0
  $_DFF_N_ -> $_DFFE_NP_
  $_DFF_P_ -> $_DFFE_PP_
Transforming FF to FF+Enable cells in module demo:
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3820 to $_DFFE_PP_ for $0\rst[0:0] -> \rst.
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3821 to $_DFFE_PP_ for $0\dc[0:0] -> \dc.
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3822 to $_DFFE_PP_ for $0\mosi[0:0] -> \mosi.
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3823 to $_DFFE_PP_ for $0\cs[0:0] -> \cs.
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3824 to $_DFFE_PP_ for $0\state[5:0] [0] -> \state [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3825 to $_DFFE_PP_ for $0\state[5:0] [1] -> \state [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3826 to $_DFFE_PP_ for $0\state[5:0] [2] -> \state [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3827 to $_DFFE_PP_ for $0\state[5:0] [3] -> \state [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3828 to $_DFFE_PP_ for $0\state[5:0] [4] -> \state [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3829 to $_DFFE_PP_ for $0\state[5:0] [5] -> \state [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3830 to $_DFFE_PP_ for $0\delay[15:0] [0] -> \delay [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3831 to $_DFFE_PP_ for $0\delay[15:0] [1] -> \delay [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3832 to $_DFFE_PP_ for $0\delay[15:0] [2] -> \delay [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3833 to $_DFFE_PP_ for $0\delay[15:0] [3] -> \delay [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3834 to $_DFFE_PP_ for $0\delay[15:0] [4] -> \delay [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3835 to $_DFFE_PP_ for $0\delay[15:0] [5] -> \delay [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3836 to $_DFFE_PP_ for $0\delay[15:0] [6] -> \delay [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3837 to $_DFFE_PP_ for $0\delay[15:0] [7] -> \delay [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3838 to $_DFFE_PP_ for $0\delay[15:0] [8] -> \delay [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3839 to $_DFFE_PP_ for $0\delay[15:0] [9] -> \delay [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3840 to $_DFFE_PP_ for $0\delay[15:0] [10] -> \delay [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3841 to $_DFFE_PP_ for $0\delay[15:0] [11] -> \delay [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3842 to $_DFFE_PP_ for $0\delay[15:0] [12] -> \delay [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3843 to $_DFFE_PP_ for $0\delay[15:0] [13] -> \delay [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3844 to $_DFFE_PP_ for $0\delay[15:0] [14] -> \delay [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3845 to $_DFFE_PP_ for $0\delay[15:0] [15] -> \delay [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3846 to $_DFFE_PP_ for $0\data[7:0] [0] -> \data [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3847 to $_DFFE_PP_ for $0\data[7:0] [1] -> \data [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3848 to $_DFFE_PP_ for $0\data[7:0] [2] -> \data [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3849 to $_DFFE_PP_ for $0\data[7:0] [3] -> \data [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3850 to $_DFFE_PP_ for $0\data[7:0] [4] -> \data [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3851 to $_DFFE_PP_ for $0\data[7:0] [5] -> \data [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3852 to $_DFFE_PP_ for $0\data[7:0] [6] -> \data [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3853 to $_DFFE_PP_ for $0\data[7:0] [7] -> \data [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3854 to $_DFFE_PP_ for $0\bit_counter[2:0] [0] -> \bit_counter [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3855 to $_DFFE_PP_ for $0\bit_counter[2:0] [1] -> \bit_counter [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3856 to $_DFFE_PP_ for $0\bit_counter[2:0] [2] -> \bit_counter [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3857 to $_DFFE_PP_ for $0\pixel_data[15:0] [0] -> \pixel_data [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3858 to $_DFFE_PP_ for $0\pixel_data[15:0] [1] -> \pixel_data [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3859 to $_DFFE_PP_ for $0\pixel_data[15:0] [2] -> \pixel_data [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3860 to $_DFFE_PP_ for $0\pixel_data[15:0] [3] -> \pixel_data [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3861 to $_DFFE_PP_ for $0\pixel_data[15:0] [4] -> \pixel_data [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3862 to $_DFFE_PP_ for $0\pixel_data[15:0] [5] -> \pixel_data [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3863 to $_DFFE_PP_ for $0\pixel_data[15:0] [6] -> \pixel_data [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3864 to $_DFFE_PP_ for $0\pixel_data[15:0] [7] -> \pixel_data [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3865 to $_DFFE_PP_ for $0\pixel_data[15:0] [8] -> \pixel_data [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3866 to $_DFFE_PP_ for $0\pixel_data[15:0] [9] -> \pixel_data [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3867 to $_DFFE_PP_ for $0\pixel_data[15:0] [10] -> \pixel_data [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3868 to $_DFFE_PP_ for $0\pixel_data[15:0] [11] -> \pixel_data [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3869 to $_DFFE_PP_ for $0\pixel_data[15:0] [12] -> \pixel_data [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3870 to $_DFFE_PP_ for $0\pixel_data[15:0] [13] -> \pixel_data [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3871 to $_DFFE_PP_ for $0\pixel_data[15:0] [14] -> \pixel_data [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3872 to $_DFFE_PP_ for $0\pixel_data[15:0] [15] -> \pixel_data [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3873 to $_DFFE_PP_ for $0\pixel_bit_counter[3:0] [0] -> \pixel_bit_counter [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3874 to $_DFFE_PP_ for $0\pixel_bit_counter[3:0] [1] -> \pixel_bit_counter [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3875 to $_DFFE_PP_ for $0\pixel_bit_counter[3:0] [2] -> \pixel_bit_counter [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3876 to $_DFFE_PP_ for $0\pixel_bit_counter[3:0] [3] -> \pixel_bit_counter [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3877 to $_DFFE_PP_ for $0\cmd_counter[4:0] [0] -> \cmd_counter [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3878 to $_DFFE_PP_ for $0\cmd_counter[4:0] [1] -> \cmd_counter [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3879 to $_DFFE_PP_ for $0\cmd_counter[4:0] [2] -> \cmd_counter [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3880 to $_DFFE_PP_ for $0\cmd_counter[4:0] [3] -> \cmd_counter [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3881 to $_DFFE_PP_ for $0\cmd_counter[4:0] [4] -> \cmd_counter [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3882 to $_DFFE_PP_ for $0\param_counter[6:0] [0] -> \param_counter [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3883 to $_DFFE_PP_ for $0\param_counter[6:0] [1] -> \param_counter [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3884 to $_DFFE_PP_ for $0\param_counter[6:0] [2] -> \param_counter [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3885 to $_DFFE_PP_ for $0\param_counter[6:0] [3] -> \param_counter [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3886 to $_DFFE_PP_ for $0\param_counter[6:0] [4] -> \param_counter [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3887 to $_DFFE_PP_ for $0\param_counter[6:0] [5] -> \param_counter [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3888 to $_DFFE_PP_ for $0\param_counter[6:0] [6] -> \param_counter [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3889 to $_DFFE_PP_ for $0\params_left[13:0] [0] -> \params_left [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3890 to $_DFFE_PP_ for $0\params_left[13:0] [1] -> \params_left [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3891 to $_DFFE_PP_ for $0\params_left[13:0] [2] -> \params_left [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3892 to $_DFFE_PP_ for $0\params_left[13:0] [3] -> \params_left [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3893 to $_DFFE_PP_ for $0\params_left[13:0] [4] -> \params_left [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3894 to $_DFFE_PP_ for $0\params_left[13:0] [5] -> \params_left [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3895 to $_DFFE_PP_ for $0\params_left[13:0] [6] -> \params_left [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3896 to $_DFFE_PP_ for $0\params_left[13:0] [7] -> \params_left [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3897 to $_DFFE_PP_ for $0\params_left[13:0] [8] -> \params_left [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3898 to $_DFFE_PP_ for $0\params_left[13:0] [9] -> \params_left [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3899 to $_DFFE_PP_ for $0\params_left[13:0] [10] -> \params_left [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3900 to $_DFFE_PP_ for $0\params_left[13:0] [11] -> \params_left [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3901 to $_DFFE_PP_ for $0\params_left[13:0] [12] -> \params_left [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3902 to $_DFFE_PP_ for $0\params_left[13:0] [13] -> \params_left [13].

2.34. Executing TECHMAP pass (map to technology primitives).

2.34.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/cells_map.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$__DFFE_NN0'.
Generating RTLIL representation for module `\$__DFFE_NN1'.
Generating RTLIL representation for module `\$__DFFE_PN0'.
Generating RTLIL representation for module `\$__DFFE_PN1'.
Generating RTLIL representation for module `\$__DFFE_NP0'.
Generating RTLIL representation for module `\$__DFFE_NP1'.
Generating RTLIL representation for module `\$__DFFE_PP0'.
Generating RTLIL representation for module `\$__DFFE_PP1'.
Successfully finished Verilog frontend.

2.34.2. Continuing TECHMAP pass.
Using template \$_DFFE_PP_ for cells of type $_DFFE_PP_.
Using template \$_DFF_P_ for cells of type $_DFF_P_.
No more expansions possible.
<suppressed ~84 debug messages>

2.35. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.
<suppressed ~249 debug messages>

2.36. Executing SIMPLEMAP pass (map simple cells to gate primitives).

2.37. Executing ICE40_FFINIT pass (implement FF init values).
Handling FF init values in demo.
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3903 (SB_DFF): \scl = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3826 (SB_DFFE): \state [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3827 (SB_DFFE): \state [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3828 (SB_DFFE): \state [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3825 (SB_DFFE): \state [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3889 (SB_DFFE): \params_left [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3829 (SB_DFFE): \state [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3824 (SB_DFFE): \state [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3846 (SB_DFFE): \data [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3847 (SB_DFFE): \data [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3848 (SB_DFFE): \data [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3849 (SB_DFFE): \data [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3850 (SB_DFFE): \data [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3851 (SB_DFFE): \data [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3852 (SB_DFFE): \data [6] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3853 (SB_DFFE): \data [7] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3855 (SB_DFFE): \bit_counter [1] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3862 (SB_DFFE): \pixel_data [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3856 (SB_DFFE): \bit_counter [2] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3858 (SB_DFFE): \pixel_data [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3859 (SB_DFFE): \pixel_data [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3860 (SB_DFFE): \pixel_data [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3854 (SB_DFFE): \bit_counter [0] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3861 (SB_DFFE): \pixel_data [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3863 (SB_DFFE): \pixel_data [6] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3864 (SB_DFFE): \pixel_data [7] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3865 (SB_DFFE): \pixel_data [8] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3866 (SB_DFFE): \pixel_data [9] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3867 (SB_DFFE): \pixel_data [10] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3868 (SB_DFFE): \pixel_data [11] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3869 (SB_DFFE): \pixel_data [12] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3870 (SB_DFFE): \pixel_data [13] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3871 (SB_DFFE): \pixel_data [14] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3872 (SB_DFFE): \pixel_data [15] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3873 (SB_DFFE): \pixel_bit_counter [0] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3874 (SB_DFFE): \pixel_bit_counter [1] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3875 (SB_DFFE): \pixel_bit_counter [2] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3881 (SB_DFFE): \cmd_counter [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3876 (SB_DFFE): \pixel_bit_counter [3] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3878 (SB_DFFE): \cmd_counter [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3879 (SB_DFFE): \cmd_counter [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3857 (SB_DFFE): \pixel_data [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3880 (SB_DFFE): \cmd_counter [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3882 (SB_DFFE): \param_counter [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3883 (SB_DFFE): \param_counter [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3884 (SB_DFFE): \param_counter [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3885 (SB_DFFE): \param_counter [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3886 (SB_DFFE): \param_counter [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3887 (SB_DFFE): \param_counter [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3890 (SB_DFFE): \params_left [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3877 (SB_DFFE): \cmd_counter [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3888 (SB_DFFE): \param_counter [6] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3891 (SB_DFFE): \params_left [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3892 (SB_DFFE): \params_left [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3893 (SB_DFFE): \params_left [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3894 (SB_DFFE): \params_left [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3895 (SB_DFFE): \params_left [6] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3896 (SB_DFFE): \params_left [7] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3897 (SB_DFFE): \params_left [8] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3898 (SB_DFFE): \params_left [9] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3899 (SB_DFFE): \params_left [10] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3900 (SB_DFFE): \params_left [11] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3901 (SB_DFFE): \params_left [12] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3902 (SB_DFFE): \params_left [13] = 0

2.38. Executing ICE40_FFSSR pass (merge synchronous set/reset into FF cells).
Merging set/reset $_MUX_ cells into SB_FFs in demo.

2.39. Executing ICE40_OPT pass (performing simple optimizations).

2.39.1. Running ICE40 specific optimizations.

2.39.2. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.
<suppressed ~139 debug messages>

2.39.3. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\demo'.
<suppressed ~399 debug messages>
Removed a total of 133 cells.

2.39.4. Executing OPT_RMDFF pass (remove dff with constant values).

2.39.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..
Removed 0 unused cells and 725 unused wires.
<suppressed ~1 debug messages>

2.39.6. Rerunning OPT passes. (Removed registers in this run.)

2.39.7. Running ICE40 specific optimizations.

2.39.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.

2.39.9. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\demo'.
Removed a total of 0 cells.

2.39.10. Executing OPT_RMDFF pass (remove dff with constant values).

2.39.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..

2.39.12. Finished OPT passes. (There is nothing left to do.)

2.40. Executing TECHMAP pass (map to technology primitives).

2.40.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/latches_map.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/latches_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Successfully finished Verilog frontend.

2.40.2. Continuing TECHMAP pass.
No more expansions possible.

2.41. Executing ABC pass (technology mapping using ABC).

2.41.1. Extracting gate netlist of module `\demo' to `<abc-temp-dir>/input.blif'..
Extracted 1161 gates and 1289 wires to a netlist network with 126 inputs and 104 outputs.

2.41.1.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + lutpack -S 1 
ABC: + dress 
ABC: Total number of equiv classes                =     220.
ABC: Participating nodes from both networks       =     518.
ABC: Participating nodes from the first network   =     220. (  60.77 % of nodes)
ABC: Participating nodes from the second network  =     298. (  82.32 % of nodes)
ABC: Node pairs (any polarity)                    =     220. (  60.77 % of names can be moved)
ABC: Node pairs (same polarity)                   =     185. (  51.10 % of names can be moved)
ABC: Total runtime =     0.10 sec
ABC: + write_blif <abc-temp-dir>/output.blif 

2.41.1.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:      720
ABC RESULTS:        internal signals:     1059
ABC RESULTS:           input signals:      126
ABC RESULTS:          output signals:      104
Removing temp directory.
Removed 0 unused cells and 557 unused wires.

2.42. Executing TECHMAP pass (map to technology primitives).

2.42.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/cells_map.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$__DFFE_NN0'.
Generating RTLIL representation for module `\$__DFFE_NN1'.
Generating RTLIL representation for module `\$__DFFE_PN0'.
Generating RTLIL representation for module `\$__DFFE_PN1'.
Generating RTLIL representation for module `\$__DFFE_NP0'.
Generating RTLIL representation for module `\$__DFFE_NP1'.
Generating RTLIL representation for module `\$__DFFE_PP0'.
Generating RTLIL representation for module `\$__DFFE_PP1'.
Generating RTLIL representation for module `\$lut'.
Successfully finished Verilog frontend.

2.42.2. Continuing TECHMAP pass.
Using template $paramod\$lut\WIDTH=4\LUT=16'1110101100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111010000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000011100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111000100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000011110100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0110100100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11111000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01100001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111001111111010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111100110011111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00011111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111110000001010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00001011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0010001100110101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100111110100000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000110000000111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000001111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000000011111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0101001100110011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000011111111000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00000111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11110001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000011111000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000001011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100000100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111000111111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00110101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0111111100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000100011010011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1110000100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0111011101110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0110000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1001110000001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1110110000000011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01100000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100111100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000001100001101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001111111111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1010110011001100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100010100111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011000001111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000101100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011010100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011010111110011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001100000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11100000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001010000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111000001000100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000011111111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1101000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001000100001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1010011111111100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1010000000111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000111111110100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11001010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111111110010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00001101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000001001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0010010000001011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111100000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000010111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001111100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000011101111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=1\LUT=2'01 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011111100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100101000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000110000001010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111000011101110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001000011111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1110000011111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000011111110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00001110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0111000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01101111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111001011111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00010100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000010001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111110110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11111110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100111101011101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10000111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1110111100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111100010001000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011111101010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111001100000101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111111111000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100010100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100111101000100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011000010101011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100111111111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111010011111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111100011111111 for cells of type $lut.
No more expansions possible.
<suppressed ~1614 debug messages>
Removed 0 unused cells and 720 unused wires.

2.43. Executing HIERARCHY pass (managing design hierarchy).

2.43.1. Analyzing design hierarchy..
Top module:  \demo

2.43.2. Analyzing design hierarchy..
Top module:  \demo
Removed 0 unused modules.

2.44. Printing statistics.

=== demo ===

   Number of wires:                521
   Number of wire bits:           1900
   Number of public wires:         156
   Number of public wire bits:    1328
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                620
     SB_CARRY                      129
     SB_DFF                          1
     SB_DFFE                        83
     SB_LUT4                       407

2.45. Executing CHECK pass (checking for obvious problems).
checking module demo..
found and reported 0 problems.

2.46. Executing BLIF backend.

2.47. Executing JSON backend.

Warnings: 1 unique messages, 1 total
End of script. Logfile hash: 76375aabc0
CPU: user 4.23s system 0.05s, MEM: 52.35 MB total, 46.82 MB resident
Yosys 0.9 (git sha1 1979e0b)
Time spent: 17% 25x opt_expr (0 sec), 16% 24x opt_clean (0 sec), ...
