
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2019  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9 (git sha1 1979e0b)


-- Parsing `demo.v' using frontend `verilog' --

1. Executing Verilog-2005 frontend: demo.v
Parsing Verilog input from `demo.v' to AST representation.
Generating RTLIL representation for module `\demo'.
Successfully finished Verilog frontend.

-- Running command `synth_ice40 -json demo.json -blif demo.blif' --

2. Executing SYNTH_ICE40 pass.

2.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/cells_sim.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\SB_IO'.
Generating RTLIL representation for module `\SB_GB_IO'.
Generating RTLIL representation for module `\SB_GB'.
Generating RTLIL representation for module `\SB_LUT4'.
Generating RTLIL representation for module `\SB_CARRY'.
Generating RTLIL representation for module `\SB_DFF'.
Generating RTLIL representation for module `\SB_DFFE'.
Generating RTLIL representation for module `\SB_DFFSR'.
Generating RTLIL representation for module `\SB_DFFR'.
Generating RTLIL representation for module `\SB_DFFSS'.
Generating RTLIL representation for module `\SB_DFFS'.
Generating RTLIL representation for module `\SB_DFFESR'.
Generating RTLIL representation for module `\SB_DFFER'.
Generating RTLIL representation for module `\SB_DFFESS'.
Generating RTLIL representation for module `\SB_DFFES'.
Generating RTLIL representation for module `\SB_DFFN'.
Generating RTLIL representation for module `\SB_DFFNE'.
Generating RTLIL representation for module `\SB_DFFNSR'.
Generating RTLIL representation for module `\SB_DFFNR'.
Generating RTLIL representation for module `\SB_DFFNSS'.
Generating RTLIL representation for module `\SB_DFFNS'.
Generating RTLIL representation for module `\SB_DFFNESR'.
Generating RTLIL representation for module `\SB_DFFNER'.
Generating RTLIL representation for module `\SB_DFFNESS'.
Generating RTLIL representation for module `\SB_DFFNES'.
Generating RTLIL representation for module `\SB_RAM40_4K'.
Generating RTLIL representation for module `\SB_RAM40_4KNR'.
Generating RTLIL representation for module `\SB_RAM40_4KNW'.
Generating RTLIL representation for module `\SB_RAM40_4KNRNW'.
Generating RTLIL representation for module `\ICESTORM_LC'.
Generating RTLIL representation for module `\SB_PLL40_CORE'.
Generating RTLIL representation for module `\SB_PLL40_PAD'.
Generating RTLIL representation for module `\SB_PLL40_2_PAD'.
Generating RTLIL representation for module `\SB_PLL40_2F_CORE'.
Generating RTLIL representation for module `\SB_PLL40_2F_PAD'.
Generating RTLIL representation for module `\SB_WARMBOOT'.
Generating RTLIL representation for module `\SB_SPRAM256KA'.
Generating RTLIL representation for module `\SB_HFOSC'.
Generating RTLIL representation for module `\SB_LFOSC'.
Generating RTLIL representation for module `\SB_RGBA_DRV'.
Generating RTLIL representation for module `\SB_LED_DRV_CUR'.
Generating RTLIL representation for module `\SB_RGB_DRV'.
Generating RTLIL representation for module `\SB_I2C'.
Generating RTLIL representation for module `\SB_SPI'.
Generating RTLIL representation for module `\SB_LEDDA_IP'.
Generating RTLIL representation for module `\SB_FILTER_50NS'.
Generating RTLIL representation for module `\SB_IO_I3C'.
Generating RTLIL representation for module `\SB_IO_OD'.
Generating RTLIL representation for module `\SB_MAC16'.
Successfully finished Verilog frontend.

2.2. Executing HIERARCHY pass (managing design hierarchy).

2.2.1. Finding top of design hierarchy..
root of   0 design levels: demo                
Automatically selected demo as design top module.

2.2.2. Analyzing design hierarchy..
Top module:  \demo

2.2.3. Analyzing design hierarchy..
Top module:  \demo
Removed 0 unused modules.

2.3. Executing PROC pass (convert processes to netlists).

2.3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

2.3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 10 switch rules as full_case in process $proc$demo.v:189$127 in module demo.
Removed a total of 0 dead cases.

2.3.3. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\demo.$proc$demo.v:47$275'.
  Set init value: \scl = 1'1
  Set init value: \state = 6'000000
  Set init value: \data = 8'00000000
  Set init value: \bit_counter = 3'111
  Set init value: \cmd_counter = 5'00000
  Set init value: \param_counter = 7'0000000
  Set init value: \params_left = 14'00000000000000

2.3.4. Executing PROC_ARST pass (detect async resets in processes).

2.3.5. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\demo.$proc$demo.v:47$275'.
     1/255: $1\params_left[13:0]
     2/255: $1\param_counter[6:0]
     3/255: $1\cmd_counter[4:0]
     4/255: $1\bit_counter[2:0]
     5/255: $1\data[7:0]
     6/255: $0$memwr$\params$demo.v:176$124_DATA[7:0]$523
     7/255: $0$memwr$\params$demo.v:176$124_ADDR[31:0]$522
     8/255: $0$memwr$\params$demo.v:175$123_DATA[7:0]$521
     9/255: $0$memwr$\params$demo.v:175$123_ADDR[31:0]$520
    10/255: $0$memwr$\params$demo.v:174$122_DATA[7:0]$519
    11/255: $0$memwr$\params$demo.v:174$122_ADDR[31:0]$518
    12/255: $0$memwr$\params$demo.v:173$121_DATA[7:0]$517
    13/255: $0$memwr$\params$demo.v:173$121_ADDR[31:0]$516
    14/255: $0$memwr$\params$demo.v:172$120_DATA[7:0]$515
    15/255: $0$memwr$\params$demo.v:172$120_ADDR[31:0]$514
    16/255: $0$memwr$\params$demo.v:171$119_DATA[7:0]$513
    17/255: $0$memwr$\params$demo.v:171$119_ADDR[31:0]$512
    18/255: $0$memwr$\params$demo.v:170$118_DATA[7:0]$511
    19/255: $0$memwr$\params$demo.v:170$118_ADDR[31:0]$510
    20/255: $0$memwr$\params$demo.v:169$117_DATA[7:0]$509
    21/255: $0$memwr$\params$demo.v:169$117_ADDR[31:0]$508
    22/255: $0$memwr$\params$demo.v:168$116_DATA[7:0]$507
    23/255: $0$memwr$\params$demo.v:168$116_ADDR[31:0]$506
    24/255: $0$memwr$\params$demo.v:167$115_DATA[7:0]$505
    25/255: $0$memwr$\params$demo.v:167$115_ADDR[31:0]$504
    26/255: $0$memwr$\params$demo.v:166$114_DATA[7:0]$503
    27/255: $0$memwr$\params$demo.v:166$114_ADDR[31:0]$502
    28/255: $0$memwr$\params$demo.v:165$113_DATA[7:0]$501
    29/255: $0$memwr$\params$demo.v:165$113_ADDR[31:0]$500
    30/255: $0$memwr$\params$demo.v:164$112_DATA[7:0]$499
    31/255: $0$memwr$\params$demo.v:164$112_ADDR[31:0]$498
    32/255: $0$memwr$\params$demo.v:163$111_DATA[7:0]$497
    33/255: $0$memwr$\params$demo.v:163$111_ADDR[31:0]$496
    34/255: $0$memwr$\params$demo.v:162$110_DATA[7:0]$495
    35/255: $0$memwr$\params$demo.v:162$110_ADDR[31:0]$494
    36/255: $0$memwr$\params$demo.v:161$109_DATA[7:0]$493
    37/255: $0$memwr$\params$demo.v:161$109_ADDR[31:0]$492
    38/255: $0$memwr$\params$demo.v:160$108_DATA[7:0]$491
    39/255: $0$memwr$\params$demo.v:160$108_ADDR[31:0]$490
    40/255: $0$memwr$\params$demo.v:159$107_DATA[7:0]$489
    41/255: $0$memwr$\params$demo.v:159$107_ADDR[31:0]$488
    42/255: $0$memwr$\params$demo.v:158$106_DATA[7:0]$487
    43/255: $0$memwr$\params$demo.v:158$106_ADDR[31:0]$486
    44/255: $0$memwr$\params$demo.v:157$105_DATA[7:0]$485
    45/255: $0$memwr$\params$demo.v:157$105_ADDR[31:0]$484
    46/255: $0$memwr$\params$demo.v:156$104_DATA[7:0]$483
    47/255: $0$memwr$\params$demo.v:156$104_ADDR[31:0]$482
    48/255: $0$memwr$\params$demo.v:155$103_DATA[7:0]$481
    49/255: $0$memwr$\params$demo.v:155$103_ADDR[31:0]$480
    50/255: $0$memwr$\params$demo.v:154$102_DATA[7:0]$479
    51/255: $0$memwr$\params$demo.v:154$102_ADDR[31:0]$478
    52/255: $0$memwr$\params$demo.v:153$101_DATA[7:0]$477
    53/255: $0$memwr$\params$demo.v:153$101_ADDR[31:0]$476
    54/255: $0$memwr$\params$demo.v:152$100_DATA[7:0]$475
    55/255: $0$memwr$\params$demo.v:152$100_ADDR[31:0]$474
    56/255: $0$memwr$\params$demo.v:151$99_DATA[7:0]$473
    57/255: $0$memwr$\params$demo.v:151$99_ADDR[31:0]$472
    58/255: $0$memwr$\params$demo.v:150$98_DATA[7:0]$471
    59/255: $0$memwr$\params$demo.v:150$98_ADDR[31:0]$470
    60/255: $0$memwr$\params$demo.v:149$97_DATA[7:0]$469
    61/255: $0$memwr$\params$demo.v:149$97_ADDR[31:0]$468
    62/255: $0$memwr$\params$demo.v:148$96_DATA[7:0]$467
    63/255: $0$memwr$\params$demo.v:148$96_ADDR[31:0]$466
    64/255: $0$memwr$\params$demo.v:147$95_DATA[7:0]$465
    65/255: $0$memwr$\params$demo.v:147$95_ADDR[31:0]$464
    66/255: $0$memwr$\params$demo.v:146$94_DATA[7:0]$463
    67/255: $0$memwr$\params$demo.v:146$94_ADDR[31:0]$462
    68/255: $0$memwr$\params$demo.v:145$93_DATA[7:0]$461
    69/255: $0$memwr$\params$demo.v:145$93_ADDR[31:0]$460
    70/255: $0$memwr$\params$demo.v:144$92_DATA[7:0]$459
    71/255: $0$memwr$\params$demo.v:144$92_ADDR[31:0]$458
    72/255: $0$memwr$\params$demo.v:143$91_DATA[7:0]$457
    73/255: $0$memwr$\params$demo.v:143$91_ADDR[31:0]$456
    74/255: $0$memwr$\params$demo.v:142$90_DATA[7:0]$455
    75/255: $0$memwr$\params$demo.v:142$90_ADDR[31:0]$454
    76/255: $0$memwr$\params$demo.v:141$89_DATA[7:0]$453
    77/255: $0$memwr$\params$demo.v:141$89_ADDR[31:0]$452
    78/255: $0$memwr$\params$demo.v:140$88_DATA[7:0]$451
    79/255: $0$memwr$\params$demo.v:140$88_ADDR[31:0]$450
    80/255: $0$memwr$\params$demo.v:139$87_DATA[7:0]$449
    81/255: $0$memwr$\params$demo.v:139$87_ADDR[31:0]$448
    82/255: $0$memwr$\params$demo.v:138$86_DATA[7:0]$447
    83/255: $0$memwr$\params$demo.v:138$86_ADDR[31:0]$446
    84/255: $0$memwr$\params$demo.v:137$85_DATA[7:0]$445
    85/255: $0$memwr$\params$demo.v:137$85_ADDR[31:0]$444
    86/255: $0$memwr$\params$demo.v:136$84_DATA[7:0]$443
    87/255: $0$memwr$\params$demo.v:136$84_ADDR[31:0]$442
    88/255: $0$memwr$\params$demo.v:135$83_DATA[7:0]$441
    89/255: $0$memwr$\params$demo.v:135$83_ADDR[31:0]$440
    90/255: $0$memwr$\params$demo.v:134$82_DATA[7:0]$439
    91/255: $0$memwr$\params$demo.v:134$82_ADDR[31:0]$438
    92/255: $0$memwr$\params$demo.v:133$81_DATA[7:0]$437
    93/255: $0$memwr$\params$demo.v:133$81_ADDR[31:0]$436
    94/255: $0$memwr$\params$demo.v:132$80_DATA[7:0]$435
    95/255: $0$memwr$\params$demo.v:132$80_ADDR[31:0]$434
    96/255: $0$memwr$\params$demo.v:131$79_DATA[7:0]$433
    97/255: $0$memwr$\params$demo.v:131$79_ADDR[31:0]$432
    98/255: $0$memwr$\params$demo.v:130$78_DATA[7:0]$431
    99/255: $0$memwr$\params$demo.v:130$78_ADDR[31:0]$430
   100/255: $0$memwr$\params$demo.v:129$77_DATA[7:0]$429
   101/255: $0$memwr$\params$demo.v:129$77_ADDR[31:0]$428
   102/255: $0$memwr$\params$demo.v:128$76_DATA[7:0]$427
   103/255: $0$memwr$\params$demo.v:128$76_ADDR[31:0]$426
   104/255: $0$memwr$\params$demo.v:127$75_DATA[7:0]$425
   105/255: $0$memwr$\params$demo.v:127$75_ADDR[31:0]$424
   106/255: $0$memwr$\params$demo.v:126$74_DATA[7:0]$423
   107/255: $0$memwr$\params$demo.v:126$74_ADDR[31:0]$422
   108/255: $0$memwr$\params$demo.v:125$73_DATA[7:0]$421
   109/255: $0$memwr$\params$demo.v:125$73_ADDR[31:0]$420
   110/255: $0$memwr$\params$demo.v:124$72_DATA[7:0]$419
   111/255: $0$memwr$\params$demo.v:124$72_ADDR[31:0]$418
   112/255: $0$memwr$\params$demo.v:123$71_DATA[7:0]$417
   113/255: $0$memwr$\params$demo.v:123$71_ADDR[31:0]$416
   114/255: $0$memwr$\params$demo.v:122$70_DATA[7:0]$415
   115/255: $0$memwr$\params$demo.v:122$70_ADDR[31:0]$414
   116/255: $0$memwr$\params$demo.v:121$69_DATA[7:0]$413
   117/255: $0$memwr$\params$demo.v:121$69_ADDR[31:0]$412
   118/255: $0$memwr$\params$demo.v:120$68_DATA[7:0]$411
   119/255: $0$memwr$\params$demo.v:120$68_ADDR[31:0]$410
   120/255: $0$memwr$\params$demo.v:119$67_DATA[7:0]$409
   121/255: $0$memwr$\params$demo.v:119$67_ADDR[31:0]$408
   122/255: $0$memwr$\params$demo.v:118$66_DATA[7:0]$407
   123/255: $0$memwr$\params$demo.v:118$66_ADDR[31:0]$406
   124/255: $0$memwr$\params$demo.v:117$65_DATA[7:0]$405
   125/255: $0$memwr$\params$demo.v:117$65_ADDR[31:0]$404
   126/255: $0$memwr$\params$demo.v:116$64_DATA[7:0]$403
   127/255: $0$memwr$\params$demo.v:116$64_ADDR[31:0]$402
   128/255: $0$memwr$\params$demo.v:115$63_DATA[7:0]$401
   129/255: $0$memwr$\params$demo.v:115$63_ADDR[31:0]$400
   130/255: $0$memwr$\params$demo.v:114$62_DATA[7:0]$399
   131/255: $0$memwr$\params$demo.v:114$62_ADDR[31:0]$398
   132/255: $0$memwr$\params$demo.v:113$61_DATA[7:0]$397
   133/255: $0$memwr$\params$demo.v:113$61_ADDR[31:0]$396
   134/255: $0$memwr$\params$demo.v:112$60_DATA[7:0]$395
   135/255: $0$memwr$\params$demo.v:112$60_ADDR[31:0]$394
   136/255: $0$memwr$\params$demo.v:111$59_DATA[7:0]$393
   137/255: $0$memwr$\params$demo.v:111$59_ADDR[31:0]$392
   138/255: $0$memwr$\params$demo.v:110$58_DATA[7:0]$391
   139/255: $0$memwr$\params$demo.v:110$58_ADDR[31:0]$390
   140/255: $0$memwr$\params$demo.v:109$57_DATA[7:0]$389
   141/255: $0$memwr$\params$demo.v:109$57_ADDR[31:0]$388
   142/255: $0$memwr$\params$demo.v:108$56_DATA[7:0]$387
   143/255: $0$memwr$\params$demo.v:108$56_ADDR[31:0]$386
   144/255: $0$memwr$\params$demo.v:107$55_DATA[7:0]$385
   145/255: $0$memwr$\params$demo.v:107$55_ADDR[31:0]$384
   146/255: $0$memwr$\params$demo.v:106$54_DATA[7:0]$383
   147/255: $0$memwr$\params$demo.v:106$54_ADDR[31:0]$382
   148/255: $0$memwr$\params$demo.v:105$53_DATA[7:0]$381
   149/255: $0$memwr$\params$demo.v:105$53_ADDR[31:0]$380
   150/255: $0$memwr$\params$demo.v:104$52_DATA[7:0]$379
   151/255: $0$memwr$\params$demo.v:104$52_ADDR[31:0]$378
   152/255: $0$memwr$\params$demo.v:103$51_DATA[7:0]$377
   153/255: $0$memwr$\params$demo.v:103$51_ADDR[31:0]$376
   154/255: $0$memwr$\params$demo.v:102$50_DATA[7:0]$375
   155/255: $0$memwr$\params$demo.v:102$50_ADDR[31:0]$374
   156/255: $0$memwr$\params$demo.v:101$49_DATA[7:0]$373
   157/255: $0$memwr$\params$demo.v:101$49_ADDR[31:0]$372
   158/255: $0$memwr$\num_params$demo.v:99$48_DATA[13:0]$371
   159/255: $0$memwr$\num_params$demo.v:99$48_ADDR[31:0]$370
   160/255: $0$memwr$\num_params$demo.v:98$47_DATA[13:0]$369
   161/255: $0$memwr$\num_params$demo.v:98$47_ADDR[31:0]$368
   162/255: $0$memwr$\num_params$demo.v:97$46_DATA[13:0]$367
   163/255: $0$memwr$\num_params$demo.v:97$46_ADDR[31:0]$366
   164/255: $0$memwr$\num_params$demo.v:96$45_DATA[13:0]$365
   165/255: $0$memwr$\num_params$demo.v:96$45_ADDR[31:0]$364
   166/255: $0$memwr$\num_params$demo.v:95$44_DATA[13:0]$363
   167/255: $0$memwr$\num_params$demo.v:95$44_ADDR[31:0]$362
   168/255: $0$memwr$\num_params$demo.v:94$43_DATA[13:0]$361
   169/255: $0$memwr$\num_params$demo.v:94$43_ADDR[31:0]$360
   170/255: $0$memwr$\num_params$demo.v:93$42_DATA[13:0]$359
   171/255: $0$memwr$\num_params$demo.v:93$42_ADDR[31:0]$358
   172/255: $0$memwr$\num_params$demo.v:92$41_DATA[13:0]$357
   173/255: $0$memwr$\num_params$demo.v:92$41_ADDR[31:0]$356
   174/255: $0$memwr$\num_params$demo.v:91$40_DATA[13:0]$355
   175/255: $0$memwr$\num_params$demo.v:91$40_ADDR[31:0]$354
   176/255: $0$memwr$\num_params$demo.v:90$39_DATA[13:0]$353
   177/255: $0$memwr$\num_params$demo.v:90$39_ADDR[31:0]$352
   178/255: $0$memwr$\num_params$demo.v:89$38_DATA[13:0]$351
   179/255: $0$memwr$\num_params$demo.v:89$38_ADDR[31:0]$350
   180/255: $0$memwr$\num_params$demo.v:88$37_DATA[13:0]$349
   181/255: $0$memwr$\num_params$demo.v:88$37_ADDR[31:0]$348
   182/255: $0$memwr$\num_params$demo.v:87$36_DATA[13:0]$347
   183/255: $0$memwr$\num_params$demo.v:87$36_ADDR[31:0]$346
   184/255: $0$memwr$\num_params$demo.v:86$35_DATA[13:0]$345
   185/255: $0$memwr$\num_params$demo.v:86$35_ADDR[31:0]$344
   186/255: $0$memwr$\num_params$demo.v:85$34_DATA[13:0]$343
   187/255: $0$memwr$\num_params$demo.v:85$34_ADDR[31:0]$342
   188/255: $0$memwr$\num_params$demo.v:84$33_DATA[13:0]$341
   189/255: $0$memwr$\num_params$demo.v:84$33_ADDR[31:0]$340
   190/255: $0$memwr$\num_params$demo.v:83$32_DATA[13:0]$339
   191/255: $0$memwr$\num_params$demo.v:83$32_ADDR[31:0]$338
   192/255: $0$memwr$\num_params$demo.v:82$31_DATA[13:0]$337
   193/255: $0$memwr$\num_params$demo.v:82$31_ADDR[31:0]$336
   194/255: $0$memwr$\num_params$demo.v:81$30_DATA[13:0]$335
   195/255: $0$memwr$\num_params$demo.v:81$30_ADDR[31:0]$334
   196/255: $0$memwr$\num_params$demo.v:80$29_DATA[13:0]$333
   197/255: $0$memwr$\num_params$demo.v:80$29_ADDR[31:0]$332
   198/255: $0$memwr$\num_params$demo.v:79$28_DATA[13:0]$331
   199/255: $0$memwr$\num_params$demo.v:79$28_ADDR[31:0]$330
   200/255: $0$memwr$\num_params$demo.v:78$27_DATA[13:0]$329
   201/255: $0$memwr$\num_params$demo.v:78$27_ADDR[31:0]$328
   202/255: $0$memwr$\num_params$demo.v:77$26_DATA[13:0]$327
   203/255: $0$memwr$\num_params$demo.v:77$26_ADDR[31:0]$326
   204/255: $0$memwr$\num_params$demo.v:76$25_DATA[13:0]$325
   205/255: $0$memwr$\num_params$demo.v:76$25_ADDR[31:0]$324
   206/255: $0$memwr$\cmd$demo.v:75$24_DATA[7:0]$323
   207/255: $0$memwr$\cmd$demo.v:75$24_ADDR[31:0]$322
   208/255: $0$memwr$\cmd$demo.v:74$23_DATA[7:0]$321
   209/255: $0$memwr$\cmd$demo.v:74$23_ADDR[31:0]$320
   210/255: $0$memwr$\cmd$demo.v:73$22_DATA[7:0]$319
   211/255: $0$memwr$\cmd$demo.v:73$22_ADDR[31:0]$318
   212/255: $0$memwr$\cmd$demo.v:72$21_DATA[7:0]$317
   213/255: $0$memwr$\cmd$demo.v:72$21_ADDR[31:0]$316
   214/255: $0$memwr$\cmd$demo.v:71$20_DATA[7:0]$315
   215/255: $0$memwr$\cmd$demo.v:71$20_ADDR[31:0]$314
   216/255: $0$memwr$\cmd$demo.v:70$19_DATA[7:0]$313
   217/255: $0$memwr$\cmd$demo.v:70$19_ADDR[31:0]$312
   218/255: $0$memwr$\cmd$demo.v:69$18_DATA[7:0]$311
   219/255: $0$memwr$\cmd$demo.v:69$18_ADDR[31:0]$310
   220/255: $0$memwr$\cmd$demo.v:68$17_DATA[7:0]$309
   221/255: $0$memwr$\cmd$demo.v:68$17_ADDR[31:0]$308
   222/255: $0$memwr$\cmd$demo.v:67$16_DATA[7:0]$307
   223/255: $0$memwr$\cmd$demo.v:67$16_ADDR[31:0]$306
   224/255: $0$memwr$\cmd$demo.v:66$15_DATA[7:0]$305
   225/255: $0$memwr$\cmd$demo.v:66$15_ADDR[31:0]$304
   226/255: $0$memwr$\cmd$demo.v:65$14_DATA[7:0]$303
   227/255: $0$memwr$\cmd$demo.v:65$14_ADDR[31:0]$302
   228/255: $0$memwr$\cmd$demo.v:64$13_DATA[7:0]$301
   229/255: $0$memwr$\cmd$demo.v:64$13_ADDR[31:0]$300
   230/255: $0$memwr$\cmd$demo.v:63$12_DATA[7:0]$299
   231/255: $0$memwr$\cmd$demo.v:63$12_ADDR[31:0]$298
   232/255: $0$memwr$\cmd$demo.v:62$11_DATA[7:0]$297
   233/255: $0$memwr$\cmd$demo.v:62$11_ADDR[31:0]$296
   234/255: $0$memwr$\cmd$demo.v:61$10_DATA[7:0]$295
   235/255: $0$memwr$\cmd$demo.v:61$10_ADDR[31:0]$294
   236/255: $0$memwr$\cmd$demo.v:60$9_DATA[7:0]$293
   237/255: $0$memwr$\cmd$demo.v:60$9_ADDR[31:0]$292
   238/255: $0$memwr$\cmd$demo.v:59$8_DATA[7:0]$291
   239/255: $0$memwr$\cmd$demo.v:59$8_ADDR[31:0]$290
   240/255: $0$memwr$\cmd$demo.v:58$7_DATA[7:0]$289
   241/255: $0$memwr$\cmd$demo.v:58$7_ADDR[31:0]$288
   242/255: $0$memwr$\cmd$demo.v:57$6_DATA[7:0]$287
   243/255: $0$memwr$\cmd$demo.v:57$6_ADDR[31:0]$286
   244/255: $0$memwr$\cmd$demo.v:56$5_DATA[7:0]$285
   245/255: $0$memwr$\cmd$demo.v:56$5_ADDR[31:0]$284
   246/255: $0$memwr$\cmd$demo.v:55$4_DATA[7:0]$283
   247/255: $0$memwr$\cmd$demo.v:55$4_ADDR[31:0]$282
   248/255: $0$memwr$\cmd$demo.v:54$3_DATA[7:0]$281
   249/255: $0$memwr$\cmd$demo.v:54$3_ADDR[31:0]$280
   250/255: $0$memwr$\cmd$demo.v:53$2_DATA[7:0]$279
   251/255: $0$memwr$\cmd$demo.v:53$2_ADDR[31:0]$278
   252/255: $0$memwr$\cmd$demo.v:52$1_DATA[7:0]$277
   253/255: $0$memwr$\cmd$demo.v:52$1_ADDR[31:0]$276
   254/255: $1\scl[0:0]
   255/255: $1\state[5:0]
Creating decoders for process `\demo.$proc$demo.v:189$127'.
     1/11: $0\params_left[13:0]
     2/11: $0\param_counter[6:0]
     3/11: $0\cmd_counter[4:0]
     4/11: $0\bit_counter[2:0]
     5/11: $0\data[7:0]
     6/11: $0\delay[15:0]
     7/11: $0\state[5:0]
     8/11: $0\cs[0:0]
     9/11: $0\mosi[0:0]
    10/11: $0\dc[0:0]
    11/11: $0\rst[0:0]
Creating decoders for process `\demo.$proc$demo.v:186$125'.
     1/1: $0\scl[0:0]

2.3.6. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:52$1_ADDR' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:52$1_DATA' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:53$2_ADDR' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:53$2_DATA' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:54$3_ADDR' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:54$3_DATA' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:55$4_ADDR' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:55$4_DATA' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:56$5_ADDR' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:56$5_DATA' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:57$6_ADDR' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:57$6_DATA' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:58$7_ADDR' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:58$7_DATA' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:59$8_ADDR' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:59$8_DATA' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:60$9_ADDR' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:60$9_DATA' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:61$10_ADDR' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:61$10_DATA' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:62$11_ADDR' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:62$11_DATA' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:63$12_ADDR' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:63$12_DATA' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:64$13_ADDR' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:64$13_DATA' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:65$14_ADDR' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:65$14_DATA' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:66$15_ADDR' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:66$15_DATA' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:67$16_ADDR' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:67$16_DATA' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:68$17_ADDR' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:68$17_DATA' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:69$18_ADDR' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:69$18_DATA' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:70$19_ADDR' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:70$19_DATA' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:71$20_ADDR' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:71$20_DATA' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:72$21_ADDR' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:72$21_DATA' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:73$22_ADDR' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:73$22_DATA' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:74$23_ADDR' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:74$23_DATA' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:75$24_ADDR' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:75$24_DATA' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:76$25_ADDR' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:76$25_DATA' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:77$26_ADDR' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:77$26_DATA' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:78$27_ADDR' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:78$27_DATA' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:79$28_ADDR' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:79$28_DATA' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:80$29_ADDR' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:80$29_DATA' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:81$30_ADDR' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:81$30_DATA' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:82$31_ADDR' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:82$31_DATA' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:83$32_ADDR' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:83$32_DATA' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:84$33_ADDR' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:84$33_DATA' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:85$34_ADDR' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:85$34_DATA' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:86$35_ADDR' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:86$35_DATA' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:87$36_ADDR' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:87$36_DATA' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:88$37_ADDR' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:88$37_DATA' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:89$38_ADDR' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:89$38_DATA' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:90$39_ADDR' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:90$39_DATA' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:91$40_ADDR' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:91$40_DATA' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:92$41_ADDR' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:92$41_DATA' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:93$42_ADDR' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:93$42_DATA' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:94$43_ADDR' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:94$43_DATA' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:95$44_ADDR' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:95$44_DATA' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:96$45_ADDR' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:96$45_DATA' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:97$46_ADDR' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:97$46_DATA' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:98$47_ADDR' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:98$47_DATA' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:99$48_ADDR' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:99$48_DATA' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:101$49_ADDR' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:101$49_DATA' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:102$50_ADDR' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:102$50_DATA' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:103$51_ADDR' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:103$51_DATA' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:104$52_ADDR' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:104$52_DATA' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:105$53_ADDR' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:105$53_DATA' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:106$54_ADDR' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:106$54_DATA' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:107$55_ADDR' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:107$55_DATA' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:108$56_ADDR' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:108$56_DATA' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:109$57_ADDR' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:109$57_DATA' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:110$58_ADDR' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:110$58_DATA' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:111$59_ADDR' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:111$59_DATA' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:112$60_ADDR' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:112$60_DATA' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:113$61_ADDR' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:113$61_DATA' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:114$62_ADDR' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:114$62_DATA' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:115$63_ADDR' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:115$63_DATA' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:116$64_ADDR' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:116$64_DATA' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:117$65_ADDR' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:117$65_DATA' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:118$66_ADDR' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:118$66_DATA' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:119$67_ADDR' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:119$67_DATA' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:120$68_ADDR' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:120$68_DATA' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:121$69_ADDR' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:121$69_DATA' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:122$70_ADDR' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:122$70_DATA' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:123$71_ADDR' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:123$71_DATA' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:124$72_ADDR' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:124$72_DATA' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:125$73_ADDR' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:125$73_DATA' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:126$74_ADDR' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:126$74_DATA' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:127$75_ADDR' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:127$75_DATA' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:128$76_ADDR' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:128$76_DATA' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:129$77_ADDR' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:129$77_DATA' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:130$78_ADDR' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:130$78_DATA' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:131$79_ADDR' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:131$79_DATA' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:132$80_ADDR' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:132$80_DATA' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:133$81_ADDR' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:133$81_DATA' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:134$82_ADDR' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:134$82_DATA' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:135$83_ADDR' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:135$83_DATA' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:136$84_ADDR' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:136$84_DATA' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:137$85_ADDR' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:137$85_DATA' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:138$86_ADDR' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:138$86_DATA' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:139$87_ADDR' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:139$87_DATA' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:140$88_ADDR' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:140$88_DATA' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:141$89_ADDR' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:141$89_DATA' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:142$90_ADDR' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:142$90_DATA' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:143$91_ADDR' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:143$91_DATA' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:144$92_ADDR' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:144$92_DATA' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:145$93_ADDR' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:145$93_DATA' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:146$94_ADDR' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:146$94_DATA' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:147$95_ADDR' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:147$95_DATA' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:148$96_ADDR' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:148$96_DATA' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:149$97_ADDR' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:149$97_DATA' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:150$98_ADDR' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:150$98_DATA' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:151$99_ADDR' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:151$99_DATA' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:152$100_ADDR' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:152$100_DATA' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:153$101_ADDR' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:153$101_DATA' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:154$102_ADDR' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:154$102_DATA' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:155$103_ADDR' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:155$103_DATA' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:156$104_ADDR' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:156$104_DATA' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:157$105_ADDR' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:157$105_DATA' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:158$106_ADDR' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:158$106_DATA' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:159$107_ADDR' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:159$107_DATA' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:160$108_ADDR' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:160$108_DATA' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:161$109_ADDR' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:161$109_DATA' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:162$110_ADDR' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:162$110_DATA' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:163$111_ADDR' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:163$111_DATA' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:164$112_ADDR' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:164$112_DATA' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:165$113_ADDR' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:165$113_DATA' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:166$114_ADDR' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:166$114_DATA' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:167$115_ADDR' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:167$115_DATA' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:168$116_ADDR' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:168$116_DATA' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:169$117_ADDR' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:169$117_DATA' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:170$118_ADDR' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:170$118_DATA' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:171$119_ADDR' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:171$119_DATA' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:172$120_ADDR' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:172$120_DATA' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:173$121_ADDR' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:173$121_DATA' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:174$122_ADDR' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:174$122_DATA' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:175$123_ADDR' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:175$123_DATA' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:176$124_ADDR' from process `\demo.$proc$demo.v:47$275'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:176$124_DATA' from process `\demo.$proc$demo.v:47$275'.

2.3.7. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\demo.\rst' using process `\demo.$proc$demo.v:189$127'.
  created $dff cell `$procdff$664' with positive edge clock.
Creating register for signal `\demo.\dc' using process `\demo.$proc$demo.v:189$127'.
  created $dff cell `$procdff$665' with positive edge clock.
Creating register for signal `\demo.\mosi' using process `\demo.$proc$demo.v:189$127'.
  created $dff cell `$procdff$666' with positive edge clock.
Creating register for signal `\demo.\cs' using process `\demo.$proc$demo.v:189$127'.
  created $dff cell `$procdff$667' with positive edge clock.
Creating register for signal `\demo.\state' using process `\demo.$proc$demo.v:189$127'.
  created $dff cell `$procdff$668' with positive edge clock.
Creating register for signal `\demo.\delay' using process `\demo.$proc$demo.v:189$127'.
  created $dff cell `$procdff$669' with positive edge clock.
Creating register for signal `\demo.\data' using process `\demo.$proc$demo.v:189$127'.
  created $dff cell `$procdff$670' with positive edge clock.
Creating register for signal `\demo.\bit_counter' using process `\demo.$proc$demo.v:189$127'.
  created $dff cell `$procdff$671' with positive edge clock.
Creating register for signal `\demo.\cmd_counter' using process `\demo.$proc$demo.v:189$127'.
  created $dff cell `$procdff$672' with positive edge clock.
Creating register for signal `\demo.\param_counter' using process `\demo.$proc$demo.v:189$127'.
  created $dff cell `$procdff$673' with positive edge clock.
Creating register for signal `\demo.\params_left' using process `\demo.$proc$demo.v:189$127'.
  created $dff cell `$procdff$674' with positive edge clock.
Creating register for signal `\demo.\scl' using process `\demo.$proc$demo.v:186$125'.
  created $dff cell `$procdff$675' with positive edge clock.

2.3.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `demo.$proc$demo.v:47$275'.
Found and cleaned up 12 empty switches in `\demo.$proc$demo.v:189$127'.
Removing empty process `demo.$proc$demo.v:189$127'.
Removing empty process `demo.$proc$demo.v:186$125'.
Cleaned up 12 empty switches.

2.4. Executing FLATTEN pass (flatten design).
No more expansions possible.

2.5. Executing TRIBUF pass.

2.6. Executing DEMINOUT pass (demote inout ports to input or output).

2.7. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.
<suppressed ~14 debug messages>

2.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..
Removed 1 unused cells and 537 unused wires.
<suppressed ~2 debug messages>

2.9. Executing CHECK pass (checking for obvious problems).
checking module demo..
found and reported 0 problems.

2.10. Executing OPT pass (performing simple optimizations).

2.10.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.

2.10.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\demo'.
<suppressed ~69 debug messages>
Removed a total of 23 cells.

2.10.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \demo..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~11 debug messages>

2.10.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \demo.
    New ctrl vector for $pmux cell $procmux$626: { $procmux$601_CMP $auto$opt_reduce.cc:132:opt_mux$677 }
    New ctrl vector for $pmux cell $procmux$643: { $procmux$609_CMP $auto$opt_reduce.cc:132:opt_mux$679 }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$678: { $procmux$529_CMP $procmux$579_CMP }
  Optimizing cells in module \demo.
Performed a total of 3 changes.

2.10.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\demo'.
Removed a total of 0 cells.

2.10.6. Executing OPT_RMDFF pass (remove dff with constant values).

2.10.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..
Removed 0 unused cells and 23 unused wires.
<suppressed ~1 debug messages>

2.10.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.

2.10.9. Rerunning OPT passes. (Maybe there is more to do..)

2.10.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \demo..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~11 debug messages>

2.10.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \demo.
Performed a total of 0 changes.

2.10.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\demo'.
Removed a total of 0 cells.

2.10.13. Executing OPT_RMDFF pass (remove dff with constant values).

2.10.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..

2.10.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.

2.10.16. Finished OPT passes. (There is nothing left to do.)

2.11. Executing WREDUCE pass (reducing word size of cells).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:52$151 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:53$152 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:54$153 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:55$154 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:56$155 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:57$156 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:58$157 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:59$158 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:60$159 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:61$160 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:62$161 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:63$162 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:64$163 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:65$164 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:66$165 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:67$166 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:68$167 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:69$168 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:70$169 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:71$170 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:72$171 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:73$172 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:74$173 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:75$174 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\num_params$demo.v:76$175 (num_params).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\num_params$demo.v:77$176 (num_params).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\num_params$demo.v:78$177 (num_params).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\num_params$demo.v:79$178 (num_params).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\num_params$demo.v:80$179 (num_params).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\num_params$demo.v:81$180 (num_params).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\num_params$demo.v:82$181 (num_params).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\num_params$demo.v:83$182 (num_params).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\num_params$demo.v:84$183 (num_params).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\num_params$demo.v:85$184 (num_params).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\num_params$demo.v:86$185 (num_params).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\num_params$demo.v:87$186 (num_params).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\num_params$demo.v:88$187 (num_params).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\num_params$demo.v:89$188 (num_params).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\num_params$demo.v:90$189 (num_params).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\num_params$demo.v:91$190 (num_params).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\num_params$demo.v:92$191 (num_params).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\num_params$demo.v:93$192 (num_params).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\num_params$demo.v:94$193 (num_params).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\num_params$demo.v:95$194 (num_params).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\num_params$demo.v:96$195 (num_params).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\num_params$demo.v:97$196 (num_params).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\num_params$demo.v:98$197 (num_params).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\num_params$demo.v:99$198 (num_params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:101$199 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:102$200 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:103$201 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:104$202 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:105$203 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:106$204 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:107$205 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:108$206 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:109$207 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:110$208 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:111$209 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:112$210 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:113$211 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:114$212 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:115$213 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:116$214 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:117$215 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:118$216 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:119$217 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:120$218 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:121$219 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:122$220 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:123$221 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:124$222 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:125$223 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:126$224 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:127$225 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:128$226 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:129$227 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:130$228 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:131$229 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:132$230 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:133$231 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:134$232 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:135$233 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:136$234 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:137$235 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:138$236 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:139$237 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:140$238 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:141$239 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:142$240 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:143$241 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:144$242 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:145$243 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:146$244 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:147$245 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:148$246 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:149$247 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:150$248 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:151$249 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:152$250 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:153$251 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:154$252 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:155$253 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:156$254 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:157$255 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:158$256 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:159$257 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:160$258 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:161$259 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:162$260 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:163$261 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:164$262 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:165$263 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:166$264 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:167$265 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:168$266 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:169$267 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:170$268 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:171$269 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:172$270 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:173$271 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:174$272 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:175$273 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:176$274 (params).
Removed top 9 bits (of 16) from port B of cell demo.$le$demo.v:205$128 ($le).
Removed top 15 bits (of 16) from port B of cell demo.$add$demo.v:207$129 ($add).
Removed top 4 bits (of 5) from port B of cell demo.$add$demo.v:235$135 ($add).
Removed top 2 bits (of 3) from port B of cell demo.$sub$demo.v:259$139 ($sub).
Removed top 4 bits (of 5) from port B of cell demo.$sub$demo.v:306$145 ($sub).
Removed top 13 bits (of 14) from port B of cell demo.$sub$demo.v:317$148 ($sub).
Removed top 6 bits (of 7) from port B of cell demo.$add$demo.v:322$150 ($add).
Removed top 2 bits (of 6) from port B of cell demo.$procmux$529_CMP0 ($eq).
Removed top 2 bits (of 6) from port B of cell demo.$procmux$528_CMP0 ($eq).
Removed top 3 bits (of 6) from port B of cell demo.$procmux$546_CMP0 ($eq).
Removed top 3 bits (of 6) from port B of cell demo.$procmux$554_CMP0 ($eq).
Removed top 4 bits (of 6) from port B of cell demo.$procmux$574_CMP0 ($eq).
Removed top 4 bits (of 6) from port B of cell demo.$procmux$578_CMP0 ($eq).
Removed top 4 bits (of 6) from mux cell demo.$procmux$581 ($mux).
Removed top 3 bits (of 6) from mux cell demo.$procmux$587 ($mux).
Removed top 2 bits (of 6) from port B of cell demo.$procmux$589_CMP0 ($eq).
Removed top 5 bits (of 6) from mux cell demo.$procmux$591 ($mux).
Removed top 2 bits (of 6) from port B of cell demo.$procmux$593_CMP0 ($eq).
Removed top 2 bits (of 6) from mux cell demo.$procmux$595 ($mux).
Removed top 2 bits (of 6) from port B of cell demo.$procmux$597_CMP0 ($eq).
Removed top 2 bits (of 6) from mux cell demo.$procmux$599 ($mux).
Removed top 3 bits (of 6) from port B of cell demo.$procmux$601_CMP0 ($eq).
Removed top 4 bits (of 6) from mux cell demo.$procmux$603 ($mux).
Removed top 2 bits (of 6) from mux cell demo.$procmux$606 ($mux).
Removed top 3 bits (of 6) from port B of cell demo.$procmux$609_CMP0 ($eq).
Removed top 5 bits (of 6) from mux cell demo.$procmux$611 ($mux).
Removed top 5 bits (of 6) from port B of cell demo.$procmux$622_CMP0 ($eq).
Removed top 4 bits (of 6) from wire demo.$procmux$581_Y.
Removed top 3 bits (of 6) from wire demo.$procmux$587_Y.
Removed top 5 bits (of 6) from wire demo.$procmux$591_Y.
Removed top 2 bits (of 6) from wire demo.$procmux$595_Y.
Removed top 2 bits (of 6) from wire demo.$procmux$599_Y.
Removed top 4 bits (of 6) from wire demo.$procmux$603_Y.
Removed top 2 bits (of 6) from wire demo.$procmux$606_Y.
Removed top 5 bits (of 6) from wire demo.$procmux$611_Y.

2.12. Executing PEEPOPT pass (run peephole optimizers).

2.13. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..
Removed 0 unused cells and 8 unused wires.
<suppressed ~1 debug messages>

2.14. Executing SHARE pass (SAT-based resource sharing).
Found 3 cells in module demo that may be considered for resource sharing.
  Analyzing resource sharing options for $memrd$\params$demo.v:310$146 ($memrd):
    Found 1 activation_patterns using ctrl signal $procmux$528_CMP.
    No candidates found.
  Analyzing resource sharing options for $memrd$\num_params$demo.v:306$144 ($memrd):
    Found 1 activation_patterns using ctrl signal $procmux$529_CMP.
    No candidates found.
  Analyzing resource sharing options for $memrd$\cmd$demo.v:228$132 ($memrd):
    Found 2 activation_patterns using ctrl signal { $procmux$546_CMP $eq$demo.v:228$133_Y }.
    No candidates found.

2.15. Executing TECHMAP pass (map to technology primitives).

2.15.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/cmp2lut.v
Parsing Verilog input from `/usr/bin/../share/yosys/cmp2lut.v' to AST representation.
Generating RTLIL representation for module `\_90_lut_cmp_'.
Successfully finished Verilog frontend.

2.15.2. Continuing TECHMAP pass.
Using template $paramod$77ad031fce233083715243f95e3cd2547d931e42\_90_lut_cmp_ for cells of type $eq.
No more expansions possible.
<suppressed ~264 debug messages>

2.16. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.

2.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..
Removed 0 unused cells and 3 unused wires.
<suppressed ~1 debug messages>

2.18. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module demo:
  creating $macc model for $add$demo.v:207$129 ($add).
  creating $macc model for $add$demo.v:235$135 ($add).
  creating $macc model for $add$demo.v:322$150 ($add).
  creating $macc model for $sub$demo.v:259$139 ($sub).
  creating $macc model for $sub$demo.v:306$145 ($sub).
  creating $macc model for $sub$demo.v:317$148 ($sub).
  creating $alu model for $macc $sub$demo.v:317$148.
  creating $alu model for $macc $sub$demo.v:306$145.
  creating $alu model for $macc $sub$demo.v:259$139.
  creating $alu model for $macc $add$demo.v:322$150.
  creating $alu model for $macc $add$demo.v:235$135.
  creating $alu model for $macc $add$demo.v:207$129.
  creating $alu model for $le$demo.v:205$128 ($le): new $alu
  creating $alu model for $le$demo.v:217$130 ($le): new $alu
  creating $alu cell for $le$demo.v:217$130: $auto$alumacc.cc:474:replace_alu$692
  creating $alu cell for $le$demo.v:205$128: $auto$alumacc.cc:474:replace_alu$701
  creating $alu cell for $add$demo.v:207$129: $auto$alumacc.cc:474:replace_alu$714
  creating $alu cell for $add$demo.v:235$135: $auto$alumacc.cc:474:replace_alu$717
  creating $alu cell for $add$demo.v:322$150: $auto$alumacc.cc:474:replace_alu$720
  creating $alu cell for $sub$demo.v:259$139: $auto$alumacc.cc:474:replace_alu$723
  creating $alu cell for $sub$demo.v:306$145: $auto$alumacc.cc:474:replace_alu$726
  creating $alu cell for $sub$demo.v:317$148: $auto$alumacc.cc:474:replace_alu$729
  created 8 $alu and 0 $macc cells.

2.19. Executing OPT pass (performing simple optimizations).

2.19.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.

2.19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\demo'.
Removed a total of 0 cells.

2.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \demo..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~11 debug messages>

2.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \demo.
    New input vector for $reduce_or cell $auto$alumacc.cc:509:replace_alu$699: { $auto$rtlil.cc:1832:Not$696 $auto$rtlil.cc:1835:ReduceAnd$698 }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$697: { $auto$alumacc.cc:490:replace_alu$693 [0] $auto$alumacc.cc:490:replace_alu$693 [1] $auto$alumacc.cc:490:replace_alu$693 [2] $auto$alumacc.cc:490:replace_alu$693 [3] $auto$alumacc.cc:490:replace_alu$693 [4] $auto$alumacc.cc:490:replace_alu$693 [5] $auto$alumacc.cc:490:replace_alu$693 [6] $auto$alumacc.cc:490:replace_alu$693 [7] $auto$alumacc.cc:490:replace_alu$693 [8] $auto$alumacc.cc:490:replace_alu$693 [9] $auto$alumacc.cc:490:replace_alu$693 [10] $auto$alumacc.cc:490:replace_alu$693 [11] $auto$alumacc.cc:490:replace_alu$693 [12] $auto$alumacc.cc:490:replace_alu$693 [13] $auto$alumacc.cc:490:replace_alu$693 [14] $auto$alumacc.cc:490:replace_alu$693 [15] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$704: { $auto$alumacc.cc:490:replace_alu$702 [0] $auto$alumacc.cc:490:replace_alu$702 [1] $auto$alumacc.cc:490:replace_alu$702 [2] $auto$alumacc.cc:490:replace_alu$702 [3] $auto$alumacc.cc:490:replace_alu$702 [4] $auto$alumacc.cc:490:replace_alu$702 [5] $auto$alumacc.cc:490:replace_alu$702 [6] $auto$alumacc.cc:490:replace_alu$702 [7] $auto$alumacc.cc:490:replace_alu$702 [8] $auto$alumacc.cc:490:replace_alu$702 [9] $auto$alumacc.cc:490:replace_alu$702 [10] $auto$alumacc.cc:490:replace_alu$702 [11] $auto$alumacc.cc:490:replace_alu$702 [12] $auto$alumacc.cc:490:replace_alu$702 [13] $auto$alumacc.cc:490:replace_alu$702 [14] $auto$alumacc.cc:490:replace_alu$702 [15] }
  Optimizing cells in module \demo.
Performed a total of 3 changes.

2.19.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\demo'.
Removed a total of 0 cells.

2.19.6. Executing OPT_RMDFF pass (remove dff with constant values).

2.19.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

2.19.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.

2.19.9. Rerunning OPT passes. (Maybe there is more to do..)

2.19.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \demo..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~11 debug messages>

2.19.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \demo.
Performed a total of 0 changes.

2.19.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\demo'.
Removed a total of 0 cells.

2.19.13. Executing OPT_RMDFF pass (remove dff with constant values).

2.19.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..

2.19.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.

2.19.16. Finished OPT passes. (There is nothing left to do.)

2.20. Executing FSM pass (extract and optimize FSM).

2.20.1. Executing FSM_DETECT pass (finding FSMs in design).
Not marking demo.state as FSM state register:
    Register has an initialization value.

2.20.2. Executing FSM_EXTRACT pass (extracting FSM from design).

2.20.3. Executing FSM_OPT pass (simple optimizations of FSMs).

2.20.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..

2.20.5. Executing FSM_OPT pass (simple optimizations of FSMs).

2.20.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

2.20.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

2.20.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

2.21. Executing OPT pass (performing simple optimizations).

2.21.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.

2.21.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\demo'.
Removed a total of 0 cells.

2.21.3. Executing OPT_RMDFF pass (remove dff with constant values).

2.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..

2.21.5. Finished fast OPT passes.

2.22. Executing MEMORY pass.

2.22.1. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).
Checking cell `$memrd$\cmd$demo.v:228$132' in module `\demo': no (compatible) $dff found.
Checking cell `$memrd$\num_params$demo.v:306$144' in module `\demo': no (compatible) $dff found.
Checking cell `$memrd$\params$demo.v:310$146' in module `\demo': no (compatible) $dff found.

2.22.2. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..

2.22.3. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

2.22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..

2.22.5. Executing MEMORY_COLLECT pass (generating $mem cells).
Collecting $memrd, $memwr and $meminit for memory `\cmd' in module `\demo':
  $meminit$\cmd$demo.v:52$151 ($meminit)
  $meminit$\cmd$demo.v:53$152 ($meminit)
  $meminit$\cmd$demo.v:54$153 ($meminit)
  $meminit$\cmd$demo.v:55$154 ($meminit)
  $meminit$\cmd$demo.v:56$155 ($meminit)
  $meminit$\cmd$demo.v:57$156 ($meminit)
  $meminit$\cmd$demo.v:58$157 ($meminit)
  $meminit$\cmd$demo.v:59$158 ($meminit)
  $meminit$\cmd$demo.v:60$159 ($meminit)
  $meminit$\cmd$demo.v:61$160 ($meminit)
  $meminit$\cmd$demo.v:62$161 ($meminit)
  $meminit$\cmd$demo.v:63$162 ($meminit)
  $meminit$\cmd$demo.v:64$163 ($meminit)
  $meminit$\cmd$demo.v:65$164 ($meminit)
  $meminit$\cmd$demo.v:66$165 ($meminit)
  $meminit$\cmd$demo.v:67$166 ($meminit)
  $meminit$\cmd$demo.v:68$167 ($meminit)
  $meminit$\cmd$demo.v:69$168 ($meminit)
  $meminit$\cmd$demo.v:70$169 ($meminit)
  $meminit$\cmd$demo.v:71$170 ($meminit)
  $meminit$\cmd$demo.v:72$171 ($meminit)
  $meminit$\cmd$demo.v:73$172 ($meminit)
  $meminit$\cmd$demo.v:74$173 ($meminit)
  $meminit$\cmd$demo.v:75$174 ($meminit)
  $memrd$\cmd$demo.v:228$132 ($memrd)
Collecting $memrd, $memwr and $meminit for memory `\num_params' in module `\demo':
  $meminit$\num_params$demo.v:76$175 ($meminit)
  $meminit$\num_params$demo.v:77$176 ($meminit)
  $meminit$\num_params$demo.v:78$177 ($meminit)
  $meminit$\num_params$demo.v:79$178 ($meminit)
  $meminit$\num_params$demo.v:80$179 ($meminit)
  $meminit$\num_params$demo.v:81$180 ($meminit)
  $meminit$\num_params$demo.v:82$181 ($meminit)
  $meminit$\num_params$demo.v:83$182 ($meminit)
  $meminit$\num_params$demo.v:84$183 ($meminit)
  $meminit$\num_params$demo.v:85$184 ($meminit)
  $meminit$\num_params$demo.v:86$185 ($meminit)
  $meminit$\num_params$demo.v:87$186 ($meminit)
  $meminit$\num_params$demo.v:88$187 ($meminit)
  $meminit$\num_params$demo.v:89$188 ($meminit)
  $meminit$\num_params$demo.v:90$189 ($meminit)
  $meminit$\num_params$demo.v:91$190 ($meminit)
  $meminit$\num_params$demo.v:92$191 ($meminit)
  $meminit$\num_params$demo.v:93$192 ($meminit)
  $meminit$\num_params$demo.v:94$193 ($meminit)
  $meminit$\num_params$demo.v:95$194 ($meminit)
  $meminit$\num_params$demo.v:96$195 ($meminit)
  $meminit$\num_params$demo.v:97$196 ($meminit)
  $meminit$\num_params$demo.v:98$197 ($meminit)
  $meminit$\num_params$demo.v:99$198 ($meminit)
  $memrd$\num_params$demo.v:306$144 ($memrd)
Collecting $memrd, $memwr and $meminit for memory `\params' in module `\demo':
  $meminit$\params$demo.v:101$199 ($meminit)
  $meminit$\params$demo.v:102$200 ($meminit)
  $meminit$\params$demo.v:103$201 ($meminit)
  $meminit$\params$demo.v:104$202 ($meminit)
  $meminit$\params$demo.v:105$203 ($meminit)
  $meminit$\params$demo.v:106$204 ($meminit)
  $meminit$\params$demo.v:107$205 ($meminit)
  $meminit$\params$demo.v:108$206 ($meminit)
  $meminit$\params$demo.v:109$207 ($meminit)
  $meminit$\params$demo.v:110$208 ($meminit)
  $meminit$\params$demo.v:111$209 ($meminit)
  $meminit$\params$demo.v:112$210 ($meminit)
  $meminit$\params$demo.v:113$211 ($meminit)
  $meminit$\params$demo.v:114$212 ($meminit)
  $meminit$\params$demo.v:115$213 ($meminit)
  $meminit$\params$demo.v:116$214 ($meminit)
  $meminit$\params$demo.v:117$215 ($meminit)
  $meminit$\params$demo.v:118$216 ($meminit)
  $meminit$\params$demo.v:119$217 ($meminit)
  $meminit$\params$demo.v:120$218 ($meminit)
  $meminit$\params$demo.v:121$219 ($meminit)
  $meminit$\params$demo.v:122$220 ($meminit)
  $meminit$\params$demo.v:123$221 ($meminit)
  $meminit$\params$demo.v:124$222 ($meminit)
  $meminit$\params$demo.v:125$223 ($meminit)
  $meminit$\params$demo.v:126$224 ($meminit)
  $meminit$\params$demo.v:127$225 ($meminit)
  $meminit$\params$demo.v:128$226 ($meminit)
  $meminit$\params$demo.v:129$227 ($meminit)
  $meminit$\params$demo.v:130$228 ($meminit)
  $meminit$\params$demo.v:131$229 ($meminit)
  $meminit$\params$demo.v:132$230 ($meminit)
  $meminit$\params$demo.v:133$231 ($meminit)
  $meminit$\params$demo.v:134$232 ($meminit)
  $meminit$\params$demo.v:135$233 ($meminit)
  $meminit$\params$demo.v:136$234 ($meminit)
  $meminit$\params$demo.v:137$235 ($meminit)
  $meminit$\params$demo.v:138$236 ($meminit)
  $meminit$\params$demo.v:139$237 ($meminit)
  $meminit$\params$demo.v:140$238 ($meminit)
  $meminit$\params$demo.v:141$239 ($meminit)
  $meminit$\params$demo.v:142$240 ($meminit)
  $meminit$\params$demo.v:143$241 ($meminit)
  $meminit$\params$demo.v:144$242 ($meminit)
  $meminit$\params$demo.v:145$243 ($meminit)
  $meminit$\params$demo.v:146$244 ($meminit)
  $meminit$\params$demo.v:147$245 ($meminit)
  $meminit$\params$demo.v:148$246 ($meminit)
  $meminit$\params$demo.v:149$247 ($meminit)
  $meminit$\params$demo.v:150$248 ($meminit)
  $meminit$\params$demo.v:151$249 ($meminit)
  $meminit$\params$demo.v:152$250 ($meminit)
  $meminit$\params$demo.v:153$251 ($meminit)
  $meminit$\params$demo.v:154$252 ($meminit)
  $meminit$\params$demo.v:155$253 ($meminit)
  $meminit$\params$demo.v:156$254 ($meminit)
  $meminit$\params$demo.v:157$255 ($meminit)
  $meminit$\params$demo.v:158$256 ($meminit)
  $meminit$\params$demo.v:159$257 ($meminit)
  $meminit$\params$demo.v:160$258 ($meminit)
  $meminit$\params$demo.v:161$259 ($meminit)
  $meminit$\params$demo.v:162$260 ($meminit)
  $meminit$\params$demo.v:163$261 ($meminit)
  $meminit$\params$demo.v:164$262 ($meminit)
  $meminit$\params$demo.v:165$263 ($meminit)
  $meminit$\params$demo.v:166$264 ($meminit)
  $meminit$\params$demo.v:167$265 ($meminit)
  $meminit$\params$demo.v:168$266 ($meminit)
  $meminit$\params$demo.v:169$267 ($meminit)
  $meminit$\params$demo.v:170$268 ($meminit)
  $meminit$\params$demo.v:171$269 ($meminit)
  $meminit$\params$demo.v:172$270 ($meminit)
  $meminit$\params$demo.v:173$271 ($meminit)
  $meminit$\params$demo.v:174$272 ($meminit)
  $meminit$\params$demo.v:175$273 ($meminit)
  $meminit$\params$demo.v:176$274 ($meminit)
  $memrd$\params$demo.v:310$146 ($memrd)

2.23. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..

2.24. Executing MEMORY_BRAM pass (mapping $mem cells to block memories).
Processing demo.cmd:
  Properties: ports=1 bits=192 rports=1 wports=0 dbits=8 abits=5 words=24
  Checking rule #1 for bram type $__ICE40_RAM4K_M0 (variant 1):
    Bram geometry: abits=8 dbits=16 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M0: awaste=232 dwaste=8 bwaste=3904 waste=3904 efficiency=4
    Rule #1 for bram type $__ICE40_RAM4K_M0 (variant 1) accepted.
    Mapping to bram type $__ICE40_RAM4K_M0 (variant 1):
      Read port #0 is in clock domain !~async~.
        Bram port A1.1 has incompatible clock type.
        Failed to map read port #0.
    Mapping to bram type $__ICE40_RAM4K_M0 failed.
  Checking rule #2 for bram type $__ICE40_RAM4K_M123 (variant 1):
    Bram geometry: abits=9 dbits=8 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=488 dwaste=0 bwaste=3904 waste=3904 efficiency=4
    Rule #2 for bram type $__ICE40_RAM4K_M123 (variant 1) accepted.
    Mapping to bram type $__ICE40_RAM4K_M123 (variant 1):
      Read port #0 is in clock domain !~async~.
        Bram port A1.1 has incompatible clock type.
        Failed to map read port #0.
    Mapping to bram type $__ICE40_RAM4K_M123 failed.
  Checking rule #2 for bram type $__ICE40_RAM4K_M123 (variant 2):
    Bram geometry: abits=10 dbits=4 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=1000 dwaste=0 bwaste=4000 waste=4000 efficiency=2
    Rule #2 for bram type $__ICE40_RAM4K_M123 (variant 2) accepted.
    Mapping to bram type $__ICE40_RAM4K_M123 (variant 2):
      Read port #0 is in clock domain !~async~.
        Bram port A1.1 has incompatible clock type.
        Failed to map read port #0.
    Mapping to bram type $__ICE40_RAM4K_M123 failed.
  Checking rule #2 for bram type $__ICE40_RAM4K_M123 (variant 3):
    Bram geometry: abits=11 dbits=2 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=2024 dwaste=0 bwaste=4048 waste=4048 efficiency=1
    Rule #2 for bram type $__ICE40_RAM4K_M123 (variant 3) rejected: requirement 'min efficiency 2' not met.
  No acceptable bram resources found.
Processing demo.num_params:
  Properties: ports=1 bits=336 rports=1 wports=0 dbits=14 abits=5 words=24
  Checking rule #1 for bram type $__ICE40_RAM4K_M0 (variant 1):
    Bram geometry: abits=8 dbits=16 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M0: awaste=232 dwaste=2 bwaste=3760 waste=3760 efficiency=8
    Rule #1 for bram type $__ICE40_RAM4K_M0 (variant 1) accepted.
    Mapping to bram type $__ICE40_RAM4K_M0 (variant 1):
      Read port #0 is in clock domain !~async~.
        Bram port A1.1 has incompatible clock type.
        Failed to map read port #0.
    Mapping to bram type $__ICE40_RAM4K_M0 failed.
  Checking rule #2 for bram type $__ICE40_RAM4K_M123 (variant 1):
    Bram geometry: abits=9 dbits=8 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=488 dwaste=2 bwaste=3952 waste=3952 efficiency=4
    Rule #2 for bram type $__ICE40_RAM4K_M123 (variant 1) accepted.
    Mapping to bram type $__ICE40_RAM4K_M123 (variant 1):
      Read port #0 is in clock domain !~async~.
        Bram port A1.1 has incompatible clock type.
        Failed to map read port #0.
    Mapping to bram type $__ICE40_RAM4K_M123 failed.
  Checking rule #2 for bram type $__ICE40_RAM4K_M123 (variant 2):
    Bram geometry: abits=10 dbits=4 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=1000 dwaste=2 bwaste=4048 waste=4048 efficiency=2
    Rule #2 for bram type $__ICE40_RAM4K_M123 (variant 2) accepted.
    Mapping to bram type $__ICE40_RAM4K_M123 (variant 2):
      Read port #0 is in clock domain !~async~.
        Bram port A1.1 has incompatible clock type.
        Failed to map read port #0.
    Mapping to bram type $__ICE40_RAM4K_M123 failed.
  Checking rule #2 for bram type $__ICE40_RAM4K_M123 (variant 3):
    Bram geometry: abits=11 dbits=2 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=2024 dwaste=0 bwaste=4048 waste=4048 efficiency=1
    Rule #2 for bram type $__ICE40_RAM4K_M123 (variant 3) rejected: requirement 'min efficiency 2' not met.
  No acceptable bram resources found.
Processing demo.params:
  Properties: ports=1 bits=608 rports=1 wports=0 dbits=8 abits=7 words=76
  Checking rule #1 for bram type $__ICE40_RAM4K_M0 (variant 1):
    Bram geometry: abits=8 dbits=16 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M0: awaste=180 dwaste=8 bwaste=3488 waste=3488 efficiency=14
    Rule #1 for bram type $__ICE40_RAM4K_M0 (variant 1) accepted.
    Mapping to bram type $__ICE40_RAM4K_M0 (variant 1):
      Read port #0 is in clock domain !~async~.
        Bram port A1.1 has incompatible clock type.
        Failed to map read port #0.
    Mapping to bram type $__ICE40_RAM4K_M0 failed.
  Checking rule #2 for bram type $__ICE40_RAM4K_M123 (variant 1):
    Bram geometry: abits=9 dbits=8 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=436 dwaste=0 bwaste=3488 waste=3488 efficiency=14
    Rule #2 for bram type $__ICE40_RAM4K_M123 (variant 1) accepted.
    Mapping to bram type $__ICE40_RAM4K_M123 (variant 1):
      Read port #0 is in clock domain !~async~.
        Bram port A1.1 has incompatible clock type.
        Failed to map read port #0.
    Mapping to bram type $__ICE40_RAM4K_M123 failed.
  Checking rule #2 for bram type $__ICE40_RAM4K_M123 (variant 2):
    Bram geometry: abits=10 dbits=4 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=948 dwaste=0 bwaste=3792 waste=3792 efficiency=7
    Rule #2 for bram type $__ICE40_RAM4K_M123 (variant 2) accepted.
    Mapping to bram type $__ICE40_RAM4K_M123 (variant 2):
      Read port #0 is in clock domain !~async~.
        Bram port A1.1 has incompatible clock type.
        Failed to map read port #0.
    Mapping to bram type $__ICE40_RAM4K_M123 failed.
  Checking rule #2 for bram type $__ICE40_RAM4K_M123 (variant 3):
    Bram geometry: abits=11 dbits=2 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=1972 dwaste=0 bwaste=3944 waste=3944 efficiency=3
    Rule #2 for bram type $__ICE40_RAM4K_M123 (variant 3) accepted.
    Mapping to bram type $__ICE40_RAM4K_M123 (variant 3):
      Read port #0 is in clock domain !~async~.
        Bram port A1.1 has incompatible clock type.
        Failed to map read port #0.
    Mapping to bram type $__ICE40_RAM4K_M123 failed.
  No acceptable bram resources found.

2.25. Executing TECHMAP pass (map to technology primitives).

2.25.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/brams_map.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/brams_map.v' to AST representation.
Generating RTLIL representation for module `\$__ICE40_RAM4K'.
Generating RTLIL representation for module `\$__ICE40_RAM4K_M0'.
Generating RTLIL representation for module `\$__ICE40_RAM4K_M123'.
Successfully finished Verilog frontend.

2.25.2. Continuing TECHMAP pass.
No more expansions possible.

2.26. Executing ICE40_BRAMINIT pass.

2.27. Executing OPT pass (performing simple optimizations).

2.27.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.
<suppressed ~1 debug messages>

2.27.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\demo'.
Removed a total of 0 cells.

2.27.3. Executing OPT_RMDFF pass (remove dff with constant values).

2.27.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

2.27.5. Finished fast OPT passes.

2.28. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).
Mapping memory cell \cmd in module \demo:
  created 24 $dff cells and 0 static cells of width 8.
  read interface: 0 $dff and 31 $mux cells.
  write interface: 0 write mux blocks.
Mapping memory cell \num_params in module \demo:
  created 24 $dff cells and 0 static cells of width 14.
  read interface: 0 $dff and 31 $mux cells.
  write interface: 0 write mux blocks.
Mapping memory cell \params in module \demo:
  created 76 $dff cells and 0 static cells of width 8.
  read interface: 0 $dff and 127 $mux cells.
  write interface: 0 write mux blocks.

2.29. Executing OPT pass (performing simple optimizations).

2.29.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.
<suppressed ~151 debug messages>

2.29.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\demo'.
Removed a total of 0 cells.

2.29.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \demo..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~12 debug messages>

2.29.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \demo.
    Consolidated identical input bits for $mux cell $procmux$581:
      Old ports: A=2'10, B=2'00, Y=$auto$wreduce.cc:455:run$680 [1:0]
      New ports: A=1'1, B=1'0, Y=$auto$wreduce.cc:455:run$680 [1]
      New connections: $auto$wreduce.cc:455:run$680 [0] = 1'0
    Consolidated identical input bits for $mux cell $procmux$587:
      Old ports: A=3'011, B=3'100, Y=$auto$wreduce.cc:455:run$681 [2:0]
      New ports: A=2'01, B=2'10, Y={ $auto$wreduce.cc:455:run$681 [2] $auto$wreduce.cc:455:run$681 [0] }
      New connections: $auto$wreduce.cc:455:run$681 [1] = $auto$wreduce.cc:455:run$681 [0]
    Consolidated identical input bits for $mux cell $procmux$595:
      Old ports: A=4'1010, B=4'0110, Y=$auto$wreduce.cc:455:run$683 [3:0]
      New ports: A=2'10, B=2'01, Y=$auto$wreduce.cc:455:run$683 [3:2]
      New connections: $auto$wreduce.cc:455:run$683 [1:0] = 2'10
    Consolidated identical input bits for $mux cell $procmux$599:
      Old ports: A=4'0111, B=4'1010, Y=$auto$wreduce.cc:455:run$684 [3:0]
      New ports: A=2'01, B=2'10, Y={ $auto$wreduce.cc:455:run$684 [3] $auto$wreduce.cc:455:run$684 [0] }
      New connections: $auto$wreduce.cc:455:run$684 [2:1] = { $auto$wreduce.cc:455:run$684 [0] 1'1 }
    Consolidated identical input bits for $mux cell $procmux$603:
      Old ports: A=2'10, B=2'00, Y=$auto$wreduce.cc:455:run$685 [1:0]
      New ports: A=1'1, B=1'0, Y=$auto$wreduce.cc:455:run$685 [1]
      New connections: $auto$wreduce.cc:455:run$685 [0] = 1'0
  Optimizing cells in module \demo.
    Consolidated identical input bits for $mux cell $procmux$606:
      Old ports: A={ 2'10 $auto$wreduce.cc:455:run$685 [1:0] }, B=4'0111, Y=$auto$wreduce.cc:455:run$686 [3:0]
      New ports: A={ 1'1 $auto$wreduce.cc:455:run$685 [1] 1'0 }, B=3'011, Y={ $auto$wreduce.cc:455:run$686 [3] $auto$wreduce.cc:455:run$686 [1:0] }
      New connections: $auto$wreduce.cc:455:run$686 [2] = $auto$wreduce.cc:455:run$686 [0]
  Optimizing cells in module \demo.
Performed a total of 6 changes.

2.29.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\demo'.
Removed a total of 0 cells.

2.29.6. Executing OPT_RMDFF pass (remove dff with constant values).
Removing $memory\params[75]$1170 ($dff) from module demo.
Removing $memory\params[74]$1168 ($dff) from module demo.
Removing $memory\params[73]$1166 ($dff) from module demo.
Removing $memory\params[72]$1164 ($dff) from module demo.
Removing $memory\params[71]$1162 ($dff) from module demo.
Removing $memory\params[70]$1160 ($dff) from module demo.
Removing $memory\params[69]$1158 ($dff) from module demo.
Removing $memory\params[68]$1156 ($dff) from module demo.
Removing $memory\params[67]$1154 ($dff) from module demo.
Removing $memory\params[66]$1152 ($dff) from module demo.
Removing $memory\params[65]$1150 ($dff) from module demo.
Removing $memory\params[64]$1148 ($dff) from module demo.
Removing $memory\params[63]$1146 ($dff) from module demo.
Removing $memory\params[62]$1144 ($dff) from module demo.
Removing $memory\params[61]$1142 ($dff) from module demo.
Removing $memory\params[60]$1140 ($dff) from module demo.
Removing $memory\params[59]$1138 ($dff) from module demo.
Removing $memory\params[58]$1136 ($dff) from module demo.
Removing $memory\params[57]$1134 ($dff) from module demo.
Removing $memory\params[56]$1132 ($dff) from module demo.
Removing $memory\params[55]$1130 ($dff) from module demo.
Removing $memory\params[54]$1128 ($dff) from module demo.
Removing $memory\params[53]$1126 ($dff) from module demo.
Removing $memory\params[52]$1124 ($dff) from module demo.
Removing $memory\params[51]$1122 ($dff) from module demo.
Removing $memory\params[50]$1120 ($dff) from module demo.
Removing $memory\params[49]$1118 ($dff) from module demo.
Removing $memory\params[48]$1116 ($dff) from module demo.
Removing $memory\params[47]$1114 ($dff) from module demo.
Removing $memory\params[46]$1112 ($dff) from module demo.
Removing $memory\params[45]$1110 ($dff) from module demo.
Removing $memory\params[44]$1108 ($dff) from module demo.
Removing $memory\params[43]$1106 ($dff) from module demo.
Removing $memory\params[42]$1104 ($dff) from module demo.
Removing $memory\params[41]$1102 ($dff) from module demo.
Removing $memory\params[40]$1100 ($dff) from module demo.
Removing $memory\params[39]$1098 ($dff) from module demo.
Removing $memory\params[38]$1096 ($dff) from module demo.
Removing $memory\params[37]$1094 ($dff) from module demo.
Removing $memory\params[36]$1092 ($dff) from module demo.
Removing $memory\params[35]$1090 ($dff) from module demo.
Removing $memory\params[34]$1088 ($dff) from module demo.
Removing $memory\params[33]$1086 ($dff) from module demo.
Removing $memory\params[32]$1084 ($dff) from module demo.
Removing $memory\params[31]$1082 ($dff) from module demo.
Removing $memory\params[30]$1080 ($dff) from module demo.
Removing $memory\params[29]$1078 ($dff) from module demo.
Removing $memory\params[28]$1076 ($dff) from module demo.
Removing $memory\params[27]$1074 ($dff) from module demo.
Removing $memory\params[26]$1072 ($dff) from module demo.
Removing $memory\params[25]$1070 ($dff) from module demo.
Removing $memory\params[24]$1068 ($dff) from module demo.
Removing $memory\params[23]$1066 ($dff) from module demo.
Removing $memory\params[22]$1064 ($dff) from module demo.
Removing $memory\params[21]$1062 ($dff) from module demo.
Removing $memory\params[20]$1060 ($dff) from module demo.
Removing $memory\params[19]$1058 ($dff) from module demo.
Removing $memory\params[18]$1056 ($dff) from module demo.
Removing $memory\params[17]$1054 ($dff) from module demo.
Removing $memory\params[16]$1052 ($dff) from module demo.
Removing $memory\params[15]$1050 ($dff) from module demo.
Removing $memory\params[14]$1048 ($dff) from module demo.
Removing $memory\params[13]$1046 ($dff) from module demo.
Removing $memory\params[12]$1044 ($dff) from module demo.
Removing $memory\params[11]$1042 ($dff) from module demo.
Removing $memory\params[10]$1040 ($dff) from module demo.
Removing $memory\params[9]$1038 ($dff) from module demo.
Removing $memory\params[8]$1036 ($dff) from module demo.
Removing $memory\params[7]$1034 ($dff) from module demo.
Removing $memory\params[6]$1032 ($dff) from module demo.
Removing $memory\params[5]$1030 ($dff) from module demo.
Removing $memory\params[4]$1028 ($dff) from module demo.
Removing $memory\params[3]$1026 ($dff) from module demo.
Removing $memory\params[2]$1024 ($dff) from module demo.
Removing $memory\params[1]$1022 ($dff) from module demo.
Removing $memory\params[0]$1020 ($dff) from module demo.
Removing $memory\num_params[23]$925 ($dff) from module demo.
Removing $memory\num_params[22]$923 ($dff) from module demo.
Removing $memory\num_params[21]$921 ($dff) from module demo.
Removing $memory\num_params[20]$919 ($dff) from module demo.
Removing $memory\num_params[19]$917 ($dff) from module demo.
Removing $memory\num_params[18]$915 ($dff) from module demo.
Removing $memory\num_params[17]$913 ($dff) from module demo.
Removing $memory\num_params[16]$911 ($dff) from module demo.
Removing $memory\num_params[15]$909 ($dff) from module demo.
Removing $memory\num_params[14]$907 ($dff) from module demo.
Removing $memory\num_params[13]$905 ($dff) from module demo.
Removing $memory\num_params[12]$903 ($dff) from module demo.
Removing $memory\num_params[11]$901 ($dff) from module demo.
Removing $memory\num_params[10]$899 ($dff) from module demo.
Removing $memory\num_params[9]$897 ($dff) from module demo.
Removing $memory\num_params[8]$895 ($dff) from module demo.
Removing $memory\num_params[7]$893 ($dff) from module demo.
Removing $memory\num_params[6]$891 ($dff) from module demo.
Removing $memory\num_params[5]$889 ($dff) from module demo.
Removing $memory\num_params[4]$887 ($dff) from module demo.
Removing $memory\num_params[3]$885 ($dff) from module demo.
Removing $memory\num_params[2]$883 ($dff) from module demo.
Removing $memory\num_params[1]$881 ($dff) from module demo.
Removing $memory\num_params[0]$879 ($dff) from module demo.
Removing $memory\cmd[23]$784 ($dff) from module demo.
Removing $memory\cmd[22]$782 ($dff) from module demo.
Removing $memory\cmd[21]$780 ($dff) from module demo.
Removing $memory\cmd[20]$778 ($dff) from module demo.
Removing $memory\cmd[19]$776 ($dff) from module demo.
Removing $memory\cmd[18]$774 ($dff) from module demo.
Removing $memory\cmd[17]$772 ($dff) from module demo.
Removing $memory\cmd[16]$770 ($dff) from module demo.
Removing $memory\cmd[15]$768 ($dff) from module demo.
Removing $memory\cmd[14]$766 ($dff) from module demo.
Removing $memory\cmd[13]$764 ($dff) from module demo.
Removing $memory\cmd[12]$762 ($dff) from module demo.
Removing $memory\cmd[11]$760 ($dff) from module demo.
Removing $memory\cmd[10]$758 ($dff) from module demo.
Removing $memory\cmd[9]$756 ($dff) from module demo.
Removing $memory\cmd[8]$754 ($dff) from module demo.
Removing $memory\cmd[7]$752 ($dff) from module demo.
Removing $memory\cmd[6]$750 ($dff) from module demo.
Removing $memory\cmd[5]$748 ($dff) from module demo.
Removing $memory\cmd[4]$746 ($dff) from module demo.
Removing $memory\cmd[3]$744 ($dff) from module demo.
Removing $memory\cmd[2]$742 ($dff) from module demo.
Removing $memory\cmd[1]$740 ($dff) from module demo.
Removing $memory\cmd[0]$738 ($dff) from module demo.
Replaced 124 DFF cells.

2.29.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..
Removed 0 unused cells and 379 unused wires.
<suppressed ~1 debug messages>

2.29.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.
<suppressed ~7 debug messages>

2.29.9. Rerunning OPT passes. (Maybe there is more to do..)

2.29.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \demo..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~12 debug messages>

2.29.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \demo.
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][4][0]$831:
      Old ports: A=8'10110001, B=8'10110010, Y=$memory\cmd$rdmux[0][3][0]$a$808
      New ports: A=2'01, B=2'10, Y=$memory\cmd$rdmux[0][3][0]$a$808 [1:0]
      New connections: $memory\cmd$rdmux[0][3][0]$a$808 [7:2] = 6'101100
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][4][10]$861:
      Old ports: A=8'00101010, B=8'00101011, Y=$memory\cmd$rdmux[0][3][5]$a$823
      New ports: A=1'0, B=1'1, Y=$memory\cmd$rdmux[0][3][5]$a$823 [0]
      New connections: $memory\cmd$rdmux[0][3][5]$a$823 [7:1] = 7'0010101
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][4][11]$864:
      Old ports: A=8'00101100, B=8'00000000, Y=$memory\cmd$rdmux[0][3][5]$b$824
      New ports: A=1'1, B=1'0, Y=$memory\cmd$rdmux[0][3][5]$b$824 [2]
      New connections: { $memory\cmd$rdmux[0][3][5]$b$824 [7:3] $memory\cmd$rdmux[0][3][5]$b$824 [1:0] } = { 2'00 $memory\cmd$rdmux[0][3][5]$b$824 [2] 1'0 $memory\cmd$rdmux[0][3][5]$b$824 [2] 2'00 }
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][4][1]$834:
      Old ports: A=8'10110011, B=8'10110100, Y=$memory\cmd$rdmux[0][3][0]$b$809
      New ports: A=2'01, B=2'10, Y={ $memory\cmd$rdmux[0][3][0]$b$809 [2] $memory\cmd$rdmux[0][3][0]$b$809 [0] }
      New connections: { $memory\cmd$rdmux[0][3][0]$b$809 [7:3] $memory\cmd$rdmux[0][3][0]$b$809 [1] } = { 5'10110 $memory\cmd$rdmux[0][3][0]$b$809 [0] }
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][4][2]$837:
      Old ports: A=8'11000000, B=8'11000001, Y=$memory\cmd$rdmux[0][3][1]$a$811
      New ports: A=1'0, B=1'1, Y=$memory\cmd$rdmux[0][3][1]$a$811 [0]
      New connections: $memory\cmd$rdmux[0][3][1]$a$811 [7:1] = 7'1100000
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][4][3]$840:
      Old ports: A=8'11000010, B=8'11000011, Y=$memory\cmd$rdmux[0][3][1]$b$812
      New ports: A=1'0, B=1'1, Y=$memory\cmd$rdmux[0][3][1]$b$812 [0]
      New connections: $memory\cmd$rdmux[0][3][1]$b$812 [7:1] = 7'1100001
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][4][4]$843:
      Old ports: A=8'11000100, B=8'11000101, Y=$memory\cmd$rdmux[0][3][2]$a$814
      New ports: A=1'0, B=1'1, Y=$memory\cmd$rdmux[0][3][2]$a$814 [0]
      New connections: $memory\cmd$rdmux[0][3][2]$a$814 [7:1] = 7'1100010
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][4][5]$846:
      Old ports: A=8'11100000, B=8'11100001, Y=$memory\cmd$rdmux[0][3][2]$b$815
      New ports: A=1'0, B=1'1, Y=$memory\cmd$rdmux[0][3][2]$b$815 [0]
      New connections: $memory\cmd$rdmux[0][3][2]$b$815 [7:1] = 7'1110000
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][4][6]$849:
      Old ports: A=8'11111100, B=8'00111010, Y=$memory\cmd$rdmux[0][3][3]$a$817
      New ports: A=2'10, B=2'01, Y=$memory\cmd$rdmux[0][3][3]$a$817 [2:1]
      New connections: { $memory\cmd$rdmux[0][3][3]$a$817 [7:3] $memory\cmd$rdmux[0][3][3]$a$817 [0] } = { $memory\cmd$rdmux[0][3][3]$a$817 [2] $memory\cmd$rdmux[0][3][3]$a$817 [2] 4'1110 }
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][4][7]$852:
      Old ports: A=8'00110110, B=8'00100001, Y=$memory\cmd$rdmux[0][3][3]$b$818
      New ports: A=2'10, B=2'01, Y=$memory\cmd$rdmux[0][3][3]$b$818 [1:0]
      New connections: $memory\cmd$rdmux[0][3][3]$b$818 [7:2] = { 3'001 $memory\cmd$rdmux[0][3][3]$b$818 [1] 1'0 $memory\cmd$rdmux[0][3][3]$b$818 [1] }
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][4][8]$855:
      Old ports: A=8'00101001, B=8'00101010, Y=$memory\cmd$rdmux[0][3][4]$a$820
      New ports: A=2'01, B=2'10, Y=$memory\cmd$rdmux[0][3][4]$a$820 [1:0]
      New connections: $memory\cmd$rdmux[0][3][4]$a$820 [7:2] = 6'001010
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][4][9]$858:
      Old ports: A=8'00101011, B=8'00101100, Y=$memory\cmd$rdmux[0][3][4]$b$821
      New ports: A=2'01, B=2'10, Y={ $memory\cmd$rdmux[0][3][4]$b$821 [2] $memory\cmd$rdmux[0][3][4]$b$821 [0] }
      New connections: { $memory\cmd$rdmux[0][3][4]$b$821 [7:3] $memory\cmd$rdmux[0][3][4]$b$821 [1] } = { 5'00101 $memory\cmd$rdmux[0][3][4]$b$821 [0] }
    Consolidated identical input bits for $mux cell $memory\num_params$rdmux[0][4][11]$1005:
      Old ports: A=14'11001000000000, B=14'00000000000000, Y=$memory\num_params$rdmux[0][3][5]$b$965
      New ports: A=1'1, B=1'0, Y=$memory\num_params$rdmux[0][3][5]$b$965 [9]
      New connections: { $memory\num_params$rdmux[0][3][5]$b$965 [13:10] $memory\num_params$rdmux[0][3][5]$b$965 [8:0] } = { $memory\num_params$rdmux[0][3][5]$b$965 [9] $memory\num_params$rdmux[0][3][5]$b$965 [9] 11'00000000000 }
    Consolidated identical input bits for $mux cell $memory\num_params$rdmux[0][4][1]$975:
      Old ports: A=14'00000000000110, B=14'00000000000001, Y=$memory\num_params$rdmux[0][3][0]$b$950
      New ports: A=2'10, B=2'01, Y=$memory\num_params$rdmux[0][3][0]$b$950 [1:0]
      New connections: $memory\num_params$rdmux[0][3][0]$b$950 [13:2] = { 11'00000000000 $memory\num_params$rdmux[0][3][0]$b$950 [1] }
    Consolidated identical input bits for $mux cell $memory\num_params$rdmux[0][4][2]$978:
      Old ports: A=14'00000000000011, B=14'00000000000001, Y=$memory\num_params$rdmux[0][3][1]$a$952
      New ports: A=1'1, B=1'0, Y=$memory\num_params$rdmux[0][3][1]$a$952 [1]
      New connections: { $memory\num_params$rdmux[0][3][1]$a$952 [13:2] $memory\num_params$rdmux[0][3][1]$a$952 [0] } = 13'0000000000001
    Consolidated identical input bits for $mux cell $memory\num_params$rdmux[0][4][4]$984:
      Old ports: A=14'00000000000010, B=14'00000000000001, Y=$memory\num_params$rdmux[0][3][2]$a$955
      New ports: A=2'10, B=2'01, Y=$memory\num_params$rdmux[0][3][2]$a$955 [1:0]
      New connections: $memory\num_params$rdmux[0][3][2]$a$955 [13:2] = 12'000000000000
    Consolidated identical input bits for $mux cell $memory\num_params$rdmux[0][4][7]$993:
      Old ports: A=14'00000000000001, B=14'00000000000000, Y=$memory\num_params$rdmux[0][3][3]$b$959
      New ports: A=1'1, B=1'0, Y=$memory\num_params$rdmux[0][3][3]$b$959 [0]
      New connections: $memory\num_params$rdmux[0][3][3]$b$959 [13:1] = 13'0000000000000
    Consolidated identical input bits for $mux cell $memory\num_params$rdmux[0][4][8]$996:
      Old ports: A=14'00000000000000, B=14'00000000000100, Y=$memory\num_params$rdmux[0][3][4]$a$961
      New ports: A=1'0, B=1'1, Y=$memory\num_params$rdmux[0][3][4]$a$961 [2]
      New connections: { $memory\num_params$rdmux[0][3][4]$a$961 [13:3] $memory\num_params$rdmux[0][3][4]$a$961 [1:0] } = 13'0000000000000
    Consolidated identical input bits for $mux cell $memory\num_params$rdmux[0][4][9]$999:
      Old ports: A=14'00000000000100, B=14'00000000000000, Y=$memory\num_params$rdmux[0][3][4]$b$962
      New ports: A=1'1, B=1'0, Y=$memory\num_params$rdmux[0][3][4]$b$962 [2]
      New connections: { $memory\num_params$rdmux[0][3][4]$b$962 [13:3] $memory\num_params$rdmux[0][3][4]$b$962 [1:0] } = 13'0000000000000
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][0]$1361:
      Old ports: A=8'00000101, B=8'00111100, Y=$memory\params$rdmux[0][5][0]$a$1266
      New ports: A=2'01, B=2'10, Y={ $memory\params$rdmux[0][5][0]$a$1266 [3] $memory\params$rdmux[0][5][0]$a$1266 [0] }
      New connections: { $memory\params$rdmux[0][5][0]$a$1266 [7:4] $memory\params$rdmux[0][5][0]$a$1266 [2:1] } = { 2'00 $memory\params$rdmux[0][5][0]$a$1266 [3] $memory\params$rdmux[0][5][0]$a$1266 [3] 2'10 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][10]$1391:
      Old ports: A=8'01101010, B=8'10001101, Y=$memory\params$rdmux[0][5][5]$a$1281
      New ports: A=2'10, B=2'01, Y=$memory\params$rdmux[0][5][5]$a$1281 [1:0]
      New connections: $memory\params$rdmux[0][5][5]$a$1281 [7:2] = { $memory\params$rdmux[0][5][5]$a$1281 [0] $memory\params$rdmux[0][5][5]$a$1281 [1] $memory\params$rdmux[0][5][5]$a$1281 [1] 2'01 $memory\params$rdmux[0][5][5]$a$1281 [0] }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][11]$1394:
      Old ports: A=8'11101110, B=8'00001111, Y=$memory\params$rdmux[0][5][5]$b$1282
      New ports: A=2'10, B=2'01, Y={ $memory\params$rdmux[0][5][5]$b$1282 [5] $memory\params$rdmux[0][5][5]$b$1282 [0] }
      New connections: { $memory\params$rdmux[0][5][5]$b$1282 [7:6] $memory\params$rdmux[0][5][5]$b$1282 [4:1] } = { $memory\params$rdmux[0][5][5]$b$1282 [5] $memory\params$rdmux[0][5][5]$b$1282 [5] 4'0111 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][12]$1397:
      Old ports: A=8'00000111, B=8'00001110, Y=$memory\params$rdmux[0][5][6]$a$1284
      New ports: A=2'01, B=2'10, Y={ $memory\params$rdmux[0][5][6]$a$1284 [3] $memory\params$rdmux[0][5][6]$a$1284 [0] }
      New connections: { $memory\params$rdmux[0][5][6]$a$1284 [7:4] $memory\params$rdmux[0][5][6]$a$1284 [2:1] } = 6'000011
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][13]$1400:
      Old ports: A=8'00001000, B=8'00000111, Y=$memory\params$rdmux[0][5][6]$b$1285
      New ports: A=2'10, B=2'01, Y={ $memory\params$rdmux[0][5][6]$b$1285 [3] $memory\params$rdmux[0][5][6]$b$1285 [0] }
      New connections: { $memory\params$rdmux[0][5][6]$b$1285 [7:4] $memory\params$rdmux[0][5][6]$b$1285 [2:1] } = { 4'0000 $memory\params$rdmux[0][5][6]$b$1285 [0] $memory\params$rdmux[0][5][6]$b$1285 [0] }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][14]$1403:
      Old ports: A=8'00010000, B=8'00000111, Y=$memory\params$rdmux[0][5][7]$a$1287
      New ports: A=2'10, B=2'01, Y={ $memory\params$rdmux[0][5][7]$a$1287 [4] $memory\params$rdmux[0][5][7]$a$1287 [0] }
      New connections: { $memory\params$rdmux[0][5][7]$a$1287 [7:5] $memory\params$rdmux[0][5][7]$a$1287 [3:1] } = { 4'0000 $memory\params$rdmux[0][5][7]$a$1287 [0] $memory\params$rdmux[0][5][7]$a$1287 [0] }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][15]$1406:
      Old ports: A=8'00000010, B=8'00000111, Y=$memory\params$rdmux[0][5][7]$b$1288
      New ports: A=1'0, B=1'1, Y=$memory\params$rdmux[0][5][7]$b$1288 [0]
      New connections: $memory\params$rdmux[0][5][7]$b$1288 [7:1] = { 5'00000 $memory\params$rdmux[0][5][7]$b$1288 [0] 1'1 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][16]$1409:
      Old ports: A=8'00001001, B=8'00001111, Y=$memory\params$rdmux[0][5][8]$a$1290
      New ports: A=1'0, B=1'1, Y=$memory\params$rdmux[0][5][8]$a$1290 [1]
      New connections: { $memory\params$rdmux[0][5][8]$a$1290 [7:2] $memory\params$rdmux[0][5][8]$a$1290 [0] } = { 5'00001 $memory\params$rdmux[0][5][8]$a$1290 [1] 1'1 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][17]$1412:
      Old ports: A=8'00100101, B=8'00110110, Y=$memory\params$rdmux[0][5][8]$b$1291
      New ports: A=2'01, B=2'10, Y=$memory\params$rdmux[0][5][8]$b$1291 [1:0]
      New connections: $memory\params$rdmux[0][5][8]$b$1291 [7:2] = { 3'001 $memory\params$rdmux[0][5][8]$b$1291 [1] 2'01 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][18]$1415:
      Old ports: A=8'00000000, B=8'00001000, Y=$memory\params$rdmux[0][5][9]$a$1293
      New ports: A=1'0, B=1'1, Y=$memory\params$rdmux[0][5][9]$a$1293 [3]
      New connections: { $memory\params$rdmux[0][5][9]$a$1293 [7:4] $memory\params$rdmux[0][5][9]$a$1293 [2:0] } = 7'0000000
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][19]$1418:
      Old ports: A=8'00000100, B=8'00010000, Y=$memory\params$rdmux[0][5][9]$b$1294
      New ports: A=2'01, B=2'10, Y={ $memory\params$rdmux[0][5][9]$b$1294 [4] $memory\params$rdmux[0][5][9]$b$1294 [2] }
      New connections: { $memory\params$rdmux[0][5][9]$b$1294 [7:5] $memory\params$rdmux[0][5][9]$b$1294 [3] $memory\params$rdmux[0][5][9]$b$1294 [1:0] } = 6'000000
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][1]$1364:
      Old ports: A=8'00111100, B=8'00000101, Y=$memory\params$rdmux[0][5][0]$b$1267
      New ports: A=2'10, B=2'01, Y={ $memory\params$rdmux[0][5][0]$b$1267 [3] $memory\params$rdmux[0][5][0]$b$1267 [0] }
      New connections: { $memory\params$rdmux[0][5][0]$b$1267 [7:4] $memory\params$rdmux[0][5][0]$b$1267 [2:1] } = { 2'00 $memory\params$rdmux[0][5][0]$b$1267 [3] $memory\params$rdmux[0][5][0]$b$1267 [3] 2'10 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][20]$1421:
      Old ports: A=8'00001010, B=8'00001101, Y=$memory\params$rdmux[0][5][10]$a$1296
      New ports: A=2'10, B=2'01, Y=$memory\params$rdmux[0][5][10]$a$1296 [1:0]
      New connections: $memory\params$rdmux[0][5][10]$a$1296 [7:2] = { 5'00001 $memory\params$rdmux[0][5][10]$a$1296 [0] }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][21]$1424:
      Old ports: A=8'00001000, B=8'00000111, Y=$memory\params$rdmux[0][5][10]$b$1297
      New ports: A=2'10, B=2'01, Y={ $memory\params$rdmux[0][5][10]$b$1297 [3] $memory\params$rdmux[0][5][10]$b$1297 [0] }
      New connections: { $memory\params$rdmux[0][5][10]$b$1297 [7:4] $memory\params$rdmux[0][5][10]$b$1297 [2:1] } = { 4'0000 $memory\params$rdmux[0][5][10]$b$1297 [0] $memory\params$rdmux[0][5][10]$b$1297 [0] }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][22]$1427:
      Old ports: A=8'00001111, B=8'00000111, Y=$memory\params$rdmux[0][5][11]$a$1299
      New ports: A=1'1, B=1'0, Y=$memory\params$rdmux[0][5][11]$a$1299 [3]
      New connections: { $memory\params$rdmux[0][5][11]$a$1299 [7:4] $memory\params$rdmux[0][5][11]$a$1299 [2:0] } = 7'0000111
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][23]$1430:
      Old ports: A=8'00000010, B=8'00000111, Y=$memory\params$rdmux[0][5][11]$b$1300
      New ports: A=1'0, B=1'1, Y=$memory\params$rdmux[0][5][11]$b$1300 [0]
      New connections: $memory\params$rdmux[0][5][11]$b$1300 [7:1] = { 5'00000 $memory\params$rdmux[0][5][11]$b$1300 [0] 1'1 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][24]$1433:
      Old ports: A=8'00001001, B=8'00001111, Y=$memory\params$rdmux[0][5][12]$a$1302
      New ports: A=1'0, B=1'1, Y=$memory\params$rdmux[0][5][12]$a$1302 [1]
      New connections: { $memory\params$rdmux[0][5][12]$a$1302 [7:2] $memory\params$rdmux[0][5][12]$a$1302 [0] } = { 5'00001 $memory\params$rdmux[0][5][12]$a$1302 [1] 1'1 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][25]$1436:
      Old ports: A=8'00100101, B=8'00110101, Y=$memory\params$rdmux[0][5][12]$b$1303
      New ports: A=1'0, B=1'1, Y=$memory\params$rdmux[0][5][12]$b$1303 [4]
      New connections: { $memory\params$rdmux[0][5][12]$b$1303 [7:5] $memory\params$rdmux[0][5][12]$b$1303 [3:0] } = 7'0010101
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][26]$1439:
      Old ports: A=8'00000000, B=8'00001001, Y=$memory\params$rdmux[0][5][13]$a$1305
      New ports: A=1'0, B=1'1, Y=$memory\params$rdmux[0][5][13]$a$1305 [0]
      New connections: $memory\params$rdmux[0][5][13]$a$1305 [7:1] = { 4'0000 $memory\params$rdmux[0][5][13]$a$1305 [0] 2'00 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][27]$1442:
      Old ports: A=8'00000100, B=8'00010000, Y=$memory\params$rdmux[0][5][13]$b$1306
      New ports: A=2'01, B=2'10, Y={ $memory\params$rdmux[0][5][13]$b$1306 [4] $memory\params$rdmux[0][5][13]$b$1306 [2] }
      New connections: { $memory\params$rdmux[0][5][13]$b$1306 [7:5] $memory\params$rdmux[0][5][13]$b$1306 [3] $memory\params$rdmux[0][5][13]$b$1306 [1:0] } = 6'000000
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][28]$1445:
      Old ports: A=8'10000000, B=8'00000101, Y=$memory\params$rdmux[0][5][14]$a$1308
      New ports: A=2'10, B=2'01, Y={ $memory\params$rdmux[0][5][14]$a$1308 [7] $memory\params$rdmux[0][5][14]$a$1308 [0] }
      New connections: $memory\params$rdmux[0][5][14]$a$1308 [6:1] = { 4'0000 $memory\params$rdmux[0][5][14]$a$1308 [0] 1'0 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][29]$1448:
      Old ports: A=8'01111000, B=8'00000000, Y=$memory\params$rdmux[0][5][14]$b$1309
      New ports: A=1'1, B=1'0, Y=$memory\params$rdmux[0][5][14]$b$1309 [3]
      New connections: { $memory\params$rdmux[0][5][14]$b$1309 [7:4] $memory\params$rdmux[0][5][14]$b$1309 [2:0] } = { 1'0 $memory\params$rdmux[0][5][14]$b$1309 [3] $memory\params$rdmux[0][5][14]$b$1309 [3] $memory\params$rdmux[0][5][14]$b$1309 [3] 3'000 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][30]$1451:
      Old ports: A=8'00011010, B=8'00000000, Y=$memory\params$rdmux[0][5][15]$a$1311
      New ports: A=1'1, B=1'0, Y=$memory\params$rdmux[0][5][15]$a$1311 [1]
      New connections: { $memory\params$rdmux[0][5][15]$a$1311 [7:2] $memory\params$rdmux[0][5][15]$a$1311 [0] } = { 3'000 $memory\params$rdmux[0][5][15]$a$1311 [1] $memory\params$rdmux[0][5][15]$a$1311 [1] 2'00 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][31]$1454:
      Old ports: A=8'01101001, B=8'00000000, Y=$memory\params$rdmux[0][5][15]$b$1312
      New ports: A=1'1, B=1'0, Y=$memory\params$rdmux[0][5][15]$b$1312 [0]
      New connections: $memory\params$rdmux[0][5][15]$b$1312 [7:1] = { 1'0 $memory\params$rdmux[0][5][15]$b$1312 [0] $memory\params$rdmux[0][5][15]$b$1312 [0] 1'0 $memory\params$rdmux[0][5][15]$b$1312 [0] 2'00 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][32]$1457:
      Old ports: A=8'00000001, B=8'00000000, Y=$memory\params$rdmux[0][5][16]$a$1314
      New ports: A=1'1, B=1'0, Y=$memory\params$rdmux[0][5][16]$a$1314 [0]
      New connections: $memory\params$rdmux[0][5][16]$a$1314 [7:1] = 7'0000000
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][33]$1460:
      Old ports: A=8'10100000, B=8'00000000, Y=$memory\params$rdmux[0][5][16]$b$1315
      New ports: A=1'1, B=1'0, Y=$memory\params$rdmux[0][5][16]$b$1315 [5]
      New connections: { $memory\params$rdmux[0][5][16]$b$1315 [7:6] $memory\params$rdmux[0][5][16]$b$1315 [4:0] } = { $memory\params$rdmux[0][5][16]$b$1315 [5] 6'000000 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][34]$1463:
      Old ports: A=8'00000001, B=8'00000000, Y=$memory\params$rdmux[0][5][17]$a$1317
      New ports: A=1'1, B=1'0, Y=$memory\params$rdmux[0][5][17]$a$1317 [0]
      New connections: $memory\params$rdmux[0][5][17]$a$1317 [7:1] = 7'0000000
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][35]$1466:
      Old ports: A=8'10100000, B=8'00000000, Y=$memory\params$rdmux[0][5][17]$b$1318
      New ports: A=1'1, B=1'0, Y=$memory\params$rdmux[0][5][17]$b$1318 [5]
      New connections: { $memory\params$rdmux[0][5][17]$b$1318 [7:6] $memory\params$rdmux[0][5][17]$b$1318 [4:0] } = { $memory\params$rdmux[0][5][17]$b$1318 [5] 6'000000 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][36]$1469:
      Old ports: A=8'00011010, B=8'00000000, Y=$memory\params$rdmux[0][5][18]$a$1320
      New ports: A=1'1, B=1'0, Y=$memory\params$rdmux[0][5][18]$a$1320 [1]
      New connections: { $memory\params$rdmux[0][5][18]$a$1320 [7:2] $memory\params$rdmux[0][5][18]$a$1320 [0] } = { 3'000 $memory\params$rdmux[0][5][18]$a$1320 [1] $memory\params$rdmux[0][5][18]$a$1320 [1] 2'00 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][37]$1472:
      Old ports: A=8'01101001, B=8'11111111, Y=$memory\params$rdmux[0][5][18]$b$1321
      New ports: A=1'0, B=1'1, Y=$memory\params$rdmux[0][5][18]$b$1321 [1]
      New connections: { $memory\params$rdmux[0][5][18]$b$1321 [7:2] $memory\params$rdmux[0][5][18]$b$1321 [0] } = { $memory\params$rdmux[0][5][18]$b$1321 [1] 2'11 $memory\params$rdmux[0][5][18]$b$1321 [1] 1'1 $memory\params$rdmux[0][5][18]$b$1321 [1] 1'1 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][3]$1370:
      Old ports: A=8'00000101, B=8'00111100, Y=$memory\params$rdmux[0][5][1]$b$1270
      New ports: A=2'01, B=2'10, Y={ $memory\params$rdmux[0][5][1]$b$1270 [3] $memory\params$rdmux[0][5][1]$b$1270 [0] }
      New connections: { $memory\params$rdmux[0][5][1]$b$1270 [7:4] $memory\params$rdmux[0][5][1]$b$1270 [2:1] } = { 2'00 $memory\params$rdmux[0][5][1]$b$1270 [3] $memory\params$rdmux[0][5][1]$b$1270 [3] 2'10 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][4]$1373:
      Old ports: A=8'00111100, B=8'00000101, Y=$memory\params$rdmux[0][5][2]$a$1272
      New ports: A=2'10, B=2'01, Y={ $memory\params$rdmux[0][5][2]$a$1272 [3] $memory\params$rdmux[0][5][2]$a$1272 [0] }
      New connections: { $memory\params$rdmux[0][5][2]$a$1272 [7:4] $memory\params$rdmux[0][5][2]$a$1272 [2:1] } = { 2'00 $memory\params$rdmux[0][5][2]$a$1272 [3] $memory\params$rdmux[0][5][2]$a$1272 [3] 2'10 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][6]$1379:
      Old ports: A=8'00000011, B=8'10101011, Y=$memory\params$rdmux[0][5][3]$a$1275
      New ports: A=1'0, B=1'1, Y=$memory\params$rdmux[0][5][3]$a$1275 [3]
      New connections: { $memory\params$rdmux[0][5][3]$a$1275 [7:4] $memory\params$rdmux[0][5][3]$a$1275 [2:0] } = { $memory\params$rdmux[0][5][3]$a$1275 [3] 1'0 $memory\params$rdmux[0][5][3]$a$1275 [3] 4'0011 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][7]$1382:
      Old ports: A=8'00001011, B=8'00000100, Y=$memory\params$rdmux[0][5][3]$b$1276
      New ports: A=2'01, B=2'10, Y={ $memory\params$rdmux[0][5][3]$b$1276 [2] $memory\params$rdmux[0][5][3]$b$1276 [0] }
      New connections: { $memory\params$rdmux[0][5][3]$b$1276 [7:3] $memory\params$rdmux[0][5][3]$b$1276 [1] } = { 4'0000 $memory\params$rdmux[0][5][3]$b$1276 [0] $memory\params$rdmux[0][5][3]$b$1276 [0] }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][8]$1385:
      Old ports: A=8'11000101, B=8'00001101, Y=$memory\params$rdmux[0][5][4]$a$1278
      New ports: A=2'10, B=2'01, Y={ $memory\params$rdmux[0][5][4]$a$1278 [6] $memory\params$rdmux[0][5][4]$a$1278 [3] }
      New connections: { $memory\params$rdmux[0][5][4]$a$1278 [7] $memory\params$rdmux[0][5][4]$a$1278 [5:4] $memory\params$rdmux[0][5][4]$a$1278 [2:0] } = { $memory\params$rdmux[0][5][4]$a$1278 [6] 5'00101 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][9]$1388:
      Old ports: A=8'00000000, B=8'10001101, Y=$memory\params$rdmux[0][5][4]$b$1279
      New ports: A=1'0, B=1'1, Y=$memory\params$rdmux[0][5][4]$b$1279 [0]
      New connections: $memory\params$rdmux[0][5][4]$b$1279 [7:1] = { $memory\params$rdmux[0][5][4]$b$1279 [0] 3'000 $memory\params$rdmux[0][5][4]$b$1279 [0] $memory\params$rdmux[0][5][4]$b$1279 [0] 1'0 }
  Optimizing cells in module \demo.
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][3][0]$807:
      Old ports: A=$memory\cmd$rdmux[0][3][0]$a$808, B=$memory\cmd$rdmux[0][3][0]$b$809, Y=$memory\cmd$rdmux[0][2][0]$a$796
      New ports: A={ 1'0 $memory\cmd$rdmux[0][3][0]$a$808 [1:0] }, B={ $memory\cmd$rdmux[0][3][0]$b$809 [2] $memory\cmd$rdmux[0][3][0]$b$809 [0] $memory\cmd$rdmux[0][3][0]$b$809 [0] }, Y=$memory\cmd$rdmux[0][2][0]$a$796 [2:0]
      New connections: $memory\cmd$rdmux[0][2][0]$a$796 [7:3] = 5'10110
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][3][1]$810:
      Old ports: A=$memory\cmd$rdmux[0][3][1]$a$811, B=$memory\cmd$rdmux[0][3][1]$b$812, Y=$memory\cmd$rdmux[0][2][0]$b$797
      New ports: A={ 1'0 $memory\cmd$rdmux[0][3][1]$a$811 [0] }, B={ 1'1 $memory\cmd$rdmux[0][3][1]$b$812 [0] }, Y=$memory\cmd$rdmux[0][2][0]$b$797 [1:0]
      New connections: $memory\cmd$rdmux[0][2][0]$b$797 [7:2] = 6'110000
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][3][2]$813:
      Old ports: A=$memory\cmd$rdmux[0][3][2]$a$814, B=$memory\cmd$rdmux[0][3][2]$b$815, Y=$memory\cmd$rdmux[0][2][1]$a$799
      New ports: A={ 2'01 $memory\cmd$rdmux[0][3][2]$a$814 [0] }, B={ 2'10 $memory\cmd$rdmux[0][3][2]$b$815 [0] }, Y={ $memory\cmd$rdmux[0][2][1]$a$799 [5] $memory\cmd$rdmux[0][2][1]$a$799 [2] $memory\cmd$rdmux[0][2][1]$a$799 [0] }
      New connections: { $memory\cmd$rdmux[0][2][1]$a$799 [7:6] $memory\cmd$rdmux[0][2][1]$a$799 [4:3] $memory\cmd$rdmux[0][2][1]$a$799 [1] } = 5'11000
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][3][3]$816:
      Old ports: A=$memory\cmd$rdmux[0][3][3]$a$817, B=$memory\cmd$rdmux[0][3][3]$b$818, Y=$memory\cmd$rdmux[0][2][1]$b$800
      New ports: A={ $memory\cmd$rdmux[0][3][3]$a$817 [2] 2'11 $memory\cmd$rdmux[0][3][3]$a$817 [2:1] 1'0 }, B={ 1'0 $memory\cmd$rdmux[0][3][3]$b$818 [1] 1'0 $memory\cmd$rdmux[0][3][3]$b$818 [1] $memory\cmd$rdmux[0][3][3]$b$818 [1:0] }, Y={ $memory\cmd$rdmux[0][2][1]$b$800 [6] $memory\cmd$rdmux[0][2][1]$b$800 [4:0] }
      New connections: { $memory\cmd$rdmux[0][2][1]$b$800 [7] $memory\cmd$rdmux[0][2][1]$b$800 [5] } = { $memory\cmd$rdmux[0][2][1]$b$800 [6] 1'1 }
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][3][4]$819:
      Old ports: A=$memory\cmd$rdmux[0][3][4]$a$820, B=$memory\cmd$rdmux[0][3][4]$b$821, Y=$memory\cmd$rdmux[0][2][2]$a$802
      New ports: A={ 1'0 $memory\cmd$rdmux[0][3][4]$a$820 [1:0] }, B={ $memory\cmd$rdmux[0][3][4]$b$821 [2] $memory\cmd$rdmux[0][3][4]$b$821 [0] $memory\cmd$rdmux[0][3][4]$b$821 [0] }, Y=$memory\cmd$rdmux[0][2][2]$a$802 [2:0]
      New connections: $memory\cmd$rdmux[0][2][2]$a$802 [7:3] = 5'00101
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][3][5]$822:
      Old ports: A=$memory\cmd$rdmux[0][3][5]$a$823, B=$memory\cmd$rdmux[0][3][5]$b$824, Y=$memory\cmd$rdmux[0][2][2]$b$803
      New ports: A={ 3'101 $memory\cmd$rdmux[0][3][5]$a$823 [0] }, B={ $memory\cmd$rdmux[0][3][5]$b$824 [2] $memory\cmd$rdmux[0][3][5]$b$824 [2] 2'00 }, Y=$memory\cmd$rdmux[0][2][2]$b$803 [3:0]
      New connections: $memory\cmd$rdmux[0][2][2]$b$803 [7:4] = { 2'00 $memory\cmd$rdmux[0][2][2]$b$803 [3] 1'0 }
    Consolidated identical input bits for $mux cell $memory\num_params$rdmux[0][3][0]$948:
      Old ports: A=$memory\num_params$rdmux[0][3][0]$a$949, B=$memory\num_params$rdmux[0][3][0]$b$950, Y=$memory\num_params$rdmux[0][2][0]$a$937
      New ports: A=3'011, B={ $memory\num_params$rdmux[0][3][0]$b$950 [1] $memory\num_params$rdmux[0][3][0]$b$950 [1:0] }, Y=$memory\num_params$rdmux[0][2][0]$a$937 [2:0]
      New connections: $memory\num_params$rdmux[0][2][0]$a$937 [13:3] = 11'00000000000
    Consolidated identical input bits for $mux cell $memory\num_params$rdmux[0][3][1]$951:
      Old ports: A=$memory\num_params$rdmux[0][3][1]$a$952, B=14'00000000000010, Y=$memory\num_params$rdmux[0][2][0]$b$938
      New ports: A={ $memory\num_params$rdmux[0][3][1]$a$952 [1] 1'1 }, B=2'10, Y=$memory\num_params$rdmux[0][2][0]$b$938 [1:0]
      New connections: $memory\num_params$rdmux[0][2][0]$b$938 [13:2] = 12'000000000000
    Consolidated identical input bits for $mux cell $memory\num_params$rdmux[0][3][2]$954:
      Old ports: A=$memory\num_params$rdmux[0][3][2]$a$955, B=14'00000000010000, Y=$memory\num_params$rdmux[0][2][1]$a$940
      New ports: A={ 1'0 $memory\num_params$rdmux[0][3][2]$a$955 [1:0] }, B=3'100, Y={ $memory\num_params$rdmux[0][2][1]$a$940 [4] $memory\num_params$rdmux[0][2][1]$a$940 [1:0] }
      New connections: { $memory\num_params$rdmux[0][2][1]$a$940 [13:5] $memory\num_params$rdmux[0][2][1]$a$940 [3:2] } = 11'00000000000
    Consolidated identical input bits for $mux cell $memory\num_params$rdmux[0][3][3]$957:
      Old ports: A=$memory\num_params$rdmux[0][3][3]$a$958, B=$memory\num_params$rdmux[0][3][3]$b$959, Y=$memory\num_params$rdmux[0][2][1]$b$941
      New ports: A=1'1, B=$memory\num_params$rdmux[0][3][3]$b$959 [0], Y=$memory\num_params$rdmux[0][2][1]$b$941 [0]
      New connections: $memory\num_params$rdmux[0][2][1]$b$941 [13:1] = 13'0000000000000
    Consolidated identical input bits for $mux cell $memory\num_params$rdmux[0][3][4]$960:
      Old ports: A=$memory\num_params$rdmux[0][3][4]$a$961, B=$memory\num_params$rdmux[0][3][4]$b$962, Y=$memory\num_params$rdmux[0][2][2]$a$943
      New ports: A=$memory\num_params$rdmux[0][3][4]$a$961 [2], B=$memory\num_params$rdmux[0][3][4]$b$962 [2], Y=$memory\num_params$rdmux[0][2][2]$a$943 [2]
      New connections: { $memory\num_params$rdmux[0][2][2]$a$943 [13:3] $memory\num_params$rdmux[0][2][2]$a$943 [1:0] } = 13'0000000000000
    Consolidated identical input bits for $mux cell $memory\num_params$rdmux[0][3][5]$963:
      Old ports: A=$memory\num_params$rdmux[0][3][5]$a$964, B=$memory\num_params$rdmux[0][3][5]$b$965, Y=$memory\num_params$rdmux[0][2][2]$b$944
      New ports: A=2'01, B={ $memory\num_params$rdmux[0][3][5]$b$965 [9] 1'0 }, Y={ $memory\num_params$rdmux[0][2][2]$b$944 [9] $memory\num_params$rdmux[0][2][2]$b$944 [2] }
      New connections: { $memory\num_params$rdmux[0][2][2]$b$944 [13:10] $memory\num_params$rdmux[0][2][2]$b$944 [8:3] $memory\num_params$rdmux[0][2][2]$b$944 [1:0] } = { $memory\num_params$rdmux[0][2][2]$b$944 [9] $memory\num_params$rdmux[0][2][2]$b$944 [9] 10'0000000000 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][0]$1265:
      Old ports: A=$memory\params$rdmux[0][5][0]$a$1266, B=$memory\params$rdmux[0][5][0]$b$1267, Y=$memory\params$rdmux[0][4][0]$a$1218
      New ports: A={ $memory\params$rdmux[0][5][0]$a$1266 [3] $memory\params$rdmux[0][5][0]$a$1266 [0] }, B={ $memory\params$rdmux[0][5][0]$b$1267 [3] $memory\params$rdmux[0][5][0]$b$1267 [0] }, Y={ $memory\params$rdmux[0][4][0]$a$1218 [3] $memory\params$rdmux[0][4][0]$a$1218 [0] }
      New connections: { $memory\params$rdmux[0][4][0]$a$1218 [7:4] $memory\params$rdmux[0][4][0]$a$1218 [2:1] } = { 2'00 $memory\params$rdmux[0][4][0]$a$1218 [3] $memory\params$rdmux[0][4][0]$a$1218 [3] 2'10 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][10]$1295:
      Old ports: A=$memory\params$rdmux[0][5][10]$a$1296, B=$memory\params$rdmux[0][5][10]$b$1297, Y=$memory\params$rdmux[0][4][5]$a$1233
      New ports: A={ 1'1 $memory\params$rdmux[0][5][10]$a$1296 [1:0] }, B={ $memory\params$rdmux[0][5][10]$b$1297 [3] $memory\params$rdmux[0][5][10]$b$1297 [0] $memory\params$rdmux[0][5][10]$b$1297 [0] }, Y={ $memory\params$rdmux[0][4][5]$a$1233 [3] $memory\params$rdmux[0][4][5]$a$1233 [1:0] }
      New connections: { $memory\params$rdmux[0][4][5]$a$1233 [7:4] $memory\params$rdmux[0][4][5]$a$1233 [2] } = { 4'0000 $memory\params$rdmux[0][4][5]$a$1233 [0] }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][11]$1298:
      Old ports: A=$memory\params$rdmux[0][5][11]$a$1299, B=$memory\params$rdmux[0][5][11]$b$1300, Y=$memory\params$rdmux[0][4][5]$b$1234
      New ports: A={ $memory\params$rdmux[0][5][11]$a$1299 [3] 1'1 }, B={ 1'0 $memory\params$rdmux[0][5][11]$b$1300 [0] }, Y={ $memory\params$rdmux[0][4][5]$b$1234 [3] $memory\params$rdmux[0][4][5]$b$1234 [0] }
      New connections: { $memory\params$rdmux[0][4][5]$b$1234 [7:4] $memory\params$rdmux[0][4][5]$b$1234 [2:1] } = { 4'0000 $memory\params$rdmux[0][4][5]$b$1234 [0] 1'1 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][12]$1301:
      Old ports: A=$memory\params$rdmux[0][5][12]$a$1302, B=$memory\params$rdmux[0][5][12]$b$1303, Y=$memory\params$rdmux[0][4][6]$a$1236
      New ports: A={ 3'001 $memory\params$rdmux[0][5][12]$a$1302 [1] $memory\params$rdmux[0][5][12]$a$1302 [1] }, B={ 1'1 $memory\params$rdmux[0][5][12]$b$1303 [4] 3'010 }, Y=$memory\params$rdmux[0][4][6]$a$1236 [5:1]
      New connections: { $memory\params$rdmux[0][4][6]$a$1236 [7:6] $memory\params$rdmux[0][4][6]$a$1236 [0] } = 3'001
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][13]$1304:
      Old ports: A=$memory\params$rdmux[0][5][13]$a$1305, B=$memory\params$rdmux[0][5][13]$b$1306, Y=$memory\params$rdmux[0][4][6]$b$1237
      New ports: A={ 2'00 $memory\params$rdmux[0][5][13]$a$1305 [0] }, B={ $memory\params$rdmux[0][5][13]$b$1306 [4] $memory\params$rdmux[0][5][13]$b$1306 [2] 1'0 }, Y={ $memory\params$rdmux[0][4][6]$b$1237 [4] $memory\params$rdmux[0][4][6]$b$1237 [2] $memory\params$rdmux[0][4][6]$b$1237 [0] }
      New connections: { $memory\params$rdmux[0][4][6]$b$1237 [7:5] $memory\params$rdmux[0][4][6]$b$1237 [3] $memory\params$rdmux[0][4][6]$b$1237 [1] } = { 3'000 $memory\params$rdmux[0][4][6]$b$1237 [0] 1'0 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][14]$1307:
      Old ports: A=$memory\params$rdmux[0][5][14]$a$1308, B=$memory\params$rdmux[0][5][14]$b$1309, Y=$memory\params$rdmux[0][4][7]$a$1239
      New ports: A={ $memory\params$rdmux[0][5][14]$a$1308 [7] 1'0 $memory\params$rdmux[0][5][14]$a$1308 [0] }, B={ 1'0 $memory\params$rdmux[0][5][14]$b$1309 [3] 1'0 }, Y={ $memory\params$rdmux[0][4][7]$a$1239 [7] $memory\params$rdmux[0][4][7]$a$1239 [3] $memory\params$rdmux[0][4][7]$a$1239 [0] }
      New connections: { $memory\params$rdmux[0][4][7]$a$1239 [6:4] $memory\params$rdmux[0][4][7]$a$1239 [2:1] } = { $memory\params$rdmux[0][4][7]$a$1239 [3] $memory\params$rdmux[0][4][7]$a$1239 [3] $memory\params$rdmux[0][4][7]$a$1239 [3] $memory\params$rdmux[0][4][7]$a$1239 [0] 1'0 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][15]$1310:
      Old ports: A=$memory\params$rdmux[0][5][15]$a$1311, B=$memory\params$rdmux[0][5][15]$b$1312, Y=$memory\params$rdmux[0][4][7]$b$1240
      New ports: A={ $memory\params$rdmux[0][5][15]$a$1311 [1] $memory\params$rdmux[0][5][15]$a$1311 [1] 1'0 }, B={ $memory\params$rdmux[0][5][15]$b$1312 [0] 1'0 $memory\params$rdmux[0][5][15]$b$1312 [0] }, Y={ $memory\params$rdmux[0][4][7]$b$1240 [3] $memory\params$rdmux[0][4][7]$b$1240 [1:0] }
      New connections: { $memory\params$rdmux[0][4][7]$b$1240 [7:4] $memory\params$rdmux[0][4][7]$b$1240 [2] } = { 1'0 $memory\params$rdmux[0][4][7]$b$1240 [0] $memory\params$rdmux[0][4][7]$b$1240 [0] $memory\params$rdmux[0][4][7]$b$1240 [1] 1'0 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][16]$1313:
      Old ports: A=$memory\params$rdmux[0][5][16]$a$1314, B=$memory\params$rdmux[0][5][16]$b$1315, Y=$memory\params$rdmux[0][4][8]$a$1242
      New ports: A={ 1'0 $memory\params$rdmux[0][5][16]$a$1314 [0] }, B={ $memory\params$rdmux[0][5][16]$b$1315 [5] 1'0 }, Y={ $memory\params$rdmux[0][4][8]$a$1242 [5] $memory\params$rdmux[0][4][8]$a$1242 [0] }
      New connections: { $memory\params$rdmux[0][4][8]$a$1242 [7:6] $memory\params$rdmux[0][4][8]$a$1242 [4:1] } = { $memory\params$rdmux[0][4][8]$a$1242 [5] 5'00000 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][17]$1316:
      Old ports: A=$memory\params$rdmux[0][5][17]$a$1317, B=$memory\params$rdmux[0][5][17]$b$1318, Y=$memory\params$rdmux[0][4][8]$b$1243
      New ports: A={ 1'0 $memory\params$rdmux[0][5][17]$a$1317 [0] }, B={ $memory\params$rdmux[0][5][17]$b$1318 [5] 1'0 }, Y={ $memory\params$rdmux[0][4][8]$b$1243 [5] $memory\params$rdmux[0][4][8]$b$1243 [0] }
      New connections: { $memory\params$rdmux[0][4][8]$b$1243 [7:6] $memory\params$rdmux[0][4][8]$b$1243 [4:1] } = { $memory\params$rdmux[0][4][8]$b$1243 [5] 5'00000 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][18]$1319:
      Old ports: A=$memory\params$rdmux[0][5][18]$a$1320, B=$memory\params$rdmux[0][5][18]$b$1321, Y=$memory\params$rdmux[0][4][9]$a$1245
      New ports: A={ $memory\params$rdmux[0][5][18]$a$1320 [1] 1'0 $memory\params$rdmux[0][5][18]$a$1320 [1] 1'0 }, B={ 1'1 $memory\params$rdmux[0][5][18]$b$1321 [1] $memory\params$rdmux[0][5][18]$b$1321 [1] 1'1 }, Y=$memory\params$rdmux[0][4][9]$a$1245 [3:0]
      New connections: $memory\params$rdmux[0][4][9]$a$1245 [7:4] = { $memory\params$rdmux[0][4][9]$a$1245 [2] $memory\params$rdmux[0][4][9]$a$1245 [0] $memory\params$rdmux[0][4][9]$a$1245 [0] $memory\params$rdmux[0][4][9]$a$1245 [1] }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][1]$1268:
      Old ports: A=$memory\params$rdmux[0][5][1]$a$1269, B=$memory\params$rdmux[0][5][1]$b$1270, Y=$memory\params$rdmux[0][4][0]$b$1219
      New ports: A=2'10, B={ $memory\params$rdmux[0][5][1]$b$1270 [3] $memory\params$rdmux[0][5][1]$b$1270 [0] }, Y={ $memory\params$rdmux[0][4][0]$b$1219 [3] $memory\params$rdmux[0][4][0]$b$1219 [0] }
      New connections: { $memory\params$rdmux[0][4][0]$b$1219 [7:4] $memory\params$rdmux[0][4][0]$b$1219 [2:1] } = { 2'00 $memory\params$rdmux[0][4][0]$b$1219 [3] $memory\params$rdmux[0][4][0]$b$1219 [3] 2'10 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][2]$1271:
      Old ports: A=$memory\params$rdmux[0][5][2]$a$1272, B=8'00111100, Y=$memory\params$rdmux[0][4][1]$a$1221
      New ports: A={ $memory\params$rdmux[0][5][2]$a$1272 [3] $memory\params$rdmux[0][5][2]$a$1272 [0] }, B=2'10, Y={ $memory\params$rdmux[0][4][1]$a$1221 [3] $memory\params$rdmux[0][4][1]$a$1221 [0] }
      New connections: { $memory\params$rdmux[0][4][1]$a$1221 [7:4] $memory\params$rdmux[0][4][1]$a$1221 [2:1] } = { 2'00 $memory\params$rdmux[0][4][1]$a$1221 [3] $memory\params$rdmux[0][4][1]$a$1221 [3] 2'10 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][3]$1274:
      Old ports: A=$memory\params$rdmux[0][5][3]$a$1275, B=$memory\params$rdmux[0][5][3]$b$1276, Y=$memory\params$rdmux[0][4][1]$b$1222
      New ports: A={ $memory\params$rdmux[0][5][3]$a$1275 [3] $memory\params$rdmux[0][5][3]$a$1275 [3] 2'01 }, B={ 1'0 $memory\params$rdmux[0][5][3]$b$1276 [0] $memory\params$rdmux[0][5][3]$b$1276 [2] $memory\params$rdmux[0][5][3]$b$1276 [0] }, Y={ $memory\params$rdmux[0][4][1]$b$1222 [5] $memory\params$rdmux[0][4][1]$b$1222 [3:2] $memory\params$rdmux[0][4][1]$b$1222 [0] }
      New connections: { $memory\params$rdmux[0][4][1]$b$1222 [7:6] $memory\params$rdmux[0][4][1]$b$1222 [4] $memory\params$rdmux[0][4][1]$b$1222 [1] } = { $memory\params$rdmux[0][4][1]$b$1222 [5] 2'00 $memory\params$rdmux[0][4][1]$b$1222 [0] }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][4]$1277:
      Old ports: A=$memory\params$rdmux[0][5][4]$a$1278, B=$memory\params$rdmux[0][5][4]$b$1279, Y=$memory\params$rdmux[0][4][2]$a$1224
      New ports: A={ $memory\params$rdmux[0][5][4]$a$1278 [6] $memory\params$rdmux[0][5][4]$a$1278 [6] $memory\params$rdmux[0][5][4]$a$1278 [3] 1'1 }, B={ $memory\params$rdmux[0][5][4]$b$1279 [0] 1'0 $memory\params$rdmux[0][5][4]$b$1279 [0] $memory\params$rdmux[0][5][4]$b$1279 [0] }, Y={ $memory\params$rdmux[0][4][2]$a$1224 [7:6] $memory\params$rdmux[0][4][2]$a$1224 [3] $memory\params$rdmux[0][4][2]$a$1224 [0] }
      New connections: { $memory\params$rdmux[0][4][2]$a$1224 [5:4] $memory\params$rdmux[0][4][2]$a$1224 [2:1] } = { 2'00 $memory\params$rdmux[0][4][2]$a$1224 [0] 1'0 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][5]$1280:
      Old ports: A=$memory\params$rdmux[0][5][5]$a$1281, B=$memory\params$rdmux[0][5][5]$b$1282, Y=$memory\params$rdmux[0][4][2]$b$1225
      New ports: A={ $memory\params$rdmux[0][5][5]$a$1281 [0] $memory\params$rdmux[0][5][5]$a$1281 [1:0] $memory\params$rdmux[0][5][5]$a$1281 [1:0] }, B={ $memory\params$rdmux[0][5][5]$b$1282 [5] $memory\params$rdmux[0][5][5]$b$1282 [5] 2'11 $memory\params$rdmux[0][5][5]$b$1282 [0] }, Y={ $memory\params$rdmux[0][4][2]$b$1225 [7] $memory\params$rdmux[0][4][2]$b$1225 [5] $memory\params$rdmux[0][4][2]$b$1225 [2:0] }
      New connections: { $memory\params$rdmux[0][4][2]$b$1225 [6] $memory\params$rdmux[0][4][2]$b$1225 [4:3] } = { $memory\params$rdmux[0][4][2]$b$1225 [5] 2'01 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][6]$1283:
      Old ports: A=$memory\params$rdmux[0][5][6]$a$1284, B=$memory\params$rdmux[0][5][6]$b$1285, Y=$memory\params$rdmux[0][4][3]$a$1227
      New ports: A={ $memory\params$rdmux[0][5][6]$a$1284 [3] 1'1 $memory\params$rdmux[0][5][6]$a$1284 [0] }, B={ $memory\params$rdmux[0][5][6]$b$1285 [3] $memory\params$rdmux[0][5][6]$b$1285 [0] $memory\params$rdmux[0][5][6]$b$1285 [0] }, Y={ $memory\params$rdmux[0][4][3]$a$1227 [3] $memory\params$rdmux[0][4][3]$a$1227 [1:0] }
      New connections: { $memory\params$rdmux[0][4][3]$a$1227 [7:4] $memory\params$rdmux[0][4][3]$a$1227 [2] } = { 4'0000 $memory\params$rdmux[0][4][3]$a$1227 [1] }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][7]$1286:
      Old ports: A=$memory\params$rdmux[0][5][7]$a$1287, B=$memory\params$rdmux[0][5][7]$b$1288, Y=$memory\params$rdmux[0][4][3]$b$1228
      New ports: A={ $memory\params$rdmux[0][5][7]$a$1287 [4] $memory\params$rdmux[0][5][7]$a$1287 [0] $memory\params$rdmux[0][5][7]$a$1287 [0] }, B={ 2'01 $memory\params$rdmux[0][5][7]$b$1288 [0] }, Y={ $memory\params$rdmux[0][4][3]$b$1228 [4] $memory\params$rdmux[0][4][3]$b$1228 [1:0] }
      New connections: { $memory\params$rdmux[0][4][3]$b$1228 [7:5] $memory\params$rdmux[0][4][3]$b$1228 [3:2] } = { 4'0000 $memory\params$rdmux[0][4][3]$b$1228 [0] }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][8]$1289:
      Old ports: A=$memory\params$rdmux[0][5][8]$a$1290, B=$memory\params$rdmux[0][5][8]$b$1291, Y=$memory\params$rdmux[0][4][4]$a$1230
      New ports: A={ 3'001 $memory\params$rdmux[0][5][8]$a$1290 [1] $memory\params$rdmux[0][5][8]$a$1290 [1] 1'1 }, B={ 1'1 $memory\params$rdmux[0][5][8]$b$1291 [1] 2'01 $memory\params$rdmux[0][5][8]$b$1291 [1:0] }, Y=$memory\params$rdmux[0][4][4]$a$1230 [5:0]
      New connections: $memory\params$rdmux[0][4][4]$a$1230 [7:6] = 2'00
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][9]$1292:
      Old ports: A=$memory\params$rdmux[0][5][9]$a$1293, B=$memory\params$rdmux[0][5][9]$b$1294, Y=$memory\params$rdmux[0][4][4]$b$1231
      New ports: A={ 1'0 $memory\params$rdmux[0][5][9]$a$1293 [3] 1'0 }, B={ $memory\params$rdmux[0][5][9]$b$1294 [4] 1'0 $memory\params$rdmux[0][5][9]$b$1294 [2] }, Y=$memory\params$rdmux[0][4][4]$b$1231 [4:2]
      New connections: { $memory\params$rdmux[0][4][4]$b$1231 [7:5] $memory\params$rdmux[0][4][4]$b$1231 [1:0] } = 5'00000
  Optimizing cells in module \demo.
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][2][0]$795:
      Old ports: A=$memory\cmd$rdmux[0][2][0]$a$796, B=$memory\cmd$rdmux[0][2][0]$b$797, Y=$memory\cmd$rdmux[0][1][0]$a$790
      New ports: A={ 2'01 $memory\cmd$rdmux[0][2][0]$a$796 [2:0] }, B={ 3'100 $memory\cmd$rdmux[0][2][0]$b$797 [1:0] }, Y={ $memory\cmd$rdmux[0][1][0]$a$790 [6] $memory\cmd$rdmux[0][1][0]$a$790 [4] $memory\cmd$rdmux[0][1][0]$a$790 [2:0] }
      New connections: { $memory\cmd$rdmux[0][1][0]$a$790 [7] $memory\cmd$rdmux[0][1][0]$a$790 [5] $memory\cmd$rdmux[0][1][0]$a$790 [3] } = { 1'1 $memory\cmd$rdmux[0][1][0]$a$790 [4] 1'0 }
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][2][1]$798:
      Old ports: A=$memory\cmd$rdmux[0][2][1]$a$799, B=$memory\cmd$rdmux[0][2][1]$b$800, Y=$memory\cmd$rdmux[0][1][0]$b$791
      New ports: A={ 1'1 $memory\cmd$rdmux[0][2][1]$a$799 [5] 2'00 $memory\cmd$rdmux[0][2][1]$a$799 [2] 1'0 $memory\cmd$rdmux[0][2][1]$a$799 [0] }, B={ $memory\cmd$rdmux[0][2][1]$b$800 [6] 1'1 $memory\cmd$rdmux[0][2][1]$b$800 [4:0] }, Y=$memory\cmd$rdmux[0][1][0]$b$791 [6:0]
      New connections: $memory\cmd$rdmux[0][1][0]$b$791 [7] = $memory\cmd$rdmux[0][1][0]$b$791 [6]
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][2][2]$801:
      Old ports: A=$memory\cmd$rdmux[0][2][2]$a$802, B=$memory\cmd$rdmux[0][2][2]$b$803, Y=$memory\cmd$rdmux[0][1][1]$a$793
      New ports: A={ 1'1 $memory\cmd$rdmux[0][2][2]$a$802 [2:0] }, B=$memory\cmd$rdmux[0][2][2]$b$803 [3:0], Y=$memory\cmd$rdmux[0][1][1]$a$793 [3:0]
      New connections: $memory\cmd$rdmux[0][1][1]$a$793 [7:4] = { 2'00 $memory\cmd$rdmux[0][1][1]$a$793 [3] 1'0 }
    Consolidated identical input bits for $mux cell $memory\num_params$rdmux[0][2][0]$936:
      Old ports: A=$memory\num_params$rdmux[0][2][0]$a$937, B=$memory\num_params$rdmux[0][2][0]$b$938, Y=$memory\num_params$rdmux[0][1][0]$a$931
      New ports: A=$memory\num_params$rdmux[0][2][0]$a$937 [2:0], B={ 1'0 $memory\num_params$rdmux[0][2][0]$b$938 [1:0] }, Y=$memory\num_params$rdmux[0][1][0]$a$931 [2:0]
      New connections: $memory\num_params$rdmux[0][1][0]$a$931 [13:3] = 11'00000000000
    Consolidated identical input bits for $mux cell $memory\num_params$rdmux[0][2][1]$939:
      Old ports: A=$memory\num_params$rdmux[0][2][1]$a$940, B=$memory\num_params$rdmux[0][2][1]$b$941, Y=$memory\num_params$rdmux[0][1][0]$b$932
      New ports: A={ $memory\num_params$rdmux[0][2][1]$a$940 [4] $memory\num_params$rdmux[0][2][1]$a$940 [1:0] }, B={ 2'00 $memory\num_params$rdmux[0][2][1]$b$941 [0] }, Y={ $memory\num_params$rdmux[0][1][0]$b$932 [4] $memory\num_params$rdmux[0][1][0]$b$932 [1:0] }
      New connections: { $memory\num_params$rdmux[0][1][0]$b$932 [13:5] $memory\num_params$rdmux[0][1][0]$b$932 [3:2] } = 11'00000000000
    Consolidated identical input bits for $mux cell $memory\num_params$rdmux[0][2][2]$942:
      Old ports: A=$memory\num_params$rdmux[0][2][2]$a$943, B=$memory\num_params$rdmux[0][2][2]$b$944, Y=$memory\num_params$rdmux[0][1][1]$a$934
      New ports: A={ 1'0 $memory\num_params$rdmux[0][2][2]$a$943 [2] }, B={ $memory\num_params$rdmux[0][2][2]$b$944 [9] $memory\num_params$rdmux[0][2][2]$b$944 [2] }, Y={ $memory\num_params$rdmux[0][1][1]$a$934 [9] $memory\num_params$rdmux[0][1][1]$a$934 [2] }
      New connections: { $memory\num_params$rdmux[0][1][1]$a$934 [13:10] $memory\num_params$rdmux[0][1][1]$a$934 [8:3] $memory\num_params$rdmux[0][1][1]$a$934 [1:0] } = { $memory\num_params$rdmux[0][1][1]$a$934 [9] $memory\num_params$rdmux[0][1][1]$a$934 [9] 10'0000000000 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][4][0]$1217:
      Old ports: A=$memory\params$rdmux[0][4][0]$a$1218, B=$memory\params$rdmux[0][4][0]$b$1219, Y=$memory\params$rdmux[0][3][0]$a$1194
      New ports: A={ $memory\params$rdmux[0][4][0]$a$1218 [3] $memory\params$rdmux[0][4][0]$a$1218 [0] }, B={ $memory\params$rdmux[0][4][0]$b$1219 [3] $memory\params$rdmux[0][4][0]$b$1219 [0] }, Y={ $memory\params$rdmux[0][3][0]$a$1194 [3] $memory\params$rdmux[0][3][0]$a$1194 [0] }
      New connections: { $memory\params$rdmux[0][3][0]$a$1194 [7:4] $memory\params$rdmux[0][3][0]$a$1194 [2:1] } = { 2'00 $memory\params$rdmux[0][3][0]$a$1194 [3] $memory\params$rdmux[0][3][0]$a$1194 [3] 2'10 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][4][1]$1220:
      Old ports: A=$memory\params$rdmux[0][4][1]$a$1221, B=$memory\params$rdmux[0][4][1]$b$1222, Y=$memory\params$rdmux[0][3][0]$b$1195
      New ports: A={ 1'0 $memory\params$rdmux[0][4][1]$a$1221 [3] $memory\params$rdmux[0][4][1]$a$1221 [3] $memory\params$rdmux[0][4][1]$a$1221 [3] 2'10 $memory\params$rdmux[0][4][1]$a$1221 [0] }, B={ $memory\params$rdmux[0][4][1]$b$1222 [5] $memory\params$rdmux[0][4][1]$b$1222 [5] 1'0 $memory\params$rdmux[0][4][1]$b$1222 [3:2] $memory\params$rdmux[0][4][1]$b$1222 [0] $memory\params$rdmux[0][4][1]$b$1222 [0] }, Y={ $memory\params$rdmux[0][3][0]$b$1195 [7] $memory\params$rdmux[0][3][0]$b$1195 [5:0] }
      New connections: $memory\params$rdmux[0][3][0]$b$1195 [6] = 1'0
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][4][2]$1223:
      Old ports: A=$memory\params$rdmux[0][4][2]$a$1224, B=$memory\params$rdmux[0][4][2]$b$1225, Y=$memory\params$rdmux[0][3][1]$a$1197
      New ports: A={ $memory\params$rdmux[0][4][2]$a$1224 [7:6] 1'0 $memory\params$rdmux[0][4][2]$a$1224 [3] $memory\params$rdmux[0][4][2]$a$1224 [0] 1'0 $memory\params$rdmux[0][4][2]$a$1224 [0] }, B={ $memory\params$rdmux[0][4][2]$b$1225 [7] $memory\params$rdmux[0][4][2]$b$1225 [5] $memory\params$rdmux[0][4][2]$b$1225 [5] 1'1 $memory\params$rdmux[0][4][2]$b$1225 [2:0] }, Y={ $memory\params$rdmux[0][3][1]$a$1197 [7:5] $memory\params$rdmux[0][3][1]$a$1197 [3:0] }
      New connections: $memory\params$rdmux[0][3][1]$a$1197 [4] = 1'0
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][4][3]$1226:
      Old ports: A=$memory\params$rdmux[0][4][3]$a$1227, B=$memory\params$rdmux[0][4][3]$b$1228, Y=$memory\params$rdmux[0][3][1]$b$1198
      New ports: A={ 1'0 $memory\params$rdmux[0][4][3]$a$1227 [3] $memory\params$rdmux[0][4][3]$a$1227 [1] $memory\params$rdmux[0][4][3]$a$1227 [1:0] }, B={ $memory\params$rdmux[0][4][3]$b$1228 [4] 1'0 $memory\params$rdmux[0][4][3]$b$1228 [0] $memory\params$rdmux[0][4][3]$b$1228 [1:0] }, Y=$memory\params$rdmux[0][3][1]$b$1198 [4:0]
      New connections: $memory\params$rdmux[0][3][1]$b$1198 [7:5] = 3'000
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][4][4]$1229:
      Old ports: A=$memory\params$rdmux[0][4][4]$a$1230, B=$memory\params$rdmux[0][4][4]$b$1231, Y=$memory\params$rdmux[0][3][2]$a$1200
      New ports: A=$memory\params$rdmux[0][4][4]$a$1230 [5:0], B={ 1'0 $memory\params$rdmux[0][4][4]$b$1231 [4:2] 2'00 }, Y=$memory\params$rdmux[0][3][2]$a$1200 [5:0]
      New connections: $memory\params$rdmux[0][3][2]$a$1200 [7:6] = 2'00
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][4][5]$1232:
      Old ports: A=$memory\params$rdmux[0][4][5]$a$1233, B=$memory\params$rdmux[0][4][5]$b$1234, Y=$memory\params$rdmux[0][3][2]$b$1201
      New ports: A={ $memory\params$rdmux[0][4][5]$a$1233 [3] $memory\params$rdmux[0][4][5]$a$1233 [1:0] }, B={ $memory\params$rdmux[0][4][5]$b$1234 [3] 1'1 $memory\params$rdmux[0][4][5]$b$1234 [0] }, Y={ $memory\params$rdmux[0][3][2]$b$1201 [3] $memory\params$rdmux[0][3][2]$b$1201 [1:0] }
      New connections: { $memory\params$rdmux[0][3][2]$b$1201 [7:4] $memory\params$rdmux[0][3][2]$b$1201 [2] } = { 4'0000 $memory\params$rdmux[0][3][2]$b$1201 [0] }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][4][6]$1235:
      Old ports: A=$memory\params$rdmux[0][4][6]$a$1236, B=$memory\params$rdmux[0][4][6]$b$1237, Y=$memory\params$rdmux[0][3][3]$a$1203
      New ports: A={ $memory\params$rdmux[0][4][6]$a$1236 [5:1] 1'1 }, B={ 1'0 $memory\params$rdmux[0][4][6]$b$1237 [4] $memory\params$rdmux[0][4][6]$b$1237 [0] $memory\params$rdmux[0][4][6]$b$1237 [2] 1'0 $memory\params$rdmux[0][4][6]$b$1237 [0] }, Y=$memory\params$rdmux[0][3][3]$a$1203 [5:0]
      New connections: $memory\params$rdmux[0][3][3]$a$1203 [7:6] = 2'00
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][4][7]$1238:
      Old ports: A=$memory\params$rdmux[0][4][7]$a$1239, B=$memory\params$rdmux[0][4][7]$b$1240, Y=$memory\params$rdmux[0][3][3]$b$1204
      New ports: A={ $memory\params$rdmux[0][4][7]$a$1239 [7] $memory\params$rdmux[0][4][7]$a$1239 [3] $memory\params$rdmux[0][4][7]$a$1239 [3] $memory\params$rdmux[0][4][7]$a$1239 [3] $memory\params$rdmux[0][4][7]$a$1239 [0] 1'0 $memory\params$rdmux[0][4][7]$a$1239 [0] }, B={ 1'0 $memory\params$rdmux[0][4][7]$b$1240 [0] $memory\params$rdmux[0][4][7]$b$1240 [1] $memory\params$rdmux[0][4][7]$b$1240 [3] 1'0 $memory\params$rdmux[0][4][7]$b$1240 [1:0] }, Y={ $memory\params$rdmux[0][3][3]$b$1204 [7] $memory\params$rdmux[0][3][3]$b$1204 [5:0] }
      New connections: $memory\params$rdmux[0][3][3]$b$1204 [6] = $memory\params$rdmux[0][3][3]$b$1204 [5]
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][4][8]$1241:
      Old ports: A=$memory\params$rdmux[0][4][8]$a$1242, B=$memory\params$rdmux[0][4][8]$b$1243, Y=$memory\params$rdmux[0][3][4]$a$1206
      New ports: A={ $memory\params$rdmux[0][4][8]$a$1242 [5] $memory\params$rdmux[0][4][8]$a$1242 [0] }, B={ $memory\params$rdmux[0][4][8]$b$1243 [5] $memory\params$rdmux[0][4][8]$b$1243 [0] }, Y={ $memory\params$rdmux[0][3][4]$a$1206 [5] $memory\params$rdmux[0][3][4]$a$1206 [0] }
      New connections: { $memory\params$rdmux[0][3][4]$a$1206 [7:6] $memory\params$rdmux[0][3][4]$a$1206 [4:1] } = { $memory\params$rdmux[0][3][4]$a$1206 [5] 5'00000 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][4][9]$1244:
      Old ports: A=$memory\params$rdmux[0][4][9]$a$1245, B=8'xxxxxxxx, Y=$memory\params$rdmux[0][3][4]$b$1207
      New ports: A=$memory\params$rdmux[0][4][9]$a$1245 [3:0], B=4'xxxx, Y=$memory\params$rdmux[0][3][4]$b$1207 [3:0]
      New connections: $memory\params$rdmux[0][3][4]$b$1207 [7:4] = { $memory\params$rdmux[0][3][4]$b$1207 [2] $memory\params$rdmux[0][3][4]$b$1207 [0] $memory\params$rdmux[0][3][4]$b$1207 [0] $memory\params$rdmux[0][3][4]$b$1207 [1] }
  Optimizing cells in module \demo.
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][1][1]$792:
      Old ports: A=$memory\cmd$rdmux[0][1][1]$a$793, B=8'xxxxxxxx, Y=$memory\cmd$rdmux[0][0][0]$b$788
      New ports: A={ 1'0 $memory\cmd$rdmux[0][1][1]$a$793 [3:0] }, B=5'xxxxx, Y=$memory\cmd$rdmux[0][0][0]$b$788 [4:0]
      New connections: $memory\cmd$rdmux[0][0][0]$b$788 [7:5] = { $memory\cmd$rdmux[0][0][0]$b$788 [4] $memory\cmd$rdmux[0][0][0]$b$788 [4:3] }
    Consolidated identical input bits for $mux cell $memory\num_params$rdmux[0][1][0]$930:
      Old ports: A=$memory\num_params$rdmux[0][1][0]$a$931, B=$memory\num_params$rdmux[0][1][0]$b$932, Y=$memory\num_params$rdmux[0][0][0]$a$928
      New ports: A={ 1'0 $memory\num_params$rdmux[0][1][0]$a$931 [2:0] }, B={ $memory\num_params$rdmux[0][1][0]$b$932 [4] 1'0 $memory\num_params$rdmux[0][1][0]$b$932 [1:0] }, Y={ $memory\num_params$rdmux[0][0][0]$a$928 [4] $memory\num_params$rdmux[0][0][0]$a$928 [2:0] }
      New connections: { $memory\num_params$rdmux[0][0][0]$a$928 [13:5] $memory\num_params$rdmux[0][0][0]$a$928 [3] } = 10'0000000000
    Consolidated identical input bits for $mux cell $memory\num_params$rdmux[0][1][1]$933:
      Old ports: A=$memory\num_params$rdmux[0][1][1]$a$934, B=14'xxxxxxxxxxxxxx, Y=$memory\num_params$rdmux[0][0][0]$b$929
      New ports: A={ $memory\num_params$rdmux[0][1][1]$a$934 [9] $memory\num_params$rdmux[0][1][1]$a$934 [2] 1'0 }, B=3'xxx, Y={ $memory\num_params$rdmux[0][0][0]$b$929 [9] $memory\num_params$rdmux[0][0][0]$b$929 [2] $memory\num_params$rdmux[0][0][0]$b$929 [0] }
      New connections: { $memory\num_params$rdmux[0][0][0]$b$929 [13:10] $memory\num_params$rdmux[0][0][0]$b$929 [8:3] $memory\num_params$rdmux[0][0][0]$b$929 [1] } = { $memory\num_params$rdmux[0][0][0]$b$929 [9] $memory\num_params$rdmux[0][0][0]$b$929 [9] $memory\num_params$rdmux[0][0][0]$b$929 [0] $memory\num_params$rdmux[0][0][0]$b$929 [0] $memory\num_params$rdmux[0][0][0]$b$929 [0] $memory\num_params$rdmux[0][0][0]$b$929 [0] $memory\num_params$rdmux[0][0][0]$b$929 [0] $memory\num_params$rdmux[0][0][0]$b$929 [0] $memory\num_params$rdmux[0][0][0]$b$929 [0] $memory\num_params$rdmux[0][0][0]$b$929 [0] $memory\num_params$rdmux[0][0][0]$b$929 [0] }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][3][0]$1193:
      Old ports: A=$memory\params$rdmux[0][3][0]$a$1194, B=$memory\params$rdmux[0][3][0]$b$1195, Y=$memory\params$rdmux[0][2][0]$a$1182
      New ports: A={ 1'0 $memory\params$rdmux[0][3][0]$a$1194 [3] $memory\params$rdmux[0][3][0]$a$1194 [3] $memory\params$rdmux[0][3][0]$a$1194 [3] 2'10 $memory\params$rdmux[0][3][0]$a$1194 [0] }, B={ $memory\params$rdmux[0][3][0]$b$1195 [7] $memory\params$rdmux[0][3][0]$b$1195 [5:0] }, Y={ $memory\params$rdmux[0][2][0]$a$1182 [7] $memory\params$rdmux[0][2][0]$a$1182 [5:0] }
      New connections: $memory\params$rdmux[0][2][0]$a$1182 [6] = 1'0
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][3][2]$1199:
      Old ports: A=$memory\params$rdmux[0][3][2]$a$1200, B=$memory\params$rdmux[0][3][2]$b$1201, Y=$memory\params$rdmux[0][2][1]$a$1185
      New ports: A=$memory\params$rdmux[0][3][2]$a$1200 [5:0], B={ 2'00 $memory\params$rdmux[0][3][2]$b$1201 [3] $memory\params$rdmux[0][3][2]$b$1201 [0] $memory\params$rdmux[0][3][2]$b$1201 [1:0] }, Y=$memory\params$rdmux[0][2][1]$a$1185 [5:0]
      New connections: $memory\params$rdmux[0][2][1]$a$1185 [7:6] = 2'00
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][3][4]$1205:
      Old ports: A=$memory\params$rdmux[0][3][4]$a$1206, B=$memory\params$rdmux[0][3][4]$b$1207, Y=$memory\params$rdmux[0][2][2]$a$1188
      New ports: A={ $memory\params$rdmux[0][3][4]$a$1206 [5] 1'0 $memory\params$rdmux[0][3][4]$a$1206 [5] 3'000 $memory\params$rdmux[0][3][4]$a$1206 [0] }, B={ $memory\params$rdmux[0][3][4]$b$1207 [2] $memory\params$rdmux[0][3][4]$b$1207 [0] $memory\params$rdmux[0][3][4]$b$1207 [0] $memory\params$rdmux[0][3][4]$b$1207 [3:0] }, Y={ $memory\params$rdmux[0][2][2]$a$1188 [7:5] $memory\params$rdmux[0][2][2]$a$1188 [3:0] }
      New connections: $memory\params$rdmux[0][2][2]$a$1188 [4] = $memory\params$rdmux[0][2][2]$a$1188 [1]
  Optimizing cells in module \demo.
    Consolidated identical input bits for $mux cell $memory\num_params$rdmux[0][0][0]$927:
      Old ports: A=$memory\num_params$rdmux[0][0][0]$a$928, B=$memory\num_params$rdmux[0][0][0]$b$929, Y=$memrd$\num_params$demo.v:306$144_DATA
      New ports: A={ 1'0 $memory\num_params$rdmux[0][0][0]$a$928 [4] 1'0 $memory\num_params$rdmux[0][0][0]$a$928 [2:0] }, B={ $memory\num_params$rdmux[0][0][0]$b$929 [9] $memory\num_params$rdmux[0][0][0]$b$929 [0] $memory\num_params$rdmux[0][0][0]$b$929 [0] $memory\num_params$rdmux[0][0][0]$b$929 [2] $memory\num_params$rdmux[0][0][0]$b$929 [0] $memory\num_params$rdmux[0][0][0]$b$929 [0] }, Y={ $memrd$\num_params$demo.v:306$144_DATA [9] $memrd$\num_params$demo.v:306$144_DATA [4:0] }
      New connections: { $memrd$\num_params$demo.v:306$144_DATA [13:10] $memrd$\num_params$demo.v:306$144_DATA [8:5] } = { $memrd$\num_params$demo.v:306$144_DATA [9] $memrd$\num_params$demo.v:306$144_DATA [9] $memrd$\num_params$demo.v:306$144_DATA [3] $memrd$\num_params$demo.v:306$144_DATA [3] $memrd$\num_params$demo.v:306$144_DATA [3] $memrd$\num_params$demo.v:306$144_DATA [3] $memrd$\num_params$demo.v:306$144_DATA [3] $memrd$\num_params$demo.v:306$144_DATA [3] }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][2][2]$1187:
      Old ports: A=$memory\params$rdmux[0][2][2]$a$1188, B=8'xxxxxxxx, Y=$memory\params$rdmux[0][1][1]$a$1179
      New ports: A={ $memory\params$rdmux[0][2][2]$a$1188 [7:5] $memory\params$rdmux[0][2][2]$a$1188 [3:0] }, B=7'xxxxxxx, Y={ $memory\params$rdmux[0][1][1]$a$1179 [7:5] $memory\params$rdmux[0][1][1]$a$1179 [3:0] }
      New connections: $memory\params$rdmux[0][1][1]$a$1179 [4] = $memory\params$rdmux[0][1][1]$a$1179 [1]
  Optimizing cells in module \demo.
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][1][1]$1178:
      Old ports: A=$memory\params$rdmux[0][1][1]$a$1179, B=8'xxxxxxxx, Y=$memory\params$rdmux[0][0][0]$b$1174
      New ports: A={ $memory\params$rdmux[0][1][1]$a$1179 [7:5] $memory\params$rdmux[0][1][1]$a$1179 [3:0] }, B=7'xxxxxxx, Y={ $memory\params$rdmux[0][0][0]$b$1174 [7:5] $memory\params$rdmux[0][0][0]$b$1174 [3:0] }
      New connections: $memory\params$rdmux[0][0][0]$b$1174 [4] = $memory\params$rdmux[0][0][0]$b$1174 [1]
  Optimizing cells in module \demo.
Performed a total of 111 changes.

2.29.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\demo'.
<suppressed ~138 debug messages>
Removed a total of 46 cells.

2.29.13. Executing OPT_RMDFF pass (remove dff with constant values).

2.29.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..
Removed 0 unused cells and 53 unused wires.
<suppressed ~1 debug messages>

2.29.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.
<suppressed ~1 debug messages>

2.29.16. Rerunning OPT passes. (Maybe there is more to do..)

2.29.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \demo..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~20 debug messages>

2.29.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \demo.
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][3][0]$807:
      Old ports: A={ 1'0 $memory\cmd$rdmux[0][3][0]$a$808 [1:0] }, B={ $memory\cmd$rdmux[0][3][0]$a$808 [1:0] $memory\cmd$rdmux[0][3][0]$a$808 [0] }, Y=$memory\cmd$rdmux[0][2][0]$a$796 [2:0]
      New ports: A={ 1'0 $memory\cmd$rdmux[0][3][0]$a$808 [1] }, B=$memory\cmd$rdmux[0][3][0]$a$808 [1:0], Y=$memory\cmd$rdmux[0][2][0]$a$796 [2:1]
      New connections: $memory\cmd$rdmux[0][2][0]$a$796 [0] = $memory\cmd$rdmux[0][3][0]$a$808 [0]
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][3][1]$810:
      Old ports: A={ 1'0 $memory\cmd$rdmux[0][3][1]$a$811 [0] }, B={ 1'1 $memory\cmd$rdmux[0][3][1]$a$811 [0] }, Y=$memory\cmd$rdmux[0][2][0]$b$797 [1:0]
      New ports: A=1'0, B=1'1, Y=$memory\cmd$rdmux[0][2][0]$b$797 [1]
      New connections: $memory\cmd$rdmux[0][2][0]$b$797 [0] = $memory\cmd$rdmux[0][3][1]$a$811 [0]
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][3][2]$813:
      Old ports: A={ 2'01 $memory\cmd$rdmux[0][3][1]$a$811 [0] }, B={ 2'10 $memory\cmd$rdmux[0][3][1]$a$811 [0] }, Y={ $memory\cmd$rdmux[0][2][1]$a$799 [5] $memory\cmd$rdmux[0][2][1]$a$799 [2] $memory\cmd$rdmux[0][2][1]$a$799 [0] }
      New ports: A=2'01, B=2'10, Y={ $memory\cmd$rdmux[0][2][1]$a$799 [5] $memory\cmd$rdmux[0][2][1]$a$799 [2] }
      New connections: $memory\cmd$rdmux[0][2][1]$a$799 [0] = $memory\cmd$rdmux[0][3][1]$a$811 [0]
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][3][3]$816:
      Old ports: A={ $memory\cmd$rdmux[0][3][3]$a$817 [7] 2'11 $memory\cmd$rdmux[0][3][3]$a$817 [7] $memory\cmd$rdmux[0][3][3]$a$817 [1] 1'0 }, B={ 1'0 $memory\cmd$rdmux[0][3][3]$a$817 [7] 1'0 $memory\cmd$rdmux[0][3][3]$a$817 [7] $memory\cmd$rdmux[0][3][3]$a$817 [7] $memory\cmd$rdmux[0][3][3]$a$817 [1] }, Y={ $memory\cmd$rdmux[0][2][1]$b$800 [7] $memory\cmd$rdmux[0][2][1]$b$800 [4:0] }
      New ports: A={ $memory\cmd$rdmux[0][3][3]$a$817 [7] 2'11 $memory\cmd$rdmux[0][3][3]$a$817 [1] 1'0 }, B={ 1'0 $memory\cmd$rdmux[0][3][3]$a$817 [7] 1'0 $memory\cmd$rdmux[0][3][3]$a$817 [7] $memory\cmd$rdmux[0][3][3]$a$817 [1] }, Y={ $memory\cmd$rdmux[0][2][1]$b$800 [7] $memory\cmd$rdmux[0][2][1]$b$800 [4:3] $memory\cmd$rdmux[0][2][1]$b$800 [1:0] }
      New connections: $memory\cmd$rdmux[0][2][1]$b$800 [2] = $memory\cmd$rdmux[0][3][3]$a$817 [7]
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][10]$1295:
      Old ports: A={ 1'1 $memory\params$rdmux[0][5][0]$b$1267 [5] $memory\params$rdmux[0][5][0]$b$1267 [0] }, B={ $memory\params$rdmux[0][5][0]$b$1267 [5] $memory\params$rdmux[0][5][0]$b$1267 [0] $memory\params$rdmux[0][5][0]$b$1267 [0] }, Y={ $memory\params$rdmux[0][4][5]$a$1233 [3] $memory\params$rdmux[0][4][5]$a$1233 [1] $memory\params$rdmux[0][4][5]$a$1233 [2] }
      New ports: A={ 1'1 $memory\params$rdmux[0][5][0]$b$1267 [5] }, B={ $memory\params$rdmux[0][5][0]$b$1267 [5] $memory\params$rdmux[0][5][0]$b$1267 [0] }, Y={ $memory\params$rdmux[0][4][5]$a$1233 [3] $memory\params$rdmux[0][4][5]$a$1233 [1] }
      New connections: $memory\params$rdmux[0][4][5]$a$1233 [2] = $memory\params$rdmux[0][5][0]$b$1267 [0]
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][15]$1310:
      Old ports: A={ $memory\params$rdmux[0][5][11]$a$1299 [3] $memory\params$rdmux[0][5][11]$a$1299 [3] 1'0 }, B={ $memory\params$rdmux[0][5][11]$a$1299 [3] 1'0 $memory\params$rdmux[0][5][11]$a$1299 [3] }, Y={ $memory\params$rdmux[0][4][7]$b$1240 [3] $memory\params$rdmux[0][4][7]$b$1240 [4] $memory\params$rdmux[0][4][7]$b$1240 [6] }
      New ports: A={ $memory\params$rdmux[0][5][11]$a$1299 [3] 1'0 }, B={ 1'0 $memory\params$rdmux[0][5][11]$a$1299 [3] }, Y={ $memory\params$rdmux[0][4][7]$b$1240 [4] $memory\params$rdmux[0][4][7]$b$1240 [6] }
      New connections: $memory\params$rdmux[0][4][7]$b$1240 [3] = $memory\params$rdmux[0][5][11]$a$1299 [3]
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][5]$1280:
      Old ports: A={ $memory\params$rdmux[0][5][0]$b$1267 [0] $memory\params$rdmux[0][5][0]$b$1267 [5] $memory\params$rdmux[0][5][0]$b$1267 [0] $memory\params$rdmux[0][5][0]$b$1267 [5] $memory\params$rdmux[0][5][0]$b$1267 [0] }, B={ $memory\params$rdmux[0][5][0]$b$1267 [5] $memory\params$rdmux[0][5][0]$b$1267 [5] 2'11 $memory\params$rdmux[0][5][0]$b$1267 [0] }, Y={ $memory\params$rdmux[0][4][2]$b$1225 [7:6] $memory\params$rdmux[0][4][2]$b$1225 [2:0] }
      New ports: A={ $memory\params$rdmux[0][5][0]$b$1267 [0] $memory\params$rdmux[0][5][0]$b$1267 [0] $memory\params$rdmux[0][5][0]$b$1267 [5] }, B={ $memory\params$rdmux[0][5][0]$b$1267 [5] 2'11 }, Y={ $memory\params$rdmux[0][4][2]$b$1225 [7] $memory\params$rdmux[0][4][2]$b$1225 [2:1] }
      New connections: { $memory\params$rdmux[0][4][2]$b$1225 [6] $memory\params$rdmux[0][4][2]$b$1225 [0] } = { $memory\params$rdmux[0][5][0]$b$1267 [5] $memory\params$rdmux[0][5][0]$b$1267 [0] }
  Optimizing cells in module \demo.
Performed a total of 7 changes.

2.29.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\demo'.
Removed a total of 0 cells.

2.29.20. Executing OPT_RMDFF pass (remove dff with constant values).

2.29.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..
Removed 0 unused cells and 4 unused wires.
<suppressed ~1 debug messages>

2.29.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.

2.29.23. Rerunning OPT passes. (Maybe there is more to do..)

2.29.24. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \demo..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~22 debug messages>

2.29.25. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \demo.
Performed a total of 0 changes.

2.29.26. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\demo'.
Removed a total of 0 cells.

2.29.27. Executing OPT_RMDFF pass (remove dff with constant values).

2.29.28. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..

2.29.29. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.

2.29.30. Finished OPT passes. (There is nothing left to do.)

2.30. Executing TECHMAP pass (map to technology primitives).

2.30.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

2.30.2. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/arith_map.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/arith_map.v' to AST representation.
Generating RTLIL representation for module `\_80_ice40_alu'.
Successfully finished Verilog frontend.

2.30.3. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $logic_not.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=14\B_WIDTH=1\Y_WIDTH=14 for cells of type $alu.
Using extmapper simplemap for cells of type $reduce_or.
Using template $paramod$constmap:ee5af906ae0d3d414c6a0471604c553ef70c8e09$paramod$1297efc30c1e19551d1f4e269f2cbfa7dd15f801\_90_shift_shiftx for cells of type $shiftx.
Using extmapper simplemap for cells of type $ne.
Using extmapper simplemap for cells of type $eq.
Using template $paramod\_90_pmux\WIDTH=14\S_WIDTH=2 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=8\S_WIDTH=2 for cells of type $pmux.
Using extmapper simplemap for cells of type $reduce_and.
Using template $paramod\_90_pmux\WIDTH=16\S_WIDTH=3 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=6\S_WIDTH=13 for cells of type $pmux.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=7\B_WIDTH=16\Y_WIDTH=16 for cells of type $alu.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=3\B_WIDTH=1\Y_WIDTH=3 for cells of type $alu.
Using extmapper simplemap for cells of type $or.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=7\Y_WIDTH=7 for cells of type $alu.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=16\Y_WIDTH=16 for cells of type $alu.
Using template $paramod\_90_pmux\WIDTH=1\S_WIDTH=2 for cells of type $pmux.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=5\B_WIDTH=1\Y_WIDTH=5 for cells of type $alu.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=5\Y_WIDTH=5 for cells of type $alu.
Using extmapper simplemap for cells of type $lut.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=16\B_WIDTH=16\Y_WIDTH=16 for cells of type $alu.
Using template $paramod\_90_pmux\WIDTH=1\S_WIDTH=3 for cells of type $pmux.
Using extmapper simplemap for cells of type $dff.
Using extmapper simplemap for cells of type $pos.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $and.
No more expansions possible.
<suppressed ~565 debug messages>

2.31. Executing ICE40_OPT pass (performing simple optimizations).

2.31.1. Running ICE40 specific optimizations.

2.31.2. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.
<suppressed ~473 debug messages>

2.31.3. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\demo'.
<suppressed ~426 debug messages>
Removed a total of 142 cells.

2.31.4. Executing OPT_RMDFF pass (remove dff with constant values).

2.31.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..
Removed 78 unused cells and 445 unused wires.
<suppressed ~79 debug messages>

2.31.6. Rerunning OPT passes. (Removed registers in this run.)

2.31.7. Running ICE40 specific optimizations.
Optimized away SB_CARRY cell demo.$auto$alumacc.cc:474:replace_alu$692.slice[0].carry: CO=1'1
Optimized away SB_CARRY cell demo.$auto$alumacc.cc:474:replace_alu$701.slice[0].carry: CO=$auto$alumacc.cc:474:replace_alu$701.BB [0]
Optimized away SB_CARRY cell demo.$auto$alumacc.cc:474:replace_alu$714.slice[0].carry: CO=\delay [0]
Optimized away SB_CARRY cell demo.$auto$alumacc.cc:474:replace_alu$717.slice[0].carry: CO=\cmd_counter [0]
Optimized away SB_CARRY cell demo.$auto$alumacc.cc:474:replace_alu$720.slice[0].carry: CO=\param_counter [0]
Optimized away SB_CARRY cell demo.$auto$alumacc.cc:474:replace_alu$723.slice[0].carry: CO=\bit_counter [0]
Optimized away SB_CARRY cell demo.$auto$alumacc.cc:474:replace_alu$726.slice[0].carry: CO=\cmd_counter [0]
Optimized away SB_CARRY cell demo.$auto$alumacc.cc:474:replace_alu$729.slice[0].carry: CO=\params_left [0]
Mapping SB_LUT4 cell demo.$auto$alumacc.cc:474:replace_alu$714.slice[1].adder back to logic.
Mapping SB_LUT4 cell demo.$auto$alumacc.cc:474:replace_alu$717.slice[1].adder back to logic.
Mapping SB_LUT4 cell demo.$auto$alumacc.cc:474:replace_alu$720.slice[1].adder back to logic.
Mapping SB_LUT4 cell demo.$auto$alumacc.cc:474:replace_alu$723.slice[1].adder back to logic.
Mapping SB_LUT4 cell demo.$auto$alumacc.cc:474:replace_alu$726.slice[1].adder back to logic.
Mapping SB_LUT4 cell demo.$auto$alumacc.cc:474:replace_alu$729.slice[1].adder back to logic.

2.31.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.
<suppressed ~77 debug messages>

2.31.9. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\demo'.
<suppressed ~21 debug messages>
Removed a total of 7 cells.

2.31.10. Executing OPT_RMDFF pass (remove dff with constant values).

2.31.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..
Removed 0 unused cells and 19 unused wires.
<suppressed ~1 debug messages>

2.31.12. Rerunning OPT passes. (Removed registers in this run.)

2.31.13. Running ICE40 specific optimizations.
Optimized away SB_CARRY cell demo.$auto$alumacc.cc:474:replace_alu$692.slice[1].carry: CO=1'1

2.31.14. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.

2.31.15. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\demo'.
Removed a total of 0 cells.

2.31.16. Executing OPT_RMDFF pass (remove dff with constant values).

2.31.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..

2.31.18. Rerunning OPT passes. (Removed registers in this run.)

2.31.19. Running ICE40 specific optimizations.
Optimized away SB_CARRY cell demo.$auto$alumacc.cc:474:replace_alu$692.slice[2].carry: CO=1'1

2.31.20. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.

2.31.21. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\demo'.
Removed a total of 0 cells.

2.31.22. Executing OPT_RMDFF pass (remove dff with constant values).

2.31.23. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..

2.31.24. Rerunning OPT passes. (Removed registers in this run.)

2.31.25. Running ICE40 specific optimizations.
Optimized away SB_CARRY cell demo.$auto$alumacc.cc:474:replace_alu$692.slice[3].carry: CO=1'1

2.31.26. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.

2.31.27. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\demo'.
Removed a total of 0 cells.

2.31.28. Executing OPT_RMDFF pass (remove dff with constant values).

2.31.29. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..

2.31.30. Rerunning OPT passes. (Removed registers in this run.)

2.31.31. Running ICE40 specific optimizations.
Optimized away SB_CARRY cell demo.$auto$alumacc.cc:474:replace_alu$692.slice[4].carry: CO=1'1

2.31.32. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.

2.31.33. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\demo'.
Removed a total of 0 cells.

2.31.34. Executing OPT_RMDFF pass (remove dff with constant values).

2.31.35. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..

2.31.36. Rerunning OPT passes. (Removed registers in this run.)

2.31.37. Running ICE40 specific optimizations.
Optimized away SB_CARRY cell demo.$auto$alumacc.cc:474:replace_alu$692.slice[5].carry: CO=\delay [5]

2.31.38. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.

2.31.39. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\demo'.
Removed a total of 0 cells.

2.31.40. Executing OPT_RMDFF pass (remove dff with constant values).

2.31.41. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..

2.31.42. Rerunning OPT passes. (Removed registers in this run.)

2.31.43. Running ICE40 specific optimizations.

2.31.44. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.

2.31.45. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\demo'.
Removed a total of 0 cells.

2.31.46. Executing OPT_RMDFF pass (remove dff with constant values).

2.31.47. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..

2.31.48. Finished OPT passes. (There is nothing left to do.)

2.32. Executing DFFSR2DFF pass (mapping DFFSR cells to simpler FFs).

2.33. Executing DFF2DFFE pass (transform $dff to $dffe where applicable).
Selected cell types for direct conversion:
  $_DFF_PP1_ -> $__DFFE_PP1
  $_DFF_PP0_ -> $__DFFE_PP0
  $_DFF_PN1_ -> $__DFFE_PN1
  $_DFF_PN0_ -> $__DFFE_PN0
  $_DFF_NP1_ -> $__DFFE_NP1
  $_DFF_NP0_ -> $__DFFE_NP0
  $_DFF_NN1_ -> $__DFFE_NN1
  $_DFF_NN0_ -> $__DFFE_NN0
  $_DFF_N_ -> $_DFFE_NP_
  $_DFF_P_ -> $_DFFE_PP_
Transforming FF to FF+Enable cells in module demo:
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2462 to $_DFFE_PP_ for $0\rst[0:0] -> \rst.
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2463 to $_DFFE_PP_ for $0\dc[0:0] -> \dc.
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2464 to $_DFFE_PP_ for $0\mosi[0:0] -> \mosi.
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2465 to $_DFFE_PP_ for $0\cs[0:0] -> \cs.
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2466 to $_DFFE_PP_ for $0\state[5:0] [0] -> \state [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2467 to $_DFFE_PP_ for $0\state[5:0] [1] -> \state [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2468 to $_DFFE_PP_ for $0\state[5:0] [2] -> \state [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2469 to $_DFFE_PP_ for $0\state[5:0] [3] -> \state [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2470 to $_DFFE_PP_ for $0\state[5:0] [4] -> \state [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2471 to $_DFFE_PP_ for $0\state[5:0] [5] -> \state [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2472 to $_DFFE_PP_ for $0\delay[15:0] [0] -> \delay [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2473 to $_DFFE_PP_ for $0\delay[15:0] [1] -> \delay [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2474 to $_DFFE_PP_ for $0\delay[15:0] [2] -> \delay [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2475 to $_DFFE_PP_ for $0\delay[15:0] [3] -> \delay [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2476 to $_DFFE_PP_ for $0\delay[15:0] [4] -> \delay [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2477 to $_DFFE_PP_ for $0\delay[15:0] [5] -> \delay [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2478 to $_DFFE_PP_ for $0\delay[15:0] [6] -> \delay [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2479 to $_DFFE_PP_ for $0\delay[15:0] [7] -> \delay [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2480 to $_DFFE_PP_ for $0\delay[15:0] [8] -> \delay [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2481 to $_DFFE_PP_ for $0\delay[15:0] [9] -> \delay [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2482 to $_DFFE_PP_ for $0\delay[15:0] [10] -> \delay [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2483 to $_DFFE_PP_ for $0\delay[15:0] [11] -> \delay [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2484 to $_DFFE_PP_ for $0\delay[15:0] [12] -> \delay [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2485 to $_DFFE_PP_ for $0\delay[15:0] [13] -> \delay [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2486 to $_DFFE_PP_ for $0\delay[15:0] [14] -> \delay [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2487 to $_DFFE_PP_ for $0\delay[15:0] [15] -> \delay [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2488 to $_DFFE_PP_ for $0\data[7:0] [0] -> \data [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2489 to $_DFFE_PP_ for $0\data[7:0] [1] -> \data [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2490 to $_DFFE_PP_ for $0\data[7:0] [2] -> \data [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2491 to $_DFFE_PP_ for $0\data[7:0] [3] -> \data [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2492 to $_DFFE_PP_ for $0\data[7:0] [4] -> \data [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2493 to $_DFFE_PP_ for $0\data[7:0] [5] -> \data [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2494 to $_DFFE_PP_ for $0\data[7:0] [6] -> \data [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2495 to $_DFFE_PP_ for $0\data[7:0] [7] -> \data [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2496 to $_DFFE_PP_ for $0\bit_counter[2:0] [0] -> \bit_counter [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2497 to $_DFFE_PP_ for $0\bit_counter[2:0] [1] -> \bit_counter [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2498 to $_DFFE_PP_ for $0\bit_counter[2:0] [2] -> \bit_counter [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2499 to $_DFFE_PP_ for $0\cmd_counter[4:0] [0] -> \cmd_counter [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2500 to $_DFFE_PP_ for $0\cmd_counter[4:0] [1] -> \cmd_counter [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2501 to $_DFFE_PP_ for $0\cmd_counter[4:0] [2] -> \cmd_counter [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2502 to $_DFFE_PP_ for $0\cmd_counter[4:0] [3] -> \cmd_counter [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2503 to $_DFFE_PP_ for $0\cmd_counter[4:0] [4] -> \cmd_counter [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2504 to $_DFFE_PP_ for $0\param_counter[6:0] [0] -> \param_counter [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2505 to $_DFFE_PP_ for $0\param_counter[6:0] [1] -> \param_counter [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2506 to $_DFFE_PP_ for $0\param_counter[6:0] [2] -> \param_counter [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2507 to $_DFFE_PP_ for $0\param_counter[6:0] [3] -> \param_counter [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2508 to $_DFFE_PP_ for $0\param_counter[6:0] [4] -> \param_counter [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2509 to $_DFFE_PP_ for $0\param_counter[6:0] [5] -> \param_counter [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2510 to $_DFFE_PP_ for $0\param_counter[6:0] [6] -> \param_counter [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2511 to $_DFFE_PP_ for $0\params_left[13:0] [0] -> \params_left [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2512 to $_DFFE_PP_ for $0\params_left[13:0] [1] -> \params_left [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2513 to $_DFFE_PP_ for $0\params_left[13:0] [2] -> \params_left [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2514 to $_DFFE_PP_ for $0\params_left[13:0] [3] -> \params_left [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2515 to $_DFFE_PP_ for $0\params_left[13:0] [4] -> \params_left [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2516 to $_DFFE_PP_ for $0\params_left[13:0] [5] -> \params_left [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2517 to $_DFFE_PP_ for $0\params_left[13:0] [6] -> \params_left [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2518 to $_DFFE_PP_ for $0\params_left[13:0] [7] -> \params_left [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2519 to $_DFFE_PP_ for $0\params_left[13:0] [8] -> \params_left [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2520 to $_DFFE_PP_ for $0\params_left[13:0] [9] -> \params_left [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2521 to $_DFFE_PP_ for $0\params_left[13:0] [10] -> \params_left [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2522 to $_DFFE_PP_ for $0\params_left[13:0] [11] -> \params_left [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2523 to $_DFFE_PP_ for $0\params_left[13:0] [12] -> \params_left [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2524 to $_DFFE_PP_ for $0\params_left[13:0] [13] -> \params_left [13].

2.34. Executing TECHMAP pass (map to technology primitives).

2.34.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/cells_map.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$__DFFE_NN0'.
Generating RTLIL representation for module `\$__DFFE_NN1'.
Generating RTLIL representation for module `\$__DFFE_PN0'.
Generating RTLIL representation for module `\$__DFFE_PN1'.
Generating RTLIL representation for module `\$__DFFE_NP0'.
Generating RTLIL representation for module `\$__DFFE_NP1'.
Generating RTLIL representation for module `\$__DFFE_PP0'.
Generating RTLIL representation for module `\$__DFFE_PP1'.
Successfully finished Verilog frontend.

2.34.2. Continuing TECHMAP pass.
Using template \$_DFFE_PP_ for cells of type $_DFFE_PP_.
Using template \$_DFF_P_ for cells of type $_DFF_P_.
No more expansions possible.
<suppressed ~64 debug messages>

2.35. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.
<suppressed ~155 debug messages>

2.36. Executing SIMPLEMAP pass (map simple cells to gate primitives).

2.37. Executing ICE40_FFINIT pass (implement FF init values).
Handling FF init values in demo.
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2525 (SB_DFF): \scl = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2469 (SB_DFFE): \state [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2468 (SB_DFFE): \state [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2511 (SB_DFFE): \params_left [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2467 (SB_DFFE): \state [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2470 (SB_DFFE): \state [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2471 (SB_DFFE): \state [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2466 (SB_DFFE): \state [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2488 (SB_DFFE): \data [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2489 (SB_DFFE): \data [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2490 (SB_DFFE): \data [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2491 (SB_DFFE): \data [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2492 (SB_DFFE): \data [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2493 (SB_DFFE): \data [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2494 (SB_DFFE): \data [6] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2495 (SB_DFFE): \data [7] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2497 (SB_DFFE): \bit_counter [1] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2504 (SB_DFFE): \param_counter [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2498 (SB_DFFE): \bit_counter [2] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2500 (SB_DFFE): \cmd_counter [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2501 (SB_DFFE): \cmd_counter [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2502 (SB_DFFE): \cmd_counter [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2496 (SB_DFFE): \bit_counter [0] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2503 (SB_DFFE): \cmd_counter [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2505 (SB_DFFE): \param_counter [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2506 (SB_DFFE): \param_counter [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2507 (SB_DFFE): \param_counter [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2508 (SB_DFFE): \param_counter [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2509 (SB_DFFE): \param_counter [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2512 (SB_DFFE): \params_left [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2499 (SB_DFFE): \cmd_counter [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2510 (SB_DFFE): \param_counter [6] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2513 (SB_DFFE): \params_left [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2514 (SB_DFFE): \params_left [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2515 (SB_DFFE): \params_left [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2516 (SB_DFFE): \params_left [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2517 (SB_DFFE): \params_left [6] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2518 (SB_DFFE): \params_left [7] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2519 (SB_DFFE): \params_left [8] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2520 (SB_DFFE): \params_left [9] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2521 (SB_DFFE): \params_left [10] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2522 (SB_DFFE): \params_left [11] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2523 (SB_DFFE): \params_left [12] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2524 (SB_DFFE): \params_left [13] = 0

2.38. Executing ICE40_FFSSR pass (merge synchronous set/reset into FF cells).
Merging set/reset $_MUX_ cells into SB_FFs in demo.

2.39. Executing ICE40_OPT pass (performing simple optimizations).

2.39.1. Running ICE40 specific optimizations.

2.39.2. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.
<suppressed ~90 debug messages>

2.39.3. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\demo'.
<suppressed ~96 debug messages>
Removed a total of 32 cells.

2.39.4. Executing OPT_RMDFF pass (remove dff with constant values).

2.39.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..
Removed 0 unused cells and 475 unused wires.
<suppressed ~1 debug messages>

2.39.6. Rerunning OPT passes. (Removed registers in this run.)

2.39.7. Running ICE40 specific optimizations.

2.39.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.

2.39.9. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\demo'.
Removed a total of 0 cells.

2.39.10. Executing OPT_RMDFF pass (remove dff with constant values).

2.39.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..

2.39.12. Finished OPT passes. (There is nothing left to do.)

2.40. Executing TECHMAP pass (map to technology primitives).

2.40.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/latches_map.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/latches_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Successfully finished Verilog frontend.

2.40.2. Continuing TECHMAP pass.
No more expansions possible.

2.41. Executing ABC pass (technology mapping using ABC).

2.41.1. Extracting gate netlist of module `\demo' to `<abc-temp-dir>/input.blif'..
Extracted 616 gates and 717 wires to a netlist network with 99 inputs and 86 outputs.

2.41.1.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + lutpack -S 1 
ABC: + dress 
ABC: Total number of equiv classes                =     152.
ABC: Participating nodes from both networks       =     349.
ABC: Participating nodes from the first network   =     153. (  64.29 % of nodes)
ABC: Participating nodes from the second network  =     196. (  82.35 % of nodes)
ABC: Node pairs (any polarity)                    =     153. (  64.29 % of names can be moved)
ABC: Node pairs (same polarity)                   =     128. (  53.78 % of names can be moved)
ABC: Total runtime =     0.10 sec
ABC: + write_blif <abc-temp-dir>/output.blif 

2.41.1.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:      470
ABC RESULTS:        internal signals:      532
ABC RESULTS:           input signals:       99
ABC RESULTS:          output signals:       86
Removing temp directory.
Removed 0 unused cells and 309 unused wires.

2.42. Executing TECHMAP pass (map to technology primitives).

2.42.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/cells_map.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$__DFFE_NN0'.
Generating RTLIL representation for module `\$__DFFE_NN1'.
Generating RTLIL representation for module `\$__DFFE_PN0'.
Generating RTLIL representation for module `\$__DFFE_PN1'.
Generating RTLIL representation for module `\$__DFFE_NP0'.
Generating RTLIL representation for module `\$__DFFE_NP1'.
Generating RTLIL representation for module `\$__DFFE_PP0'.
Generating RTLIL representation for module `\$__DFFE_PP1'.
Generating RTLIL representation for module `\$lut'.
Successfully finished Verilog frontend.

2.42.2. Continuing TECHMAP pass.
Using template $paramod\$lut\WIDTH=2\LUT=4'1000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1110101111111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000010111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000011111000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1110101100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000101100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000011110100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011101111110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011111100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001111000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000111001111101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00001110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1110000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100110111111100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0111111100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000111100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111111100000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00000111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1001110010101001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1110111100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111100000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=1\LUT=2'01 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000000011111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000001111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111010000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00001011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100101011111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000011101000100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1110010100110110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111000100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000001110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001100000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000011101000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11111110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100000100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000011111110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1101000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011010100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000000111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100111101000100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000011101110111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000001011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1110111111111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1101011100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000001001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0110111111111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0110100100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100111100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11111000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100111110100000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11100001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1001010000101001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111110011110101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111010011111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111110110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000110010110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001011100110001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0101001100001000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011101100001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11110100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01101111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111110000001010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100101000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000110000001010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000111000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111111111000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11100000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111010001000100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001000000000011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100010001110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00011111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111100010001000 for cells of type $lut.
No more expansions possible.
<suppressed ~1258 debug messages>
Removed 0 unused cells and 470 unused wires.

2.43. Executing HIERARCHY pass (managing design hierarchy).

2.43.1. Analyzing design hierarchy..
Top module:  \demo

2.43.2. Analyzing design hierarchy..
Top module:  \demo
Removed 0 unused modules.

2.44. Printing statistics.

=== demo ===

   Number of wires:                381
   Number of wire bits:           1571
   Number of public wires:         142
   Number of public wire bits:    1206
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                406
     SB_CARRY                       63
     SB_DFF                          1
     SB_DFFE                        63
     SB_LUT4                       279

2.45. Executing CHECK pass (checking for obvious problems).
checking module demo..
found and reported 0 problems.

2.46. Executing BLIF backend.

2.47. Executing JSON backend.

End of script. Logfile hash: 2c954e5de9
CPU: user 2.78s system 0.10s, MEM: 26.12 MB total, 20.35 MB resident
Yosys 0.9 (git sha1 1979e0b)
Time spent: 18% 27x opt_clean (0 sec), 16% 27x opt_expr (0 sec), ...
