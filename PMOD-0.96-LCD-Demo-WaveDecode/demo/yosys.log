
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2019  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9 (git sha1 1979e0b)


-- Parsing `demo.v' using frontend `verilog' --

1. Executing Verilog-2005 frontend: demo.v
Parsing Verilog input from `demo.v' to AST representation.
Generating RTLIL representation for module `\demo'.
Successfully finished Verilog frontend.

-- Running command `synth_ice40 -json demo.json -blif demo.blif' --

2. Executing SYNTH_ICE40 pass.

2.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/cells_sim.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\SB_IO'.
Generating RTLIL representation for module `\SB_GB_IO'.
Generating RTLIL representation for module `\SB_GB'.
Generating RTLIL representation for module `\SB_LUT4'.
Generating RTLIL representation for module `\SB_CARRY'.
Generating RTLIL representation for module `\SB_DFF'.
Generating RTLIL representation for module `\SB_DFFE'.
Generating RTLIL representation for module `\SB_DFFSR'.
Generating RTLIL representation for module `\SB_DFFR'.
Generating RTLIL representation for module `\SB_DFFSS'.
Generating RTLIL representation for module `\SB_DFFS'.
Generating RTLIL representation for module `\SB_DFFESR'.
Generating RTLIL representation for module `\SB_DFFER'.
Generating RTLIL representation for module `\SB_DFFESS'.
Generating RTLIL representation for module `\SB_DFFES'.
Generating RTLIL representation for module `\SB_DFFN'.
Generating RTLIL representation for module `\SB_DFFNE'.
Generating RTLIL representation for module `\SB_DFFNSR'.
Generating RTLIL representation for module `\SB_DFFNR'.
Generating RTLIL representation for module `\SB_DFFNSS'.
Generating RTLIL representation for module `\SB_DFFNS'.
Generating RTLIL representation for module `\SB_DFFNESR'.
Generating RTLIL representation for module `\SB_DFFNER'.
Generating RTLIL representation for module `\SB_DFFNESS'.
Generating RTLIL representation for module `\SB_DFFNES'.
Generating RTLIL representation for module `\SB_RAM40_4K'.
Generating RTLIL representation for module `\SB_RAM40_4KNR'.
Generating RTLIL representation for module `\SB_RAM40_4KNW'.
Generating RTLIL representation for module `\SB_RAM40_4KNRNW'.
Generating RTLIL representation for module `\ICESTORM_LC'.
Generating RTLIL representation for module `\SB_PLL40_CORE'.
Generating RTLIL representation for module `\SB_PLL40_PAD'.
Generating RTLIL representation for module `\SB_PLL40_2_PAD'.
Generating RTLIL representation for module `\SB_PLL40_2F_CORE'.
Generating RTLIL representation for module `\SB_PLL40_2F_PAD'.
Generating RTLIL representation for module `\SB_WARMBOOT'.
Generating RTLIL representation for module `\SB_SPRAM256KA'.
Generating RTLIL representation for module `\SB_HFOSC'.
Generating RTLIL representation for module `\SB_LFOSC'.
Generating RTLIL representation for module `\SB_RGBA_DRV'.
Generating RTLIL representation for module `\SB_LED_DRV_CUR'.
Generating RTLIL representation for module `\SB_RGB_DRV'.
Generating RTLIL representation for module `\SB_I2C'.
Generating RTLIL representation for module `\SB_SPI'.
Generating RTLIL representation for module `\SB_LEDDA_IP'.
Generating RTLIL representation for module `\SB_FILTER_50NS'.
Generating RTLIL representation for module `\SB_IO_I3C'.
Generating RTLIL representation for module `\SB_IO_OD'.
Generating RTLIL representation for module `\SB_MAC16'.
Successfully finished Verilog frontend.

2.2. Executing HIERARCHY pass (managing design hierarchy).

2.2.1. Finding top of design hierarchy..
root of   0 design levels: demo                
Automatically selected demo as design top module.

2.2.2. Analyzing design hierarchy..
Top module:  \demo

2.2.3. Analyzing design hierarchy..
Top module:  \demo
Removed 0 unused modules.

2.3. Executing PROC pass (convert processes to netlists).

2.3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

2.3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 14 switch rules as full_case in process $proc$demo.v:193$127 in module demo.
Removed a total of 0 dead cases.

2.3.3. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\demo.$proc$demo.v:44$289'.
  Set init value: \scl = 1'1
  Set init value: \state = 6'000000
  Set init value: \data = 8'00000000
  Set init value: \bit_counter = 3'111
  Set init value: \pixel_data = 16'0000000000000000
  Set init value: \pixel_bit_counter = 4'1111
  Set init value: \cmd_counter = 5'00000
  Set init value: \param_counter = 7'0000000
  Set init value: \params_left = 14'00000000000000

2.3.4. Executing PROC_ARST pass (detect async resets in processes).

2.3.5. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\demo.$proc$demo.v:44$289'.
     1/257: $1\pixel_bit_counter[3:0]
     2/257: $1\pixel_data[15:0]
     3/257: $1\bit_counter[2:0]
     4/257: $1\data[7:0]
     5/257: $1\params_left[13:0]
     6/257: $1\param_counter[6:0]
     7/257: $0$memwr$\params$demo.v:174$124_DATA[7:0]$537
     8/257: $0$memwr$\params$demo.v:174$124_ADDR[31:0]$536
     9/257: $0$memwr$\params$demo.v:173$123_DATA[7:0]$535
    10/257: $0$memwr$\params$demo.v:173$123_ADDR[31:0]$534
    11/257: $0$memwr$\params$demo.v:172$122_DATA[7:0]$533
    12/257: $0$memwr$\params$demo.v:172$122_ADDR[31:0]$532
    13/257: $0$memwr$\params$demo.v:171$121_DATA[7:0]$531
    14/257: $0$memwr$\params$demo.v:171$121_ADDR[31:0]$530
    15/257: $0$memwr$\params$demo.v:170$120_DATA[7:0]$529
    16/257: $0$memwr$\params$demo.v:170$120_ADDR[31:0]$528
    17/257: $0$memwr$\params$demo.v:169$119_DATA[7:0]$527
    18/257: $0$memwr$\params$demo.v:169$119_ADDR[31:0]$526
    19/257: $0$memwr$\params$demo.v:168$118_DATA[7:0]$525
    20/257: $0$memwr$\params$demo.v:168$118_ADDR[31:0]$524
    21/257: $0$memwr$\params$demo.v:167$117_DATA[7:0]$523
    22/257: $0$memwr$\params$demo.v:167$117_ADDR[31:0]$522
    23/257: $0$memwr$\params$demo.v:166$116_DATA[7:0]$521
    24/257: $0$memwr$\params$demo.v:166$116_ADDR[31:0]$520
    25/257: $0$memwr$\params$demo.v:165$115_DATA[7:0]$519
    26/257: $0$memwr$\params$demo.v:165$115_ADDR[31:0]$518
    27/257: $0$memwr$\params$demo.v:164$114_DATA[7:0]$517
    28/257: $0$memwr$\params$demo.v:164$114_ADDR[31:0]$516
    29/257: $0$memwr$\params$demo.v:163$113_DATA[7:0]$515
    30/257: $0$memwr$\params$demo.v:163$113_ADDR[31:0]$514
    31/257: $0$memwr$\params$demo.v:162$112_DATA[7:0]$513
    32/257: $0$memwr$\params$demo.v:162$112_ADDR[31:0]$512
    33/257: $0$memwr$\params$demo.v:161$111_DATA[7:0]$511
    34/257: $0$memwr$\params$demo.v:161$111_ADDR[31:0]$510
    35/257: $0$memwr$\params$demo.v:160$110_DATA[7:0]$509
    36/257: $0$memwr$\params$demo.v:160$110_ADDR[31:0]$508
    37/257: $0$memwr$\params$demo.v:159$109_DATA[7:0]$507
    38/257: $0$memwr$\params$demo.v:159$109_ADDR[31:0]$506
    39/257: $0$memwr$\params$demo.v:158$108_DATA[7:0]$505
    40/257: $0$memwr$\params$demo.v:158$108_ADDR[31:0]$504
    41/257: $0$memwr$\params$demo.v:157$107_DATA[7:0]$503
    42/257: $0$memwr$\params$demo.v:157$107_ADDR[31:0]$502
    43/257: $0$memwr$\params$demo.v:156$106_DATA[7:0]$501
    44/257: $0$memwr$\params$demo.v:156$106_ADDR[31:0]$500
    45/257: $0$memwr$\params$demo.v:155$105_DATA[7:0]$499
    46/257: $0$memwr$\params$demo.v:155$105_ADDR[31:0]$498
    47/257: $0$memwr$\params$demo.v:154$104_DATA[7:0]$497
    48/257: $0$memwr$\params$demo.v:154$104_ADDR[31:0]$496
    49/257: $0$memwr$\params$demo.v:153$103_DATA[7:0]$495
    50/257: $0$memwr$\params$demo.v:153$103_ADDR[31:0]$494
    51/257: $0$memwr$\params$demo.v:152$102_DATA[7:0]$493
    52/257: $0$memwr$\params$demo.v:152$102_ADDR[31:0]$492
    53/257: $0$memwr$\params$demo.v:151$101_DATA[7:0]$491
    54/257: $0$memwr$\params$demo.v:151$101_ADDR[31:0]$490
    55/257: $0$memwr$\params$demo.v:150$100_DATA[7:0]$489
    56/257: $0$memwr$\params$demo.v:150$100_ADDR[31:0]$488
    57/257: $0$memwr$\params$demo.v:149$99_DATA[7:0]$487
    58/257: $0$memwr$\params$demo.v:149$99_ADDR[31:0]$486
    59/257: $0$memwr$\params$demo.v:148$98_DATA[7:0]$485
    60/257: $0$memwr$\params$demo.v:148$98_ADDR[31:0]$484
    61/257: $0$memwr$\params$demo.v:147$97_DATA[7:0]$483
    62/257: $0$memwr$\params$demo.v:147$97_ADDR[31:0]$482
    63/257: $0$memwr$\params$demo.v:146$96_DATA[7:0]$481
    64/257: $0$memwr$\params$demo.v:146$96_ADDR[31:0]$480
    65/257: $0$memwr$\params$demo.v:145$95_DATA[7:0]$479
    66/257: $0$memwr$\params$demo.v:145$95_ADDR[31:0]$478
    67/257: $0$memwr$\params$demo.v:144$94_DATA[7:0]$477
    68/257: $0$memwr$\params$demo.v:144$94_ADDR[31:0]$476
    69/257: $0$memwr$\params$demo.v:143$93_DATA[7:0]$475
    70/257: $0$memwr$\params$demo.v:143$93_ADDR[31:0]$474
    71/257: $0$memwr$\params$demo.v:142$92_DATA[7:0]$473
    72/257: $0$memwr$\params$demo.v:142$92_ADDR[31:0]$472
    73/257: $0$memwr$\params$demo.v:141$91_DATA[7:0]$471
    74/257: $0$memwr$\params$demo.v:141$91_ADDR[31:0]$470
    75/257: $0$memwr$\params$demo.v:140$90_DATA[7:0]$469
    76/257: $0$memwr$\params$demo.v:140$90_ADDR[31:0]$468
    77/257: $0$memwr$\params$demo.v:139$89_DATA[7:0]$467
    78/257: $0$memwr$\params$demo.v:139$89_ADDR[31:0]$466
    79/257: $0$memwr$\params$demo.v:138$88_DATA[7:0]$465
    80/257: $0$memwr$\params$demo.v:138$88_ADDR[31:0]$464
    81/257: $0$memwr$\params$demo.v:137$87_DATA[7:0]$463
    82/257: $0$memwr$\params$demo.v:137$87_ADDR[31:0]$462
    83/257: $0$memwr$\params$demo.v:136$86_DATA[7:0]$461
    84/257: $0$memwr$\params$demo.v:136$86_ADDR[31:0]$460
    85/257: $0$memwr$\params$demo.v:135$85_DATA[7:0]$459
    86/257: $0$memwr$\params$demo.v:135$85_ADDR[31:0]$458
    87/257: $0$memwr$\params$demo.v:134$84_DATA[7:0]$457
    88/257: $0$memwr$\params$demo.v:134$84_ADDR[31:0]$456
    89/257: $0$memwr$\params$demo.v:133$83_DATA[7:0]$455
    90/257: $0$memwr$\params$demo.v:133$83_ADDR[31:0]$454
    91/257: $0$memwr$\params$demo.v:132$82_DATA[7:0]$453
    92/257: $0$memwr$\params$demo.v:132$82_ADDR[31:0]$452
    93/257: $0$memwr$\params$demo.v:131$81_DATA[7:0]$451
    94/257: $0$memwr$\params$demo.v:131$81_ADDR[31:0]$450
    95/257: $0$memwr$\params$demo.v:130$80_DATA[7:0]$449
    96/257: $0$memwr$\params$demo.v:130$80_ADDR[31:0]$448
    97/257: $0$memwr$\params$demo.v:129$79_DATA[7:0]$447
    98/257: $0$memwr$\params$demo.v:129$79_ADDR[31:0]$446
    99/257: $0$memwr$\params$demo.v:128$78_DATA[7:0]$445
   100/257: $0$memwr$\params$demo.v:128$78_ADDR[31:0]$444
   101/257: $0$memwr$\params$demo.v:127$77_DATA[7:0]$443
   102/257: $0$memwr$\params$demo.v:127$77_ADDR[31:0]$442
   103/257: $0$memwr$\params$demo.v:126$76_DATA[7:0]$441
   104/257: $0$memwr$\params$demo.v:126$76_ADDR[31:0]$440
   105/257: $0$memwr$\params$demo.v:125$75_DATA[7:0]$439
   106/257: $0$memwr$\params$demo.v:125$75_ADDR[31:0]$438
   107/257: $0$memwr$\params$demo.v:124$74_DATA[7:0]$437
   108/257: $0$memwr$\params$demo.v:124$74_ADDR[31:0]$436
   109/257: $0$memwr$\params$demo.v:123$73_DATA[7:0]$435
   110/257: $0$memwr$\params$demo.v:123$73_ADDR[31:0]$434
   111/257: $0$memwr$\params$demo.v:122$72_DATA[7:0]$433
   112/257: $0$memwr$\params$demo.v:122$72_ADDR[31:0]$432
   113/257: $0$memwr$\params$demo.v:121$71_DATA[7:0]$431
   114/257: $0$memwr$\params$demo.v:121$71_ADDR[31:0]$430
   115/257: $0$memwr$\params$demo.v:120$70_DATA[7:0]$429
   116/257: $0$memwr$\params$demo.v:120$70_ADDR[31:0]$428
   117/257: $0$memwr$\params$demo.v:119$69_DATA[7:0]$427
   118/257: $0$memwr$\params$demo.v:119$69_ADDR[31:0]$426
   119/257: $0$memwr$\params$demo.v:118$68_DATA[7:0]$425
   120/257: $0$memwr$\params$demo.v:118$68_ADDR[31:0]$424
   121/257: $0$memwr$\params$demo.v:117$67_DATA[7:0]$423
   122/257: $0$memwr$\params$demo.v:117$67_ADDR[31:0]$422
   123/257: $0$memwr$\params$demo.v:116$66_DATA[7:0]$421
   124/257: $0$memwr$\params$demo.v:116$66_ADDR[31:0]$420
   125/257: $0$memwr$\params$demo.v:115$65_DATA[7:0]$419
   126/257: $0$memwr$\params$demo.v:115$65_ADDR[31:0]$418
   127/257: $0$memwr$\params$demo.v:114$64_DATA[7:0]$417
   128/257: $0$memwr$\params$demo.v:114$64_ADDR[31:0]$416
   129/257: $0$memwr$\params$demo.v:113$63_DATA[7:0]$415
   130/257: $0$memwr$\params$demo.v:113$63_ADDR[31:0]$414
   131/257: $0$memwr$\params$demo.v:112$62_DATA[7:0]$413
   132/257: $0$memwr$\params$demo.v:112$62_ADDR[31:0]$412
   133/257: $0$memwr$\params$demo.v:111$61_DATA[7:0]$411
   134/257: $0$memwr$\params$demo.v:111$61_ADDR[31:0]$410
   135/257: $0$memwr$\params$demo.v:110$60_DATA[7:0]$409
   136/257: $0$memwr$\params$demo.v:110$60_ADDR[31:0]$408
   137/257: $0$memwr$\params$demo.v:109$59_DATA[7:0]$407
   138/257: $0$memwr$\params$demo.v:109$59_ADDR[31:0]$406
   139/257: $0$memwr$\params$demo.v:108$58_DATA[7:0]$405
   140/257: $0$memwr$\params$demo.v:108$58_ADDR[31:0]$404
   141/257: $0$memwr$\params$demo.v:107$57_DATA[7:0]$403
   142/257: $0$memwr$\params$demo.v:107$57_ADDR[31:0]$402
   143/257: $0$memwr$\params$demo.v:106$56_DATA[7:0]$401
   144/257: $0$memwr$\params$demo.v:106$56_ADDR[31:0]$400
   145/257: $0$memwr$\params$demo.v:105$55_DATA[7:0]$399
   146/257: $0$memwr$\params$demo.v:105$55_ADDR[31:0]$398
   147/257: $0$memwr$\params$demo.v:104$54_DATA[7:0]$397
   148/257: $0$memwr$\params$demo.v:104$54_ADDR[31:0]$396
   149/257: $0$memwr$\params$demo.v:103$53_DATA[7:0]$395
   150/257: $0$memwr$\params$demo.v:103$53_ADDR[31:0]$394
   151/257: $0$memwr$\params$demo.v:102$52_DATA[7:0]$393
   152/257: $0$memwr$\params$demo.v:102$52_ADDR[31:0]$392
   153/257: $0$memwr$\params$demo.v:101$51_DATA[7:0]$391
   154/257: $0$memwr$\params$demo.v:101$51_ADDR[31:0]$390
   155/257: $0$memwr$\params$demo.v:100$50_DATA[7:0]$389
   156/257: $0$memwr$\params$demo.v:100$50_ADDR[31:0]$388
   157/257: $0$memwr$\params$demo.v:99$49_DATA[7:0]$387
   158/257: $0$memwr$\params$demo.v:99$49_ADDR[31:0]$386
   159/257: $1\cmd_counter[4:0]
   160/257: $0$memwr$\num_params$demo.v:96$48_DATA[13:0]$385
   161/257: $0$memwr$\num_params$demo.v:96$48_ADDR[31:0]$384
   162/257: $0$memwr$\num_params$demo.v:95$47_DATA[13:0]$383
   163/257: $0$memwr$\num_params$demo.v:95$47_ADDR[31:0]$382
   164/257: $0$memwr$\num_params$demo.v:94$46_DATA[13:0]$381
   165/257: $0$memwr$\num_params$demo.v:94$46_ADDR[31:0]$380
   166/257: $0$memwr$\num_params$demo.v:93$45_DATA[13:0]$379
   167/257: $0$memwr$\num_params$demo.v:93$45_ADDR[31:0]$378
   168/257: $0$memwr$\num_params$demo.v:92$44_DATA[13:0]$377
   169/257: $0$memwr$\num_params$demo.v:92$44_ADDR[31:0]$376
   170/257: $0$memwr$\num_params$demo.v:91$43_DATA[13:0]$375
   171/257: $0$memwr$\num_params$demo.v:91$43_ADDR[31:0]$374
   172/257: $0$memwr$\num_params$demo.v:90$42_DATA[13:0]$373
   173/257: $0$memwr$\num_params$demo.v:90$42_ADDR[31:0]$372
   174/257: $0$memwr$\num_params$demo.v:89$41_DATA[13:0]$371
   175/257: $0$memwr$\num_params$demo.v:89$41_ADDR[31:0]$370
   176/257: $0$memwr$\num_params$demo.v:88$40_DATA[13:0]$369
   177/257: $0$memwr$\num_params$demo.v:88$40_ADDR[31:0]$368
   178/257: $0$memwr$\num_params$demo.v:87$39_DATA[13:0]$367
   179/257: $0$memwr$\num_params$demo.v:87$39_ADDR[31:0]$366
   180/257: $0$memwr$\num_params$demo.v:86$38_DATA[13:0]$365
   181/257: $0$memwr$\num_params$demo.v:86$38_ADDR[31:0]$364
   182/257: $0$memwr$\num_params$demo.v:85$37_DATA[13:0]$363
   183/257: $0$memwr$\num_params$demo.v:85$37_ADDR[31:0]$362
   184/257: $0$memwr$\num_params$demo.v:84$36_DATA[13:0]$361
   185/257: $0$memwr$\num_params$demo.v:84$36_ADDR[31:0]$360
   186/257: $0$memwr$\num_params$demo.v:83$35_DATA[13:0]$359
   187/257: $0$memwr$\num_params$demo.v:83$35_ADDR[31:0]$358
   188/257: $0$memwr$\num_params$demo.v:82$34_DATA[13:0]$357
   189/257: $0$memwr$\num_params$demo.v:82$34_ADDR[31:0]$356
   190/257: $0$memwr$\num_params$demo.v:81$33_DATA[13:0]$355
   191/257: $0$memwr$\num_params$demo.v:81$33_ADDR[31:0]$354
   192/257: $0$memwr$\num_params$demo.v:80$32_DATA[13:0]$353
   193/257: $0$memwr$\num_params$demo.v:80$32_ADDR[31:0]$352
   194/257: $0$memwr$\num_params$demo.v:79$31_DATA[13:0]$351
   195/257: $0$memwr$\num_params$demo.v:79$31_ADDR[31:0]$350
   196/257: $0$memwr$\num_params$demo.v:78$30_DATA[13:0]$349
   197/257: $0$memwr$\num_params$demo.v:78$30_ADDR[31:0]$348
   198/257: $0$memwr$\num_params$demo.v:77$29_DATA[13:0]$347
   199/257: $0$memwr$\num_params$demo.v:77$29_ADDR[31:0]$346
   200/257: $0$memwr$\num_params$demo.v:76$28_DATA[13:0]$345
   201/257: $0$memwr$\num_params$demo.v:76$28_ADDR[31:0]$344
   202/257: $0$memwr$\num_params$demo.v:75$27_DATA[13:0]$343
   203/257: $0$memwr$\num_params$demo.v:75$27_ADDR[31:0]$342
   204/257: $0$memwr$\num_params$demo.v:74$26_DATA[13:0]$341
   205/257: $0$memwr$\num_params$demo.v:74$26_ADDR[31:0]$340
   206/257: $0$memwr$\num_params$demo.v:73$25_DATA[13:0]$339
   207/257: $0$memwr$\num_params$demo.v:73$25_ADDR[31:0]$338
   208/257: $0$memwr$\cmd$demo.v:72$24_DATA[7:0]$337
   209/257: $0$memwr$\cmd$demo.v:72$24_ADDR[31:0]$336
   210/257: $0$memwr$\cmd$demo.v:71$23_DATA[7:0]$335
   211/257: $0$memwr$\cmd$demo.v:71$23_ADDR[31:0]$334
   212/257: $0$memwr$\cmd$demo.v:70$22_DATA[7:0]$333
   213/257: $0$memwr$\cmd$demo.v:70$22_ADDR[31:0]$332
   214/257: $0$memwr$\cmd$demo.v:69$21_DATA[7:0]$331
   215/257: $0$memwr$\cmd$demo.v:69$21_ADDR[31:0]$330
   216/257: $0$memwr$\cmd$demo.v:68$20_DATA[7:0]$329
   217/257: $0$memwr$\cmd$demo.v:68$20_ADDR[31:0]$328
   218/257: $0$memwr$\cmd$demo.v:67$19_DATA[7:0]$327
   219/257: $0$memwr$\cmd$demo.v:67$19_ADDR[31:0]$326
   220/257: $0$memwr$\cmd$demo.v:66$18_DATA[7:0]$325
   221/257: $0$memwr$\cmd$demo.v:66$18_ADDR[31:0]$324
   222/257: $0$memwr$\cmd$demo.v:65$17_DATA[7:0]$323
   223/257: $0$memwr$\cmd$demo.v:65$17_ADDR[31:0]$322
   224/257: $0$memwr$\cmd$demo.v:64$16_DATA[7:0]$321
   225/257: $0$memwr$\cmd$demo.v:64$16_ADDR[31:0]$320
   226/257: $0$memwr$\cmd$demo.v:63$15_DATA[7:0]$319
   227/257: $0$memwr$\cmd$demo.v:63$15_ADDR[31:0]$318
   228/257: $0$memwr$\cmd$demo.v:62$14_DATA[7:0]$317
   229/257: $0$memwr$\cmd$demo.v:62$14_ADDR[31:0]$316
   230/257: $0$memwr$\cmd$demo.v:61$13_DATA[7:0]$315
   231/257: $0$memwr$\cmd$demo.v:61$13_ADDR[31:0]$314
   232/257: $0$memwr$\cmd$demo.v:60$12_DATA[7:0]$313
   233/257: $0$memwr$\cmd$demo.v:60$12_ADDR[31:0]$312
   234/257: $0$memwr$\cmd$demo.v:59$11_DATA[7:0]$311
   235/257: $0$memwr$\cmd$demo.v:59$11_ADDR[31:0]$310
   236/257: $0$memwr$\cmd$demo.v:58$10_DATA[7:0]$309
   237/257: $0$memwr$\cmd$demo.v:58$10_ADDR[31:0]$308
   238/257: $0$memwr$\cmd$demo.v:57$9_DATA[7:0]$307
   239/257: $0$memwr$\cmd$demo.v:57$9_ADDR[31:0]$306
   240/257: $0$memwr$\cmd$demo.v:56$8_DATA[7:0]$305
   241/257: $0$memwr$\cmd$demo.v:56$8_ADDR[31:0]$304
   242/257: $0$memwr$\cmd$demo.v:55$7_DATA[7:0]$303
   243/257: $0$memwr$\cmd$demo.v:55$7_ADDR[31:0]$302
   244/257: $0$memwr$\cmd$demo.v:54$6_DATA[7:0]$301
   245/257: $0$memwr$\cmd$demo.v:54$6_ADDR[31:0]$300
   246/257: $0$memwr$\cmd$demo.v:53$5_DATA[7:0]$299
   247/257: $0$memwr$\cmd$demo.v:53$5_ADDR[31:0]$298
   248/257: $0$memwr$\cmd$demo.v:52$4_DATA[7:0]$297
   249/257: $0$memwr$\cmd$demo.v:52$4_ADDR[31:0]$296
   250/257: $0$memwr$\cmd$demo.v:51$3_DATA[7:0]$295
   251/257: $0$memwr$\cmd$demo.v:51$3_ADDR[31:0]$294
   252/257: $0$memwr$\cmd$demo.v:50$2_DATA[7:0]$293
   253/257: $0$memwr$\cmd$demo.v:50$2_ADDR[31:0]$292
   254/257: $0$memwr$\cmd$demo.v:49$1_DATA[7:0]$291
   255/257: $0$memwr$\cmd$demo.v:49$1_ADDR[31:0]$290
   256/257: $1\scl[0:0]
   257/257: $1\state[5:0]
Creating decoders for process `\demo.$proc$demo.v:193$127'.
     1/14: $0\pixel_data[15:0] [15:8]
     2/14: $0\pixel_data[15:0] [7:0]
     3/14: $0\param_counter[6:0]
     4/14: $0\cmd_counter[4:0]
     5/14: $0\pixel_bit_counter[3:0]
     6/14: $0\params_left[13:0]
     7/14: $0\bit_counter[2:0]
     8/14: $0\data[7:0]
     9/14: $0\delay[15:0]
    10/14: $0\state[5:0]
    11/14: $0\cs[0:0]
    12/14: $0\mosi[0:0]
    13/14: $0\dc[0:0]
    14/14: $0\rst[0:0]
Creating decoders for process `\demo.$proc$demo.v:186$125'.
     1/1: $0\scl[0:0]

2.3.6. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:49$1_ADDR' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:49$1_DATA' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:50$2_ADDR' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:50$2_DATA' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:51$3_ADDR' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:51$3_DATA' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:52$4_ADDR' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:52$4_DATA' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:53$5_ADDR' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:53$5_DATA' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:54$6_ADDR' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:54$6_DATA' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:55$7_ADDR' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:55$7_DATA' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:56$8_ADDR' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:56$8_DATA' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:57$9_ADDR' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:57$9_DATA' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:58$10_ADDR' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:58$10_DATA' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:59$11_ADDR' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:59$11_DATA' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:60$12_ADDR' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:60$12_DATA' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:61$13_ADDR' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:61$13_DATA' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:62$14_ADDR' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:62$14_DATA' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:63$15_ADDR' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:63$15_DATA' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:64$16_ADDR' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:64$16_DATA' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:65$17_ADDR' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:65$17_DATA' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:66$18_ADDR' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:66$18_DATA' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:67$19_ADDR' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:67$19_DATA' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:68$20_ADDR' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:68$20_DATA' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:69$21_ADDR' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:69$21_DATA' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:70$22_ADDR' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:70$22_DATA' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:71$23_ADDR' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:71$23_DATA' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:72$24_ADDR' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:72$24_DATA' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:73$25_ADDR' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:73$25_DATA' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:74$26_ADDR' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:74$26_DATA' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:75$27_ADDR' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:75$27_DATA' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:76$28_ADDR' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:76$28_DATA' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:77$29_ADDR' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:77$29_DATA' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:78$30_ADDR' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:78$30_DATA' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:79$31_ADDR' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:79$31_DATA' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:80$32_ADDR' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:80$32_DATA' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:81$33_ADDR' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:81$33_DATA' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:82$34_ADDR' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:82$34_DATA' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:83$35_ADDR' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:83$35_DATA' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:84$36_ADDR' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:84$36_DATA' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:85$37_ADDR' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:85$37_DATA' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:86$38_ADDR' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:86$38_DATA' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:87$39_ADDR' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:87$39_DATA' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:88$40_ADDR' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:88$40_DATA' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:89$41_ADDR' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:89$41_DATA' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:90$42_ADDR' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:90$42_DATA' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:91$43_ADDR' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:91$43_DATA' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:92$44_ADDR' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:92$44_DATA' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:93$45_ADDR' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:93$45_DATA' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:94$46_ADDR' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:94$46_DATA' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:95$47_ADDR' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:95$47_DATA' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:96$48_ADDR' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:96$48_DATA' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:99$49_ADDR' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:99$49_DATA' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:100$50_ADDR' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:100$50_DATA' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:101$51_ADDR' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:101$51_DATA' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:102$52_ADDR' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:102$52_DATA' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:103$53_ADDR' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:103$53_DATA' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:104$54_ADDR' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:104$54_DATA' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:105$55_ADDR' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:105$55_DATA' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:106$56_ADDR' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:106$56_DATA' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:107$57_ADDR' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:107$57_DATA' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:108$58_ADDR' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:108$58_DATA' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:109$59_ADDR' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:109$59_DATA' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:110$60_ADDR' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:110$60_DATA' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:111$61_ADDR' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:111$61_DATA' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:112$62_ADDR' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:112$62_DATA' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:113$63_ADDR' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:113$63_DATA' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:114$64_ADDR' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:114$64_DATA' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:115$65_ADDR' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:115$65_DATA' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:116$66_ADDR' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:116$66_DATA' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:117$67_ADDR' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:117$67_DATA' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:118$68_ADDR' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:118$68_DATA' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:119$69_ADDR' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:119$69_DATA' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:120$70_ADDR' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:120$70_DATA' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:121$71_ADDR' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:121$71_DATA' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:122$72_ADDR' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:122$72_DATA' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:123$73_ADDR' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:123$73_DATA' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:124$74_ADDR' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:124$74_DATA' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:125$75_ADDR' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:125$75_DATA' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:126$76_ADDR' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:126$76_DATA' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:127$77_ADDR' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:127$77_DATA' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:128$78_ADDR' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:128$78_DATA' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:129$79_ADDR' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:129$79_DATA' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:130$80_ADDR' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:130$80_DATA' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:131$81_ADDR' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:131$81_DATA' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:132$82_ADDR' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:132$82_DATA' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:133$83_ADDR' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:133$83_DATA' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:134$84_ADDR' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:134$84_DATA' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:135$85_ADDR' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:135$85_DATA' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:136$86_ADDR' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:136$86_DATA' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:137$87_ADDR' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:137$87_DATA' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:138$88_ADDR' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:138$88_DATA' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:139$89_ADDR' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:139$89_DATA' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:140$90_ADDR' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:140$90_DATA' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:141$91_ADDR' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:141$91_DATA' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:142$92_ADDR' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:142$92_DATA' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:143$93_ADDR' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:143$93_DATA' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:144$94_ADDR' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:144$94_DATA' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:145$95_ADDR' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:145$95_DATA' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:146$96_ADDR' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:146$96_DATA' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:147$97_ADDR' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:147$97_DATA' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:148$98_ADDR' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:148$98_DATA' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:149$99_ADDR' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:149$99_DATA' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:150$100_ADDR' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:150$100_DATA' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:151$101_ADDR' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:151$101_DATA' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:152$102_ADDR' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:152$102_DATA' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:153$103_ADDR' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:153$103_DATA' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:154$104_ADDR' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:154$104_DATA' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:155$105_ADDR' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:155$105_DATA' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:156$106_ADDR' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:156$106_DATA' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:157$107_ADDR' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:157$107_DATA' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:158$108_ADDR' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:158$108_DATA' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:159$109_ADDR' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:159$109_DATA' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:160$110_ADDR' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:160$110_DATA' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:161$111_ADDR' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:161$111_DATA' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:162$112_ADDR' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:162$112_DATA' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:163$113_ADDR' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:163$113_DATA' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:164$114_ADDR' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:164$114_DATA' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:165$115_ADDR' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:165$115_DATA' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:166$116_ADDR' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:166$116_DATA' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:167$117_ADDR' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:167$117_DATA' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:168$118_ADDR' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:168$118_DATA' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:169$119_ADDR' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:169$119_DATA' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:170$120_ADDR' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:170$120_DATA' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:171$121_ADDR' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:171$121_DATA' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:172$122_ADDR' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:172$122_DATA' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:173$123_ADDR' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:173$123_DATA' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:174$124_ADDR' from process `\demo.$proc$demo.v:44$289'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:174$124_DATA' from process `\demo.$proc$demo.v:44$289'.

2.3.7. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\demo.\rst' using process `\demo.$proc$demo.v:193$127'.
  created $dff cell `$procdff$720' with positive edge clock.
Creating register for signal `\demo.\dc' using process `\demo.$proc$demo.v:193$127'.
  created $dff cell `$procdff$721' with positive edge clock.
Creating register for signal `\demo.\mosi' using process `\demo.$proc$demo.v:193$127'.
  created $dff cell `$procdff$722' with positive edge clock.
Creating register for signal `\demo.\cs' using process `\demo.$proc$demo.v:193$127'.
  created $dff cell `$procdff$723' with positive edge clock.
Creating register for signal `\demo.\state' using process `\demo.$proc$demo.v:193$127'.
  created $dff cell `$procdff$724' with positive edge clock.
Creating register for signal `\demo.\delay' using process `\demo.$proc$demo.v:193$127'.
  created $dff cell `$procdff$725' with positive edge clock.
Creating register for signal `\demo.\data' using process `\demo.$proc$demo.v:193$127'.
  created $dff cell `$procdff$726' with positive edge clock.
Creating register for signal `\demo.\bit_counter' using process `\demo.$proc$demo.v:193$127'.
  created $dff cell `$procdff$727' with positive edge clock.
Creating register for signal `\demo.\pixel_data' using process `\demo.$proc$demo.v:193$127'.
  created $dff cell `$procdff$728' with positive edge clock.
Creating register for signal `\demo.\pixel_bit_counter' using process `\demo.$proc$demo.v:193$127'.
  created $dff cell `$procdff$729' with positive edge clock.
Creating register for signal `\demo.\cmd_counter' using process `\demo.$proc$demo.v:193$127'.
  created $dff cell `$procdff$730' with positive edge clock.
Creating register for signal `\demo.\param_counter' using process `\demo.$proc$demo.v:193$127'.
  created $dff cell `$procdff$731' with positive edge clock.
Creating register for signal `\demo.\params_left' using process `\demo.$proc$demo.v:193$127'.
  created $dff cell `$procdff$732' with positive edge clock.
Creating register for signal `\demo.\scl' using process `\demo.$proc$demo.v:186$125'.
  created $dff cell `$procdff$733' with positive edge clock.

2.3.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `demo.$proc$demo.v:44$289'.
Found and cleaned up 16 empty switches in `\demo.$proc$demo.v:193$127'.
Removing empty process `demo.$proc$demo.v:193$127'.
Removing empty process `demo.$proc$demo.v:186$125'.
Cleaned up 16 empty switches.

2.4. Executing FLATTEN pass (flatten design).
No more expansions possible.

2.5. Executing TRIBUF pass.

2.6. Executing DEMINOUT pass (demote inout ports to input or output).

2.7. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.
<suppressed ~16 debug messages>

2.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..
Removed 1 unused cells and 553 unused wires.
<suppressed ~2 debug messages>

2.9. Executing CHECK pass (checking for obvious problems).
checking module demo..
found and reported 0 problems.

2.10. Executing OPT pass (performing simple optimizations).

2.10.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.

2.10.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\demo'.
<suppressed ~96 debug messages>
Removed a total of 32 cells.

2.10.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \demo..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~14 debug messages>

2.10.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \demo.
    New ctrl vector for $pmux cell $procmux$679: { $procmux$645_CMP $auto$opt_reduce.cc:132:opt_mux$735 }
    New ctrl vector for $pmux cell $procmux$699: { $procmux$662_CMP $auto$opt_reduce.cc:132:opt_mux$737 }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$736: { $procmux$584_CMP $procmux$623_CMP }
  Optimizing cells in module \demo.
Performed a total of 3 changes.

2.10.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\demo'.
Removed a total of 0 cells.

2.10.6. Executing OPT_RMDFF pass (remove dff with constant values).

2.10.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..
Removed 0 unused cells and 32 unused wires.
<suppressed ~1 debug messages>

2.10.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.

2.10.9. Rerunning OPT passes. (Maybe there is more to do..)

2.10.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \demo..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~14 debug messages>

2.10.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \demo.
Performed a total of 0 changes.

2.10.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\demo'.
Removed a total of 0 cells.

2.10.13. Executing OPT_RMDFF pass (remove dff with constant values).

2.10.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..

2.10.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.

2.10.16. Finished OPT passes. (There is nothing left to do.)

2.11. Executing WREDUCE pass (reducing word size of cells).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:49$165 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:50$166 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:51$167 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:52$168 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:53$169 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:54$170 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:55$171 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:56$172 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:57$173 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:58$174 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:59$175 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:60$176 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:61$177 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:62$178 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:63$179 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:64$180 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:65$181 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:66$182 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:67$183 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:68$184 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:69$185 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:70$186 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:71$187 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:72$188 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\num_params$demo.v:73$189 (num_params).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\num_params$demo.v:74$190 (num_params).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\num_params$demo.v:75$191 (num_params).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\num_params$demo.v:76$192 (num_params).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\num_params$demo.v:77$193 (num_params).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\num_params$demo.v:78$194 (num_params).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\num_params$demo.v:79$195 (num_params).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\num_params$demo.v:80$196 (num_params).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\num_params$demo.v:81$197 (num_params).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\num_params$demo.v:82$198 (num_params).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\num_params$demo.v:83$199 (num_params).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\num_params$demo.v:84$200 (num_params).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\num_params$demo.v:85$201 (num_params).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\num_params$demo.v:86$202 (num_params).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\num_params$demo.v:87$203 (num_params).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\num_params$demo.v:88$204 (num_params).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\num_params$demo.v:89$205 (num_params).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\num_params$demo.v:90$206 (num_params).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\num_params$demo.v:91$207 (num_params).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\num_params$demo.v:92$208 (num_params).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\num_params$demo.v:93$209 (num_params).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\num_params$demo.v:94$210 (num_params).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\num_params$demo.v:95$211 (num_params).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\num_params$demo.v:96$212 (num_params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:100$214 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:101$215 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:102$216 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:103$217 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:104$218 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:105$219 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:106$220 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:107$221 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:108$222 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:109$223 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:110$224 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:111$225 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:112$226 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:113$227 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:114$228 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:115$229 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:116$230 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:117$231 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:118$232 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:119$233 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:120$234 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:121$235 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:122$236 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:123$237 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:124$238 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:125$239 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:126$240 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:127$241 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:128$242 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:129$243 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:130$244 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:131$245 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:132$246 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:133$247 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:134$248 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:135$249 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:136$250 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:137$251 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:138$252 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:139$253 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:140$254 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:141$255 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:142$256 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:143$257 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:144$258 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:145$259 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:146$260 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:147$261 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:148$262 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:149$263 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:150$264 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:151$265 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:152$266 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:153$267 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:154$268 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:155$269 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:156$270 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:157$271 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:158$272 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:159$273 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:160$274 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:161$275 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:162$276 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:163$277 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:164$278 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:165$279 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:166$280 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:167$281 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:168$282 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:169$283 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:170$284 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:171$285 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:172$286 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:173$287 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:174$288 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:99$213 (params).
Removed top 9 bits (of 16) from port B of cell demo.$le$demo.v:221$128 ($le).
Removed top 15 bits (of 16) from port B of cell demo.$add$demo.v:223$129 ($add).
Removed top 4 bits (of 5) from port B of cell demo.$add$demo.v:259$135 ($add).
Removed top 4 bits (of 5) from port B of cell demo.$sub$demo.v:276$138 ($sub).
Removed top 2 bits (of 8) from port B of cell demo.$eq$demo.v:276$139 ($eq).
Removed top 3 bits (of 4) from port B of cell demo.$sub$demo.v:293$144 ($sub).
Removed top 2 bits (of 3) from port B of cell demo.$sub$demo.v:312$148 ($sub).
Removed top 6 bits (of 7) from port B of cell demo.$add$demo.v:404$163 ($add).
Removed top 13 bits (of 14) from port B of cell demo.$sub$demo.v:406$164 ($sub).
Removed top 2 bits (of 6) from port B of cell demo.$procmux$542_CMP0 ($eq).
Removed top 3 bits (of 6) from port B of cell demo.$procmux$567_CMP0 ($eq).
Removed top 3 bits (of 6) from port B of cell demo.$procmux$578_CMP0 ($eq).
Removed top 2 bits (of 6) from port B of cell demo.$procmux$584_CMP0 ($eq).
Removed top 4 bits (of 6) from port B of cell demo.$procmux$618_CMP0 ($eq).
Removed top 4 bits (of 6) from port B of cell demo.$procmux$622_CMP0 ($eq).
Removed top 4 bits (of 6) from mux cell demo.$procmux$625 ($mux).
Removed top 3 bits (of 6) from mux cell demo.$procmux$631 ($mux).
Removed top 2 bits (of 6) from port B of cell demo.$procmux$633_CMP0 ($eq).
Removed top 5 bits (of 6) from mux cell demo.$procmux$635 ($mux).
Removed top 2 bits (of 6) from port B of cell demo.$procmux$637_CMP0 ($eq).
Removed top 2 bits (of 6) from mux cell demo.$procmux$639 ($mux).
Removed top 2 bits (of 6) from port B of cell demo.$procmux$641_CMP0 ($eq).
Removed top 2 bits (of 6) from mux cell demo.$procmux$643 ($mux).
Removed top 3 bits (of 6) from port B of cell demo.$procmux$645_CMP0 ($eq).
Removed top 4 bits (of 6) from mux cell demo.$procmux$654 ($mux).
Removed top 4 bits (of 6) from mux cell demo.$procmux$647 ($mux).
Removed top 2 bits (of 6) from mux cell demo.$procmux$650 ($mux).
Removed top 2 bits (of 6) from mux cell demo.$procmux$657 ($mux).
Removed top 2 bits (of 6) from mux cell demo.$procmux$659 ($mux).
Removed top 3 bits (of 6) from port B of cell demo.$procmux$662_CMP0 ($eq).
Removed top 5 bits (of 6) from mux cell demo.$procmux$664 ($mux).
Removed top 5 bits (of 6) from port B of cell demo.$procmux$675_CMP0 ($eq).
Removed top 4 bits (of 6) from wire demo.$procmux$625_Y.
Removed top 3 bits (of 6) from wire demo.$procmux$631_Y.
Removed top 5 bits (of 6) from wire demo.$procmux$635_Y.
Removed top 2 bits (of 6) from wire demo.$procmux$639_Y.
Removed top 2 bits (of 6) from wire demo.$procmux$643_Y.
Removed top 4 bits (of 6) from wire demo.$procmux$647_Y.
Removed top 2 bits (of 6) from wire demo.$procmux$650_Y.
Removed top 4 bits (of 6) from wire demo.$procmux$654_Y.
Removed top 2 bits (of 6) from wire demo.$procmux$657_Y.
Removed top 2 bits (of 6) from wire demo.$procmux$659_Y.
Removed top 5 bits (of 6) from wire demo.$procmux$664_Y.

2.12. Executing PEEPOPT pass (run peephole optimizers).

2.13. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..
Removed 0 unused cells and 11 unused wires.
<suppressed ~1 debug messages>

2.14. Executing SHARE pass (SAT-based resource sharing).
Found 4 cells in module demo that may be considered for resource sharing.
  Analyzing resource sharing options for $memrd$\params$demo.v:388$158 ($memrd):
    Found 1 activation_patterns using ctrl signal $procmux$542_CMP.
    No candidates found.
  Analyzing resource sharing options for $memrd$\num_params$demo.v:379$153 ($memrd):
    Found 1 activation_patterns using ctrl signal $procmux$584_CMP.
    No candidates found.
  Analyzing resource sharing options for $memrd$\cmd$demo.v:276$137 ($memrd):
    Found 2 activation_patterns using ctrl signal { $procmux$578_CMP $procmux$542_CMP }.
    Found 1 candidates: $memrd$\cmd$demo.v:252$132
    Analyzing resource sharing with $memrd$\cmd$demo.v:252$132 ($memrd):
      Found 2 activation_patterns using ctrl signal { $procmux$567_CMP $eq$demo.v:252$133_Y }.
      Forbidden control signals for this pair of cells: { $logic_and$demo.v:276$140_Y $eq$demo.v:276$139_Y $eq$demo.v:252$133_Y }
      Activation pattern for cell $memrd$\cmd$demo.v:276$137: $procmux$542_CMP = 1'1
      Activation pattern for cell $memrd$\cmd$demo.v:276$137: $procmux$578_CMP = 1'1
      Activation pattern for cell $memrd$\cmd$demo.v:252$132: $procmux$567_CMP = 1'1
      Adding exclusive control bits: $procmux$542_CMP vs. $procmux$567_CMP
      Adding exclusive control bits: $procmux$542_CMP vs. $procmux$578_CMP
      Adding exclusive control bits: $procmux$542_CMP vs. $procmux$567_CMP
      Adding exclusive control bits: $procmux$567_CMP vs. $procmux$578_CMP
      Size of SAT problem: 4 cells, 65 variables, 165 clauses
      According to the SAT solver this pair of cells can be shared.
      Activation signal for $memrd$\cmd$demo.v:252$132: $auto$share.cc:976:make_cell_activation_logic$749
      New cell: $auto$share.cc:710:make_supercell$751 ($memrd)
  Analyzing resource sharing options for $auto$share.cc:710:make_supercell$751 ($memrd):
    Found 3 activation_patterns using ctrl signal { $procmux$578_CMP $procmux$567_CMP $procmux$542_CMP }.
    No candidates found.
Removing 2 cells in module demo:
  Removing cell $memrd$\cmd$demo.v:252$132 ($memrd).
  Removing cell $memrd$\cmd$demo.v:276$137 ($memrd).

2.15. Executing TECHMAP pass (map to technology primitives).

2.15.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/cmp2lut.v
Parsing Verilog input from `/usr/bin/../share/yosys/cmp2lut.v' to AST representation.
Generating RTLIL representation for module `\_90_lut_cmp_'.
Successfully finished Verilog frontend.

2.15.2. Continuing TECHMAP pass.
Using template $paramod$968c93632f950ce0f306709fa121c1e7a868940c\_90_lut_cmp_ for cells of type $eq.
Using template $paramod$77ad031fce233083715243f95e3cd2547d931e42\_90_lut_cmp_ for cells of type $eq.
Using template $paramod$b014af9c344b7c6e328d7df54af43048a86ccf04\_90_lut_cmp_ for cells of type $eq.
No more expansions possible.
<suppressed ~316 debug messages>

2.16. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.

2.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..
Removed 0 unused cells and 10 unused wires.
<suppressed ~2 debug messages>

2.18. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module demo:
  creating $macc model for $add$demo.v:223$129 ($add).
  creating $macc model for $add$demo.v:259$135 ($add).
  creating $macc model for $add$demo.v:404$163 ($add).
  creating $macc model for $sub$demo.v:276$138 ($sub).
  creating $macc model for $sub$demo.v:293$144 ($sub).
  creating $macc model for $sub$demo.v:312$148 ($sub).
  creating $macc model for $sub$demo.v:406$164 ($sub).
  creating $alu model for $macc $sub$demo.v:406$164.
  creating $alu model for $macc $sub$demo.v:312$148.
  creating $alu model for $macc $sub$demo.v:293$144.
  creating $alu model for $macc $sub$demo.v:276$138.
  creating $alu model for $macc $add$demo.v:404$163.
  creating $alu model for $macc $add$demo.v:259$135.
  creating $alu model for $macc $add$demo.v:223$129.
  creating $alu model for $le$demo.v:221$128 ($le): new $alu
  creating $alu model for $le$demo.v:237$130 ($le): new $alu
  creating $alu cell for $le$demo.v:237$130: $auto$alumacc.cc:474:replace_alu$763
  creating $alu cell for $le$demo.v:221$128: $auto$alumacc.cc:474:replace_alu$772
  creating $alu cell for $add$demo.v:223$129: $auto$alumacc.cc:474:replace_alu$785
  creating $alu cell for $add$demo.v:259$135: $auto$alumacc.cc:474:replace_alu$788
  creating $alu cell for $add$demo.v:404$163: $auto$alumacc.cc:474:replace_alu$791
  creating $alu cell for $sub$demo.v:276$138: $auto$alumacc.cc:474:replace_alu$794
  creating $alu cell for $sub$demo.v:293$144: $auto$alumacc.cc:474:replace_alu$797
  creating $alu cell for $sub$demo.v:312$148: $auto$alumacc.cc:474:replace_alu$800
  creating $alu cell for $sub$demo.v:406$164: $auto$alumacc.cc:474:replace_alu$803
  created 9 $alu and 0 $macc cells.

2.19. Executing OPT pass (performing simple optimizations).

2.19.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.

2.19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\demo'.
Removed a total of 0 cells.

2.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \demo..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~15 debug messages>

2.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \demo.
    New input vector for $reduce_or cell $auto$alumacc.cc:509:replace_alu$770: { $auto$rtlil.cc:1832:Not$767 $auto$rtlil.cc:1835:ReduceAnd$769 }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$768: { $auto$alumacc.cc:490:replace_alu$764 [0] $auto$alumacc.cc:490:replace_alu$764 [1] $auto$alumacc.cc:490:replace_alu$764 [2] $auto$alumacc.cc:490:replace_alu$764 [3] $auto$alumacc.cc:490:replace_alu$764 [4] $auto$alumacc.cc:490:replace_alu$764 [5] $auto$alumacc.cc:490:replace_alu$764 [6] $auto$alumacc.cc:490:replace_alu$764 [7] $auto$alumacc.cc:490:replace_alu$764 [8] $auto$alumacc.cc:490:replace_alu$764 [9] $auto$alumacc.cc:490:replace_alu$764 [10] $auto$alumacc.cc:490:replace_alu$764 [11] $auto$alumacc.cc:490:replace_alu$764 [12] $auto$alumacc.cc:490:replace_alu$764 [13] $auto$alumacc.cc:490:replace_alu$764 [14] $auto$alumacc.cc:490:replace_alu$764 [15] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$775: { $auto$alumacc.cc:490:replace_alu$773 [0] $auto$alumacc.cc:490:replace_alu$773 [1] $auto$alumacc.cc:490:replace_alu$773 [2] $auto$alumacc.cc:490:replace_alu$773 [3] $auto$alumacc.cc:490:replace_alu$773 [4] $auto$alumacc.cc:490:replace_alu$773 [5] $auto$alumacc.cc:490:replace_alu$773 [6] $auto$alumacc.cc:490:replace_alu$773 [7] $auto$alumacc.cc:490:replace_alu$773 [8] $auto$alumacc.cc:490:replace_alu$773 [9] $auto$alumacc.cc:490:replace_alu$773 [10] $auto$alumacc.cc:490:replace_alu$773 [11] $auto$alumacc.cc:490:replace_alu$773 [12] $auto$alumacc.cc:490:replace_alu$773 [13] $auto$alumacc.cc:490:replace_alu$773 [14] $auto$alumacc.cc:490:replace_alu$773 [15] }
  Optimizing cells in module \demo.
Performed a total of 3 changes.

2.19.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\demo'.
Removed a total of 0 cells.

2.19.6. Executing OPT_RMDFF pass (remove dff with constant values).

2.19.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

2.19.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.

2.19.9. Rerunning OPT passes. (Maybe there is more to do..)

2.19.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \demo..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~15 debug messages>

2.19.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \demo.
Performed a total of 0 changes.

2.19.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\demo'.
Removed a total of 0 cells.

2.19.13. Executing OPT_RMDFF pass (remove dff with constant values).

2.19.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..

2.19.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.

2.19.16. Finished OPT passes. (There is nothing left to do.)

2.20. Executing FSM pass (extract and optimize FSM).

2.20.1. Executing FSM_DETECT pass (finding FSMs in design).
Not marking demo.state as FSM state register:
    Register has an initialization value.

2.20.2. Executing FSM_EXTRACT pass (extracting FSM from design).

2.20.3. Executing FSM_OPT pass (simple optimizations of FSMs).

2.20.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..

2.20.5. Executing FSM_OPT pass (simple optimizations of FSMs).

2.20.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

2.20.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

2.20.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

2.21. Executing OPT pass (performing simple optimizations).

2.21.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.

2.21.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\demo'.
Removed a total of 0 cells.

2.21.3. Executing OPT_RMDFF pass (remove dff with constant values).

2.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..

2.21.5. Finished fast OPT passes.

2.22. Executing MEMORY pass.

2.22.1. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).
Checking cell `$auto$share.cc:710:make_supercell$751' in module `\demo': no (compatible) $dff found.
Checking cell `$memrd$\num_params$demo.v:379$153' in module `\demo': no (compatible) $dff found.
Checking cell `$memrd$\params$demo.v:388$158' in module `\demo': no (compatible) $dff found.

2.22.2. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..

2.22.3. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

2.22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..

2.22.5. Executing MEMORY_COLLECT pass (generating $mem cells).
Collecting $memrd, $memwr and $meminit for memory `\cmd' in module `\demo':
  $meminit$\cmd$demo.v:49$165 ($meminit)
  $meminit$\cmd$demo.v:50$166 ($meminit)
  $meminit$\cmd$demo.v:51$167 ($meminit)
  $meminit$\cmd$demo.v:52$168 ($meminit)
  $meminit$\cmd$demo.v:53$169 ($meminit)
  $meminit$\cmd$demo.v:54$170 ($meminit)
  $meminit$\cmd$demo.v:55$171 ($meminit)
  $meminit$\cmd$demo.v:56$172 ($meminit)
  $meminit$\cmd$demo.v:57$173 ($meminit)
  $meminit$\cmd$demo.v:58$174 ($meminit)
  $meminit$\cmd$demo.v:59$175 ($meminit)
  $meminit$\cmd$demo.v:60$176 ($meminit)
  $meminit$\cmd$demo.v:61$177 ($meminit)
  $meminit$\cmd$demo.v:62$178 ($meminit)
  $meminit$\cmd$demo.v:63$179 ($meminit)
  $meminit$\cmd$demo.v:64$180 ($meminit)
  $meminit$\cmd$demo.v:65$181 ($meminit)
  $meminit$\cmd$demo.v:66$182 ($meminit)
  $meminit$\cmd$demo.v:67$183 ($meminit)
  $meminit$\cmd$demo.v:68$184 ($meminit)
  $meminit$\cmd$demo.v:69$185 ($meminit)
  $meminit$\cmd$demo.v:70$186 ($meminit)
  $meminit$\cmd$demo.v:71$187 ($meminit)
  $meminit$\cmd$demo.v:72$188 ($meminit)
  $auto$share.cc:710:make_supercell$751 ($memrd)
Collecting $memrd, $memwr and $meminit for memory `\num_params' in module `\demo':
  $meminit$\num_params$demo.v:73$189 ($meminit)
  $meminit$\num_params$demo.v:74$190 ($meminit)
  $meminit$\num_params$demo.v:75$191 ($meminit)
  $meminit$\num_params$demo.v:76$192 ($meminit)
  $meminit$\num_params$demo.v:77$193 ($meminit)
  $meminit$\num_params$demo.v:78$194 ($meminit)
  $meminit$\num_params$demo.v:79$195 ($meminit)
  $meminit$\num_params$demo.v:80$196 ($meminit)
  $meminit$\num_params$demo.v:81$197 ($meminit)
  $meminit$\num_params$demo.v:82$198 ($meminit)
  $meminit$\num_params$demo.v:83$199 ($meminit)
  $meminit$\num_params$demo.v:84$200 ($meminit)
  $meminit$\num_params$demo.v:85$201 ($meminit)
  $meminit$\num_params$demo.v:86$202 ($meminit)
  $meminit$\num_params$demo.v:87$203 ($meminit)
  $meminit$\num_params$demo.v:88$204 ($meminit)
  $meminit$\num_params$demo.v:89$205 ($meminit)
  $meminit$\num_params$demo.v:90$206 ($meminit)
  $meminit$\num_params$demo.v:91$207 ($meminit)
  $meminit$\num_params$demo.v:92$208 ($meminit)
  $meminit$\num_params$demo.v:93$209 ($meminit)
  $meminit$\num_params$demo.v:94$210 ($meminit)
  $meminit$\num_params$demo.v:95$211 ($meminit)
  $meminit$\num_params$demo.v:96$212 ($meminit)
  $memrd$\num_params$demo.v:379$153 ($memrd)
Collecting $memrd, $memwr and $meminit for memory `\params' in module `\demo':
  $meminit$\params$demo.v:99$213 ($meminit)
  $meminit$\params$demo.v:100$214 ($meminit)
  $meminit$\params$demo.v:101$215 ($meminit)
  $meminit$\params$demo.v:102$216 ($meminit)
  $meminit$\params$demo.v:103$217 ($meminit)
  $meminit$\params$demo.v:104$218 ($meminit)
  $meminit$\params$demo.v:105$219 ($meminit)
  $meminit$\params$demo.v:106$220 ($meminit)
  $meminit$\params$demo.v:107$221 ($meminit)
  $meminit$\params$demo.v:108$222 ($meminit)
  $meminit$\params$demo.v:109$223 ($meminit)
  $meminit$\params$demo.v:110$224 ($meminit)
  $meminit$\params$demo.v:111$225 ($meminit)
  $meminit$\params$demo.v:112$226 ($meminit)
  $meminit$\params$demo.v:113$227 ($meminit)
  $meminit$\params$demo.v:114$228 ($meminit)
  $meminit$\params$demo.v:115$229 ($meminit)
  $meminit$\params$demo.v:116$230 ($meminit)
  $meminit$\params$demo.v:117$231 ($meminit)
  $meminit$\params$demo.v:118$232 ($meminit)
  $meminit$\params$demo.v:119$233 ($meminit)
  $meminit$\params$demo.v:120$234 ($meminit)
  $meminit$\params$demo.v:121$235 ($meminit)
  $meminit$\params$demo.v:122$236 ($meminit)
  $meminit$\params$demo.v:123$237 ($meminit)
  $meminit$\params$demo.v:124$238 ($meminit)
  $meminit$\params$demo.v:125$239 ($meminit)
  $meminit$\params$demo.v:126$240 ($meminit)
  $meminit$\params$demo.v:127$241 ($meminit)
  $meminit$\params$demo.v:128$242 ($meminit)
  $meminit$\params$demo.v:129$243 ($meminit)
  $meminit$\params$demo.v:130$244 ($meminit)
  $meminit$\params$demo.v:131$245 ($meminit)
  $meminit$\params$demo.v:132$246 ($meminit)
  $meminit$\params$demo.v:133$247 ($meminit)
  $meminit$\params$demo.v:134$248 ($meminit)
  $meminit$\params$demo.v:135$249 ($meminit)
  $meminit$\params$demo.v:136$250 ($meminit)
  $meminit$\params$demo.v:137$251 ($meminit)
  $meminit$\params$demo.v:138$252 ($meminit)
  $meminit$\params$demo.v:139$253 ($meminit)
  $meminit$\params$demo.v:140$254 ($meminit)
  $meminit$\params$demo.v:141$255 ($meminit)
  $meminit$\params$demo.v:142$256 ($meminit)
  $meminit$\params$demo.v:143$257 ($meminit)
  $meminit$\params$demo.v:144$258 ($meminit)
  $meminit$\params$demo.v:145$259 ($meminit)
  $meminit$\params$demo.v:146$260 ($meminit)
  $meminit$\params$demo.v:147$261 ($meminit)
  $meminit$\params$demo.v:148$262 ($meminit)
  $meminit$\params$demo.v:149$263 ($meminit)
  $meminit$\params$demo.v:150$264 ($meminit)
  $meminit$\params$demo.v:151$265 ($meminit)
  $meminit$\params$demo.v:152$266 ($meminit)
  $meminit$\params$demo.v:153$267 ($meminit)
  $meminit$\params$demo.v:154$268 ($meminit)
  $meminit$\params$demo.v:155$269 ($meminit)
  $meminit$\params$demo.v:156$270 ($meminit)
  $meminit$\params$demo.v:157$271 ($meminit)
  $meminit$\params$demo.v:158$272 ($meminit)
  $meminit$\params$demo.v:159$273 ($meminit)
  $meminit$\params$demo.v:160$274 ($meminit)
  $meminit$\params$demo.v:161$275 ($meminit)
  $meminit$\params$demo.v:162$276 ($meminit)
  $meminit$\params$demo.v:163$277 ($meminit)
  $meminit$\params$demo.v:164$278 ($meminit)
  $meminit$\params$demo.v:165$279 ($meminit)
  $meminit$\params$demo.v:166$280 ($meminit)
  $meminit$\params$demo.v:167$281 ($meminit)
  $meminit$\params$demo.v:168$282 ($meminit)
  $meminit$\params$demo.v:169$283 ($meminit)
  $meminit$\params$demo.v:170$284 ($meminit)
  $meminit$\params$demo.v:171$285 ($meminit)
  $meminit$\params$demo.v:172$286 ($meminit)
  $meminit$\params$demo.v:173$287 ($meminit)
  $meminit$\params$demo.v:174$288 ($meminit)
  $memrd$\params$demo.v:388$158 ($memrd)

2.23. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..

2.24. Executing MEMORY_BRAM pass (mapping $mem cells to block memories).
Processing demo.cmd:
  Properties: ports=1 bits=192 rports=1 wports=0 dbits=8 abits=5 words=24
  Checking rule #1 for bram type $__ICE40_RAM4K_M0 (variant 1):
    Bram geometry: abits=8 dbits=16 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M0: awaste=232 dwaste=8 bwaste=3904 waste=3904 efficiency=4
    Rule #1 for bram type $__ICE40_RAM4K_M0 (variant 1) accepted.
    Mapping to bram type $__ICE40_RAM4K_M0 (variant 1):
      Read port #0 is in clock domain !~async~.
        Bram port A1.1 has incompatible clock type.
        Failed to map read port #0.
    Mapping to bram type $__ICE40_RAM4K_M0 failed.
  Checking rule #2 for bram type $__ICE40_RAM4K_M123 (variant 1):
    Bram geometry: abits=9 dbits=8 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=488 dwaste=0 bwaste=3904 waste=3904 efficiency=4
    Rule #2 for bram type $__ICE40_RAM4K_M123 (variant 1) accepted.
    Mapping to bram type $__ICE40_RAM4K_M123 (variant 1):
      Read port #0 is in clock domain !~async~.
        Bram port A1.1 has incompatible clock type.
        Failed to map read port #0.
    Mapping to bram type $__ICE40_RAM4K_M123 failed.
  Checking rule #2 for bram type $__ICE40_RAM4K_M123 (variant 2):
    Bram geometry: abits=10 dbits=4 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=1000 dwaste=0 bwaste=4000 waste=4000 efficiency=2
    Rule #2 for bram type $__ICE40_RAM4K_M123 (variant 2) accepted.
    Mapping to bram type $__ICE40_RAM4K_M123 (variant 2):
      Read port #0 is in clock domain !~async~.
        Bram port A1.1 has incompatible clock type.
        Failed to map read port #0.
    Mapping to bram type $__ICE40_RAM4K_M123 failed.
  Checking rule #2 for bram type $__ICE40_RAM4K_M123 (variant 3):
    Bram geometry: abits=11 dbits=2 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=2024 dwaste=0 bwaste=4048 waste=4048 efficiency=1
    Rule #2 for bram type $__ICE40_RAM4K_M123 (variant 3) rejected: requirement 'min efficiency 2' not met.
  No acceptable bram resources found.
Processing demo.num_params:
  Properties: ports=1 bits=336 rports=1 wports=0 dbits=14 abits=5 words=24
  Checking rule #1 for bram type $__ICE40_RAM4K_M0 (variant 1):
    Bram geometry: abits=8 dbits=16 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M0: awaste=232 dwaste=2 bwaste=3760 waste=3760 efficiency=8
    Rule #1 for bram type $__ICE40_RAM4K_M0 (variant 1) accepted.
    Mapping to bram type $__ICE40_RAM4K_M0 (variant 1):
      Read port #0 is in clock domain !~async~.
        Bram port A1.1 has incompatible clock type.
        Failed to map read port #0.
    Mapping to bram type $__ICE40_RAM4K_M0 failed.
  Checking rule #2 for bram type $__ICE40_RAM4K_M123 (variant 1):
    Bram geometry: abits=9 dbits=8 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=488 dwaste=2 bwaste=3952 waste=3952 efficiency=4
    Rule #2 for bram type $__ICE40_RAM4K_M123 (variant 1) accepted.
    Mapping to bram type $__ICE40_RAM4K_M123 (variant 1):
      Read port #0 is in clock domain !~async~.
        Bram port A1.1 has incompatible clock type.
        Failed to map read port #0.
    Mapping to bram type $__ICE40_RAM4K_M123 failed.
  Checking rule #2 for bram type $__ICE40_RAM4K_M123 (variant 2):
    Bram geometry: abits=10 dbits=4 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=1000 dwaste=2 bwaste=4048 waste=4048 efficiency=2
    Rule #2 for bram type $__ICE40_RAM4K_M123 (variant 2) accepted.
    Mapping to bram type $__ICE40_RAM4K_M123 (variant 2):
      Read port #0 is in clock domain !~async~.
        Bram port A1.1 has incompatible clock type.
        Failed to map read port #0.
    Mapping to bram type $__ICE40_RAM4K_M123 failed.
  Checking rule #2 for bram type $__ICE40_RAM4K_M123 (variant 3):
    Bram geometry: abits=11 dbits=2 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=2024 dwaste=0 bwaste=4048 waste=4048 efficiency=1
    Rule #2 for bram type $__ICE40_RAM4K_M123 (variant 3) rejected: requirement 'min efficiency 2' not met.
  No acceptable bram resources found.
Processing demo.params:
  Properties: ports=1 bits=608 rports=1 wports=0 dbits=8 abits=7 words=76
  Checking rule #1 for bram type $__ICE40_RAM4K_M0 (variant 1):
    Bram geometry: abits=8 dbits=16 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M0: awaste=180 dwaste=8 bwaste=3488 waste=3488 efficiency=14
    Rule #1 for bram type $__ICE40_RAM4K_M0 (variant 1) accepted.
    Mapping to bram type $__ICE40_RAM4K_M0 (variant 1):
      Read port #0 is in clock domain !~async~.
        Bram port A1.1 has incompatible clock type.
        Failed to map read port #0.
    Mapping to bram type $__ICE40_RAM4K_M0 failed.
  Checking rule #2 for bram type $__ICE40_RAM4K_M123 (variant 1):
    Bram geometry: abits=9 dbits=8 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=436 dwaste=0 bwaste=3488 waste=3488 efficiency=14
    Rule #2 for bram type $__ICE40_RAM4K_M123 (variant 1) accepted.
    Mapping to bram type $__ICE40_RAM4K_M123 (variant 1):
      Read port #0 is in clock domain !~async~.
        Bram port A1.1 has incompatible clock type.
        Failed to map read port #0.
    Mapping to bram type $__ICE40_RAM4K_M123 failed.
  Checking rule #2 for bram type $__ICE40_RAM4K_M123 (variant 2):
    Bram geometry: abits=10 dbits=4 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=948 dwaste=0 bwaste=3792 waste=3792 efficiency=7
    Rule #2 for bram type $__ICE40_RAM4K_M123 (variant 2) accepted.
    Mapping to bram type $__ICE40_RAM4K_M123 (variant 2):
      Read port #0 is in clock domain !~async~.
        Bram port A1.1 has incompatible clock type.
        Failed to map read port #0.
    Mapping to bram type $__ICE40_RAM4K_M123 failed.
  Checking rule #2 for bram type $__ICE40_RAM4K_M123 (variant 3):
    Bram geometry: abits=11 dbits=2 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=1972 dwaste=0 bwaste=3944 waste=3944 efficiency=3
    Rule #2 for bram type $__ICE40_RAM4K_M123 (variant 3) accepted.
    Mapping to bram type $__ICE40_RAM4K_M123 (variant 3):
      Read port #0 is in clock domain !~async~.
        Bram port A1.1 has incompatible clock type.
        Failed to map read port #0.
    Mapping to bram type $__ICE40_RAM4K_M123 failed.
  No acceptable bram resources found.

2.25. Executing TECHMAP pass (map to technology primitives).

2.25.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/brams_map.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/brams_map.v' to AST representation.
Generating RTLIL representation for module `\$__ICE40_RAM4K'.
Generating RTLIL representation for module `\$__ICE40_RAM4K_M0'.
Generating RTLIL representation for module `\$__ICE40_RAM4K_M123'.
Successfully finished Verilog frontend.

2.25.2. Continuing TECHMAP pass.
No more expansions possible.

2.26. Executing ICE40_BRAMINIT pass.

2.27. Executing OPT pass (performing simple optimizations).

2.27.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.
<suppressed ~1 debug messages>

2.27.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\demo'.
Removed a total of 0 cells.

2.27.3. Executing OPT_RMDFF pass (remove dff with constant values).

2.27.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

2.27.5. Finished fast OPT passes.

2.28. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).
Mapping memory cell \cmd in module \demo:
  created 24 $dff cells and 0 static cells of width 8.
  read interface: 0 $dff and 31 $mux cells.
  write interface: 0 write mux blocks.
Mapping memory cell \num_params in module \demo:
  created 24 $dff cells and 0 static cells of width 14.
  read interface: 0 $dff and 31 $mux cells.
  write interface: 0 write mux blocks.
Mapping memory cell \params in module \demo:
  created 76 $dff cells and 0 static cells of width 8.
  read interface: 0 $dff and 127 $mux cells.
  write interface: 0 write mux blocks.

2.29. Executing OPT pass (performing simple optimizations).

2.29.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.
<suppressed ~150 debug messages>

2.29.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\demo'.
Removed a total of 0 cells.

2.29.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \demo..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~17 debug messages>

2.29.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \demo.
    Consolidated identical input bits for $mux cell $procmux$625:
      Old ports: A=2'10, B=2'00, Y=$auto$wreduce.cc:455:run$738 [1:0]
      New ports: A=1'1, B=1'0, Y=$auto$wreduce.cc:455:run$738 [1]
      New connections: $auto$wreduce.cc:455:run$738 [0] = 1'0
    Consolidated identical input bits for $mux cell $procmux$631:
      Old ports: A=3'011, B=3'100, Y=$auto$wreduce.cc:455:run$739 [2:0]
      New ports: A=2'01, B=2'10, Y={ $auto$wreduce.cc:455:run$739 [2] $auto$wreduce.cc:455:run$739 [0] }
      New connections: $auto$wreduce.cc:455:run$739 [1] = $auto$wreduce.cc:455:run$739 [0]
    Consolidated identical input bits for $mux cell $procmux$639:
      Old ports: A=4'1010, B=4'0110, Y=$auto$wreduce.cc:455:run$741 [3:0]
      New ports: A=2'10, B=2'01, Y=$auto$wreduce.cc:455:run$741 [3:2]
      New connections: $auto$wreduce.cc:455:run$741 [1:0] = 2'10
    Consolidated identical input bits for $mux cell $procmux$643:
      Old ports: A=4'0111, B=4'1010, Y=$auto$wreduce.cc:455:run$742 [3:0]
      New ports: A=2'01, B=2'10, Y={ $auto$wreduce.cc:455:run$742 [3] $auto$wreduce.cc:455:run$742 [0] }
      New connections: $auto$wreduce.cc:455:run$742 [2:1] = { $auto$wreduce.cc:455:run$742 [0] 1'1 }
    Consolidated identical input bits for $mux cell $procmux$647:
      Old ports: A=2'10, B=2'00, Y=$auto$wreduce.cc:455:run$743 [1:0]
      New ports: A=1'1, B=1'0, Y=$auto$wreduce.cc:455:run$743 [1]
      New connections: $auto$wreduce.cc:455:run$743 [0] = 1'0
    Consolidated identical input bits for $mux cell $procmux$654:
      Old ports: A=2'10, B=2'00, Y=$auto$wreduce.cc:455:run$745 [1:0]
      New ports: A=1'1, B=1'0, Y=$auto$wreduce.cc:455:run$745 [1]
      New connections: $auto$wreduce.cc:455:run$745 [0] = 1'0
  Optimizing cells in module \demo.
    Consolidated identical input bits for $mux cell $procmux$650:
      Old ports: A={ 2'10 $auto$wreduce.cc:455:run$743 [1:0] }, B=4'0111, Y=$auto$wreduce.cc:455:run$744 [3:0]
      New ports: A={ 1'1 $auto$wreduce.cc:455:run$743 [1] 1'0 }, B=3'011, Y={ $auto$wreduce.cc:455:run$744 [3] $auto$wreduce.cc:455:run$744 [1:0] }
      New connections: $auto$wreduce.cc:455:run$744 [2] = $auto$wreduce.cc:455:run$744 [0]
    Consolidated identical input bits for $mux cell $procmux$657:
      Old ports: A={ 2'10 $auto$wreduce.cc:455:run$745 [1:0] }, B=4'0111, Y=$auto$wreduce.cc:455:run$746 [3:0]
      New ports: A={ 1'1 $auto$wreduce.cc:455:run$745 [1] 1'0 }, B=3'011, Y={ $auto$wreduce.cc:455:run$746 [3] $auto$wreduce.cc:455:run$746 [1:0] }
      New connections: $auto$wreduce.cc:455:run$746 [2] = $auto$wreduce.cc:455:run$746 [0]
  Optimizing cells in module \demo.
    Consolidated identical input bits for $mux cell $procmux$659:
      Old ports: A=$auto$wreduce.cc:455:run$744 [3:0], B=$auto$wreduce.cc:455:run$746 [3:0], Y=$auto$wreduce.cc:455:run$747 [3:0]
      New ports: A={ $auto$wreduce.cc:455:run$744 [3] $auto$wreduce.cc:455:run$744 [1:0] }, B={ $auto$wreduce.cc:455:run$746 [3] $auto$wreduce.cc:455:run$746 [1:0] }, Y={ $auto$wreduce.cc:455:run$747 [3] $auto$wreduce.cc:455:run$747 [1:0] }
      New connections: $auto$wreduce.cc:455:run$747 [2] = $auto$wreduce.cc:455:run$747 [0]
  Optimizing cells in module \demo.
Performed a total of 9 changes.

2.29.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\demo'.
Removed a total of 0 cells.

2.29.6. Executing OPT_RMDFF pass (remove dff with constant values).
Removing $memory\params[75]$1244 ($dff) from module demo.
Removing $memory\params[74]$1242 ($dff) from module demo.
Removing $memory\params[73]$1240 ($dff) from module demo.
Removing $memory\params[72]$1238 ($dff) from module demo.
Removing $memory\params[71]$1236 ($dff) from module demo.
Removing $memory\params[70]$1234 ($dff) from module demo.
Removing $memory\params[69]$1232 ($dff) from module demo.
Removing $memory\params[68]$1230 ($dff) from module demo.
Removing $memory\params[67]$1228 ($dff) from module demo.
Removing $memory\params[66]$1226 ($dff) from module demo.
Removing $memory\params[65]$1224 ($dff) from module demo.
Removing $memory\params[64]$1222 ($dff) from module demo.
Removing $memory\params[63]$1220 ($dff) from module demo.
Removing $memory\params[62]$1218 ($dff) from module demo.
Removing $memory\params[61]$1216 ($dff) from module demo.
Removing $memory\params[60]$1214 ($dff) from module demo.
Removing $memory\params[59]$1212 ($dff) from module demo.
Removing $memory\params[58]$1210 ($dff) from module demo.
Removing $memory\params[57]$1208 ($dff) from module demo.
Removing $memory\params[56]$1206 ($dff) from module demo.
Removing $memory\params[55]$1204 ($dff) from module demo.
Removing $memory\params[54]$1202 ($dff) from module demo.
Removing $memory\params[53]$1200 ($dff) from module demo.
Removing $memory\params[52]$1198 ($dff) from module demo.
Removing $memory\params[51]$1196 ($dff) from module demo.
Removing $memory\params[50]$1194 ($dff) from module demo.
Removing $memory\params[49]$1192 ($dff) from module demo.
Removing $memory\params[48]$1190 ($dff) from module demo.
Removing $memory\params[47]$1188 ($dff) from module demo.
Removing $memory\params[46]$1186 ($dff) from module demo.
Removing $memory\params[45]$1184 ($dff) from module demo.
Removing $memory\params[44]$1182 ($dff) from module demo.
Removing $memory\params[43]$1180 ($dff) from module demo.
Removing $memory\params[42]$1178 ($dff) from module demo.
Removing $memory\params[41]$1176 ($dff) from module demo.
Removing $memory\params[40]$1174 ($dff) from module demo.
Removing $memory\params[39]$1172 ($dff) from module demo.
Removing $memory\params[38]$1170 ($dff) from module demo.
Removing $memory\params[37]$1168 ($dff) from module demo.
Removing $memory\params[36]$1166 ($dff) from module demo.
Removing $memory\params[35]$1164 ($dff) from module demo.
Removing $memory\params[34]$1162 ($dff) from module demo.
Removing $memory\params[33]$1160 ($dff) from module demo.
Removing $memory\params[32]$1158 ($dff) from module demo.
Removing $memory\params[31]$1156 ($dff) from module demo.
Removing $memory\params[30]$1154 ($dff) from module demo.
Removing $memory\params[29]$1152 ($dff) from module demo.
Removing $memory\params[28]$1150 ($dff) from module demo.
Removing $memory\params[27]$1148 ($dff) from module demo.
Removing $memory\params[26]$1146 ($dff) from module demo.
Removing $memory\params[25]$1144 ($dff) from module demo.
Removing $memory\params[24]$1142 ($dff) from module demo.
Removing $memory\params[23]$1140 ($dff) from module demo.
Removing $memory\params[22]$1138 ($dff) from module demo.
Removing $memory\params[21]$1136 ($dff) from module demo.
Removing $memory\params[20]$1134 ($dff) from module demo.
Removing $memory\params[19]$1132 ($dff) from module demo.
Removing $memory\params[18]$1130 ($dff) from module demo.
Removing $memory\params[17]$1128 ($dff) from module demo.
Removing $memory\params[16]$1126 ($dff) from module demo.
Removing $memory\params[15]$1124 ($dff) from module demo.
Removing $memory\params[14]$1122 ($dff) from module demo.
Removing $memory\params[13]$1120 ($dff) from module demo.
Removing $memory\params[12]$1118 ($dff) from module demo.
Removing $memory\params[11]$1116 ($dff) from module demo.
Removing $memory\params[10]$1114 ($dff) from module demo.
Removing $memory\params[9]$1112 ($dff) from module demo.
Removing $memory\params[8]$1110 ($dff) from module demo.
Removing $memory\params[7]$1108 ($dff) from module demo.
Removing $memory\params[6]$1106 ($dff) from module demo.
Removing $memory\params[5]$1104 ($dff) from module demo.
Removing $memory\params[4]$1102 ($dff) from module demo.
Removing $memory\params[3]$1100 ($dff) from module demo.
Removing $memory\params[2]$1098 ($dff) from module demo.
Removing $memory\params[1]$1096 ($dff) from module demo.
Removing $memory\params[0]$1094 ($dff) from module demo.
Removing $memory\num_params[23]$999 ($dff) from module demo.
Removing $memory\num_params[22]$997 ($dff) from module demo.
Removing $memory\num_params[21]$995 ($dff) from module demo.
Removing $memory\num_params[20]$993 ($dff) from module demo.
Removing $memory\num_params[19]$991 ($dff) from module demo.
Removing $memory\num_params[18]$989 ($dff) from module demo.
Removing $memory\num_params[17]$987 ($dff) from module demo.
Removing $memory\num_params[16]$985 ($dff) from module demo.
Removing $memory\num_params[15]$983 ($dff) from module demo.
Removing $memory\num_params[14]$981 ($dff) from module demo.
Removing $memory\num_params[13]$979 ($dff) from module demo.
Removing $memory\num_params[12]$977 ($dff) from module demo.
Removing $memory\num_params[11]$975 ($dff) from module demo.
Removing $memory\num_params[10]$973 ($dff) from module demo.
Removing $memory\num_params[9]$971 ($dff) from module demo.
Removing $memory\num_params[8]$969 ($dff) from module demo.
Removing $memory\num_params[7]$967 ($dff) from module demo.
Removing $memory\num_params[6]$965 ($dff) from module demo.
Removing $memory\num_params[5]$963 ($dff) from module demo.
Removing $memory\num_params[4]$961 ($dff) from module demo.
Removing $memory\num_params[3]$959 ($dff) from module demo.
Removing $memory\num_params[2]$957 ($dff) from module demo.
Removing $memory\num_params[1]$955 ($dff) from module demo.
Removing $memory\num_params[0]$953 ($dff) from module demo.
Removing $memory\cmd[23]$858 ($dff) from module demo.
Removing $memory\cmd[22]$856 ($dff) from module demo.
Removing $memory\cmd[21]$854 ($dff) from module demo.
Removing $memory\cmd[20]$852 ($dff) from module demo.
Removing $memory\cmd[19]$850 ($dff) from module demo.
Removing $memory\cmd[18]$848 ($dff) from module demo.
Removing $memory\cmd[17]$846 ($dff) from module demo.
Removing $memory\cmd[16]$844 ($dff) from module demo.
Removing $memory\cmd[15]$842 ($dff) from module demo.
Removing $memory\cmd[14]$840 ($dff) from module demo.
Removing $memory\cmd[13]$838 ($dff) from module demo.
Removing $memory\cmd[12]$836 ($dff) from module demo.
Removing $memory\cmd[11]$834 ($dff) from module demo.
Removing $memory\cmd[10]$832 ($dff) from module demo.
Removing $memory\cmd[9]$830 ($dff) from module demo.
Removing $memory\cmd[8]$828 ($dff) from module demo.
Removing $memory\cmd[7]$826 ($dff) from module demo.
Removing $memory\cmd[6]$824 ($dff) from module demo.
Removing $memory\cmd[5]$822 ($dff) from module demo.
Removing $memory\cmd[4]$820 ($dff) from module demo.
Removing $memory\cmd[3]$818 ($dff) from module demo.
Removing $memory\cmd[2]$816 ($dff) from module demo.
Removing $memory\cmd[1]$814 ($dff) from module demo.
Removing $memory\cmd[0]$812 ($dff) from module demo.
Replaced 124 DFF cells.

2.29.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..
Removed 0 unused cells and 379 unused wires.
<suppressed ~1 debug messages>

2.29.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.
<suppressed ~7 debug messages>

2.29.9. Rerunning OPT passes. (Maybe there is more to do..)

2.29.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \demo..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~17 debug messages>

2.29.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \demo.
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][4][0]$905:
      Old ports: A=8'10110001, B=8'10110010, Y=$memory\cmd$rdmux[0][3][0]$a$882
      New ports: A=2'01, B=2'10, Y=$memory\cmd$rdmux[0][3][0]$a$882 [1:0]
      New connections: $memory\cmd$rdmux[0][3][0]$a$882 [7:2] = 6'101100
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][4][10]$935:
      Old ports: A=8'00101010, B=8'00101011, Y=$memory\cmd$rdmux[0][3][5]$a$897
      New ports: A=1'0, B=1'1, Y=$memory\cmd$rdmux[0][3][5]$a$897 [0]
      New connections: $memory\cmd$rdmux[0][3][5]$a$897 [7:1] = 7'0010101
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][4][11]$938:
      Old ports: A=8'00101100, B=8'00000000, Y=$memory\cmd$rdmux[0][3][5]$b$898
      New ports: A=1'1, B=1'0, Y=$memory\cmd$rdmux[0][3][5]$b$898 [2]
      New connections: { $memory\cmd$rdmux[0][3][5]$b$898 [7:3] $memory\cmd$rdmux[0][3][5]$b$898 [1:0] } = { 2'00 $memory\cmd$rdmux[0][3][5]$b$898 [2] 1'0 $memory\cmd$rdmux[0][3][5]$b$898 [2] 2'00 }
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][4][1]$908:
      Old ports: A=8'10110011, B=8'10110100, Y=$memory\cmd$rdmux[0][3][0]$b$883
      New ports: A=2'01, B=2'10, Y={ $memory\cmd$rdmux[0][3][0]$b$883 [2] $memory\cmd$rdmux[0][3][0]$b$883 [0] }
      New connections: { $memory\cmd$rdmux[0][3][0]$b$883 [7:3] $memory\cmd$rdmux[0][3][0]$b$883 [1] } = { 5'10110 $memory\cmd$rdmux[0][3][0]$b$883 [0] }
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][4][2]$911:
      Old ports: A=8'11000000, B=8'11000001, Y=$memory\cmd$rdmux[0][3][1]$a$885
      New ports: A=1'0, B=1'1, Y=$memory\cmd$rdmux[0][3][1]$a$885 [0]
      New connections: $memory\cmd$rdmux[0][3][1]$a$885 [7:1] = 7'1100000
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][4][3]$914:
      Old ports: A=8'11000010, B=8'11000011, Y=$memory\cmd$rdmux[0][3][1]$b$886
      New ports: A=1'0, B=1'1, Y=$memory\cmd$rdmux[0][3][1]$b$886 [0]
      New connections: $memory\cmd$rdmux[0][3][1]$b$886 [7:1] = 7'1100001
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][4][4]$917:
      Old ports: A=8'11000100, B=8'11000101, Y=$memory\cmd$rdmux[0][3][2]$a$888
      New ports: A=1'0, B=1'1, Y=$memory\cmd$rdmux[0][3][2]$a$888 [0]
      New connections: $memory\cmd$rdmux[0][3][2]$a$888 [7:1] = 7'1100010
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][4][5]$920:
      Old ports: A=8'11100000, B=8'11100001, Y=$memory\cmd$rdmux[0][3][2]$b$889
      New ports: A=1'0, B=1'1, Y=$memory\cmd$rdmux[0][3][2]$b$889 [0]
      New connections: $memory\cmd$rdmux[0][3][2]$b$889 [7:1] = 7'1110000
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][4][6]$923:
      Old ports: A=8'11111100, B=8'00111010, Y=$memory\cmd$rdmux[0][3][3]$a$891
      New ports: A=2'10, B=2'01, Y=$memory\cmd$rdmux[0][3][3]$a$891 [2:1]
      New connections: { $memory\cmd$rdmux[0][3][3]$a$891 [7:3] $memory\cmd$rdmux[0][3][3]$a$891 [0] } = { $memory\cmd$rdmux[0][3][3]$a$891 [2] $memory\cmd$rdmux[0][3][3]$a$891 [2] 4'1110 }
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][4][7]$926:
      Old ports: A=8'00110110, B=8'00100001, Y=$memory\cmd$rdmux[0][3][3]$b$892
      New ports: A=2'10, B=2'01, Y=$memory\cmd$rdmux[0][3][3]$b$892 [1:0]
      New connections: $memory\cmd$rdmux[0][3][3]$b$892 [7:2] = { 3'001 $memory\cmd$rdmux[0][3][3]$b$892 [1] 1'0 $memory\cmd$rdmux[0][3][3]$b$892 [1] }
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][4][8]$929:
      Old ports: A=8'00101001, B=8'00101010, Y=$memory\cmd$rdmux[0][3][4]$a$894
      New ports: A=2'01, B=2'10, Y=$memory\cmd$rdmux[0][3][4]$a$894 [1:0]
      New connections: $memory\cmd$rdmux[0][3][4]$a$894 [7:2] = 6'001010
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][4][9]$932:
      Old ports: A=8'00101011, B=8'00101100, Y=$memory\cmd$rdmux[0][3][4]$b$895
      New ports: A=2'01, B=2'10, Y={ $memory\cmd$rdmux[0][3][4]$b$895 [2] $memory\cmd$rdmux[0][3][4]$b$895 [0] }
      New connections: { $memory\cmd$rdmux[0][3][4]$b$895 [7:3] $memory\cmd$rdmux[0][3][4]$b$895 [1] } = { 5'00101 $memory\cmd$rdmux[0][3][4]$b$895 [0] }
    Consolidated identical input bits for $mux cell $memory\num_params$rdmux[0][4][11]$1079:
      Old ports: A=14'11001000000000, B=14'00000000000000, Y=$memory\num_params$rdmux[0][3][5]$b$1039
      New ports: A=1'1, B=1'0, Y=$memory\num_params$rdmux[0][3][5]$b$1039 [9]
      New connections: { $memory\num_params$rdmux[0][3][5]$b$1039 [13:10] $memory\num_params$rdmux[0][3][5]$b$1039 [8:0] } = { $memory\num_params$rdmux[0][3][5]$b$1039 [9] $memory\num_params$rdmux[0][3][5]$b$1039 [9] 11'00000000000 }
    Consolidated identical input bits for $mux cell $memory\num_params$rdmux[0][4][1]$1049:
      Old ports: A=14'00000000000110, B=14'00000000000001, Y=$memory\num_params$rdmux[0][3][0]$b$1024
      New ports: A=2'10, B=2'01, Y=$memory\num_params$rdmux[0][3][0]$b$1024 [1:0]
      New connections: $memory\num_params$rdmux[0][3][0]$b$1024 [13:2] = { 11'00000000000 $memory\num_params$rdmux[0][3][0]$b$1024 [1] }
    Consolidated identical input bits for $mux cell $memory\num_params$rdmux[0][4][2]$1052:
      Old ports: A=14'00000000000011, B=14'00000000000001, Y=$memory\num_params$rdmux[0][3][1]$a$1026
      New ports: A=1'1, B=1'0, Y=$memory\num_params$rdmux[0][3][1]$a$1026 [1]
      New connections: { $memory\num_params$rdmux[0][3][1]$a$1026 [13:2] $memory\num_params$rdmux[0][3][1]$a$1026 [0] } = 13'0000000000001
    Consolidated identical input bits for $mux cell $memory\num_params$rdmux[0][4][4]$1058:
      Old ports: A=14'00000000000010, B=14'00000000000001, Y=$memory\num_params$rdmux[0][3][2]$a$1029
      New ports: A=2'10, B=2'01, Y=$memory\num_params$rdmux[0][3][2]$a$1029 [1:0]
      New connections: $memory\num_params$rdmux[0][3][2]$a$1029 [13:2] = 12'000000000000
    Consolidated identical input bits for $mux cell $memory\num_params$rdmux[0][4][7]$1067:
      Old ports: A=14'00000000000001, B=14'00000000000000, Y=$memory\num_params$rdmux[0][3][3]$b$1033
      New ports: A=1'1, B=1'0, Y=$memory\num_params$rdmux[0][3][3]$b$1033 [0]
      New connections: $memory\num_params$rdmux[0][3][3]$b$1033 [13:1] = 13'0000000000000
    Consolidated identical input bits for $mux cell $memory\num_params$rdmux[0][4][8]$1070:
      Old ports: A=14'00000000000000, B=14'00000000000100, Y=$memory\num_params$rdmux[0][3][4]$a$1035
      New ports: A=1'0, B=1'1, Y=$memory\num_params$rdmux[0][3][4]$a$1035 [2]
      New connections: { $memory\num_params$rdmux[0][3][4]$a$1035 [13:3] $memory\num_params$rdmux[0][3][4]$a$1035 [1:0] } = 13'0000000000000
    Consolidated identical input bits for $mux cell $memory\num_params$rdmux[0][4][9]$1073:
      Old ports: A=14'00000000000100, B=14'00000000000000, Y=$memory\num_params$rdmux[0][3][4]$b$1036
      New ports: A=1'1, B=1'0, Y=$memory\num_params$rdmux[0][3][4]$b$1036 [2]
      New connections: { $memory\num_params$rdmux[0][3][4]$b$1036 [13:3] $memory\num_params$rdmux[0][3][4]$b$1036 [1:0] } = 13'0000000000000
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][0]$1435:
      Old ports: A=8'00000101, B=8'00111100, Y=$memory\params$rdmux[0][5][0]$a$1340
      New ports: A=2'01, B=2'10, Y={ $memory\params$rdmux[0][5][0]$a$1340 [3] $memory\params$rdmux[0][5][0]$a$1340 [0] }
      New connections: { $memory\params$rdmux[0][5][0]$a$1340 [7:4] $memory\params$rdmux[0][5][0]$a$1340 [2:1] } = { 2'00 $memory\params$rdmux[0][5][0]$a$1340 [3] $memory\params$rdmux[0][5][0]$a$1340 [3] 2'10 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][10]$1465:
      Old ports: A=8'01101010, B=8'10001101, Y=$memory\params$rdmux[0][5][5]$a$1355
      New ports: A=2'10, B=2'01, Y=$memory\params$rdmux[0][5][5]$a$1355 [1:0]
      New connections: $memory\params$rdmux[0][5][5]$a$1355 [7:2] = { $memory\params$rdmux[0][5][5]$a$1355 [0] $memory\params$rdmux[0][5][5]$a$1355 [1] $memory\params$rdmux[0][5][5]$a$1355 [1] 2'01 $memory\params$rdmux[0][5][5]$a$1355 [0] }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][11]$1468:
      Old ports: A=8'11101110, B=8'00001111, Y=$memory\params$rdmux[0][5][5]$b$1356
      New ports: A=2'10, B=2'01, Y={ $memory\params$rdmux[0][5][5]$b$1356 [5] $memory\params$rdmux[0][5][5]$b$1356 [0] }
      New connections: { $memory\params$rdmux[0][5][5]$b$1356 [7:6] $memory\params$rdmux[0][5][5]$b$1356 [4:1] } = { $memory\params$rdmux[0][5][5]$b$1356 [5] $memory\params$rdmux[0][5][5]$b$1356 [5] 4'0111 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][12]$1471:
      Old ports: A=8'00000111, B=8'00001110, Y=$memory\params$rdmux[0][5][6]$a$1358
      New ports: A=2'01, B=2'10, Y={ $memory\params$rdmux[0][5][6]$a$1358 [3] $memory\params$rdmux[0][5][6]$a$1358 [0] }
      New connections: { $memory\params$rdmux[0][5][6]$a$1358 [7:4] $memory\params$rdmux[0][5][6]$a$1358 [2:1] } = 6'000011
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][13]$1474:
      Old ports: A=8'00001000, B=8'00000111, Y=$memory\params$rdmux[0][5][6]$b$1359
      New ports: A=2'10, B=2'01, Y={ $memory\params$rdmux[0][5][6]$b$1359 [3] $memory\params$rdmux[0][5][6]$b$1359 [0] }
      New connections: { $memory\params$rdmux[0][5][6]$b$1359 [7:4] $memory\params$rdmux[0][5][6]$b$1359 [2:1] } = { 4'0000 $memory\params$rdmux[0][5][6]$b$1359 [0] $memory\params$rdmux[0][5][6]$b$1359 [0] }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][14]$1477:
      Old ports: A=8'00010000, B=8'00000111, Y=$memory\params$rdmux[0][5][7]$a$1361
      New ports: A=2'10, B=2'01, Y={ $memory\params$rdmux[0][5][7]$a$1361 [4] $memory\params$rdmux[0][5][7]$a$1361 [0] }
      New connections: { $memory\params$rdmux[0][5][7]$a$1361 [7:5] $memory\params$rdmux[0][5][7]$a$1361 [3:1] } = { 4'0000 $memory\params$rdmux[0][5][7]$a$1361 [0] $memory\params$rdmux[0][5][7]$a$1361 [0] }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][15]$1480:
      Old ports: A=8'00000010, B=8'00000111, Y=$memory\params$rdmux[0][5][7]$b$1362
      New ports: A=1'0, B=1'1, Y=$memory\params$rdmux[0][5][7]$b$1362 [0]
      New connections: $memory\params$rdmux[0][5][7]$b$1362 [7:1] = { 5'00000 $memory\params$rdmux[0][5][7]$b$1362 [0] 1'1 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][16]$1483:
      Old ports: A=8'00001001, B=8'00001111, Y=$memory\params$rdmux[0][5][8]$a$1364
      New ports: A=1'0, B=1'1, Y=$memory\params$rdmux[0][5][8]$a$1364 [1]
      New connections: { $memory\params$rdmux[0][5][8]$a$1364 [7:2] $memory\params$rdmux[0][5][8]$a$1364 [0] } = { 5'00001 $memory\params$rdmux[0][5][8]$a$1364 [1] 1'1 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][17]$1486:
      Old ports: A=8'00100101, B=8'00110110, Y=$memory\params$rdmux[0][5][8]$b$1365
      New ports: A=2'01, B=2'10, Y=$memory\params$rdmux[0][5][8]$b$1365 [1:0]
      New connections: $memory\params$rdmux[0][5][8]$b$1365 [7:2] = { 3'001 $memory\params$rdmux[0][5][8]$b$1365 [1] 2'01 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][18]$1489:
      Old ports: A=8'00000000, B=8'00001000, Y=$memory\params$rdmux[0][5][9]$a$1367
      New ports: A=1'0, B=1'1, Y=$memory\params$rdmux[0][5][9]$a$1367 [3]
      New connections: { $memory\params$rdmux[0][5][9]$a$1367 [7:4] $memory\params$rdmux[0][5][9]$a$1367 [2:0] } = 7'0000000
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][19]$1492:
      Old ports: A=8'00000100, B=8'00010000, Y=$memory\params$rdmux[0][5][9]$b$1368
      New ports: A=2'01, B=2'10, Y={ $memory\params$rdmux[0][5][9]$b$1368 [4] $memory\params$rdmux[0][5][9]$b$1368 [2] }
      New connections: { $memory\params$rdmux[0][5][9]$b$1368 [7:5] $memory\params$rdmux[0][5][9]$b$1368 [3] $memory\params$rdmux[0][5][9]$b$1368 [1:0] } = 6'000000
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][1]$1438:
      Old ports: A=8'00111100, B=8'00000101, Y=$memory\params$rdmux[0][5][0]$b$1341
      New ports: A=2'10, B=2'01, Y={ $memory\params$rdmux[0][5][0]$b$1341 [3] $memory\params$rdmux[0][5][0]$b$1341 [0] }
      New connections: { $memory\params$rdmux[0][5][0]$b$1341 [7:4] $memory\params$rdmux[0][5][0]$b$1341 [2:1] } = { 2'00 $memory\params$rdmux[0][5][0]$b$1341 [3] $memory\params$rdmux[0][5][0]$b$1341 [3] 2'10 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][20]$1495:
      Old ports: A=8'00001010, B=8'00001101, Y=$memory\params$rdmux[0][5][10]$a$1370
      New ports: A=2'10, B=2'01, Y=$memory\params$rdmux[0][5][10]$a$1370 [1:0]
      New connections: $memory\params$rdmux[0][5][10]$a$1370 [7:2] = { 5'00001 $memory\params$rdmux[0][5][10]$a$1370 [0] }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][21]$1498:
      Old ports: A=8'00001000, B=8'00000111, Y=$memory\params$rdmux[0][5][10]$b$1371
      New ports: A=2'10, B=2'01, Y={ $memory\params$rdmux[0][5][10]$b$1371 [3] $memory\params$rdmux[0][5][10]$b$1371 [0] }
      New connections: { $memory\params$rdmux[0][5][10]$b$1371 [7:4] $memory\params$rdmux[0][5][10]$b$1371 [2:1] } = { 4'0000 $memory\params$rdmux[0][5][10]$b$1371 [0] $memory\params$rdmux[0][5][10]$b$1371 [0] }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][22]$1501:
      Old ports: A=8'00001111, B=8'00000111, Y=$memory\params$rdmux[0][5][11]$a$1373
      New ports: A=1'1, B=1'0, Y=$memory\params$rdmux[0][5][11]$a$1373 [3]
      New connections: { $memory\params$rdmux[0][5][11]$a$1373 [7:4] $memory\params$rdmux[0][5][11]$a$1373 [2:0] } = 7'0000111
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][23]$1504:
      Old ports: A=8'00000010, B=8'00000111, Y=$memory\params$rdmux[0][5][11]$b$1374
      New ports: A=1'0, B=1'1, Y=$memory\params$rdmux[0][5][11]$b$1374 [0]
      New connections: $memory\params$rdmux[0][5][11]$b$1374 [7:1] = { 5'00000 $memory\params$rdmux[0][5][11]$b$1374 [0] 1'1 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][24]$1507:
      Old ports: A=8'00001001, B=8'00001111, Y=$memory\params$rdmux[0][5][12]$a$1376
      New ports: A=1'0, B=1'1, Y=$memory\params$rdmux[0][5][12]$a$1376 [1]
      New connections: { $memory\params$rdmux[0][5][12]$a$1376 [7:2] $memory\params$rdmux[0][5][12]$a$1376 [0] } = { 5'00001 $memory\params$rdmux[0][5][12]$a$1376 [1] 1'1 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][25]$1510:
      Old ports: A=8'00100101, B=8'00110101, Y=$memory\params$rdmux[0][5][12]$b$1377
      New ports: A=1'0, B=1'1, Y=$memory\params$rdmux[0][5][12]$b$1377 [4]
      New connections: { $memory\params$rdmux[0][5][12]$b$1377 [7:5] $memory\params$rdmux[0][5][12]$b$1377 [3:0] } = 7'0010101
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][26]$1513:
      Old ports: A=8'00000000, B=8'00001001, Y=$memory\params$rdmux[0][5][13]$a$1379
      New ports: A=1'0, B=1'1, Y=$memory\params$rdmux[0][5][13]$a$1379 [0]
      New connections: $memory\params$rdmux[0][5][13]$a$1379 [7:1] = { 4'0000 $memory\params$rdmux[0][5][13]$a$1379 [0] 2'00 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][27]$1516:
      Old ports: A=8'00000100, B=8'00010000, Y=$memory\params$rdmux[0][5][13]$b$1380
      New ports: A=2'01, B=2'10, Y={ $memory\params$rdmux[0][5][13]$b$1380 [4] $memory\params$rdmux[0][5][13]$b$1380 [2] }
      New connections: { $memory\params$rdmux[0][5][13]$b$1380 [7:5] $memory\params$rdmux[0][5][13]$b$1380 [3] $memory\params$rdmux[0][5][13]$b$1380 [1:0] } = 6'000000
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][28]$1519:
      Old ports: A=8'10000000, B=8'00000101, Y=$memory\params$rdmux[0][5][14]$a$1382
      New ports: A=2'10, B=2'01, Y={ $memory\params$rdmux[0][5][14]$a$1382 [7] $memory\params$rdmux[0][5][14]$a$1382 [0] }
      New connections: $memory\params$rdmux[0][5][14]$a$1382 [6:1] = { 4'0000 $memory\params$rdmux[0][5][14]$a$1382 [0] 1'0 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][29]$1522:
      Old ports: A=8'01111000, B=8'00000000, Y=$memory\params$rdmux[0][5][14]$b$1383
      New ports: A=1'1, B=1'0, Y=$memory\params$rdmux[0][5][14]$b$1383 [3]
      New connections: { $memory\params$rdmux[0][5][14]$b$1383 [7:4] $memory\params$rdmux[0][5][14]$b$1383 [2:0] } = { 1'0 $memory\params$rdmux[0][5][14]$b$1383 [3] $memory\params$rdmux[0][5][14]$b$1383 [3] $memory\params$rdmux[0][5][14]$b$1383 [3] 3'000 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][30]$1525:
      Old ports: A=8'00011010, B=8'00000000, Y=$memory\params$rdmux[0][5][15]$a$1385
      New ports: A=1'1, B=1'0, Y=$memory\params$rdmux[0][5][15]$a$1385 [1]
      New connections: { $memory\params$rdmux[0][5][15]$a$1385 [7:2] $memory\params$rdmux[0][5][15]$a$1385 [0] } = { 3'000 $memory\params$rdmux[0][5][15]$a$1385 [1] $memory\params$rdmux[0][5][15]$a$1385 [1] 2'00 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][31]$1528:
      Old ports: A=8'01101001, B=8'00000000, Y=$memory\params$rdmux[0][5][15]$b$1386
      New ports: A=1'1, B=1'0, Y=$memory\params$rdmux[0][5][15]$b$1386 [0]
      New connections: $memory\params$rdmux[0][5][15]$b$1386 [7:1] = { 1'0 $memory\params$rdmux[0][5][15]$b$1386 [0] $memory\params$rdmux[0][5][15]$b$1386 [0] 1'0 $memory\params$rdmux[0][5][15]$b$1386 [0] 2'00 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][32]$1531:
      Old ports: A=8'00000001, B=8'00000000, Y=$memory\params$rdmux[0][5][16]$a$1388
      New ports: A=1'1, B=1'0, Y=$memory\params$rdmux[0][5][16]$a$1388 [0]
      New connections: $memory\params$rdmux[0][5][16]$a$1388 [7:1] = 7'0000000
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][33]$1534:
      Old ports: A=8'10100000, B=8'00000000, Y=$memory\params$rdmux[0][5][16]$b$1389
      New ports: A=1'1, B=1'0, Y=$memory\params$rdmux[0][5][16]$b$1389 [5]
      New connections: { $memory\params$rdmux[0][5][16]$b$1389 [7:6] $memory\params$rdmux[0][5][16]$b$1389 [4:0] } = { $memory\params$rdmux[0][5][16]$b$1389 [5] 6'000000 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][34]$1537:
      Old ports: A=8'00000001, B=8'00000000, Y=$memory\params$rdmux[0][5][17]$a$1391
      New ports: A=1'1, B=1'0, Y=$memory\params$rdmux[0][5][17]$a$1391 [0]
      New connections: $memory\params$rdmux[0][5][17]$a$1391 [7:1] = 7'0000000
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][35]$1540:
      Old ports: A=8'10100000, B=8'00000000, Y=$memory\params$rdmux[0][5][17]$b$1392
      New ports: A=1'1, B=1'0, Y=$memory\params$rdmux[0][5][17]$b$1392 [5]
      New connections: { $memory\params$rdmux[0][5][17]$b$1392 [7:6] $memory\params$rdmux[0][5][17]$b$1392 [4:0] } = { $memory\params$rdmux[0][5][17]$b$1392 [5] 6'000000 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][36]$1543:
      Old ports: A=8'00011010, B=8'00000000, Y=$memory\params$rdmux[0][5][18]$a$1394
      New ports: A=1'1, B=1'0, Y=$memory\params$rdmux[0][5][18]$a$1394 [1]
      New connections: { $memory\params$rdmux[0][5][18]$a$1394 [7:2] $memory\params$rdmux[0][5][18]$a$1394 [0] } = { 3'000 $memory\params$rdmux[0][5][18]$a$1394 [1] $memory\params$rdmux[0][5][18]$a$1394 [1] 2'00 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][37]$1546:
      Old ports: A=8'01101001, B=8'11111111, Y=$memory\params$rdmux[0][5][18]$b$1395
      New ports: A=1'0, B=1'1, Y=$memory\params$rdmux[0][5][18]$b$1395 [1]
      New connections: { $memory\params$rdmux[0][5][18]$b$1395 [7:2] $memory\params$rdmux[0][5][18]$b$1395 [0] } = { $memory\params$rdmux[0][5][18]$b$1395 [1] 2'11 $memory\params$rdmux[0][5][18]$b$1395 [1] 1'1 $memory\params$rdmux[0][5][18]$b$1395 [1] 1'1 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][3]$1444:
      Old ports: A=8'00000101, B=8'00111100, Y=$memory\params$rdmux[0][5][1]$b$1344
      New ports: A=2'01, B=2'10, Y={ $memory\params$rdmux[0][5][1]$b$1344 [3] $memory\params$rdmux[0][5][1]$b$1344 [0] }
      New connections: { $memory\params$rdmux[0][5][1]$b$1344 [7:4] $memory\params$rdmux[0][5][1]$b$1344 [2:1] } = { 2'00 $memory\params$rdmux[0][5][1]$b$1344 [3] $memory\params$rdmux[0][5][1]$b$1344 [3] 2'10 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][4]$1447:
      Old ports: A=8'00111100, B=8'00000101, Y=$memory\params$rdmux[0][5][2]$a$1346
      New ports: A=2'10, B=2'01, Y={ $memory\params$rdmux[0][5][2]$a$1346 [3] $memory\params$rdmux[0][5][2]$a$1346 [0] }
      New connections: { $memory\params$rdmux[0][5][2]$a$1346 [7:4] $memory\params$rdmux[0][5][2]$a$1346 [2:1] } = { 2'00 $memory\params$rdmux[0][5][2]$a$1346 [3] $memory\params$rdmux[0][5][2]$a$1346 [3] 2'10 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][6]$1453:
      Old ports: A=8'00000011, B=8'10101011, Y=$memory\params$rdmux[0][5][3]$a$1349
      New ports: A=1'0, B=1'1, Y=$memory\params$rdmux[0][5][3]$a$1349 [3]
      New connections: { $memory\params$rdmux[0][5][3]$a$1349 [7:4] $memory\params$rdmux[0][5][3]$a$1349 [2:0] } = { $memory\params$rdmux[0][5][3]$a$1349 [3] 1'0 $memory\params$rdmux[0][5][3]$a$1349 [3] 4'0011 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][7]$1456:
      Old ports: A=8'00001011, B=8'00000100, Y=$memory\params$rdmux[0][5][3]$b$1350
      New ports: A=2'01, B=2'10, Y={ $memory\params$rdmux[0][5][3]$b$1350 [2] $memory\params$rdmux[0][5][3]$b$1350 [0] }
      New connections: { $memory\params$rdmux[0][5][3]$b$1350 [7:3] $memory\params$rdmux[0][5][3]$b$1350 [1] } = { 4'0000 $memory\params$rdmux[0][5][3]$b$1350 [0] $memory\params$rdmux[0][5][3]$b$1350 [0] }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][8]$1459:
      Old ports: A=8'11000101, B=8'00001101, Y=$memory\params$rdmux[0][5][4]$a$1352
      New ports: A=2'10, B=2'01, Y={ $memory\params$rdmux[0][5][4]$a$1352 [6] $memory\params$rdmux[0][5][4]$a$1352 [3] }
      New connections: { $memory\params$rdmux[0][5][4]$a$1352 [7] $memory\params$rdmux[0][5][4]$a$1352 [5:4] $memory\params$rdmux[0][5][4]$a$1352 [2:0] } = { $memory\params$rdmux[0][5][4]$a$1352 [6] 5'00101 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][9]$1462:
      Old ports: A=8'00000000, B=8'10001101, Y=$memory\params$rdmux[0][5][4]$b$1353
      New ports: A=1'0, B=1'1, Y=$memory\params$rdmux[0][5][4]$b$1353 [0]
      New connections: $memory\params$rdmux[0][5][4]$b$1353 [7:1] = { $memory\params$rdmux[0][5][4]$b$1353 [0] 3'000 $memory\params$rdmux[0][5][4]$b$1353 [0] $memory\params$rdmux[0][5][4]$b$1353 [0] 1'0 }
  Optimizing cells in module \demo.
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][3][0]$881:
      Old ports: A=$memory\cmd$rdmux[0][3][0]$a$882, B=$memory\cmd$rdmux[0][3][0]$b$883, Y=$memory\cmd$rdmux[0][2][0]$a$870
      New ports: A={ 1'0 $memory\cmd$rdmux[0][3][0]$a$882 [1:0] }, B={ $memory\cmd$rdmux[0][3][0]$b$883 [2] $memory\cmd$rdmux[0][3][0]$b$883 [0] $memory\cmd$rdmux[0][3][0]$b$883 [0] }, Y=$memory\cmd$rdmux[0][2][0]$a$870 [2:0]
      New connections: $memory\cmd$rdmux[0][2][0]$a$870 [7:3] = 5'10110
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][3][1]$884:
      Old ports: A=$memory\cmd$rdmux[0][3][1]$a$885, B=$memory\cmd$rdmux[0][3][1]$b$886, Y=$memory\cmd$rdmux[0][2][0]$b$871
      New ports: A={ 1'0 $memory\cmd$rdmux[0][3][1]$a$885 [0] }, B={ 1'1 $memory\cmd$rdmux[0][3][1]$b$886 [0] }, Y=$memory\cmd$rdmux[0][2][0]$b$871 [1:0]
      New connections: $memory\cmd$rdmux[0][2][0]$b$871 [7:2] = 6'110000
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][3][2]$887:
      Old ports: A=$memory\cmd$rdmux[0][3][2]$a$888, B=$memory\cmd$rdmux[0][3][2]$b$889, Y=$memory\cmd$rdmux[0][2][1]$a$873
      New ports: A={ 2'01 $memory\cmd$rdmux[0][3][2]$a$888 [0] }, B={ 2'10 $memory\cmd$rdmux[0][3][2]$b$889 [0] }, Y={ $memory\cmd$rdmux[0][2][1]$a$873 [5] $memory\cmd$rdmux[0][2][1]$a$873 [2] $memory\cmd$rdmux[0][2][1]$a$873 [0] }
      New connections: { $memory\cmd$rdmux[0][2][1]$a$873 [7:6] $memory\cmd$rdmux[0][2][1]$a$873 [4:3] $memory\cmd$rdmux[0][2][1]$a$873 [1] } = 5'11000
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][3][3]$890:
      Old ports: A=$memory\cmd$rdmux[0][3][3]$a$891, B=$memory\cmd$rdmux[0][3][3]$b$892, Y=$memory\cmd$rdmux[0][2][1]$b$874
      New ports: A={ $memory\cmd$rdmux[0][3][3]$a$891 [2] 2'11 $memory\cmd$rdmux[0][3][3]$a$891 [2:1] 1'0 }, B={ 1'0 $memory\cmd$rdmux[0][3][3]$b$892 [1] 1'0 $memory\cmd$rdmux[0][3][3]$b$892 [1] $memory\cmd$rdmux[0][3][3]$b$892 [1:0] }, Y={ $memory\cmd$rdmux[0][2][1]$b$874 [6] $memory\cmd$rdmux[0][2][1]$b$874 [4:0] }
      New connections: { $memory\cmd$rdmux[0][2][1]$b$874 [7] $memory\cmd$rdmux[0][2][1]$b$874 [5] } = { $memory\cmd$rdmux[0][2][1]$b$874 [6] 1'1 }
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][3][4]$893:
      Old ports: A=$memory\cmd$rdmux[0][3][4]$a$894, B=$memory\cmd$rdmux[0][3][4]$b$895, Y=$memory\cmd$rdmux[0][2][2]$a$876
      New ports: A={ 1'0 $memory\cmd$rdmux[0][3][4]$a$894 [1:0] }, B={ $memory\cmd$rdmux[0][3][4]$b$895 [2] $memory\cmd$rdmux[0][3][4]$b$895 [0] $memory\cmd$rdmux[0][3][4]$b$895 [0] }, Y=$memory\cmd$rdmux[0][2][2]$a$876 [2:0]
      New connections: $memory\cmd$rdmux[0][2][2]$a$876 [7:3] = 5'00101
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][3][5]$896:
      Old ports: A=$memory\cmd$rdmux[0][3][5]$a$897, B=$memory\cmd$rdmux[0][3][5]$b$898, Y=$memory\cmd$rdmux[0][2][2]$b$877
      New ports: A={ 3'101 $memory\cmd$rdmux[0][3][5]$a$897 [0] }, B={ $memory\cmd$rdmux[0][3][5]$b$898 [2] $memory\cmd$rdmux[0][3][5]$b$898 [2] 2'00 }, Y=$memory\cmd$rdmux[0][2][2]$b$877 [3:0]
      New connections: $memory\cmd$rdmux[0][2][2]$b$877 [7:4] = { 2'00 $memory\cmd$rdmux[0][2][2]$b$877 [3] 1'0 }
    Consolidated identical input bits for $mux cell $memory\num_params$rdmux[0][3][0]$1022:
      Old ports: A=$memory\num_params$rdmux[0][3][0]$a$1023, B=$memory\num_params$rdmux[0][3][0]$b$1024, Y=$memory\num_params$rdmux[0][2][0]$a$1011
      New ports: A=3'011, B={ $memory\num_params$rdmux[0][3][0]$b$1024 [1] $memory\num_params$rdmux[0][3][0]$b$1024 [1:0] }, Y=$memory\num_params$rdmux[0][2][0]$a$1011 [2:0]
      New connections: $memory\num_params$rdmux[0][2][0]$a$1011 [13:3] = 11'00000000000
    Consolidated identical input bits for $mux cell $memory\num_params$rdmux[0][3][1]$1025:
      Old ports: A=$memory\num_params$rdmux[0][3][1]$a$1026, B=14'00000000000010, Y=$memory\num_params$rdmux[0][2][0]$b$1012
      New ports: A={ $memory\num_params$rdmux[0][3][1]$a$1026 [1] 1'1 }, B=2'10, Y=$memory\num_params$rdmux[0][2][0]$b$1012 [1:0]
      New connections: $memory\num_params$rdmux[0][2][0]$b$1012 [13:2] = 12'000000000000
    Consolidated identical input bits for $mux cell $memory\num_params$rdmux[0][3][2]$1028:
      Old ports: A=$memory\num_params$rdmux[0][3][2]$a$1029, B=14'00000000010000, Y=$memory\num_params$rdmux[0][2][1]$a$1014
      New ports: A={ 1'0 $memory\num_params$rdmux[0][3][2]$a$1029 [1:0] }, B=3'100, Y={ $memory\num_params$rdmux[0][2][1]$a$1014 [4] $memory\num_params$rdmux[0][2][1]$a$1014 [1:0] }
      New connections: { $memory\num_params$rdmux[0][2][1]$a$1014 [13:5] $memory\num_params$rdmux[0][2][1]$a$1014 [3:2] } = 11'00000000000
    Consolidated identical input bits for $mux cell $memory\num_params$rdmux[0][3][3]$1031:
      Old ports: A=$memory\num_params$rdmux[0][3][3]$a$1032, B=$memory\num_params$rdmux[0][3][3]$b$1033, Y=$memory\num_params$rdmux[0][2][1]$b$1015
      New ports: A=1'1, B=$memory\num_params$rdmux[0][3][3]$b$1033 [0], Y=$memory\num_params$rdmux[0][2][1]$b$1015 [0]
      New connections: $memory\num_params$rdmux[0][2][1]$b$1015 [13:1] = 13'0000000000000
    Consolidated identical input bits for $mux cell $memory\num_params$rdmux[0][3][4]$1034:
      Old ports: A=$memory\num_params$rdmux[0][3][4]$a$1035, B=$memory\num_params$rdmux[0][3][4]$b$1036, Y=$memory\num_params$rdmux[0][2][2]$a$1017
      New ports: A=$memory\num_params$rdmux[0][3][4]$a$1035 [2], B=$memory\num_params$rdmux[0][3][4]$b$1036 [2], Y=$memory\num_params$rdmux[0][2][2]$a$1017 [2]
      New connections: { $memory\num_params$rdmux[0][2][2]$a$1017 [13:3] $memory\num_params$rdmux[0][2][2]$a$1017 [1:0] } = 13'0000000000000
    Consolidated identical input bits for $mux cell $memory\num_params$rdmux[0][3][5]$1037:
      Old ports: A=$memory\num_params$rdmux[0][3][5]$a$1038, B=$memory\num_params$rdmux[0][3][5]$b$1039, Y=$memory\num_params$rdmux[0][2][2]$b$1018
      New ports: A=2'01, B={ $memory\num_params$rdmux[0][3][5]$b$1039 [9] 1'0 }, Y={ $memory\num_params$rdmux[0][2][2]$b$1018 [9] $memory\num_params$rdmux[0][2][2]$b$1018 [2] }
      New connections: { $memory\num_params$rdmux[0][2][2]$b$1018 [13:10] $memory\num_params$rdmux[0][2][2]$b$1018 [8:3] $memory\num_params$rdmux[0][2][2]$b$1018 [1:0] } = { $memory\num_params$rdmux[0][2][2]$b$1018 [9] $memory\num_params$rdmux[0][2][2]$b$1018 [9] 10'0000000000 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][0]$1339:
      Old ports: A=$memory\params$rdmux[0][5][0]$a$1340, B=$memory\params$rdmux[0][5][0]$b$1341, Y=$memory\params$rdmux[0][4][0]$a$1292
      New ports: A={ $memory\params$rdmux[0][5][0]$a$1340 [3] $memory\params$rdmux[0][5][0]$a$1340 [0] }, B={ $memory\params$rdmux[0][5][0]$b$1341 [3] $memory\params$rdmux[0][5][0]$b$1341 [0] }, Y={ $memory\params$rdmux[0][4][0]$a$1292 [3] $memory\params$rdmux[0][4][0]$a$1292 [0] }
      New connections: { $memory\params$rdmux[0][4][0]$a$1292 [7:4] $memory\params$rdmux[0][4][0]$a$1292 [2:1] } = { 2'00 $memory\params$rdmux[0][4][0]$a$1292 [3] $memory\params$rdmux[0][4][0]$a$1292 [3] 2'10 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][10]$1369:
      Old ports: A=$memory\params$rdmux[0][5][10]$a$1370, B=$memory\params$rdmux[0][5][10]$b$1371, Y=$memory\params$rdmux[0][4][5]$a$1307
      New ports: A={ 1'1 $memory\params$rdmux[0][5][10]$a$1370 [1:0] }, B={ $memory\params$rdmux[0][5][10]$b$1371 [3] $memory\params$rdmux[0][5][10]$b$1371 [0] $memory\params$rdmux[0][5][10]$b$1371 [0] }, Y={ $memory\params$rdmux[0][4][5]$a$1307 [3] $memory\params$rdmux[0][4][5]$a$1307 [1:0] }
      New connections: { $memory\params$rdmux[0][4][5]$a$1307 [7:4] $memory\params$rdmux[0][4][5]$a$1307 [2] } = { 4'0000 $memory\params$rdmux[0][4][5]$a$1307 [0] }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][11]$1372:
      Old ports: A=$memory\params$rdmux[0][5][11]$a$1373, B=$memory\params$rdmux[0][5][11]$b$1374, Y=$memory\params$rdmux[0][4][5]$b$1308
      New ports: A={ $memory\params$rdmux[0][5][11]$a$1373 [3] 1'1 }, B={ 1'0 $memory\params$rdmux[0][5][11]$b$1374 [0] }, Y={ $memory\params$rdmux[0][4][5]$b$1308 [3] $memory\params$rdmux[0][4][5]$b$1308 [0] }
      New connections: { $memory\params$rdmux[0][4][5]$b$1308 [7:4] $memory\params$rdmux[0][4][5]$b$1308 [2:1] } = { 4'0000 $memory\params$rdmux[0][4][5]$b$1308 [0] 1'1 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][12]$1375:
      Old ports: A=$memory\params$rdmux[0][5][12]$a$1376, B=$memory\params$rdmux[0][5][12]$b$1377, Y=$memory\params$rdmux[0][4][6]$a$1310
      New ports: A={ 3'001 $memory\params$rdmux[0][5][12]$a$1376 [1] $memory\params$rdmux[0][5][12]$a$1376 [1] }, B={ 1'1 $memory\params$rdmux[0][5][12]$b$1377 [4] 3'010 }, Y=$memory\params$rdmux[0][4][6]$a$1310 [5:1]
      New connections: { $memory\params$rdmux[0][4][6]$a$1310 [7:6] $memory\params$rdmux[0][4][6]$a$1310 [0] } = 3'001
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][13]$1378:
      Old ports: A=$memory\params$rdmux[0][5][13]$a$1379, B=$memory\params$rdmux[0][5][13]$b$1380, Y=$memory\params$rdmux[0][4][6]$b$1311
      New ports: A={ 2'00 $memory\params$rdmux[0][5][13]$a$1379 [0] }, B={ $memory\params$rdmux[0][5][13]$b$1380 [4] $memory\params$rdmux[0][5][13]$b$1380 [2] 1'0 }, Y={ $memory\params$rdmux[0][4][6]$b$1311 [4] $memory\params$rdmux[0][4][6]$b$1311 [2] $memory\params$rdmux[0][4][6]$b$1311 [0] }
      New connections: { $memory\params$rdmux[0][4][6]$b$1311 [7:5] $memory\params$rdmux[0][4][6]$b$1311 [3] $memory\params$rdmux[0][4][6]$b$1311 [1] } = { 3'000 $memory\params$rdmux[0][4][6]$b$1311 [0] 1'0 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][14]$1381:
      Old ports: A=$memory\params$rdmux[0][5][14]$a$1382, B=$memory\params$rdmux[0][5][14]$b$1383, Y=$memory\params$rdmux[0][4][7]$a$1313
      New ports: A={ $memory\params$rdmux[0][5][14]$a$1382 [7] 1'0 $memory\params$rdmux[0][5][14]$a$1382 [0] }, B={ 1'0 $memory\params$rdmux[0][5][14]$b$1383 [3] 1'0 }, Y={ $memory\params$rdmux[0][4][7]$a$1313 [7] $memory\params$rdmux[0][4][7]$a$1313 [3] $memory\params$rdmux[0][4][7]$a$1313 [0] }
      New connections: { $memory\params$rdmux[0][4][7]$a$1313 [6:4] $memory\params$rdmux[0][4][7]$a$1313 [2:1] } = { $memory\params$rdmux[0][4][7]$a$1313 [3] $memory\params$rdmux[0][4][7]$a$1313 [3] $memory\params$rdmux[0][4][7]$a$1313 [3] $memory\params$rdmux[0][4][7]$a$1313 [0] 1'0 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][15]$1384:
      Old ports: A=$memory\params$rdmux[0][5][15]$a$1385, B=$memory\params$rdmux[0][5][15]$b$1386, Y=$memory\params$rdmux[0][4][7]$b$1314
      New ports: A={ $memory\params$rdmux[0][5][15]$a$1385 [1] $memory\params$rdmux[0][5][15]$a$1385 [1] 1'0 }, B={ $memory\params$rdmux[0][5][15]$b$1386 [0] 1'0 $memory\params$rdmux[0][5][15]$b$1386 [0] }, Y={ $memory\params$rdmux[0][4][7]$b$1314 [3] $memory\params$rdmux[0][4][7]$b$1314 [1:0] }
      New connections: { $memory\params$rdmux[0][4][7]$b$1314 [7:4] $memory\params$rdmux[0][4][7]$b$1314 [2] } = { 1'0 $memory\params$rdmux[0][4][7]$b$1314 [0] $memory\params$rdmux[0][4][7]$b$1314 [0] $memory\params$rdmux[0][4][7]$b$1314 [1] 1'0 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][16]$1387:
      Old ports: A=$memory\params$rdmux[0][5][16]$a$1388, B=$memory\params$rdmux[0][5][16]$b$1389, Y=$memory\params$rdmux[0][4][8]$a$1316
      New ports: A={ 1'0 $memory\params$rdmux[0][5][16]$a$1388 [0] }, B={ $memory\params$rdmux[0][5][16]$b$1389 [5] 1'0 }, Y={ $memory\params$rdmux[0][4][8]$a$1316 [5] $memory\params$rdmux[0][4][8]$a$1316 [0] }
      New connections: { $memory\params$rdmux[0][4][8]$a$1316 [7:6] $memory\params$rdmux[0][4][8]$a$1316 [4:1] } = { $memory\params$rdmux[0][4][8]$a$1316 [5] 5'00000 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][17]$1390:
      Old ports: A=$memory\params$rdmux[0][5][17]$a$1391, B=$memory\params$rdmux[0][5][17]$b$1392, Y=$memory\params$rdmux[0][4][8]$b$1317
      New ports: A={ 1'0 $memory\params$rdmux[0][5][17]$a$1391 [0] }, B={ $memory\params$rdmux[0][5][17]$b$1392 [5] 1'0 }, Y={ $memory\params$rdmux[0][4][8]$b$1317 [5] $memory\params$rdmux[0][4][8]$b$1317 [0] }
      New connections: { $memory\params$rdmux[0][4][8]$b$1317 [7:6] $memory\params$rdmux[0][4][8]$b$1317 [4:1] } = { $memory\params$rdmux[0][4][8]$b$1317 [5] 5'00000 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][18]$1393:
      Old ports: A=$memory\params$rdmux[0][5][18]$a$1394, B=$memory\params$rdmux[0][5][18]$b$1395, Y=$memory\params$rdmux[0][4][9]$a$1319
      New ports: A={ $memory\params$rdmux[0][5][18]$a$1394 [1] 1'0 $memory\params$rdmux[0][5][18]$a$1394 [1] 1'0 }, B={ 1'1 $memory\params$rdmux[0][5][18]$b$1395 [1] $memory\params$rdmux[0][5][18]$b$1395 [1] 1'1 }, Y=$memory\params$rdmux[0][4][9]$a$1319 [3:0]
      New connections: $memory\params$rdmux[0][4][9]$a$1319 [7:4] = { $memory\params$rdmux[0][4][9]$a$1319 [2] $memory\params$rdmux[0][4][9]$a$1319 [0] $memory\params$rdmux[0][4][9]$a$1319 [0] $memory\params$rdmux[0][4][9]$a$1319 [1] }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][1]$1342:
      Old ports: A=$memory\params$rdmux[0][5][1]$a$1343, B=$memory\params$rdmux[0][5][1]$b$1344, Y=$memory\params$rdmux[0][4][0]$b$1293
      New ports: A=2'10, B={ $memory\params$rdmux[0][5][1]$b$1344 [3] $memory\params$rdmux[0][5][1]$b$1344 [0] }, Y={ $memory\params$rdmux[0][4][0]$b$1293 [3] $memory\params$rdmux[0][4][0]$b$1293 [0] }
      New connections: { $memory\params$rdmux[0][4][0]$b$1293 [7:4] $memory\params$rdmux[0][4][0]$b$1293 [2:1] } = { 2'00 $memory\params$rdmux[0][4][0]$b$1293 [3] $memory\params$rdmux[0][4][0]$b$1293 [3] 2'10 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][2]$1345:
      Old ports: A=$memory\params$rdmux[0][5][2]$a$1346, B=8'00111100, Y=$memory\params$rdmux[0][4][1]$a$1295
      New ports: A={ $memory\params$rdmux[0][5][2]$a$1346 [3] $memory\params$rdmux[0][5][2]$a$1346 [0] }, B=2'10, Y={ $memory\params$rdmux[0][4][1]$a$1295 [3] $memory\params$rdmux[0][4][1]$a$1295 [0] }
      New connections: { $memory\params$rdmux[0][4][1]$a$1295 [7:4] $memory\params$rdmux[0][4][1]$a$1295 [2:1] } = { 2'00 $memory\params$rdmux[0][4][1]$a$1295 [3] $memory\params$rdmux[0][4][1]$a$1295 [3] 2'10 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][3]$1348:
      Old ports: A=$memory\params$rdmux[0][5][3]$a$1349, B=$memory\params$rdmux[0][5][3]$b$1350, Y=$memory\params$rdmux[0][4][1]$b$1296
      New ports: A={ $memory\params$rdmux[0][5][3]$a$1349 [3] $memory\params$rdmux[0][5][3]$a$1349 [3] 2'01 }, B={ 1'0 $memory\params$rdmux[0][5][3]$b$1350 [0] $memory\params$rdmux[0][5][3]$b$1350 [2] $memory\params$rdmux[0][5][3]$b$1350 [0] }, Y={ $memory\params$rdmux[0][4][1]$b$1296 [5] $memory\params$rdmux[0][4][1]$b$1296 [3:2] $memory\params$rdmux[0][4][1]$b$1296 [0] }
      New connections: { $memory\params$rdmux[0][4][1]$b$1296 [7:6] $memory\params$rdmux[0][4][1]$b$1296 [4] $memory\params$rdmux[0][4][1]$b$1296 [1] } = { $memory\params$rdmux[0][4][1]$b$1296 [5] 2'00 $memory\params$rdmux[0][4][1]$b$1296 [0] }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][4]$1351:
      Old ports: A=$memory\params$rdmux[0][5][4]$a$1352, B=$memory\params$rdmux[0][5][4]$b$1353, Y=$memory\params$rdmux[0][4][2]$a$1298
      New ports: A={ $memory\params$rdmux[0][5][4]$a$1352 [6] $memory\params$rdmux[0][5][4]$a$1352 [6] $memory\params$rdmux[0][5][4]$a$1352 [3] 1'1 }, B={ $memory\params$rdmux[0][5][4]$b$1353 [0] 1'0 $memory\params$rdmux[0][5][4]$b$1353 [0] $memory\params$rdmux[0][5][4]$b$1353 [0] }, Y={ $memory\params$rdmux[0][4][2]$a$1298 [7:6] $memory\params$rdmux[0][4][2]$a$1298 [3] $memory\params$rdmux[0][4][2]$a$1298 [0] }
      New connections: { $memory\params$rdmux[0][4][2]$a$1298 [5:4] $memory\params$rdmux[0][4][2]$a$1298 [2:1] } = { 2'00 $memory\params$rdmux[0][4][2]$a$1298 [0] 1'0 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][5]$1354:
      Old ports: A=$memory\params$rdmux[0][5][5]$a$1355, B=$memory\params$rdmux[0][5][5]$b$1356, Y=$memory\params$rdmux[0][4][2]$b$1299
      New ports: A={ $memory\params$rdmux[0][5][5]$a$1355 [0] $memory\params$rdmux[0][5][5]$a$1355 [1:0] $memory\params$rdmux[0][5][5]$a$1355 [1:0] }, B={ $memory\params$rdmux[0][5][5]$b$1356 [5] $memory\params$rdmux[0][5][5]$b$1356 [5] 2'11 $memory\params$rdmux[0][5][5]$b$1356 [0] }, Y={ $memory\params$rdmux[0][4][2]$b$1299 [7] $memory\params$rdmux[0][4][2]$b$1299 [5] $memory\params$rdmux[0][4][2]$b$1299 [2:0] }
      New connections: { $memory\params$rdmux[0][4][2]$b$1299 [6] $memory\params$rdmux[0][4][2]$b$1299 [4:3] } = { $memory\params$rdmux[0][4][2]$b$1299 [5] 2'01 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][6]$1357:
      Old ports: A=$memory\params$rdmux[0][5][6]$a$1358, B=$memory\params$rdmux[0][5][6]$b$1359, Y=$memory\params$rdmux[0][4][3]$a$1301
      New ports: A={ $memory\params$rdmux[0][5][6]$a$1358 [3] 1'1 $memory\params$rdmux[0][5][6]$a$1358 [0] }, B={ $memory\params$rdmux[0][5][6]$b$1359 [3] $memory\params$rdmux[0][5][6]$b$1359 [0] $memory\params$rdmux[0][5][6]$b$1359 [0] }, Y={ $memory\params$rdmux[0][4][3]$a$1301 [3] $memory\params$rdmux[0][4][3]$a$1301 [1:0] }
      New connections: { $memory\params$rdmux[0][4][3]$a$1301 [7:4] $memory\params$rdmux[0][4][3]$a$1301 [2] } = { 4'0000 $memory\params$rdmux[0][4][3]$a$1301 [1] }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][7]$1360:
      Old ports: A=$memory\params$rdmux[0][5][7]$a$1361, B=$memory\params$rdmux[0][5][7]$b$1362, Y=$memory\params$rdmux[0][4][3]$b$1302
      New ports: A={ $memory\params$rdmux[0][5][7]$a$1361 [4] $memory\params$rdmux[0][5][7]$a$1361 [0] $memory\params$rdmux[0][5][7]$a$1361 [0] }, B={ 2'01 $memory\params$rdmux[0][5][7]$b$1362 [0] }, Y={ $memory\params$rdmux[0][4][3]$b$1302 [4] $memory\params$rdmux[0][4][3]$b$1302 [1:0] }
      New connections: { $memory\params$rdmux[0][4][3]$b$1302 [7:5] $memory\params$rdmux[0][4][3]$b$1302 [3:2] } = { 4'0000 $memory\params$rdmux[0][4][3]$b$1302 [0] }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][8]$1363:
      Old ports: A=$memory\params$rdmux[0][5][8]$a$1364, B=$memory\params$rdmux[0][5][8]$b$1365, Y=$memory\params$rdmux[0][4][4]$a$1304
      New ports: A={ 3'001 $memory\params$rdmux[0][5][8]$a$1364 [1] $memory\params$rdmux[0][5][8]$a$1364 [1] 1'1 }, B={ 1'1 $memory\params$rdmux[0][5][8]$b$1365 [1] 2'01 $memory\params$rdmux[0][5][8]$b$1365 [1:0] }, Y=$memory\params$rdmux[0][4][4]$a$1304 [5:0]
      New connections: $memory\params$rdmux[0][4][4]$a$1304 [7:6] = 2'00
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][9]$1366:
      Old ports: A=$memory\params$rdmux[0][5][9]$a$1367, B=$memory\params$rdmux[0][5][9]$b$1368, Y=$memory\params$rdmux[0][4][4]$b$1305
      New ports: A={ 1'0 $memory\params$rdmux[0][5][9]$a$1367 [3] 1'0 }, B={ $memory\params$rdmux[0][5][9]$b$1368 [4] 1'0 $memory\params$rdmux[0][5][9]$b$1368 [2] }, Y=$memory\params$rdmux[0][4][4]$b$1305 [4:2]
      New connections: { $memory\params$rdmux[0][4][4]$b$1305 [7:5] $memory\params$rdmux[0][4][4]$b$1305 [1:0] } = 5'00000
  Optimizing cells in module \demo.
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][2][0]$869:
      Old ports: A=$memory\cmd$rdmux[0][2][0]$a$870, B=$memory\cmd$rdmux[0][2][0]$b$871, Y=$memory\cmd$rdmux[0][1][0]$a$864
      New ports: A={ 2'01 $memory\cmd$rdmux[0][2][0]$a$870 [2:0] }, B={ 3'100 $memory\cmd$rdmux[0][2][0]$b$871 [1:0] }, Y={ $memory\cmd$rdmux[0][1][0]$a$864 [6] $memory\cmd$rdmux[0][1][0]$a$864 [4] $memory\cmd$rdmux[0][1][0]$a$864 [2:0] }
      New connections: { $memory\cmd$rdmux[0][1][0]$a$864 [7] $memory\cmd$rdmux[0][1][0]$a$864 [5] $memory\cmd$rdmux[0][1][0]$a$864 [3] } = { 1'1 $memory\cmd$rdmux[0][1][0]$a$864 [4] 1'0 }
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][2][1]$872:
      Old ports: A=$memory\cmd$rdmux[0][2][1]$a$873, B=$memory\cmd$rdmux[0][2][1]$b$874, Y=$memory\cmd$rdmux[0][1][0]$b$865
      New ports: A={ 1'1 $memory\cmd$rdmux[0][2][1]$a$873 [5] 2'00 $memory\cmd$rdmux[0][2][1]$a$873 [2] 1'0 $memory\cmd$rdmux[0][2][1]$a$873 [0] }, B={ $memory\cmd$rdmux[0][2][1]$b$874 [6] 1'1 $memory\cmd$rdmux[0][2][1]$b$874 [4:0] }, Y=$memory\cmd$rdmux[0][1][0]$b$865 [6:0]
      New connections: $memory\cmd$rdmux[0][1][0]$b$865 [7] = $memory\cmd$rdmux[0][1][0]$b$865 [6]
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][2][2]$875:
      Old ports: A=$memory\cmd$rdmux[0][2][2]$a$876, B=$memory\cmd$rdmux[0][2][2]$b$877, Y=$memory\cmd$rdmux[0][1][1]$a$867
      New ports: A={ 1'1 $memory\cmd$rdmux[0][2][2]$a$876 [2:0] }, B=$memory\cmd$rdmux[0][2][2]$b$877 [3:0], Y=$memory\cmd$rdmux[0][1][1]$a$867 [3:0]
      New connections: $memory\cmd$rdmux[0][1][1]$a$867 [7:4] = { 2'00 $memory\cmd$rdmux[0][1][1]$a$867 [3] 1'0 }
    Consolidated identical input bits for $mux cell $memory\num_params$rdmux[0][2][0]$1010:
      Old ports: A=$memory\num_params$rdmux[0][2][0]$a$1011, B=$memory\num_params$rdmux[0][2][0]$b$1012, Y=$memory\num_params$rdmux[0][1][0]$a$1005
      New ports: A=$memory\num_params$rdmux[0][2][0]$a$1011 [2:0], B={ 1'0 $memory\num_params$rdmux[0][2][0]$b$1012 [1:0] }, Y=$memory\num_params$rdmux[0][1][0]$a$1005 [2:0]
      New connections: $memory\num_params$rdmux[0][1][0]$a$1005 [13:3] = 11'00000000000
    Consolidated identical input bits for $mux cell $memory\num_params$rdmux[0][2][1]$1013:
      Old ports: A=$memory\num_params$rdmux[0][2][1]$a$1014, B=$memory\num_params$rdmux[0][2][1]$b$1015, Y=$memory\num_params$rdmux[0][1][0]$b$1006
      New ports: A={ $memory\num_params$rdmux[0][2][1]$a$1014 [4] $memory\num_params$rdmux[0][2][1]$a$1014 [1:0] }, B={ 2'00 $memory\num_params$rdmux[0][2][1]$b$1015 [0] }, Y={ $memory\num_params$rdmux[0][1][0]$b$1006 [4] $memory\num_params$rdmux[0][1][0]$b$1006 [1:0] }
      New connections: { $memory\num_params$rdmux[0][1][0]$b$1006 [13:5] $memory\num_params$rdmux[0][1][0]$b$1006 [3:2] } = 11'00000000000
    Consolidated identical input bits for $mux cell $memory\num_params$rdmux[0][2][2]$1016:
      Old ports: A=$memory\num_params$rdmux[0][2][2]$a$1017, B=$memory\num_params$rdmux[0][2][2]$b$1018, Y=$memory\num_params$rdmux[0][1][1]$a$1008
      New ports: A={ 1'0 $memory\num_params$rdmux[0][2][2]$a$1017 [2] }, B={ $memory\num_params$rdmux[0][2][2]$b$1018 [9] $memory\num_params$rdmux[0][2][2]$b$1018 [2] }, Y={ $memory\num_params$rdmux[0][1][1]$a$1008 [9] $memory\num_params$rdmux[0][1][1]$a$1008 [2] }
      New connections: { $memory\num_params$rdmux[0][1][1]$a$1008 [13:10] $memory\num_params$rdmux[0][1][1]$a$1008 [8:3] $memory\num_params$rdmux[0][1][1]$a$1008 [1:0] } = { $memory\num_params$rdmux[0][1][1]$a$1008 [9] $memory\num_params$rdmux[0][1][1]$a$1008 [9] 10'0000000000 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][4][0]$1291:
      Old ports: A=$memory\params$rdmux[0][4][0]$a$1292, B=$memory\params$rdmux[0][4][0]$b$1293, Y=$memory\params$rdmux[0][3][0]$a$1268
      New ports: A={ $memory\params$rdmux[0][4][0]$a$1292 [3] $memory\params$rdmux[0][4][0]$a$1292 [0] }, B={ $memory\params$rdmux[0][4][0]$b$1293 [3] $memory\params$rdmux[0][4][0]$b$1293 [0] }, Y={ $memory\params$rdmux[0][3][0]$a$1268 [3] $memory\params$rdmux[0][3][0]$a$1268 [0] }
      New connections: { $memory\params$rdmux[0][3][0]$a$1268 [7:4] $memory\params$rdmux[0][3][0]$a$1268 [2:1] } = { 2'00 $memory\params$rdmux[0][3][0]$a$1268 [3] $memory\params$rdmux[0][3][0]$a$1268 [3] 2'10 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][4][1]$1294:
      Old ports: A=$memory\params$rdmux[0][4][1]$a$1295, B=$memory\params$rdmux[0][4][1]$b$1296, Y=$memory\params$rdmux[0][3][0]$b$1269
      New ports: A={ 1'0 $memory\params$rdmux[0][4][1]$a$1295 [3] $memory\params$rdmux[0][4][1]$a$1295 [3] $memory\params$rdmux[0][4][1]$a$1295 [3] 2'10 $memory\params$rdmux[0][4][1]$a$1295 [0] }, B={ $memory\params$rdmux[0][4][1]$b$1296 [5] $memory\params$rdmux[0][4][1]$b$1296 [5] 1'0 $memory\params$rdmux[0][4][1]$b$1296 [3:2] $memory\params$rdmux[0][4][1]$b$1296 [0] $memory\params$rdmux[0][4][1]$b$1296 [0] }, Y={ $memory\params$rdmux[0][3][0]$b$1269 [7] $memory\params$rdmux[0][3][0]$b$1269 [5:0] }
      New connections: $memory\params$rdmux[0][3][0]$b$1269 [6] = 1'0
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][4][2]$1297:
      Old ports: A=$memory\params$rdmux[0][4][2]$a$1298, B=$memory\params$rdmux[0][4][2]$b$1299, Y=$memory\params$rdmux[0][3][1]$a$1271
      New ports: A={ $memory\params$rdmux[0][4][2]$a$1298 [7:6] 1'0 $memory\params$rdmux[0][4][2]$a$1298 [3] $memory\params$rdmux[0][4][2]$a$1298 [0] 1'0 $memory\params$rdmux[0][4][2]$a$1298 [0] }, B={ $memory\params$rdmux[0][4][2]$b$1299 [7] $memory\params$rdmux[0][4][2]$b$1299 [5] $memory\params$rdmux[0][4][2]$b$1299 [5] 1'1 $memory\params$rdmux[0][4][2]$b$1299 [2:0] }, Y={ $memory\params$rdmux[0][3][1]$a$1271 [7:5] $memory\params$rdmux[0][3][1]$a$1271 [3:0] }
      New connections: $memory\params$rdmux[0][3][1]$a$1271 [4] = 1'0
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][4][3]$1300:
      Old ports: A=$memory\params$rdmux[0][4][3]$a$1301, B=$memory\params$rdmux[0][4][3]$b$1302, Y=$memory\params$rdmux[0][3][1]$b$1272
      New ports: A={ 1'0 $memory\params$rdmux[0][4][3]$a$1301 [3] $memory\params$rdmux[0][4][3]$a$1301 [1] $memory\params$rdmux[0][4][3]$a$1301 [1:0] }, B={ $memory\params$rdmux[0][4][3]$b$1302 [4] 1'0 $memory\params$rdmux[0][4][3]$b$1302 [0] $memory\params$rdmux[0][4][3]$b$1302 [1:0] }, Y=$memory\params$rdmux[0][3][1]$b$1272 [4:0]
      New connections: $memory\params$rdmux[0][3][1]$b$1272 [7:5] = 3'000
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][4][4]$1303:
      Old ports: A=$memory\params$rdmux[0][4][4]$a$1304, B=$memory\params$rdmux[0][4][4]$b$1305, Y=$memory\params$rdmux[0][3][2]$a$1274
      New ports: A=$memory\params$rdmux[0][4][4]$a$1304 [5:0], B={ 1'0 $memory\params$rdmux[0][4][4]$b$1305 [4:2] 2'00 }, Y=$memory\params$rdmux[0][3][2]$a$1274 [5:0]
      New connections: $memory\params$rdmux[0][3][2]$a$1274 [7:6] = 2'00
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][4][5]$1306:
      Old ports: A=$memory\params$rdmux[0][4][5]$a$1307, B=$memory\params$rdmux[0][4][5]$b$1308, Y=$memory\params$rdmux[0][3][2]$b$1275
      New ports: A={ $memory\params$rdmux[0][4][5]$a$1307 [3] $memory\params$rdmux[0][4][5]$a$1307 [1:0] }, B={ $memory\params$rdmux[0][4][5]$b$1308 [3] 1'1 $memory\params$rdmux[0][4][5]$b$1308 [0] }, Y={ $memory\params$rdmux[0][3][2]$b$1275 [3] $memory\params$rdmux[0][3][2]$b$1275 [1:0] }
      New connections: { $memory\params$rdmux[0][3][2]$b$1275 [7:4] $memory\params$rdmux[0][3][2]$b$1275 [2] } = { 4'0000 $memory\params$rdmux[0][3][2]$b$1275 [0] }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][4][6]$1309:
      Old ports: A=$memory\params$rdmux[0][4][6]$a$1310, B=$memory\params$rdmux[0][4][6]$b$1311, Y=$memory\params$rdmux[0][3][3]$a$1277
      New ports: A={ $memory\params$rdmux[0][4][6]$a$1310 [5:1] 1'1 }, B={ 1'0 $memory\params$rdmux[0][4][6]$b$1311 [4] $memory\params$rdmux[0][4][6]$b$1311 [0] $memory\params$rdmux[0][4][6]$b$1311 [2] 1'0 $memory\params$rdmux[0][4][6]$b$1311 [0] }, Y=$memory\params$rdmux[0][3][3]$a$1277 [5:0]
      New connections: $memory\params$rdmux[0][3][3]$a$1277 [7:6] = 2'00
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][4][7]$1312:
      Old ports: A=$memory\params$rdmux[0][4][7]$a$1313, B=$memory\params$rdmux[0][4][7]$b$1314, Y=$memory\params$rdmux[0][3][3]$b$1278
      New ports: A={ $memory\params$rdmux[0][4][7]$a$1313 [7] $memory\params$rdmux[0][4][7]$a$1313 [3] $memory\params$rdmux[0][4][7]$a$1313 [3] $memory\params$rdmux[0][4][7]$a$1313 [3] $memory\params$rdmux[0][4][7]$a$1313 [0] 1'0 $memory\params$rdmux[0][4][7]$a$1313 [0] }, B={ 1'0 $memory\params$rdmux[0][4][7]$b$1314 [0] $memory\params$rdmux[0][4][7]$b$1314 [1] $memory\params$rdmux[0][4][7]$b$1314 [3] 1'0 $memory\params$rdmux[0][4][7]$b$1314 [1:0] }, Y={ $memory\params$rdmux[0][3][3]$b$1278 [7] $memory\params$rdmux[0][3][3]$b$1278 [5:0] }
      New connections: $memory\params$rdmux[0][3][3]$b$1278 [6] = $memory\params$rdmux[0][3][3]$b$1278 [5]
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][4][8]$1315:
      Old ports: A=$memory\params$rdmux[0][4][8]$a$1316, B=$memory\params$rdmux[0][4][8]$b$1317, Y=$memory\params$rdmux[0][3][4]$a$1280
      New ports: A={ $memory\params$rdmux[0][4][8]$a$1316 [5] $memory\params$rdmux[0][4][8]$a$1316 [0] }, B={ $memory\params$rdmux[0][4][8]$b$1317 [5] $memory\params$rdmux[0][4][8]$b$1317 [0] }, Y={ $memory\params$rdmux[0][3][4]$a$1280 [5] $memory\params$rdmux[0][3][4]$a$1280 [0] }
      New connections: { $memory\params$rdmux[0][3][4]$a$1280 [7:6] $memory\params$rdmux[0][3][4]$a$1280 [4:1] } = { $memory\params$rdmux[0][3][4]$a$1280 [5] 5'00000 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][4][9]$1318:
      Old ports: A=$memory\params$rdmux[0][4][9]$a$1319, B=8'xxxxxxxx, Y=$memory\params$rdmux[0][3][4]$b$1281
      New ports: A=$memory\params$rdmux[0][4][9]$a$1319 [3:0], B=4'xxxx, Y=$memory\params$rdmux[0][3][4]$b$1281 [3:0]
      New connections: $memory\params$rdmux[0][3][4]$b$1281 [7:4] = { $memory\params$rdmux[0][3][4]$b$1281 [2] $memory\params$rdmux[0][3][4]$b$1281 [0] $memory\params$rdmux[0][3][4]$b$1281 [0] $memory\params$rdmux[0][3][4]$b$1281 [1] }
  Optimizing cells in module \demo.
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][1][1]$866:
      Old ports: A=$memory\cmd$rdmux[0][1][1]$a$867, B=8'xxxxxxxx, Y=$memory\cmd$rdmux[0][0][0]$b$862
      New ports: A={ 1'0 $memory\cmd$rdmux[0][1][1]$a$867 [3:0] }, B=5'xxxxx, Y=$memory\cmd$rdmux[0][0][0]$b$862 [4:0]
      New connections: $memory\cmd$rdmux[0][0][0]$b$862 [7:5] = { $memory\cmd$rdmux[0][0][0]$b$862 [4] $memory\cmd$rdmux[0][0][0]$b$862 [4:3] }
    Consolidated identical input bits for $mux cell $memory\num_params$rdmux[0][1][0]$1004:
      Old ports: A=$memory\num_params$rdmux[0][1][0]$a$1005, B=$memory\num_params$rdmux[0][1][0]$b$1006, Y=$memory\num_params$rdmux[0][0][0]$a$1002
      New ports: A={ 1'0 $memory\num_params$rdmux[0][1][0]$a$1005 [2:0] }, B={ $memory\num_params$rdmux[0][1][0]$b$1006 [4] 1'0 $memory\num_params$rdmux[0][1][0]$b$1006 [1:0] }, Y={ $memory\num_params$rdmux[0][0][0]$a$1002 [4] $memory\num_params$rdmux[0][0][0]$a$1002 [2:0] }
      New connections: { $memory\num_params$rdmux[0][0][0]$a$1002 [13:5] $memory\num_params$rdmux[0][0][0]$a$1002 [3] } = 10'0000000000
    Consolidated identical input bits for $mux cell $memory\num_params$rdmux[0][1][1]$1007:
      Old ports: A=$memory\num_params$rdmux[0][1][1]$a$1008, B=14'xxxxxxxxxxxxxx, Y=$memory\num_params$rdmux[0][0][0]$b$1003
      New ports: A={ $memory\num_params$rdmux[0][1][1]$a$1008 [9] $memory\num_params$rdmux[0][1][1]$a$1008 [2] 1'0 }, B=3'xxx, Y={ $memory\num_params$rdmux[0][0][0]$b$1003 [9] $memory\num_params$rdmux[0][0][0]$b$1003 [2] $memory\num_params$rdmux[0][0][0]$b$1003 [0] }
      New connections: { $memory\num_params$rdmux[0][0][0]$b$1003 [13:10] $memory\num_params$rdmux[0][0][0]$b$1003 [8:3] $memory\num_params$rdmux[0][0][0]$b$1003 [1] } = { $memory\num_params$rdmux[0][0][0]$b$1003 [9] $memory\num_params$rdmux[0][0][0]$b$1003 [9] $memory\num_params$rdmux[0][0][0]$b$1003 [0] $memory\num_params$rdmux[0][0][0]$b$1003 [0] $memory\num_params$rdmux[0][0][0]$b$1003 [0] $memory\num_params$rdmux[0][0][0]$b$1003 [0] $memory\num_params$rdmux[0][0][0]$b$1003 [0] $memory\num_params$rdmux[0][0][0]$b$1003 [0] $memory\num_params$rdmux[0][0][0]$b$1003 [0] $memory\num_params$rdmux[0][0][0]$b$1003 [0] $memory\num_params$rdmux[0][0][0]$b$1003 [0] }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][3][0]$1267:
      Old ports: A=$memory\params$rdmux[0][3][0]$a$1268, B=$memory\params$rdmux[0][3][0]$b$1269, Y=$memory\params$rdmux[0][2][0]$a$1256
      New ports: A={ 1'0 $memory\params$rdmux[0][3][0]$a$1268 [3] $memory\params$rdmux[0][3][0]$a$1268 [3] $memory\params$rdmux[0][3][0]$a$1268 [3] 2'10 $memory\params$rdmux[0][3][0]$a$1268 [0] }, B={ $memory\params$rdmux[0][3][0]$b$1269 [7] $memory\params$rdmux[0][3][0]$b$1269 [5:0] }, Y={ $memory\params$rdmux[0][2][0]$a$1256 [7] $memory\params$rdmux[0][2][0]$a$1256 [5:0] }
      New connections: $memory\params$rdmux[0][2][0]$a$1256 [6] = 1'0
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][3][2]$1273:
      Old ports: A=$memory\params$rdmux[0][3][2]$a$1274, B=$memory\params$rdmux[0][3][2]$b$1275, Y=$memory\params$rdmux[0][2][1]$a$1259
      New ports: A=$memory\params$rdmux[0][3][2]$a$1274 [5:0], B={ 2'00 $memory\params$rdmux[0][3][2]$b$1275 [3] $memory\params$rdmux[0][3][2]$b$1275 [0] $memory\params$rdmux[0][3][2]$b$1275 [1:0] }, Y=$memory\params$rdmux[0][2][1]$a$1259 [5:0]
      New connections: $memory\params$rdmux[0][2][1]$a$1259 [7:6] = 2'00
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][3][4]$1279:
      Old ports: A=$memory\params$rdmux[0][3][4]$a$1280, B=$memory\params$rdmux[0][3][4]$b$1281, Y=$memory\params$rdmux[0][2][2]$a$1262
      New ports: A={ $memory\params$rdmux[0][3][4]$a$1280 [5] 1'0 $memory\params$rdmux[0][3][4]$a$1280 [5] 3'000 $memory\params$rdmux[0][3][4]$a$1280 [0] }, B={ $memory\params$rdmux[0][3][4]$b$1281 [2] $memory\params$rdmux[0][3][4]$b$1281 [0] $memory\params$rdmux[0][3][4]$b$1281 [0] $memory\params$rdmux[0][3][4]$b$1281 [3:0] }, Y={ $memory\params$rdmux[0][2][2]$a$1262 [7:5] $memory\params$rdmux[0][2][2]$a$1262 [3:0] }
      New connections: $memory\params$rdmux[0][2][2]$a$1262 [4] = $memory\params$rdmux[0][2][2]$a$1262 [1]
  Optimizing cells in module \demo.
    Consolidated identical input bits for $mux cell $memory\num_params$rdmux[0][0][0]$1001:
      Old ports: A=$memory\num_params$rdmux[0][0][0]$a$1002, B=$memory\num_params$rdmux[0][0][0]$b$1003, Y=$memrd$\num_params$demo.v:379$153_DATA
      New ports: A={ 1'0 $memory\num_params$rdmux[0][0][0]$a$1002 [4] 1'0 $memory\num_params$rdmux[0][0][0]$a$1002 [2:0] }, B={ $memory\num_params$rdmux[0][0][0]$b$1003 [9] $memory\num_params$rdmux[0][0][0]$b$1003 [0] $memory\num_params$rdmux[0][0][0]$b$1003 [0] $memory\num_params$rdmux[0][0][0]$b$1003 [2] $memory\num_params$rdmux[0][0][0]$b$1003 [0] $memory\num_params$rdmux[0][0][0]$b$1003 [0] }, Y={ $memrd$\num_params$demo.v:379$153_DATA [9] $memrd$\num_params$demo.v:379$153_DATA [4:0] }
      New connections: { $memrd$\num_params$demo.v:379$153_DATA [13:10] $memrd$\num_params$demo.v:379$153_DATA [8:5] } = { $memrd$\num_params$demo.v:379$153_DATA [9] $memrd$\num_params$demo.v:379$153_DATA [9] $memrd$\num_params$demo.v:379$153_DATA [3] $memrd$\num_params$demo.v:379$153_DATA [3] $memrd$\num_params$demo.v:379$153_DATA [3] $memrd$\num_params$demo.v:379$153_DATA [3] $memrd$\num_params$demo.v:379$153_DATA [3] $memrd$\num_params$demo.v:379$153_DATA [3] }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][2][2]$1261:
      Old ports: A=$memory\params$rdmux[0][2][2]$a$1262, B=8'xxxxxxxx, Y=$memory\params$rdmux[0][1][1]$a$1253
      New ports: A={ $memory\params$rdmux[0][2][2]$a$1262 [7:5] $memory\params$rdmux[0][2][2]$a$1262 [3:0] }, B=7'xxxxxxx, Y={ $memory\params$rdmux[0][1][1]$a$1253 [7:5] $memory\params$rdmux[0][1][1]$a$1253 [3:0] }
      New connections: $memory\params$rdmux[0][1][1]$a$1253 [4] = $memory\params$rdmux[0][1][1]$a$1253 [1]
  Optimizing cells in module \demo.
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][1][1]$1252:
      Old ports: A=$memory\params$rdmux[0][1][1]$a$1253, B=8'xxxxxxxx, Y=$memory\params$rdmux[0][0][0]$b$1248
      New ports: A={ $memory\params$rdmux[0][1][1]$a$1253 [7:5] $memory\params$rdmux[0][1][1]$a$1253 [3:0] }, B=7'xxxxxxx, Y={ $memory\params$rdmux[0][0][0]$b$1248 [7:5] $memory\params$rdmux[0][0][0]$b$1248 [3:0] }
      New connections: $memory\params$rdmux[0][0][0]$b$1248 [4] = $memory\params$rdmux[0][0][0]$b$1248 [1]
  Optimizing cells in module \demo.
Performed a total of 111 changes.

2.29.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\demo'.
<suppressed ~138 debug messages>
Removed a total of 46 cells.

2.29.13. Executing OPT_RMDFF pass (remove dff with constant values).

2.29.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..
Removed 0 unused cells and 53 unused wires.
<suppressed ~1 debug messages>

2.29.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.
<suppressed ~1 debug messages>

2.29.16. Rerunning OPT passes. (Maybe there is more to do..)

2.29.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \demo..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~25 debug messages>

2.29.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \demo.
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][3][0]$881:
      Old ports: A={ 1'0 $memory\cmd$rdmux[0][3][0]$a$882 [1:0] }, B={ $memory\cmd$rdmux[0][3][0]$a$882 [1:0] $memory\cmd$rdmux[0][3][0]$a$882 [0] }, Y=$memory\cmd$rdmux[0][2][0]$a$870 [2:0]
      New ports: A={ 1'0 $memory\cmd$rdmux[0][3][0]$a$882 [1] }, B=$memory\cmd$rdmux[0][3][0]$a$882 [1:0], Y=$memory\cmd$rdmux[0][2][0]$a$870 [2:1]
      New connections: $memory\cmd$rdmux[0][2][0]$a$870 [0] = $memory\cmd$rdmux[0][3][0]$a$882 [0]
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][3][1]$884:
      Old ports: A={ 1'0 $memory\cmd$rdmux[0][3][1]$a$885 [0] }, B={ 1'1 $memory\cmd$rdmux[0][3][1]$a$885 [0] }, Y=$memory\cmd$rdmux[0][2][0]$b$871 [1:0]
      New ports: A=1'0, B=1'1, Y=$memory\cmd$rdmux[0][2][0]$b$871 [1]
      New connections: $memory\cmd$rdmux[0][2][0]$b$871 [0] = $memory\cmd$rdmux[0][3][1]$a$885 [0]
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][3][2]$887:
      Old ports: A={ 2'01 $memory\cmd$rdmux[0][3][1]$a$885 [0] }, B={ 2'10 $memory\cmd$rdmux[0][3][1]$a$885 [0] }, Y={ $memory\cmd$rdmux[0][2][1]$a$873 [5] $memory\cmd$rdmux[0][2][1]$a$873 [2] $memory\cmd$rdmux[0][2][1]$a$873 [0] }
      New ports: A=2'01, B=2'10, Y={ $memory\cmd$rdmux[0][2][1]$a$873 [5] $memory\cmd$rdmux[0][2][1]$a$873 [2] }
      New connections: $memory\cmd$rdmux[0][2][1]$a$873 [0] = $memory\cmd$rdmux[0][3][1]$a$885 [0]
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][3][3]$890:
      Old ports: A={ $memory\cmd$rdmux[0][3][3]$a$891 [7] 2'11 $memory\cmd$rdmux[0][3][3]$a$891 [7] $memory\cmd$rdmux[0][3][3]$a$891 [1] 1'0 }, B={ 1'0 $memory\cmd$rdmux[0][3][3]$a$891 [7] 1'0 $memory\cmd$rdmux[0][3][3]$a$891 [7] $memory\cmd$rdmux[0][3][3]$a$891 [7] $memory\cmd$rdmux[0][3][3]$a$891 [1] }, Y={ $memory\cmd$rdmux[0][2][1]$b$874 [7] $memory\cmd$rdmux[0][2][1]$b$874 [4:0] }
      New ports: A={ $memory\cmd$rdmux[0][3][3]$a$891 [7] 2'11 $memory\cmd$rdmux[0][3][3]$a$891 [1] 1'0 }, B={ 1'0 $memory\cmd$rdmux[0][3][3]$a$891 [7] 1'0 $memory\cmd$rdmux[0][3][3]$a$891 [7] $memory\cmd$rdmux[0][3][3]$a$891 [1] }, Y={ $memory\cmd$rdmux[0][2][1]$b$874 [7] $memory\cmd$rdmux[0][2][1]$b$874 [4:3] $memory\cmd$rdmux[0][2][1]$b$874 [1:0] }
      New connections: $memory\cmd$rdmux[0][2][1]$b$874 [2] = $memory\cmd$rdmux[0][3][3]$a$891 [7]
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][10]$1369:
      Old ports: A={ 1'1 $memory\params$rdmux[0][5][0]$b$1341 [5] $memory\params$rdmux[0][5][0]$b$1341 [0] }, B={ $memory\params$rdmux[0][5][0]$b$1341 [5] $memory\params$rdmux[0][5][0]$b$1341 [0] $memory\params$rdmux[0][5][0]$b$1341 [0] }, Y={ $memory\params$rdmux[0][4][5]$a$1307 [3] $memory\params$rdmux[0][4][5]$a$1307 [1] $memory\params$rdmux[0][4][5]$a$1307 [2] }
      New ports: A={ 1'1 $memory\params$rdmux[0][5][0]$b$1341 [5] }, B={ $memory\params$rdmux[0][5][0]$b$1341 [5] $memory\params$rdmux[0][5][0]$b$1341 [0] }, Y={ $memory\params$rdmux[0][4][5]$a$1307 [3] $memory\params$rdmux[0][4][5]$a$1307 [1] }
      New connections: $memory\params$rdmux[0][4][5]$a$1307 [2] = $memory\params$rdmux[0][5][0]$b$1341 [0]
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][15]$1384:
      Old ports: A={ $memory\params$rdmux[0][5][11]$a$1373 [3] $memory\params$rdmux[0][5][11]$a$1373 [3] 1'0 }, B={ $memory\params$rdmux[0][5][11]$a$1373 [3] 1'0 $memory\params$rdmux[0][5][11]$a$1373 [3] }, Y={ $memory\params$rdmux[0][4][7]$b$1314 [3] $memory\params$rdmux[0][4][7]$b$1314 [4] $memory\params$rdmux[0][4][7]$b$1314 [6] }
      New ports: A={ $memory\params$rdmux[0][5][11]$a$1373 [3] 1'0 }, B={ 1'0 $memory\params$rdmux[0][5][11]$a$1373 [3] }, Y={ $memory\params$rdmux[0][4][7]$b$1314 [4] $memory\params$rdmux[0][4][7]$b$1314 [6] }
      New connections: $memory\params$rdmux[0][4][7]$b$1314 [3] = $memory\params$rdmux[0][5][11]$a$1373 [3]
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][5]$1354:
      Old ports: A={ $memory\params$rdmux[0][5][0]$b$1341 [0] $memory\params$rdmux[0][5][0]$b$1341 [5] $memory\params$rdmux[0][5][0]$b$1341 [0] $memory\params$rdmux[0][5][0]$b$1341 [5] $memory\params$rdmux[0][5][0]$b$1341 [0] }, B={ $memory\params$rdmux[0][5][0]$b$1341 [5] $memory\params$rdmux[0][5][0]$b$1341 [5] 2'11 $memory\params$rdmux[0][5][0]$b$1341 [0] }, Y={ $memory\params$rdmux[0][4][2]$b$1299 [7:6] $memory\params$rdmux[0][4][2]$b$1299 [2:0] }
      New ports: A={ $memory\params$rdmux[0][5][0]$b$1341 [0] $memory\params$rdmux[0][5][0]$b$1341 [0] $memory\params$rdmux[0][5][0]$b$1341 [5] }, B={ $memory\params$rdmux[0][5][0]$b$1341 [5] 2'11 }, Y={ $memory\params$rdmux[0][4][2]$b$1299 [7] $memory\params$rdmux[0][4][2]$b$1299 [2:1] }
      New connections: { $memory\params$rdmux[0][4][2]$b$1299 [6] $memory\params$rdmux[0][4][2]$b$1299 [0] } = { $memory\params$rdmux[0][5][0]$b$1341 [5] $memory\params$rdmux[0][5][0]$b$1341 [0] }
  Optimizing cells in module \demo.
Performed a total of 7 changes.

2.29.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\demo'.
Removed a total of 0 cells.

2.29.20. Executing OPT_RMDFF pass (remove dff with constant values).

2.29.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..
Removed 0 unused cells and 4 unused wires.
<suppressed ~1 debug messages>

2.29.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.

2.29.23. Rerunning OPT passes. (Maybe there is more to do..)

2.29.24. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \demo..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~27 debug messages>

2.29.25. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \demo.
Performed a total of 0 changes.

2.29.26. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\demo'.
Removed a total of 0 cells.

2.29.27. Executing OPT_RMDFF pass (remove dff with constant values).

2.29.28. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..

2.29.29. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.

2.29.30. Finished OPT passes. (There is nothing left to do.)

2.30. Executing TECHMAP pass (map to technology primitives).

2.30.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

2.30.2. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/arith_map.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/arith_map.v' to AST representation.
Generating RTLIL representation for module `\_80_ice40_alu'.
Successfully finished Verilog frontend.

2.30.3. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $logic_not.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=7\B_WIDTH=16\Y_WIDTH=16 for cells of type $alu.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $logic_and.
Using template $paramod$constmap:446553370afc6c2aa6cc0b8f657b7f64b237ff7c$paramod$55f49a009a975a30a28fdd971adb6110903d4740\_90_shift_shiftx for cells of type $shiftx.
Using template $paramod$constmap:ee5af906ae0d3d414c6a0471604c553ef70c8e09$paramod$1297efc30c1e19551d1f4e269f2cbfa7dd15f801\_90_shift_shiftx for cells of type $shiftx.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=5\B_WIDTH=1\Y_WIDTH=5 for cells of type $alu.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $ne.
Using template $paramod\_90_pmux\WIDTH=14\S_WIDTH=2 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=8\S_WIDTH=2 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=16\S_WIDTH=3 for cells of type $pmux.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=14\B_WIDTH=1\Y_WIDTH=14 for cells of type $alu.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=16\B_WIDTH=16\Y_WIDTH=16 for cells of type $alu.
Using template $paramod\_90_pmux\WIDTH=6\S_WIDTH=13 for cells of type $pmux.
Using extmapper simplemap for cells of type $reduce_and.
Using extmapper simplemap for cells of type $or.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=16\Y_WIDTH=16 for cells of type $alu.
Using extmapper simplemap for cells of type $lut.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=5\Y_WIDTH=5 for cells of type $alu.
Using template $paramod\_90_pmux\WIDTH=1\S_WIDTH=2 for cells of type $pmux.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=7\Y_WIDTH=7 for cells of type $alu.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=3\B_WIDTH=1\Y_WIDTH=3 for cells of type $alu.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=4\B_WIDTH=1\Y_WIDTH=4 for cells of type $alu.
Using template $paramod\_90_pmux\WIDTH=1\S_WIDTH=3 for cells of type $pmux.
Using extmapper simplemap for cells of type $dff.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $pos.
Using extmapper simplemap for cells of type $and.
No more expansions possible.
<suppressed ~718 debug messages>

2.31. Executing ICE40_OPT pass (performing simple optimizations).

2.31.1. Running ICE40 specific optimizations.

2.31.2. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.
<suppressed ~574 debug messages>

2.31.3. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\demo'.
<suppressed ~426 debug messages>
Removed a total of 142 cells.

2.31.4. Executing OPT_RMDFF pass (remove dff with constant values).

2.31.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..
Removed 120 unused cells and 474 unused wires.
<suppressed ~121 debug messages>

2.31.6. Rerunning OPT passes. (Removed registers in this run.)

2.31.7. Running ICE40 specific optimizations.
Optimized away SB_CARRY cell demo.$auto$alumacc.cc:474:replace_alu$763.slice[0].carry: CO=1'1
Optimized away SB_CARRY cell demo.$auto$alumacc.cc:474:replace_alu$772.slice[0].carry: CO=$auto$alumacc.cc:474:replace_alu$772.BB [0]
Optimized away SB_CARRY cell demo.$auto$alumacc.cc:474:replace_alu$785.slice[0].carry: CO=\delay [0]
Optimized away SB_CARRY cell demo.$auto$alumacc.cc:474:replace_alu$788.slice[0].carry: CO=\cmd_counter [0]
Optimized away SB_CARRY cell demo.$auto$alumacc.cc:474:replace_alu$791.slice[0].carry: CO=\param_counter [0]
Optimized away SB_CARRY cell demo.$auto$alumacc.cc:474:replace_alu$794.slice[0].carry: CO=\cmd_counter [0]
Optimized away SB_CARRY cell demo.$auto$alumacc.cc:474:replace_alu$797.slice[0].carry: CO=\pixel_bit_counter [0]
Optimized away SB_CARRY cell demo.$auto$alumacc.cc:474:replace_alu$800.slice[0].carry: CO=\bit_counter [0]
Optimized away SB_CARRY cell demo.$auto$alumacc.cc:474:replace_alu$803.slice[0].carry: CO=\params_left [0]
Mapping SB_LUT4 cell demo.$auto$alumacc.cc:474:replace_alu$785.slice[1].adder back to logic.
Mapping SB_LUT4 cell demo.$auto$alumacc.cc:474:replace_alu$788.slice[1].adder back to logic.
Mapping SB_LUT4 cell demo.$auto$alumacc.cc:474:replace_alu$791.slice[1].adder back to logic.
Mapping SB_LUT4 cell demo.$auto$alumacc.cc:474:replace_alu$794.slice[1].adder back to logic.
Mapping SB_LUT4 cell demo.$auto$alumacc.cc:474:replace_alu$797.slice[1].adder back to logic.
Mapping SB_LUT4 cell demo.$auto$alumacc.cc:474:replace_alu$800.slice[1].adder back to logic.
Mapping SB_LUT4 cell demo.$auto$alumacc.cc:474:replace_alu$803.slice[1].adder back to logic.

2.31.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.
<suppressed ~89 debug messages>

2.31.9. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\demo'.
<suppressed ~21 debug messages>
Removed a total of 7 cells.

2.31.10. Executing OPT_RMDFF pass (remove dff with constant values).

2.31.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..
Removed 0 unused cells and 20 unused wires.
<suppressed ~1 debug messages>

2.31.12. Rerunning OPT passes. (Removed registers in this run.)

2.31.13. Running ICE40 specific optimizations.
Optimized away SB_CARRY cell demo.$auto$alumacc.cc:474:replace_alu$763.slice[1].carry: CO=1'1

2.31.14. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.

2.31.15. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\demo'.
Removed a total of 0 cells.

2.31.16. Executing OPT_RMDFF pass (remove dff with constant values).

2.31.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..

2.31.18. Rerunning OPT passes. (Removed registers in this run.)

2.31.19. Running ICE40 specific optimizations.
Optimized away SB_CARRY cell demo.$auto$alumacc.cc:474:replace_alu$763.slice[2].carry: CO=1'1

2.31.20. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.

2.31.21. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\demo'.
Removed a total of 0 cells.

2.31.22. Executing OPT_RMDFF pass (remove dff with constant values).

2.31.23. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..

2.31.24. Rerunning OPT passes. (Removed registers in this run.)

2.31.25. Running ICE40 specific optimizations.
Optimized away SB_CARRY cell demo.$auto$alumacc.cc:474:replace_alu$763.slice[3].carry: CO=1'1

2.31.26. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.

2.31.27. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\demo'.
Removed a total of 0 cells.

2.31.28. Executing OPT_RMDFF pass (remove dff with constant values).

2.31.29. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..

2.31.30. Rerunning OPT passes. (Removed registers in this run.)

2.31.31. Running ICE40 specific optimizations.
Optimized away SB_CARRY cell demo.$auto$alumacc.cc:474:replace_alu$763.slice[4].carry: CO=1'1

2.31.32. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.

2.31.33. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\demo'.
Removed a total of 0 cells.

2.31.34. Executing OPT_RMDFF pass (remove dff with constant values).

2.31.35. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..

2.31.36. Rerunning OPT passes. (Removed registers in this run.)

2.31.37. Running ICE40 specific optimizations.
Optimized away SB_CARRY cell demo.$auto$alumacc.cc:474:replace_alu$763.slice[5].carry: CO=\delay [5]

2.31.38. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.

2.31.39. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\demo'.
Removed a total of 0 cells.

2.31.40. Executing OPT_RMDFF pass (remove dff with constant values).

2.31.41. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..

2.31.42. Rerunning OPT passes. (Removed registers in this run.)

2.31.43. Running ICE40 specific optimizations.

2.31.44. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.

2.31.45. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\demo'.
Removed a total of 0 cells.

2.31.46. Executing OPT_RMDFF pass (remove dff with constant values).

2.31.47. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..

2.31.48. Finished OPT passes. (There is nothing left to do.)

2.32. Executing DFFSR2DFF pass (mapping DFFSR cells to simpler FFs).

2.33. Executing DFF2DFFE pass (transform $dff to $dffe where applicable).
Selected cell types for direct conversion:
  $_DFF_PP1_ -> $__DFFE_PP1
  $_DFF_PP0_ -> $__DFFE_PP0
  $_DFF_PN1_ -> $__DFFE_PN1
  $_DFF_PN0_ -> $__DFFE_PN0
  $_DFF_NP1_ -> $__DFFE_NP1
  $_DFF_NP0_ -> $__DFFE_NP0
  $_DFF_NN1_ -> $__DFFE_NN1
  $_DFF_NN0_ -> $__DFFE_NN0
  $_DFF_N_ -> $_DFFE_NP_
  $_DFF_P_ -> $_DFFE_PP_
Transforming FF to FF+Enable cells in module demo:
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2731 to $_DFFE_PP_ for $0\rst[0:0] -> \rst.
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2732 to $_DFFE_PP_ for $0\dc[0:0] -> \dc.
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2733 to $_DFFE_PP_ for $0\mosi[0:0] -> \mosi.
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2734 to $_DFFE_PP_ for $0\cs[0:0] -> \cs.
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2735 to $_DFFE_PP_ for $0\state[5:0] [0] -> \state [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2736 to $_DFFE_PP_ for $0\state[5:0] [1] -> \state [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2737 to $_DFFE_PP_ for $0\state[5:0] [2] -> \state [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2738 to $_DFFE_PP_ for $0\state[5:0] [3] -> \state [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2739 to $_DFFE_PP_ for $0\state[5:0] [4] -> \state [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2740 to $_DFFE_PP_ for $0\state[5:0] [5] -> \state [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2741 to $_DFFE_PP_ for $0\delay[15:0] [0] -> \delay [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2742 to $_DFFE_PP_ for $0\delay[15:0] [1] -> \delay [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2743 to $_DFFE_PP_ for $0\delay[15:0] [2] -> \delay [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2744 to $_DFFE_PP_ for $0\delay[15:0] [3] -> \delay [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2745 to $_DFFE_PP_ for $0\delay[15:0] [4] -> \delay [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2746 to $_DFFE_PP_ for $0\delay[15:0] [5] -> \delay [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2747 to $_DFFE_PP_ for $0\delay[15:0] [6] -> \delay [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2748 to $_DFFE_PP_ for $0\delay[15:0] [7] -> \delay [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2749 to $_DFFE_PP_ for $0\delay[15:0] [8] -> \delay [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2750 to $_DFFE_PP_ for $0\delay[15:0] [9] -> \delay [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2751 to $_DFFE_PP_ for $0\delay[15:0] [10] -> \delay [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2752 to $_DFFE_PP_ for $0\delay[15:0] [11] -> \delay [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2753 to $_DFFE_PP_ for $0\delay[15:0] [12] -> \delay [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2754 to $_DFFE_PP_ for $0\delay[15:0] [13] -> \delay [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2755 to $_DFFE_PP_ for $0\delay[15:0] [14] -> \delay [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2756 to $_DFFE_PP_ for $0\delay[15:0] [15] -> \delay [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2757 to $_DFFE_PP_ for $0\data[7:0] [0] -> \data [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2758 to $_DFFE_PP_ for $0\data[7:0] [1] -> \data [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2759 to $_DFFE_PP_ for $0\data[7:0] [2] -> \data [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2760 to $_DFFE_PP_ for $0\data[7:0] [3] -> \data [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2761 to $_DFFE_PP_ for $0\data[7:0] [4] -> \data [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2762 to $_DFFE_PP_ for $0\data[7:0] [5] -> \data [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2763 to $_DFFE_PP_ for $0\data[7:0] [6] -> \data [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2764 to $_DFFE_PP_ for $0\data[7:0] [7] -> \data [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2765 to $_DFFE_PP_ for $0\bit_counter[2:0] [0] -> \bit_counter [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2766 to $_DFFE_PP_ for $0\bit_counter[2:0] [1] -> \bit_counter [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2767 to $_DFFE_PP_ for $0\bit_counter[2:0] [2] -> \bit_counter [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2768 to $_DFFE_PP_ for $0\pixel_data[15:0] [0] -> \pixel_data [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2769 to $_DFFE_PP_ for $0\pixel_data[15:0] [1] -> \pixel_data [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2770 to $_DFFE_PP_ for $0\pixel_data[15:0] [2] -> \pixel_data [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2771 to $_DFFE_PP_ for $0\pixel_data[15:0] [3] -> \pixel_data [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2772 to $_DFFE_PP_ for $0\pixel_data[15:0] [4] -> \pixel_data [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2773 to $_DFFE_PP_ for $0\pixel_data[15:0] [5] -> \pixel_data [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2774 to $_DFFE_PP_ for $0\pixel_data[15:0] [6] -> \pixel_data [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2775 to $_DFFE_PP_ for $0\pixel_data[15:0] [7] -> \pixel_data [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2776 to $_DFFE_PP_ for $0\pixel_data[15:0] [8] -> \pixel_data [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2777 to $_DFFE_PP_ for $0\pixel_data[15:0] [9] -> \pixel_data [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2778 to $_DFFE_PP_ for $0\pixel_data[15:0] [10] -> \pixel_data [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2779 to $_DFFE_PP_ for $0\pixel_data[15:0] [11] -> \pixel_data [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2780 to $_DFFE_PP_ for $0\pixel_data[15:0] [12] -> \pixel_data [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2781 to $_DFFE_PP_ for $0\pixel_data[15:0] [13] -> \pixel_data [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2782 to $_DFFE_PP_ for $0\pixel_data[15:0] [14] -> \pixel_data [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2783 to $_DFFE_PP_ for $0\pixel_data[15:0] [15] -> \pixel_data [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2784 to $_DFFE_PP_ for $0\pixel_bit_counter[3:0] [0] -> \pixel_bit_counter [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2785 to $_DFFE_PP_ for $0\pixel_bit_counter[3:0] [1] -> \pixel_bit_counter [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2786 to $_DFFE_PP_ for $0\pixel_bit_counter[3:0] [2] -> \pixel_bit_counter [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2787 to $_DFFE_PP_ for $0\pixel_bit_counter[3:0] [3] -> \pixel_bit_counter [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2788 to $_DFFE_PP_ for $0\cmd_counter[4:0] [0] -> \cmd_counter [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2789 to $_DFFE_PP_ for $0\cmd_counter[4:0] [1] -> \cmd_counter [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2790 to $_DFFE_PP_ for $0\cmd_counter[4:0] [2] -> \cmd_counter [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2791 to $_DFFE_PP_ for $0\cmd_counter[4:0] [3] -> \cmd_counter [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2792 to $_DFFE_PP_ for $0\cmd_counter[4:0] [4] -> \cmd_counter [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2793 to $_DFFE_PP_ for $0\param_counter[6:0] [0] -> \param_counter [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2794 to $_DFFE_PP_ for $0\param_counter[6:0] [1] -> \param_counter [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2795 to $_DFFE_PP_ for $0\param_counter[6:0] [2] -> \param_counter [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2796 to $_DFFE_PP_ for $0\param_counter[6:0] [3] -> \param_counter [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2797 to $_DFFE_PP_ for $0\param_counter[6:0] [4] -> \param_counter [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2798 to $_DFFE_PP_ for $0\param_counter[6:0] [5] -> \param_counter [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2799 to $_DFFE_PP_ for $0\param_counter[6:0] [6] -> \param_counter [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2800 to $_DFFE_PP_ for $0\params_left[13:0] [0] -> \params_left [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2801 to $_DFFE_PP_ for $0\params_left[13:0] [1] -> \params_left [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2802 to $_DFFE_PP_ for $0\params_left[13:0] [2] -> \params_left [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2803 to $_DFFE_PP_ for $0\params_left[13:0] [3] -> \params_left [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2804 to $_DFFE_PP_ for $0\params_left[13:0] [4] -> \params_left [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2805 to $_DFFE_PP_ for $0\params_left[13:0] [5] -> \params_left [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2806 to $_DFFE_PP_ for $0\params_left[13:0] [6] -> \params_left [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2807 to $_DFFE_PP_ for $0\params_left[13:0] [7] -> \params_left [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2808 to $_DFFE_PP_ for $0\params_left[13:0] [8] -> \params_left [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2809 to $_DFFE_PP_ for $0\params_left[13:0] [9] -> \params_left [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2810 to $_DFFE_PP_ for $0\params_left[13:0] [10] -> \params_left [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2811 to $_DFFE_PP_ for $0\params_left[13:0] [11] -> \params_left [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2812 to $_DFFE_PP_ for $0\params_left[13:0] [12] -> \params_left [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2813 to $_DFFE_PP_ for $0\params_left[13:0] [13] -> \params_left [13].

2.34. Executing TECHMAP pass (map to technology primitives).

2.34.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/cells_map.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$__DFFE_NN0'.
Generating RTLIL representation for module `\$__DFFE_NN1'.
Generating RTLIL representation for module `\$__DFFE_PN0'.
Generating RTLIL representation for module `\$__DFFE_PN1'.
Generating RTLIL representation for module `\$__DFFE_NP0'.
Generating RTLIL representation for module `\$__DFFE_NP1'.
Generating RTLIL representation for module `\$__DFFE_PP0'.
Generating RTLIL representation for module `\$__DFFE_PP1'.
Successfully finished Verilog frontend.

2.34.2. Continuing TECHMAP pass.
Using template \$_DFFE_PP_ for cells of type $_DFFE_PP_.
Using template \$_DFF_P_ for cells of type $_DFF_P_.
No more expansions possible.
<suppressed ~84 debug messages>

2.35. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.
<suppressed ~249 debug messages>

2.36. Executing SIMPLEMAP pass (map simple cells to gate primitives).

2.37. Executing ICE40_FFINIT pass (implement FF init values).
Handling FF init values in demo.
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2814 (SB_DFF): \scl = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2800 (SB_DFFE): \params_left [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2739 (SB_DFFE): \state [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2736 (SB_DFFE): \state [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2737 (SB_DFFE): \state [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2738 (SB_DFFE): \state [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2740 (SB_DFFE): \state [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2735 (SB_DFFE): \state [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2757 (SB_DFFE): \data [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2758 (SB_DFFE): \data [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2759 (SB_DFFE): \data [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2760 (SB_DFFE): \data [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2761 (SB_DFFE): \data [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2762 (SB_DFFE): \data [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2763 (SB_DFFE): \data [6] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2764 (SB_DFFE): \data [7] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2766 (SB_DFFE): \bit_counter [1] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2773 (SB_DFFE): \pixel_data [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2767 (SB_DFFE): \bit_counter [2] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2769 (SB_DFFE): \pixel_data [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2770 (SB_DFFE): \pixel_data [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2771 (SB_DFFE): \pixel_data [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2765 (SB_DFFE): \bit_counter [0] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2772 (SB_DFFE): \pixel_data [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2774 (SB_DFFE): \pixel_data [6] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2775 (SB_DFFE): \pixel_data [7] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2776 (SB_DFFE): \pixel_data [8] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2777 (SB_DFFE): \pixel_data [9] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2778 (SB_DFFE): \pixel_data [10] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2779 (SB_DFFE): \pixel_data [11] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2780 (SB_DFFE): \pixel_data [12] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2781 (SB_DFFE): \pixel_data [13] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2782 (SB_DFFE): \pixel_data [14] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2783 (SB_DFFE): \pixel_data [15] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2784 (SB_DFFE): \pixel_bit_counter [0] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2785 (SB_DFFE): \pixel_bit_counter [1] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2786 (SB_DFFE): \pixel_bit_counter [2] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2792 (SB_DFFE): \cmd_counter [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2787 (SB_DFFE): \pixel_bit_counter [3] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2789 (SB_DFFE): \cmd_counter [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2790 (SB_DFFE): \cmd_counter [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2768 (SB_DFFE): \pixel_data [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2791 (SB_DFFE): \cmd_counter [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2793 (SB_DFFE): \param_counter [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2794 (SB_DFFE): \param_counter [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2795 (SB_DFFE): \param_counter [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2796 (SB_DFFE): \param_counter [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2797 (SB_DFFE): \param_counter [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2798 (SB_DFFE): \param_counter [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2801 (SB_DFFE): \params_left [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2788 (SB_DFFE): \cmd_counter [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2799 (SB_DFFE): \param_counter [6] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2802 (SB_DFFE): \params_left [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2803 (SB_DFFE): \params_left [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2804 (SB_DFFE): \params_left [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2805 (SB_DFFE): \params_left [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2806 (SB_DFFE): \params_left [6] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2807 (SB_DFFE): \params_left [7] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2808 (SB_DFFE): \params_left [8] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2809 (SB_DFFE): \params_left [9] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2810 (SB_DFFE): \params_left [10] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2811 (SB_DFFE): \params_left [11] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2812 (SB_DFFE): \params_left [12] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2813 (SB_DFFE): \params_left [13] = 0

2.38. Executing ICE40_FFSSR pass (merge synchronous set/reset into FF cells).
Merging set/reset $_MUX_ cells into SB_FFs in demo.

2.39. Executing ICE40_OPT pass (performing simple optimizations).

2.39.1. Running ICE40 specific optimizations.

2.39.2. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.
<suppressed ~110 debug messages>

2.39.3. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\demo'.
<suppressed ~399 debug messages>
Removed a total of 133 cells.

2.39.4. Executing OPT_RMDFF pass (remove dff with constant values).

2.39.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..
Removed 0 unused cells and 743 unused wires.
<suppressed ~1 debug messages>

2.39.6. Rerunning OPT passes. (Removed registers in this run.)

2.39.7. Running ICE40 specific optimizations.

2.39.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.

2.39.9. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\demo'.
Removed a total of 0 cells.

2.39.10. Executing OPT_RMDFF pass (remove dff with constant values).

2.39.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..

2.39.12. Finished OPT passes. (There is nothing left to do.)

2.40. Executing TECHMAP pass (map to technology primitives).

2.40.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/latches_map.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/latches_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Successfully finished Verilog frontend.

2.40.2. Continuing TECHMAP pass.
No more expansions possible.

2.41. Executing ABC pass (technology mapping using ABC).

2.41.1. Extracting gate netlist of module `\demo' to `<abc-temp-dir>/input.blif'..
Extracted 695 gates and 819 wires to a netlist network with 122 inputs and 104 outputs.

2.41.1.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + lutpack -S 1 
ABC: + dress 
ABC: Total number of equiv classes                =     178.
ABC: Participating nodes from both networks       =     411.
ABC: Participating nodes from the first network   =     179. (  65.33 % of nodes)
ABC: Participating nodes from the second network  =     232. (  84.67 % of nodes)
ABC: Node pairs (any polarity)                    =     179. (  65.33 % of names can be moved)
ABC: Node pairs (same polarity)                   =     149. (  54.38 % of names can be moved)
ABC: Total runtime =     0.07 sec
ABC: + write_blif <abc-temp-dir>/output.blif 

2.41.1.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:      542
ABC RESULTS:        internal signals:      593
ABC RESULTS:           input signals:      122
ABC RESULTS:          output signals:      104
Removing temp directory.
Removed 0 unused cells and 386 unused wires.

2.42. Executing TECHMAP pass (map to technology primitives).

2.42.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/cells_map.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$__DFFE_NN0'.
Generating RTLIL representation for module `\$__DFFE_NN1'.
Generating RTLIL representation for module `\$__DFFE_PN0'.
Generating RTLIL representation for module `\$__DFFE_PN1'.
Generating RTLIL representation for module `\$__DFFE_NP0'.
Generating RTLIL representation for module `\$__DFFE_NP1'.
Generating RTLIL representation for module `\$__DFFE_PP0'.
Generating RTLIL representation for module `\$__DFFE_PP1'.
Generating RTLIL representation for module `\$lut'.
Successfully finished Verilog frontend.

2.42.2. Continuing TECHMAP pass.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0101001100110011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000011111111000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001000000000011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011010100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1001110010101001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0111011111110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1110101111111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000010111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111110110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001011100110001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=1\LUT=2'01 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100011110001000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1010110011001100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100000100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100101000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111101000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100111110100000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111110000001010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000110000001010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111000011101110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011111101010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111001100000101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000001011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111111111000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00111010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001000000000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111111110100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00000111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1110111100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11111000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100000000010111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11100011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00001011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000001111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100001111101100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0111110110001110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0101110000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000011101110111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011101111110011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000011101000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111000100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001001011111100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1001010000101001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111110011110101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111000001000100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111010011111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000011100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1101011101010101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001100000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111010000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011101111110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0111111100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000111011000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011111111111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011001100001011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000000011111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000011101111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111101011111100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000011100100010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11110100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011111111111010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111100010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100011100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00001110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111100000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11101111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111010111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00001101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00010100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001110000101111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001111100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000101000001100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000101000000011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100110000000111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0111000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111100001110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011010111111100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000101110111011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000101100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000111110001000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011000011111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111111110010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000111100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000001101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0110111111111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0110100100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000011110001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00011111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011010100100011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000110111000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111100010001000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111111100000 for cells of type $lut.
No more expansions possible.
<suppressed ~1536 debug messages>
Removed 0 unused cells and 542 unused wires.

2.43. Executing HIERARCHY pass (managing design hierarchy).

2.43.1. Analyzing design hierarchy..
Top module:  \demo

2.43.2. Analyzing design hierarchy..
Top module:  \demo
Removed 0 unused modules.

2.44. Printing statistics.

=== demo ===

   Number of wires:                413
   Number of wire bits:           1642
   Number of public wires:         144
   Number of public wire bits:    1226
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                467
     SB_CARRY                       65
     SB_DFF                          1
     SB_DFFE                        83
     SB_LUT4                       318

2.45. Executing CHECK pass (checking for obvious problems).
checking module demo..
found and reported 0 problems.

2.46. Executing BLIF backend.

2.47. Executing JSON backend.

End of script. Logfile hash: 3728e7d6a3
CPU: user 3.21s system 0.14s, MEM: 51.68 MB total, 46.05 MB resident
Yosys 0.9 (git sha1 1979e0b)
Time spent: 17% 27x opt_clean (0 sec), 17% 28x opt_expr (0 sec), ...
