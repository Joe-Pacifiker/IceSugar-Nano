
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2019  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9 (git sha1 1979e0b)


-- Parsing `demo.v' using frontend `verilog' --

1. Executing Verilog-2005 frontend: demo.v
Parsing Verilog input from `demo.v' to AST representation.
Generating RTLIL representation for module `\demo'.
Successfully finished Verilog frontend.

-- Running command `synth_ice40 -json demo.json -blif demo.blif' --

2. Executing SYNTH_ICE40 pass.

2.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/cells_sim.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\SB_IO'.
Generating RTLIL representation for module `\SB_GB_IO'.
Generating RTLIL representation for module `\SB_GB'.
Generating RTLIL representation for module `\SB_LUT4'.
Generating RTLIL representation for module `\SB_CARRY'.
Generating RTLIL representation for module `\SB_DFF'.
Generating RTLIL representation for module `\SB_DFFE'.
Generating RTLIL representation for module `\SB_DFFSR'.
Generating RTLIL representation for module `\SB_DFFR'.
Generating RTLIL representation for module `\SB_DFFSS'.
Generating RTLIL representation for module `\SB_DFFS'.
Generating RTLIL representation for module `\SB_DFFESR'.
Generating RTLIL representation for module `\SB_DFFER'.
Generating RTLIL representation for module `\SB_DFFESS'.
Generating RTLIL representation for module `\SB_DFFES'.
Generating RTLIL representation for module `\SB_DFFN'.
Generating RTLIL representation for module `\SB_DFFNE'.
Generating RTLIL representation for module `\SB_DFFNSR'.
Generating RTLIL representation for module `\SB_DFFNR'.
Generating RTLIL representation for module `\SB_DFFNSS'.
Generating RTLIL representation for module `\SB_DFFNS'.
Generating RTLIL representation for module `\SB_DFFNESR'.
Generating RTLIL representation for module `\SB_DFFNER'.
Generating RTLIL representation for module `\SB_DFFNESS'.
Generating RTLIL representation for module `\SB_DFFNES'.
Generating RTLIL representation for module `\SB_RAM40_4K'.
Generating RTLIL representation for module `\SB_RAM40_4KNR'.
Generating RTLIL representation for module `\SB_RAM40_4KNW'.
Generating RTLIL representation for module `\SB_RAM40_4KNRNW'.
Generating RTLIL representation for module `\ICESTORM_LC'.
Generating RTLIL representation for module `\SB_PLL40_CORE'.
Generating RTLIL representation for module `\SB_PLL40_PAD'.
Generating RTLIL representation for module `\SB_PLL40_2_PAD'.
Generating RTLIL representation for module `\SB_PLL40_2F_CORE'.
Generating RTLIL representation for module `\SB_PLL40_2F_PAD'.
Generating RTLIL representation for module `\SB_WARMBOOT'.
Generating RTLIL representation for module `\SB_SPRAM256KA'.
Generating RTLIL representation for module `\SB_HFOSC'.
Generating RTLIL representation for module `\SB_LFOSC'.
Generating RTLIL representation for module `\SB_RGBA_DRV'.
Generating RTLIL representation for module `\SB_LED_DRV_CUR'.
Generating RTLIL representation for module `\SB_RGB_DRV'.
Generating RTLIL representation for module `\SB_I2C'.
Generating RTLIL representation for module `\SB_SPI'.
Generating RTLIL representation for module `\SB_LEDDA_IP'.
Generating RTLIL representation for module `\SB_FILTER_50NS'.
Generating RTLIL representation for module `\SB_IO_I3C'.
Generating RTLIL representation for module `\SB_IO_OD'.
Generating RTLIL representation for module `\SB_MAC16'.
Successfully finished Verilog frontend.

2.2. Executing HIERARCHY pass (managing design hierarchy).

2.2.1. Finding top of design hierarchy..
root of   0 design levels: demo                
Automatically selected demo as design top module.

2.2.2. Analyzing design hierarchy..
Top module:  \demo

2.2.3. Analyzing design hierarchy..
Top module:  \demo
Removed 0 unused modules.

2.3. Executing PROC pass (convert processes to netlists).

2.3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

2.3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 10 switch rules as full_case in process $proc$demo.v:189$127 in module demo.
Removed a total of 0 dead cases.

2.3.3. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\demo.$proc$demo.v:47$274'.
  Set init value: \scl = 1'1
  Set init value: \state = 6'000000
  Set init value: \data = 8'00000000
  Set init value: \bit_counter = 3'111
  Set init value: \cmd_counter = 5'00000
  Set init value: \param_counter = 7'0000000
  Set init value: \params_left = 14'00000000000000

2.3.4. Executing PROC_ARST pass (detect async resets in processes).

2.3.5. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\demo.$proc$demo.v:47$274'.
     1/255: $1\params_left[13:0]
     2/255: $1\param_counter[6:0]
     3/255: $1\cmd_counter[4:0]
     4/255: $1\bit_counter[2:0]
     5/255: $1\data[7:0]
     6/255: $0$memwr$\params$demo.v:176$124_DATA[7:0]$522
     7/255: $0$memwr$\params$demo.v:176$124_ADDR[31:0]$521
     8/255: $0$memwr$\params$demo.v:175$123_DATA[7:0]$520
     9/255: $0$memwr$\params$demo.v:175$123_ADDR[31:0]$519
    10/255: $0$memwr$\params$demo.v:174$122_DATA[7:0]$518
    11/255: $0$memwr$\params$demo.v:174$122_ADDR[31:0]$517
    12/255: $0$memwr$\params$demo.v:173$121_DATA[7:0]$516
    13/255: $0$memwr$\params$demo.v:173$121_ADDR[31:0]$515
    14/255: $0$memwr$\params$demo.v:172$120_DATA[7:0]$514
    15/255: $0$memwr$\params$demo.v:172$120_ADDR[31:0]$513
    16/255: $0$memwr$\params$demo.v:171$119_DATA[7:0]$512
    17/255: $0$memwr$\params$demo.v:171$119_ADDR[31:0]$511
    18/255: $0$memwr$\params$demo.v:170$118_DATA[7:0]$510
    19/255: $0$memwr$\params$demo.v:170$118_ADDR[31:0]$509
    20/255: $0$memwr$\params$demo.v:169$117_DATA[7:0]$508
    21/255: $0$memwr$\params$demo.v:169$117_ADDR[31:0]$507
    22/255: $0$memwr$\params$demo.v:168$116_DATA[7:0]$506
    23/255: $0$memwr$\params$demo.v:168$116_ADDR[31:0]$505
    24/255: $0$memwr$\params$demo.v:167$115_DATA[7:0]$504
    25/255: $0$memwr$\params$demo.v:167$115_ADDR[31:0]$503
    26/255: $0$memwr$\params$demo.v:166$114_DATA[7:0]$502
    27/255: $0$memwr$\params$demo.v:166$114_ADDR[31:0]$501
    28/255: $0$memwr$\params$demo.v:165$113_DATA[7:0]$500
    29/255: $0$memwr$\params$demo.v:165$113_ADDR[31:0]$499
    30/255: $0$memwr$\params$demo.v:164$112_DATA[7:0]$498
    31/255: $0$memwr$\params$demo.v:164$112_ADDR[31:0]$497
    32/255: $0$memwr$\params$demo.v:163$111_DATA[7:0]$496
    33/255: $0$memwr$\params$demo.v:163$111_ADDR[31:0]$495
    34/255: $0$memwr$\params$demo.v:162$110_DATA[7:0]$494
    35/255: $0$memwr$\params$demo.v:162$110_ADDR[31:0]$493
    36/255: $0$memwr$\params$demo.v:161$109_DATA[7:0]$492
    37/255: $0$memwr$\params$demo.v:161$109_ADDR[31:0]$491
    38/255: $0$memwr$\params$demo.v:160$108_DATA[7:0]$490
    39/255: $0$memwr$\params$demo.v:160$108_ADDR[31:0]$489
    40/255: $0$memwr$\params$demo.v:159$107_DATA[7:0]$488
    41/255: $0$memwr$\params$demo.v:159$107_ADDR[31:0]$487
    42/255: $0$memwr$\params$demo.v:158$106_DATA[7:0]$486
    43/255: $0$memwr$\params$demo.v:158$106_ADDR[31:0]$485
    44/255: $0$memwr$\params$demo.v:157$105_DATA[7:0]$484
    45/255: $0$memwr$\params$demo.v:157$105_ADDR[31:0]$483
    46/255: $0$memwr$\params$demo.v:156$104_DATA[7:0]$482
    47/255: $0$memwr$\params$demo.v:156$104_ADDR[31:0]$481
    48/255: $0$memwr$\params$demo.v:155$103_DATA[7:0]$480
    49/255: $0$memwr$\params$demo.v:155$103_ADDR[31:0]$479
    50/255: $0$memwr$\params$demo.v:154$102_DATA[7:0]$478
    51/255: $0$memwr$\params$demo.v:154$102_ADDR[31:0]$477
    52/255: $0$memwr$\params$demo.v:153$101_DATA[7:0]$476
    53/255: $0$memwr$\params$demo.v:153$101_ADDR[31:0]$475
    54/255: $0$memwr$\params$demo.v:152$100_DATA[7:0]$474
    55/255: $0$memwr$\params$demo.v:152$100_ADDR[31:0]$473
    56/255: $0$memwr$\params$demo.v:151$99_DATA[7:0]$472
    57/255: $0$memwr$\params$demo.v:151$99_ADDR[31:0]$471
    58/255: $0$memwr$\params$demo.v:150$98_DATA[7:0]$470
    59/255: $0$memwr$\params$demo.v:150$98_ADDR[31:0]$469
    60/255: $0$memwr$\params$demo.v:149$97_DATA[7:0]$468
    61/255: $0$memwr$\params$demo.v:149$97_ADDR[31:0]$467
    62/255: $0$memwr$\params$demo.v:148$96_DATA[7:0]$466
    63/255: $0$memwr$\params$demo.v:148$96_ADDR[31:0]$465
    64/255: $0$memwr$\params$demo.v:147$95_DATA[7:0]$464
    65/255: $0$memwr$\params$demo.v:147$95_ADDR[31:0]$463
    66/255: $0$memwr$\params$demo.v:146$94_DATA[7:0]$462
    67/255: $0$memwr$\params$demo.v:146$94_ADDR[31:0]$461
    68/255: $0$memwr$\params$demo.v:145$93_DATA[7:0]$460
    69/255: $0$memwr$\params$demo.v:145$93_ADDR[31:0]$459
    70/255: $0$memwr$\params$demo.v:144$92_DATA[7:0]$458
    71/255: $0$memwr$\params$demo.v:144$92_ADDR[31:0]$457
    72/255: $0$memwr$\params$demo.v:143$91_DATA[7:0]$456
    73/255: $0$memwr$\params$demo.v:143$91_ADDR[31:0]$455
    74/255: $0$memwr$\params$demo.v:142$90_DATA[7:0]$454
    75/255: $0$memwr$\params$demo.v:142$90_ADDR[31:0]$453
    76/255: $0$memwr$\params$demo.v:141$89_DATA[7:0]$452
    77/255: $0$memwr$\params$demo.v:141$89_ADDR[31:0]$451
    78/255: $0$memwr$\params$demo.v:140$88_DATA[7:0]$450
    79/255: $0$memwr$\params$demo.v:140$88_ADDR[31:0]$449
    80/255: $0$memwr$\params$demo.v:139$87_DATA[7:0]$448
    81/255: $0$memwr$\params$demo.v:139$87_ADDR[31:0]$447
    82/255: $0$memwr$\params$demo.v:138$86_DATA[7:0]$446
    83/255: $0$memwr$\params$demo.v:138$86_ADDR[31:0]$445
    84/255: $0$memwr$\params$demo.v:137$85_DATA[7:0]$444
    85/255: $0$memwr$\params$demo.v:137$85_ADDR[31:0]$443
    86/255: $0$memwr$\params$demo.v:136$84_DATA[7:0]$442
    87/255: $0$memwr$\params$demo.v:136$84_ADDR[31:0]$441
    88/255: $0$memwr$\params$demo.v:135$83_DATA[7:0]$440
    89/255: $0$memwr$\params$demo.v:135$83_ADDR[31:0]$439
    90/255: $0$memwr$\params$demo.v:134$82_DATA[7:0]$438
    91/255: $0$memwr$\params$demo.v:134$82_ADDR[31:0]$437
    92/255: $0$memwr$\params$demo.v:133$81_DATA[7:0]$436
    93/255: $0$memwr$\params$demo.v:133$81_ADDR[31:0]$435
    94/255: $0$memwr$\params$demo.v:132$80_DATA[7:0]$434
    95/255: $0$memwr$\params$demo.v:132$80_ADDR[31:0]$433
    96/255: $0$memwr$\params$demo.v:131$79_DATA[7:0]$432
    97/255: $0$memwr$\params$demo.v:131$79_ADDR[31:0]$431
    98/255: $0$memwr$\params$demo.v:130$78_DATA[7:0]$430
    99/255: $0$memwr$\params$demo.v:130$78_ADDR[31:0]$429
   100/255: $0$memwr$\params$demo.v:129$77_DATA[7:0]$428
   101/255: $0$memwr$\params$demo.v:129$77_ADDR[31:0]$427
   102/255: $0$memwr$\params$demo.v:128$76_DATA[7:0]$426
   103/255: $0$memwr$\params$demo.v:128$76_ADDR[31:0]$425
   104/255: $0$memwr$\params$demo.v:127$75_DATA[7:0]$424
   105/255: $0$memwr$\params$demo.v:127$75_ADDR[31:0]$423
   106/255: $0$memwr$\params$demo.v:126$74_DATA[7:0]$422
   107/255: $0$memwr$\params$demo.v:126$74_ADDR[31:0]$421
   108/255: $0$memwr$\params$demo.v:125$73_DATA[7:0]$420
   109/255: $0$memwr$\params$demo.v:125$73_ADDR[31:0]$419
   110/255: $0$memwr$\params$demo.v:124$72_DATA[7:0]$418
   111/255: $0$memwr$\params$demo.v:124$72_ADDR[31:0]$417
   112/255: $0$memwr$\params$demo.v:123$71_DATA[7:0]$416
   113/255: $0$memwr$\params$demo.v:123$71_ADDR[31:0]$415
   114/255: $0$memwr$\params$demo.v:122$70_DATA[7:0]$414
   115/255: $0$memwr$\params$demo.v:122$70_ADDR[31:0]$413
   116/255: $0$memwr$\params$demo.v:121$69_DATA[7:0]$412
   117/255: $0$memwr$\params$demo.v:121$69_ADDR[31:0]$411
   118/255: $0$memwr$\params$demo.v:120$68_DATA[7:0]$410
   119/255: $0$memwr$\params$demo.v:120$68_ADDR[31:0]$409
   120/255: $0$memwr$\params$demo.v:119$67_DATA[7:0]$408
   121/255: $0$memwr$\params$demo.v:119$67_ADDR[31:0]$407
   122/255: $0$memwr$\params$demo.v:118$66_DATA[7:0]$406
   123/255: $0$memwr$\params$demo.v:118$66_ADDR[31:0]$405
   124/255: $0$memwr$\params$demo.v:117$65_DATA[7:0]$404
   125/255: $0$memwr$\params$demo.v:117$65_ADDR[31:0]$403
   126/255: $0$memwr$\params$demo.v:116$64_DATA[7:0]$402
   127/255: $0$memwr$\params$demo.v:116$64_ADDR[31:0]$401
   128/255: $0$memwr$\params$demo.v:115$63_DATA[7:0]$400
   129/255: $0$memwr$\params$demo.v:115$63_ADDR[31:0]$399
   130/255: $0$memwr$\params$demo.v:114$62_DATA[7:0]$398
   131/255: $0$memwr$\params$demo.v:114$62_ADDR[31:0]$397
   132/255: $0$memwr$\params$demo.v:113$61_DATA[7:0]$396
   133/255: $0$memwr$\params$demo.v:113$61_ADDR[31:0]$395
   134/255: $0$memwr$\params$demo.v:112$60_DATA[7:0]$394
   135/255: $0$memwr$\params$demo.v:112$60_ADDR[31:0]$393
   136/255: $0$memwr$\params$demo.v:111$59_DATA[7:0]$392
   137/255: $0$memwr$\params$demo.v:111$59_ADDR[31:0]$391
   138/255: $0$memwr$\params$demo.v:110$58_DATA[7:0]$390
   139/255: $0$memwr$\params$demo.v:110$58_ADDR[31:0]$389
   140/255: $0$memwr$\params$demo.v:109$57_DATA[7:0]$388
   141/255: $0$memwr$\params$demo.v:109$57_ADDR[31:0]$387
   142/255: $0$memwr$\params$demo.v:108$56_DATA[7:0]$386
   143/255: $0$memwr$\params$demo.v:108$56_ADDR[31:0]$385
   144/255: $0$memwr$\params$demo.v:107$55_DATA[7:0]$384
   145/255: $0$memwr$\params$demo.v:107$55_ADDR[31:0]$383
   146/255: $0$memwr$\params$demo.v:106$54_DATA[7:0]$382
   147/255: $0$memwr$\params$demo.v:106$54_ADDR[31:0]$381
   148/255: $0$memwr$\params$demo.v:105$53_DATA[7:0]$380
   149/255: $0$memwr$\params$demo.v:105$53_ADDR[31:0]$379
   150/255: $0$memwr$\params$demo.v:104$52_DATA[7:0]$378
   151/255: $0$memwr$\params$demo.v:104$52_ADDR[31:0]$377
   152/255: $0$memwr$\params$demo.v:103$51_DATA[7:0]$376
   153/255: $0$memwr$\params$demo.v:103$51_ADDR[31:0]$375
   154/255: $0$memwr$\params$demo.v:102$50_DATA[7:0]$374
   155/255: $0$memwr$\params$demo.v:102$50_ADDR[31:0]$373
   156/255: $0$memwr$\params$demo.v:101$49_DATA[7:0]$372
   157/255: $0$memwr$\params$demo.v:101$49_ADDR[31:0]$371
   158/255: $0$memwr$\num_params$demo.v:99$48_DATA[13:0]$370
   159/255: $0$memwr$\num_params$demo.v:99$48_ADDR[31:0]$369
   160/255: $0$memwr$\num_params$demo.v:98$47_DATA[13:0]$368
   161/255: $0$memwr$\num_params$demo.v:98$47_ADDR[31:0]$367
   162/255: $0$memwr$\num_params$demo.v:97$46_DATA[13:0]$366
   163/255: $0$memwr$\num_params$demo.v:97$46_ADDR[31:0]$365
   164/255: $0$memwr$\num_params$demo.v:96$45_DATA[13:0]$364
   165/255: $0$memwr$\num_params$demo.v:96$45_ADDR[31:0]$363
   166/255: $0$memwr$\num_params$demo.v:95$44_DATA[13:0]$362
   167/255: $0$memwr$\num_params$demo.v:95$44_ADDR[31:0]$361
   168/255: $0$memwr$\num_params$demo.v:94$43_DATA[13:0]$360
   169/255: $0$memwr$\num_params$demo.v:94$43_ADDR[31:0]$359
   170/255: $0$memwr$\num_params$demo.v:93$42_DATA[13:0]$358
   171/255: $0$memwr$\num_params$demo.v:93$42_ADDR[31:0]$357
   172/255: $0$memwr$\num_params$demo.v:92$41_DATA[13:0]$356
   173/255: $0$memwr$\num_params$demo.v:92$41_ADDR[31:0]$355
   174/255: $0$memwr$\num_params$demo.v:91$40_DATA[13:0]$354
   175/255: $0$memwr$\num_params$demo.v:91$40_ADDR[31:0]$353
   176/255: $0$memwr$\num_params$demo.v:90$39_DATA[13:0]$352
   177/255: $0$memwr$\num_params$demo.v:90$39_ADDR[31:0]$351
   178/255: $0$memwr$\num_params$demo.v:89$38_DATA[13:0]$350
   179/255: $0$memwr$\num_params$demo.v:89$38_ADDR[31:0]$349
   180/255: $0$memwr$\num_params$demo.v:88$37_DATA[13:0]$348
   181/255: $0$memwr$\num_params$demo.v:88$37_ADDR[31:0]$347
   182/255: $0$memwr$\num_params$demo.v:87$36_DATA[13:0]$346
   183/255: $0$memwr$\num_params$demo.v:87$36_ADDR[31:0]$345
   184/255: $0$memwr$\num_params$demo.v:86$35_DATA[13:0]$344
   185/255: $0$memwr$\num_params$demo.v:86$35_ADDR[31:0]$343
   186/255: $0$memwr$\num_params$demo.v:85$34_DATA[13:0]$342
   187/255: $0$memwr$\num_params$demo.v:85$34_ADDR[31:0]$341
   188/255: $0$memwr$\num_params$demo.v:84$33_DATA[13:0]$340
   189/255: $0$memwr$\num_params$demo.v:84$33_ADDR[31:0]$339
   190/255: $0$memwr$\num_params$demo.v:83$32_DATA[13:0]$338
   191/255: $0$memwr$\num_params$demo.v:83$32_ADDR[31:0]$337
   192/255: $0$memwr$\num_params$demo.v:82$31_DATA[13:0]$336
   193/255: $0$memwr$\num_params$demo.v:82$31_ADDR[31:0]$335
   194/255: $0$memwr$\num_params$demo.v:81$30_DATA[13:0]$334
   195/255: $0$memwr$\num_params$demo.v:81$30_ADDR[31:0]$333
   196/255: $0$memwr$\num_params$demo.v:80$29_DATA[13:0]$332
   197/255: $0$memwr$\num_params$demo.v:80$29_ADDR[31:0]$331
   198/255: $0$memwr$\num_params$demo.v:79$28_DATA[13:0]$330
   199/255: $0$memwr$\num_params$demo.v:79$28_ADDR[31:0]$329
   200/255: $0$memwr$\num_params$demo.v:78$27_DATA[13:0]$328
   201/255: $0$memwr$\num_params$demo.v:78$27_ADDR[31:0]$327
   202/255: $0$memwr$\num_params$demo.v:77$26_DATA[13:0]$326
   203/255: $0$memwr$\num_params$demo.v:77$26_ADDR[31:0]$325
   204/255: $0$memwr$\num_params$demo.v:76$25_DATA[13:0]$324
   205/255: $0$memwr$\num_params$demo.v:76$25_ADDR[31:0]$323
   206/255: $0$memwr$\cmd$demo.v:75$24_DATA[7:0]$322
   207/255: $0$memwr$\cmd$demo.v:75$24_ADDR[31:0]$321
   208/255: $0$memwr$\cmd$demo.v:74$23_DATA[7:0]$320
   209/255: $0$memwr$\cmd$demo.v:74$23_ADDR[31:0]$319
   210/255: $0$memwr$\cmd$demo.v:73$22_DATA[7:0]$318
   211/255: $0$memwr$\cmd$demo.v:73$22_ADDR[31:0]$317
   212/255: $0$memwr$\cmd$demo.v:72$21_DATA[7:0]$316
   213/255: $0$memwr$\cmd$demo.v:72$21_ADDR[31:0]$315
   214/255: $0$memwr$\cmd$demo.v:71$20_DATA[7:0]$314
   215/255: $0$memwr$\cmd$demo.v:71$20_ADDR[31:0]$313
   216/255: $0$memwr$\cmd$demo.v:70$19_DATA[7:0]$312
   217/255: $0$memwr$\cmd$demo.v:70$19_ADDR[31:0]$311
   218/255: $0$memwr$\cmd$demo.v:69$18_DATA[7:0]$310
   219/255: $0$memwr$\cmd$demo.v:69$18_ADDR[31:0]$309
   220/255: $0$memwr$\cmd$demo.v:68$17_DATA[7:0]$308
   221/255: $0$memwr$\cmd$demo.v:68$17_ADDR[31:0]$307
   222/255: $0$memwr$\cmd$demo.v:67$16_DATA[7:0]$306
   223/255: $0$memwr$\cmd$demo.v:67$16_ADDR[31:0]$305
   224/255: $0$memwr$\cmd$demo.v:66$15_DATA[7:0]$304
   225/255: $0$memwr$\cmd$demo.v:66$15_ADDR[31:0]$303
   226/255: $0$memwr$\cmd$demo.v:65$14_DATA[7:0]$302
   227/255: $0$memwr$\cmd$demo.v:65$14_ADDR[31:0]$301
   228/255: $0$memwr$\cmd$demo.v:64$13_DATA[7:0]$300
   229/255: $0$memwr$\cmd$demo.v:64$13_ADDR[31:0]$299
   230/255: $0$memwr$\cmd$demo.v:63$12_DATA[7:0]$298
   231/255: $0$memwr$\cmd$demo.v:63$12_ADDR[31:0]$297
   232/255: $0$memwr$\cmd$demo.v:62$11_DATA[7:0]$296
   233/255: $0$memwr$\cmd$demo.v:62$11_ADDR[31:0]$295
   234/255: $0$memwr$\cmd$demo.v:61$10_DATA[7:0]$294
   235/255: $0$memwr$\cmd$demo.v:61$10_ADDR[31:0]$293
   236/255: $0$memwr$\cmd$demo.v:60$9_DATA[7:0]$292
   237/255: $0$memwr$\cmd$demo.v:60$9_ADDR[31:0]$291
   238/255: $0$memwr$\cmd$demo.v:59$8_DATA[7:0]$290
   239/255: $0$memwr$\cmd$demo.v:59$8_ADDR[31:0]$289
   240/255: $0$memwr$\cmd$demo.v:58$7_DATA[7:0]$288
   241/255: $0$memwr$\cmd$demo.v:58$7_ADDR[31:0]$287
   242/255: $0$memwr$\cmd$demo.v:57$6_DATA[7:0]$286
   243/255: $0$memwr$\cmd$demo.v:57$6_ADDR[31:0]$285
   244/255: $0$memwr$\cmd$demo.v:56$5_DATA[7:0]$284
   245/255: $0$memwr$\cmd$demo.v:56$5_ADDR[31:0]$283
   246/255: $0$memwr$\cmd$demo.v:55$4_DATA[7:0]$282
   247/255: $0$memwr$\cmd$demo.v:55$4_ADDR[31:0]$281
   248/255: $0$memwr$\cmd$demo.v:54$3_DATA[7:0]$280
   249/255: $0$memwr$\cmd$demo.v:54$3_ADDR[31:0]$279
   250/255: $0$memwr$\cmd$demo.v:53$2_DATA[7:0]$278
   251/255: $0$memwr$\cmd$demo.v:53$2_ADDR[31:0]$277
   252/255: $0$memwr$\cmd$demo.v:52$1_DATA[7:0]$276
   253/255: $0$memwr$\cmd$demo.v:52$1_ADDR[31:0]$275
   254/255: $1\scl[0:0]
   255/255: $1\state[5:0]
Creating decoders for process `\demo.$proc$demo.v:189$127'.
     1/11: $0\params_left[13:0]
     2/11: $0\param_counter[6:0]
     3/11: $0\cmd_counter[4:0]
     4/11: $0\bit_counter[2:0]
     5/11: $0\data[7:0]
     6/11: $0\delay[15:0]
     7/11: $0\state[5:0]
     8/11: $0\cs[0:0]
     9/11: $0\mosi[0:0]
    10/11: $0\dc[0:0]
    11/11: $0\rst[0:0]
Creating decoders for process `\demo.$proc$demo.v:186$125'.
     1/1: $0\scl[0:0]

2.3.6. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:52$1_ADDR' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:52$1_DATA' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:53$2_ADDR' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:53$2_DATA' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:54$3_ADDR' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:54$3_DATA' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:55$4_ADDR' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:55$4_DATA' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:56$5_ADDR' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:56$5_DATA' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:57$6_ADDR' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:57$6_DATA' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:58$7_ADDR' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:58$7_DATA' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:59$8_ADDR' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:59$8_DATA' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:60$9_ADDR' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:60$9_DATA' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:61$10_ADDR' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:61$10_DATA' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:62$11_ADDR' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:62$11_DATA' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:63$12_ADDR' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:63$12_DATA' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:64$13_ADDR' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:64$13_DATA' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:65$14_ADDR' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:65$14_DATA' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:66$15_ADDR' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:66$15_DATA' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:67$16_ADDR' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:67$16_DATA' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:68$17_ADDR' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:68$17_DATA' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:69$18_ADDR' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:69$18_DATA' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:70$19_ADDR' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:70$19_DATA' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:71$20_ADDR' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:71$20_DATA' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:72$21_ADDR' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:72$21_DATA' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:73$22_ADDR' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:73$22_DATA' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:74$23_ADDR' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:74$23_DATA' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:75$24_ADDR' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\cmd$demo.v:75$24_DATA' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:76$25_ADDR' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:76$25_DATA' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:77$26_ADDR' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:77$26_DATA' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:78$27_ADDR' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:78$27_DATA' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:79$28_ADDR' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:79$28_DATA' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:80$29_ADDR' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:80$29_DATA' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:81$30_ADDR' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:81$30_DATA' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:82$31_ADDR' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:82$31_DATA' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:83$32_ADDR' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:83$32_DATA' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:84$33_ADDR' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:84$33_DATA' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:85$34_ADDR' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:85$34_DATA' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:86$35_ADDR' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:86$35_DATA' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:87$36_ADDR' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:87$36_DATA' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:88$37_ADDR' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:88$37_DATA' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:89$38_ADDR' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:89$38_DATA' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:90$39_ADDR' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:90$39_DATA' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:91$40_ADDR' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:91$40_DATA' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:92$41_ADDR' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:92$41_DATA' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:93$42_ADDR' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:93$42_DATA' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:94$43_ADDR' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:94$43_DATA' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:95$44_ADDR' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:95$44_DATA' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:96$45_ADDR' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:96$45_DATA' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:97$46_ADDR' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:97$46_DATA' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:98$47_ADDR' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:98$47_DATA' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:99$48_ADDR' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\num_params$demo.v:99$48_DATA' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:101$49_ADDR' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:101$49_DATA' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:102$50_ADDR' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:102$50_DATA' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:103$51_ADDR' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:103$51_DATA' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:104$52_ADDR' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:104$52_DATA' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:105$53_ADDR' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:105$53_DATA' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:106$54_ADDR' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:106$54_DATA' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:107$55_ADDR' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:107$55_DATA' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:108$56_ADDR' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:108$56_DATA' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:109$57_ADDR' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:109$57_DATA' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:110$58_ADDR' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:110$58_DATA' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:111$59_ADDR' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:111$59_DATA' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:112$60_ADDR' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:112$60_DATA' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:113$61_ADDR' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:113$61_DATA' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:114$62_ADDR' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:114$62_DATA' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:115$63_ADDR' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:115$63_DATA' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:116$64_ADDR' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:116$64_DATA' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:117$65_ADDR' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:117$65_DATA' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:118$66_ADDR' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:118$66_DATA' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:119$67_ADDR' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:119$67_DATA' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:120$68_ADDR' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:120$68_DATA' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:121$69_ADDR' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:121$69_DATA' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:122$70_ADDR' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:122$70_DATA' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:123$71_ADDR' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:123$71_DATA' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:124$72_ADDR' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:124$72_DATA' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:125$73_ADDR' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:125$73_DATA' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:126$74_ADDR' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:126$74_DATA' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:127$75_ADDR' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:127$75_DATA' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:128$76_ADDR' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:128$76_DATA' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:129$77_ADDR' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:129$77_DATA' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:130$78_ADDR' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:130$78_DATA' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:131$79_ADDR' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:131$79_DATA' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:132$80_ADDR' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:132$80_DATA' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:133$81_ADDR' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:133$81_DATA' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:134$82_ADDR' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:134$82_DATA' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:135$83_ADDR' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:135$83_DATA' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:136$84_ADDR' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:136$84_DATA' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:137$85_ADDR' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:137$85_DATA' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:138$86_ADDR' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:138$86_DATA' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:139$87_ADDR' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:139$87_DATA' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:140$88_ADDR' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:140$88_DATA' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:141$89_ADDR' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:141$89_DATA' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:142$90_ADDR' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:142$90_DATA' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:143$91_ADDR' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:143$91_DATA' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:144$92_ADDR' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:144$92_DATA' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:145$93_ADDR' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:145$93_DATA' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:146$94_ADDR' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:146$94_DATA' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:147$95_ADDR' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:147$95_DATA' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:148$96_ADDR' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:148$96_DATA' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:149$97_ADDR' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:149$97_DATA' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:150$98_ADDR' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:150$98_DATA' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:151$99_ADDR' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:151$99_DATA' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:152$100_ADDR' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:152$100_DATA' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:153$101_ADDR' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:153$101_DATA' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:154$102_ADDR' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:154$102_DATA' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:155$103_ADDR' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:155$103_DATA' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:156$104_ADDR' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:156$104_DATA' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:157$105_ADDR' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:157$105_DATA' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:158$106_ADDR' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:158$106_DATA' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:159$107_ADDR' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:159$107_DATA' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:160$108_ADDR' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:160$108_DATA' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:161$109_ADDR' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:161$109_DATA' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:162$110_ADDR' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:162$110_DATA' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:163$111_ADDR' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:163$111_DATA' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:164$112_ADDR' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:164$112_DATA' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:165$113_ADDR' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:165$113_DATA' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:166$114_ADDR' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:166$114_DATA' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:167$115_ADDR' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:167$115_DATA' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:168$116_ADDR' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:168$116_DATA' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:169$117_ADDR' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:169$117_DATA' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:170$118_ADDR' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:170$118_DATA' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:171$119_ADDR' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:171$119_DATA' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:172$120_ADDR' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:172$120_DATA' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:173$121_ADDR' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:173$121_DATA' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:174$122_ADDR' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:174$122_DATA' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:175$123_ADDR' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:175$123_DATA' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:176$124_ADDR' from process `\demo.$proc$demo.v:47$274'.
No latch inferred for signal `\demo.$memwr$\params$demo.v:176$124_DATA' from process `\demo.$proc$demo.v:47$274'.

2.3.7. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\demo.\rst' using process `\demo.$proc$demo.v:189$127'.
  created $dff cell `$procdff$658' with positive edge clock.
Creating register for signal `\demo.\dc' using process `\demo.$proc$demo.v:189$127'.
  created $dff cell `$procdff$659' with positive edge clock.
Creating register for signal `\demo.\mosi' using process `\demo.$proc$demo.v:189$127'.
  created $dff cell `$procdff$660' with positive edge clock.
Creating register for signal `\demo.\cs' using process `\demo.$proc$demo.v:189$127'.
  created $dff cell `$procdff$661' with positive edge clock.
Creating register for signal `\demo.\state' using process `\demo.$proc$demo.v:189$127'.
  created $dff cell `$procdff$662' with positive edge clock.
Creating register for signal `\demo.\delay' using process `\demo.$proc$demo.v:189$127'.
  created $dff cell `$procdff$663' with positive edge clock.
Creating register for signal `\demo.\data' using process `\demo.$proc$demo.v:189$127'.
  created $dff cell `$procdff$664' with positive edge clock.
Creating register for signal `\demo.\bit_counter' using process `\demo.$proc$demo.v:189$127'.
  created $dff cell `$procdff$665' with positive edge clock.
Creating register for signal `\demo.\cmd_counter' using process `\demo.$proc$demo.v:189$127'.
  created $dff cell `$procdff$666' with positive edge clock.
Creating register for signal `\demo.\param_counter' using process `\demo.$proc$demo.v:189$127'.
  created $dff cell `$procdff$667' with positive edge clock.
Creating register for signal `\demo.\params_left' using process `\demo.$proc$demo.v:189$127'.
  created $dff cell `$procdff$668' with positive edge clock.
Creating register for signal `\demo.\scl' using process `\demo.$proc$demo.v:186$125'.
  created $dff cell `$procdff$669' with positive edge clock.

2.3.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `demo.$proc$demo.v:47$274'.
Found and cleaned up 11 empty switches in `\demo.$proc$demo.v:189$127'.
Removing empty process `demo.$proc$demo.v:189$127'.
Removing empty process `demo.$proc$demo.v:186$125'.
Cleaned up 11 empty switches.

2.4. Executing FLATTEN pass (flatten design).
No more expansions possible.

2.5. Executing TRIBUF pass.

2.6. Executing DEMINOUT pass (demote inout ports to input or output).

2.7. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.
<suppressed ~14 debug messages>

2.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..
Removed 1 unused cells and 535 unused wires.
<suppressed ~2 debug messages>

2.9. Executing CHECK pass (checking for obvious problems).
checking module demo..
found and reported 0 problems.

2.10. Executing OPT pass (performing simple optimizations).

2.10.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.

2.10.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\demo'.
<suppressed ~69 debug messages>
Removed a total of 23 cells.

2.10.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \demo..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~11 debug messages>

2.10.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \demo.
    New ctrl vector for $pmux cell $procmux$574: { $procmux$573_CMP $procmux$616_CMP $procmux$572_CMP $procmux$568_CMP $procmux$540_CMP $procmux$548_CMP $procmux$595_CMP $procmux$591_CMP $procmux$587_CMP $procmux$583_CMP $procmux$525_CMP $auto$opt_reduce.cc:132:opt_mux$671 }
    New ctrl vector for $pmux cell $procmux$620: { $procmux$595_CMP $auto$opt_reduce.cc:132:opt_mux$673 }
    New ctrl vector for $pmux cell $procmux$637: { $procmux$603_CMP $auto$opt_reduce.cc:132:opt_mux$675 }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$670: { $procmux$524_CMP $procmux$603_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$674: { $procmux$525_CMP $procmux$573_CMP }
  Optimizing cells in module \demo.
Performed a total of 5 changes.

2.10.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\demo'.
Removed a total of 0 cells.

2.10.6. Executing OPT_RMDFF pass (remove dff with constant values).

2.10.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..
Removed 0 unused cells and 23 unused wires.
<suppressed ~1 debug messages>

2.10.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.

2.10.9. Rerunning OPT passes. (Maybe there is more to do..)

2.10.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \demo..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~11 debug messages>

2.10.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \demo.
Performed a total of 0 changes.

2.10.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\demo'.
Removed a total of 0 cells.

2.10.13. Executing OPT_RMDFF pass (remove dff with constant values).

2.10.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..

2.10.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.

2.10.16. Finished OPT passes. (There is nothing left to do.)

2.11. Executing WREDUCE pass (reducing word size of cells).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:52$150 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:53$151 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:54$152 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:55$153 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:56$154 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:57$155 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:58$156 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:59$157 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:60$158 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:61$159 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:62$160 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:63$161 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:64$162 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:65$163 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:66$164 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:67$165 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:68$166 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:69$167 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:70$168 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:71$169 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:72$170 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:73$171 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:74$172 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\cmd$demo.v:75$173 (cmd).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\num_params$demo.v:76$174 (num_params).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\num_params$demo.v:77$175 (num_params).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\num_params$demo.v:78$176 (num_params).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\num_params$demo.v:79$177 (num_params).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\num_params$demo.v:80$178 (num_params).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\num_params$demo.v:81$179 (num_params).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\num_params$demo.v:82$180 (num_params).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\num_params$demo.v:83$181 (num_params).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\num_params$demo.v:84$182 (num_params).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\num_params$demo.v:85$183 (num_params).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\num_params$demo.v:86$184 (num_params).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\num_params$demo.v:87$185 (num_params).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\num_params$demo.v:88$186 (num_params).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\num_params$demo.v:89$187 (num_params).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\num_params$demo.v:90$188 (num_params).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\num_params$demo.v:91$189 (num_params).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\num_params$demo.v:92$190 (num_params).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\num_params$demo.v:93$191 (num_params).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\num_params$demo.v:94$192 (num_params).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\num_params$demo.v:95$193 (num_params).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\num_params$demo.v:96$194 (num_params).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\num_params$demo.v:97$195 (num_params).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\num_params$demo.v:98$196 (num_params).
Removed top 27 address bits (of 32) from memory init port demo.$meminit$\num_params$demo.v:99$197 (num_params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:101$198 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:102$199 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:103$200 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:104$201 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:105$202 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:106$203 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:107$204 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:108$205 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:109$206 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:110$207 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:111$208 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:112$209 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:113$210 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:114$211 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:115$212 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:116$213 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:117$214 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:118$215 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:119$216 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:120$217 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:121$218 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:122$219 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:123$220 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:124$221 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:125$222 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:126$223 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:127$224 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:128$225 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:129$226 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:130$227 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:131$228 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:132$229 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:133$230 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:134$231 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:135$232 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:136$233 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:137$234 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:138$235 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:139$236 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:140$237 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:141$238 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:142$239 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:143$240 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:144$241 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:145$242 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:146$243 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:147$244 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:148$245 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:149$246 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:150$247 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:151$248 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:152$249 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:153$250 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:154$251 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:155$252 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:156$253 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:157$254 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:158$255 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:159$256 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:160$257 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:161$258 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:162$259 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:163$260 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:164$261 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:165$262 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:166$263 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:167$264 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:168$265 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:169$266 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:170$267 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:171$268 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:172$269 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:173$270 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:174$271 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:175$272 (params).
Removed top 25 address bits (of 32) from memory init port demo.$meminit$\params$demo.v:176$273 (params).
Removed top 9 bits (of 16) from port B of cell demo.$le$demo.v:205$128 ($le).
Removed top 15 bits (of 16) from port B of cell demo.$add$demo.v:207$129 ($add).
Removed top 2 bits (of 3) from port B of cell demo.$sub$demo.v:259$139 ($sub).
Removed top 13 bits (of 14) from port B of cell demo.$sub$demo.v:318$148 ($sub).
Removed top 1 bits (of 2) from port B of cell demo.$add$demo.v:319$149 ($add).
Removed top 2 bits (of 6) from port B of cell demo.$procmux$524_CMP0 ($eq).
Removed top 2 bits (of 6) from port B of cell demo.$procmux$525_CMP0 ($eq).
Removed top 3 bits (of 6) from port B of cell demo.$procmux$548_CMP0 ($eq).
Removed top 3 bits (of 6) from port B of cell demo.$procmux$540_CMP0 ($eq).
Removed top 4 bits (of 6) from port B of cell demo.$procmux$568_CMP0 ($eq).
Removed top 4 bits (of 6) from port B of cell demo.$procmux$572_CMP0 ($eq).
Removed top 2 bits (of 6) from mux cell demo.$procmux$578 ($mux).
Removed top 2 bits (of 6) from mux cell demo.$procmux$581 ($mux).
Removed top 2 bits (of 6) from port B of cell demo.$procmux$583_CMP0 ($eq).
Removed top 5 bits (of 6) from mux cell demo.$procmux$585 ($mux).
Removed top 2 bits (of 6) from port B of cell demo.$procmux$587_CMP0 ($eq).
Removed top 2 bits (of 6) from mux cell demo.$procmux$589 ($mux).
Removed top 2 bits (of 6) from port B of cell demo.$procmux$591_CMP0 ($eq).
Removed top 2 bits (of 6) from mux cell demo.$procmux$593 ($mux).
Removed top 3 bits (of 6) from port B of cell demo.$procmux$595_CMP0 ($eq).
Removed top 4 bits (of 6) from mux cell demo.$procmux$597 ($mux).
Removed top 2 bits (of 6) from mux cell demo.$procmux$600 ($mux).
Removed top 3 bits (of 6) from port B of cell demo.$procmux$603_CMP0 ($eq).
Removed top 5 bits (of 6) from mux cell demo.$procmux$605 ($mux).
Removed top 5 bits (of 6) from port B of cell demo.$procmux$616_CMP0 ($eq).
Removed top 2 bits (of 6) from wire demo.$procmux$578_Y.
Removed top 2 bits (of 6) from wire demo.$procmux$581_Y.
Removed top 5 bits (of 6) from wire demo.$procmux$585_Y.
Removed top 2 bits (of 6) from wire demo.$procmux$589_Y.
Removed top 2 bits (of 6) from wire demo.$procmux$593_Y.
Removed top 4 bits (of 6) from wire demo.$procmux$597_Y.
Removed top 2 bits (of 6) from wire demo.$procmux$600_Y.
Removed top 5 bits (of 6) from wire demo.$procmux$605_Y.

2.12. Executing PEEPOPT pass (run peephole optimizers).

2.13. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..
Removed 0 unused cells and 8 unused wires.
<suppressed ~1 debug messages>

2.14. Executing SHARE pass (SAT-based resource sharing).
Found 3 cells in module demo that may be considered for resource sharing.
  Analyzing resource sharing options for $memrd$\params$demo.v:317$147 ($memrd):
    Found 1 activation_patterns using ctrl signal $procmux$524_CMP.
    No candidates found.
  Analyzing resource sharing options for $memrd$\num_params$demo.v:313$145 ($memrd):
    Found 1 activation_patterns using ctrl signal $procmux$525_CMP.
    No candidates found.
  Analyzing resource sharing options for $memrd$\cmd$demo.v:228$132 ($memrd):
    Found 2 activation_patterns using ctrl signal { $procmux$540_CMP $eq$demo.v:228$133_Y }.
    No candidates found.

2.15. Executing TECHMAP pass (map to technology primitives).

2.15.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/cmp2lut.v
Parsing Verilog input from `/usr/bin/../share/yosys/cmp2lut.v' to AST representation.
Generating RTLIL representation for module `\_90_lut_cmp_'.
Successfully finished Verilog frontend.

2.15.2. Continuing TECHMAP pass.
Using template $paramod$77ad031fce233083715243f95e3cd2547d931e42\_90_lut_cmp_ for cells of type $eq.
No more expansions possible.
<suppressed ~248 debug messages>

2.16. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.

2.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..
Removed 0 unused cells and 3 unused wires.
<suppressed ~1 debug messages>

2.18. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module demo:
  creating $macc model for $add$demo.v:207$129 ($add).
  creating $macc model for $add$demo.v:235$135 ($add).
  creating $macc model for $add$demo.v:319$149 ($add).
  creating $macc model for $sub$demo.v:259$139 ($sub).
  creating $macc model for $sub$demo.v:313$146 ($sub).
  creating $macc model for $sub$demo.v:318$148 ($sub).
  creating $alu model for $macc $sub$demo.v:318$148.
  creating $alu model for $macc $sub$demo.v:313$146.
  creating $alu model for $macc $sub$demo.v:259$139.
  creating $alu model for $macc $add$demo.v:319$149.
  creating $alu model for $macc $add$demo.v:235$135.
  creating $alu model for $macc $add$demo.v:207$129.
  creating $alu model for $le$demo.v:205$128 ($le): new $alu
  creating $alu model for $le$demo.v:217$130 ($le): new $alu
  creating $alu cell for $le$demo.v:217$130: $auto$alumacc.cc:474:replace_alu$688
  creating $alu cell for $le$demo.v:205$128: $auto$alumacc.cc:474:replace_alu$697
  creating $alu cell for $add$demo.v:207$129: $auto$alumacc.cc:474:replace_alu$710
  creating $alu cell for $add$demo.v:235$135: $auto$alumacc.cc:474:replace_alu$713
  creating $alu cell for $add$demo.v:319$149: $auto$alumacc.cc:474:replace_alu$716
  creating $alu cell for $sub$demo.v:259$139: $auto$alumacc.cc:474:replace_alu$719
  creating $alu cell for $sub$demo.v:313$146: $auto$alumacc.cc:474:replace_alu$722
  creating $alu cell for $sub$demo.v:318$148: $auto$alumacc.cc:474:replace_alu$725
  created 8 $alu and 0 $macc cells.

2.19. Executing OPT pass (performing simple optimizations).

2.19.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.

2.19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\demo'.
Removed a total of 0 cells.

2.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \demo..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~11 debug messages>

2.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \demo.
    New input vector for $reduce_or cell $auto$alumacc.cc:509:replace_alu$695: { $auto$rtlil.cc:1832:Not$692 $auto$rtlil.cc:1835:ReduceAnd$694 }
    New input vector for $reduce_or cell $auto$alumacc.cc:509:replace_alu$708: { $auto$rtlil.cc:1832:Not$707 $auto$rtlil.cc:1835:ReduceAnd$701 }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$693: { $auto$alumacc.cc:490:replace_alu$689 [0] $auto$alumacc.cc:490:replace_alu$689 [1] $auto$alumacc.cc:490:replace_alu$689 [2] $auto$alumacc.cc:490:replace_alu$689 [3] $auto$alumacc.cc:490:replace_alu$689 [4] $auto$alumacc.cc:490:replace_alu$689 [5] $auto$alumacc.cc:490:replace_alu$689 [6] $auto$alumacc.cc:490:replace_alu$689 [7] $auto$alumacc.cc:490:replace_alu$689 [8] $auto$alumacc.cc:490:replace_alu$689 [9] $auto$alumacc.cc:490:replace_alu$689 [10] $auto$alumacc.cc:490:replace_alu$689 [11] $auto$alumacc.cc:490:replace_alu$689 [12] $auto$alumacc.cc:490:replace_alu$689 [13] $auto$alumacc.cc:490:replace_alu$689 [14] $auto$alumacc.cc:490:replace_alu$689 [15] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$700: { $auto$alumacc.cc:490:replace_alu$698 [0] $auto$alumacc.cc:490:replace_alu$698 [1] $auto$alumacc.cc:490:replace_alu$698 [2] $auto$alumacc.cc:490:replace_alu$698 [3] $auto$alumacc.cc:490:replace_alu$698 [4] $auto$alumacc.cc:490:replace_alu$698 [5] $auto$alumacc.cc:490:replace_alu$698 [6] $auto$alumacc.cc:490:replace_alu$698 [7] $auto$alumacc.cc:490:replace_alu$698 [8] $auto$alumacc.cc:490:replace_alu$698 [9] $auto$alumacc.cc:490:replace_alu$698 [10] $auto$alumacc.cc:490:replace_alu$698 [11] $auto$alumacc.cc:490:replace_alu$698 [12] $auto$alumacc.cc:490:replace_alu$698 [13] $auto$alumacc.cc:490:replace_alu$698 [14] $auto$alumacc.cc:490:replace_alu$698 [15] }
  Optimizing cells in module \demo.
Performed a total of 4 changes.

2.19.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\demo'.
Removed a total of 0 cells.

2.19.6. Executing OPT_RMDFF pass (remove dff with constant values).

2.19.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

2.19.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.

2.19.9. Rerunning OPT passes. (Maybe there is more to do..)

2.19.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \demo..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~11 debug messages>

2.19.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \demo.
Performed a total of 0 changes.

2.19.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\demo'.
Removed a total of 0 cells.

2.19.13. Executing OPT_RMDFF pass (remove dff with constant values).

2.19.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..

2.19.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.

2.19.16. Finished OPT passes. (There is nothing left to do.)

2.20. Executing FSM pass (extract and optimize FSM).

2.20.1. Executing FSM_DETECT pass (finding FSMs in design).
Not marking demo.state as FSM state register:
    Register has an initialization value.

2.20.2. Executing FSM_EXTRACT pass (extracting FSM from design).

2.20.3. Executing FSM_OPT pass (simple optimizations of FSMs).

2.20.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..

2.20.5. Executing FSM_OPT pass (simple optimizations of FSMs).

2.20.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

2.20.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

2.20.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

2.21. Executing OPT pass (performing simple optimizations).

2.21.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.

2.21.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\demo'.
Removed a total of 0 cells.

2.21.3. Executing OPT_RMDFF pass (remove dff with constant values).

2.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..

2.21.5. Finished fast OPT passes.

2.22. Executing MEMORY pass.

2.22.1. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).
Checking cell `$memrd$\cmd$demo.v:228$132' in module `\demo': no (compatible) $dff found.
Checking cell `$memrd$\num_params$demo.v:313$145' in module `\demo': no (compatible) $dff found.
Checking cell `$memrd$\params$demo.v:317$147' in module `\demo': no (compatible) $dff found.

2.22.2. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..

2.22.3. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

2.22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..

2.22.5. Executing MEMORY_COLLECT pass (generating $mem cells).
Collecting $memrd, $memwr and $meminit for memory `\cmd' in module `\demo':
  $meminit$\cmd$demo.v:52$150 ($meminit)
  $meminit$\cmd$demo.v:53$151 ($meminit)
  $meminit$\cmd$demo.v:54$152 ($meminit)
  $meminit$\cmd$demo.v:55$153 ($meminit)
  $meminit$\cmd$demo.v:56$154 ($meminit)
  $meminit$\cmd$demo.v:57$155 ($meminit)
  $meminit$\cmd$demo.v:58$156 ($meminit)
  $meminit$\cmd$demo.v:59$157 ($meminit)
  $meminit$\cmd$demo.v:60$158 ($meminit)
  $meminit$\cmd$demo.v:61$159 ($meminit)
  $meminit$\cmd$demo.v:62$160 ($meminit)
  $meminit$\cmd$demo.v:63$161 ($meminit)
  $meminit$\cmd$demo.v:64$162 ($meminit)
  $meminit$\cmd$demo.v:65$163 ($meminit)
  $meminit$\cmd$demo.v:66$164 ($meminit)
  $meminit$\cmd$demo.v:67$165 ($meminit)
  $meminit$\cmd$demo.v:68$166 ($meminit)
  $meminit$\cmd$demo.v:69$167 ($meminit)
  $meminit$\cmd$demo.v:70$168 ($meminit)
  $meminit$\cmd$demo.v:71$169 ($meminit)
  $meminit$\cmd$demo.v:72$170 ($meminit)
  $meminit$\cmd$demo.v:73$171 ($meminit)
  $meminit$\cmd$demo.v:74$172 ($meminit)
  $meminit$\cmd$demo.v:75$173 ($meminit)
  $memrd$\cmd$demo.v:228$132 ($memrd)
Collecting $memrd, $memwr and $meminit for memory `\num_params' in module `\demo':
  $meminit$\num_params$demo.v:76$174 ($meminit)
  $meminit$\num_params$demo.v:77$175 ($meminit)
  $meminit$\num_params$demo.v:78$176 ($meminit)
  $meminit$\num_params$demo.v:79$177 ($meminit)
  $meminit$\num_params$demo.v:80$178 ($meminit)
  $meminit$\num_params$demo.v:81$179 ($meminit)
  $meminit$\num_params$demo.v:82$180 ($meminit)
  $meminit$\num_params$demo.v:83$181 ($meminit)
  $meminit$\num_params$demo.v:84$182 ($meminit)
  $meminit$\num_params$demo.v:85$183 ($meminit)
  $meminit$\num_params$demo.v:86$184 ($meminit)
  $meminit$\num_params$demo.v:87$185 ($meminit)
  $meminit$\num_params$demo.v:88$186 ($meminit)
  $meminit$\num_params$demo.v:89$187 ($meminit)
  $meminit$\num_params$demo.v:90$188 ($meminit)
  $meminit$\num_params$demo.v:91$189 ($meminit)
  $meminit$\num_params$demo.v:92$190 ($meminit)
  $meminit$\num_params$demo.v:93$191 ($meminit)
  $meminit$\num_params$demo.v:94$192 ($meminit)
  $meminit$\num_params$demo.v:95$193 ($meminit)
  $meminit$\num_params$demo.v:96$194 ($meminit)
  $meminit$\num_params$demo.v:97$195 ($meminit)
  $meminit$\num_params$demo.v:98$196 ($meminit)
  $meminit$\num_params$demo.v:99$197 ($meminit)
  $memrd$\num_params$demo.v:313$145 ($memrd)
Collecting $memrd, $memwr and $meminit for memory `\params' in module `\demo':
  $meminit$\params$demo.v:101$198 ($meminit)
  $meminit$\params$demo.v:102$199 ($meminit)
  $meminit$\params$demo.v:103$200 ($meminit)
  $meminit$\params$demo.v:104$201 ($meminit)
  $meminit$\params$demo.v:105$202 ($meminit)
  $meminit$\params$demo.v:106$203 ($meminit)
  $meminit$\params$demo.v:107$204 ($meminit)
  $meminit$\params$demo.v:108$205 ($meminit)
  $meminit$\params$demo.v:109$206 ($meminit)
  $meminit$\params$demo.v:110$207 ($meminit)
  $meminit$\params$demo.v:111$208 ($meminit)
  $meminit$\params$demo.v:112$209 ($meminit)
  $meminit$\params$demo.v:113$210 ($meminit)
  $meminit$\params$demo.v:114$211 ($meminit)
  $meminit$\params$demo.v:115$212 ($meminit)
  $meminit$\params$demo.v:116$213 ($meminit)
  $meminit$\params$demo.v:117$214 ($meminit)
  $meminit$\params$demo.v:118$215 ($meminit)
  $meminit$\params$demo.v:119$216 ($meminit)
  $meminit$\params$demo.v:120$217 ($meminit)
  $meminit$\params$demo.v:121$218 ($meminit)
  $meminit$\params$demo.v:122$219 ($meminit)
  $meminit$\params$demo.v:123$220 ($meminit)
  $meminit$\params$demo.v:124$221 ($meminit)
  $meminit$\params$demo.v:125$222 ($meminit)
  $meminit$\params$demo.v:126$223 ($meminit)
  $meminit$\params$demo.v:127$224 ($meminit)
  $meminit$\params$demo.v:128$225 ($meminit)
  $meminit$\params$demo.v:129$226 ($meminit)
  $meminit$\params$demo.v:130$227 ($meminit)
  $meminit$\params$demo.v:131$228 ($meminit)
  $meminit$\params$demo.v:132$229 ($meminit)
  $meminit$\params$demo.v:133$230 ($meminit)
  $meminit$\params$demo.v:134$231 ($meminit)
  $meminit$\params$demo.v:135$232 ($meminit)
  $meminit$\params$demo.v:136$233 ($meminit)
  $meminit$\params$demo.v:137$234 ($meminit)
  $meminit$\params$demo.v:138$235 ($meminit)
  $meminit$\params$demo.v:139$236 ($meminit)
  $meminit$\params$demo.v:140$237 ($meminit)
  $meminit$\params$demo.v:141$238 ($meminit)
  $meminit$\params$demo.v:142$239 ($meminit)
  $meminit$\params$demo.v:143$240 ($meminit)
  $meminit$\params$demo.v:144$241 ($meminit)
  $meminit$\params$demo.v:145$242 ($meminit)
  $meminit$\params$demo.v:146$243 ($meminit)
  $meminit$\params$demo.v:147$244 ($meminit)
  $meminit$\params$demo.v:148$245 ($meminit)
  $meminit$\params$demo.v:149$246 ($meminit)
  $meminit$\params$demo.v:150$247 ($meminit)
  $meminit$\params$demo.v:151$248 ($meminit)
  $meminit$\params$demo.v:152$249 ($meminit)
  $meminit$\params$demo.v:153$250 ($meminit)
  $meminit$\params$demo.v:154$251 ($meminit)
  $meminit$\params$demo.v:155$252 ($meminit)
  $meminit$\params$demo.v:156$253 ($meminit)
  $meminit$\params$demo.v:157$254 ($meminit)
  $meminit$\params$demo.v:158$255 ($meminit)
  $meminit$\params$demo.v:159$256 ($meminit)
  $meminit$\params$demo.v:160$257 ($meminit)
  $meminit$\params$demo.v:161$258 ($meminit)
  $meminit$\params$demo.v:162$259 ($meminit)
  $meminit$\params$demo.v:163$260 ($meminit)
  $meminit$\params$demo.v:164$261 ($meminit)
  $meminit$\params$demo.v:165$262 ($meminit)
  $meminit$\params$demo.v:166$263 ($meminit)
  $meminit$\params$demo.v:167$264 ($meminit)
  $meminit$\params$demo.v:168$265 ($meminit)
  $meminit$\params$demo.v:169$266 ($meminit)
  $meminit$\params$demo.v:170$267 ($meminit)
  $meminit$\params$demo.v:171$268 ($meminit)
  $meminit$\params$demo.v:172$269 ($meminit)
  $meminit$\params$demo.v:173$270 ($meminit)
  $meminit$\params$demo.v:174$271 ($meminit)
  $meminit$\params$demo.v:175$272 ($meminit)
  $meminit$\params$demo.v:176$273 ($meminit)
  $memrd$\params$demo.v:317$147 ($memrd)

2.23. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..

2.24. Executing MEMORY_BRAM pass (mapping $mem cells to block memories).
Processing demo.cmd:
  Properties: ports=1 bits=192 rports=1 wports=0 dbits=8 abits=5 words=24
  Checking rule #1 for bram type $__ICE40_RAM4K_M0 (variant 1):
    Bram geometry: abits=8 dbits=16 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M0: awaste=232 dwaste=8 bwaste=3904 waste=3904 efficiency=4
    Rule #1 for bram type $__ICE40_RAM4K_M0 (variant 1) accepted.
    Mapping to bram type $__ICE40_RAM4K_M0 (variant 1):
      Read port #0 is in clock domain !~async~.
        Bram port A1.1 has incompatible clock type.
        Failed to map read port #0.
    Mapping to bram type $__ICE40_RAM4K_M0 failed.
  Checking rule #2 for bram type $__ICE40_RAM4K_M123 (variant 1):
    Bram geometry: abits=9 dbits=8 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=488 dwaste=0 bwaste=3904 waste=3904 efficiency=4
    Rule #2 for bram type $__ICE40_RAM4K_M123 (variant 1) accepted.
    Mapping to bram type $__ICE40_RAM4K_M123 (variant 1):
      Read port #0 is in clock domain !~async~.
        Bram port A1.1 has incompatible clock type.
        Failed to map read port #0.
    Mapping to bram type $__ICE40_RAM4K_M123 failed.
  Checking rule #2 for bram type $__ICE40_RAM4K_M123 (variant 2):
    Bram geometry: abits=10 dbits=4 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=1000 dwaste=0 bwaste=4000 waste=4000 efficiency=2
    Rule #2 for bram type $__ICE40_RAM4K_M123 (variant 2) accepted.
    Mapping to bram type $__ICE40_RAM4K_M123 (variant 2):
      Read port #0 is in clock domain !~async~.
        Bram port A1.1 has incompatible clock type.
        Failed to map read port #0.
    Mapping to bram type $__ICE40_RAM4K_M123 failed.
  Checking rule #2 for bram type $__ICE40_RAM4K_M123 (variant 3):
    Bram geometry: abits=11 dbits=2 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=2024 dwaste=0 bwaste=4048 waste=4048 efficiency=1
    Rule #2 for bram type $__ICE40_RAM4K_M123 (variant 3) rejected: requirement 'min efficiency 2' not met.
  No acceptable bram resources found.
Processing demo.num_params:
  Properties: ports=1 bits=336 rports=1 wports=0 dbits=14 abits=5 words=24
  Checking rule #1 for bram type $__ICE40_RAM4K_M0 (variant 1):
    Bram geometry: abits=8 dbits=16 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M0: awaste=232 dwaste=2 bwaste=3760 waste=3760 efficiency=8
    Rule #1 for bram type $__ICE40_RAM4K_M0 (variant 1) accepted.
    Mapping to bram type $__ICE40_RAM4K_M0 (variant 1):
      Read port #0 is in clock domain !~async~.
        Bram port A1.1 has incompatible clock type.
        Failed to map read port #0.
    Mapping to bram type $__ICE40_RAM4K_M0 failed.
  Checking rule #2 for bram type $__ICE40_RAM4K_M123 (variant 1):
    Bram geometry: abits=9 dbits=8 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=488 dwaste=2 bwaste=3952 waste=3952 efficiency=4
    Rule #2 for bram type $__ICE40_RAM4K_M123 (variant 1) accepted.
    Mapping to bram type $__ICE40_RAM4K_M123 (variant 1):
      Read port #0 is in clock domain !~async~.
        Bram port A1.1 has incompatible clock type.
        Failed to map read port #0.
    Mapping to bram type $__ICE40_RAM4K_M123 failed.
  Checking rule #2 for bram type $__ICE40_RAM4K_M123 (variant 2):
    Bram geometry: abits=10 dbits=4 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=1000 dwaste=2 bwaste=4048 waste=4048 efficiency=2
    Rule #2 for bram type $__ICE40_RAM4K_M123 (variant 2) accepted.
    Mapping to bram type $__ICE40_RAM4K_M123 (variant 2):
      Read port #0 is in clock domain !~async~.
        Bram port A1.1 has incompatible clock type.
        Failed to map read port #0.
    Mapping to bram type $__ICE40_RAM4K_M123 failed.
  Checking rule #2 for bram type $__ICE40_RAM4K_M123 (variant 3):
    Bram geometry: abits=11 dbits=2 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=2024 dwaste=0 bwaste=4048 waste=4048 efficiency=1
    Rule #2 for bram type $__ICE40_RAM4K_M123 (variant 3) rejected: requirement 'min efficiency 2' not met.
  No acceptable bram resources found.
Processing demo.params:
  Properties: ports=1 bits=608 rports=1 wports=0 dbits=8 abits=7 words=76
  Checking rule #1 for bram type $__ICE40_RAM4K_M0 (variant 1):
    Bram geometry: abits=8 dbits=16 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M0: awaste=180 dwaste=8 bwaste=3488 waste=3488 efficiency=14
    Rule #1 for bram type $__ICE40_RAM4K_M0 (variant 1) accepted.
    Mapping to bram type $__ICE40_RAM4K_M0 (variant 1):
      Read port #0 is in clock domain !~async~.
        Bram port A1.1 has incompatible clock type.
        Failed to map read port #0.
    Mapping to bram type $__ICE40_RAM4K_M0 failed.
  Checking rule #2 for bram type $__ICE40_RAM4K_M123 (variant 1):
    Bram geometry: abits=9 dbits=8 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=436 dwaste=0 bwaste=3488 waste=3488 efficiency=14
    Rule #2 for bram type $__ICE40_RAM4K_M123 (variant 1) accepted.
    Mapping to bram type $__ICE40_RAM4K_M123 (variant 1):
      Read port #0 is in clock domain !~async~.
        Bram port A1.1 has incompatible clock type.
        Failed to map read port #0.
    Mapping to bram type $__ICE40_RAM4K_M123 failed.
  Checking rule #2 for bram type $__ICE40_RAM4K_M123 (variant 2):
    Bram geometry: abits=10 dbits=4 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=948 dwaste=0 bwaste=3792 waste=3792 efficiency=7
    Rule #2 for bram type $__ICE40_RAM4K_M123 (variant 2) accepted.
    Mapping to bram type $__ICE40_RAM4K_M123 (variant 2):
      Read port #0 is in clock domain !~async~.
        Bram port A1.1 has incompatible clock type.
        Failed to map read port #0.
    Mapping to bram type $__ICE40_RAM4K_M123 failed.
  Checking rule #2 for bram type $__ICE40_RAM4K_M123 (variant 3):
    Bram geometry: abits=11 dbits=2 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=1972 dwaste=0 bwaste=3944 waste=3944 efficiency=3
    Rule #2 for bram type $__ICE40_RAM4K_M123 (variant 3) accepted.
    Mapping to bram type $__ICE40_RAM4K_M123 (variant 3):
      Read port #0 is in clock domain !~async~.
        Bram port A1.1 has incompatible clock type.
        Failed to map read port #0.
    Mapping to bram type $__ICE40_RAM4K_M123 failed.
  No acceptable bram resources found.

2.25. Executing TECHMAP pass (map to technology primitives).

2.25.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/brams_map.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/brams_map.v' to AST representation.
Generating RTLIL representation for module `\$__ICE40_RAM4K'.
Generating RTLIL representation for module `\$__ICE40_RAM4K_M0'.
Generating RTLIL representation for module `\$__ICE40_RAM4K_M123'.
Successfully finished Verilog frontend.

2.25.2. Continuing TECHMAP pass.
No more expansions possible.

2.26. Executing ICE40_BRAMINIT pass.

2.27. Executing OPT pass (performing simple optimizations).

2.27.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.
<suppressed ~1 debug messages>

2.27.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\demo'.
Removed a total of 0 cells.

2.27.3. Executing OPT_RMDFF pass (remove dff with constant values).

2.27.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

2.27.5. Finished fast OPT passes.

2.28. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).
Mapping memory cell \cmd in module \demo:
  created 24 $dff cells and 0 static cells of width 8.
  read interface: 0 $dff and 31 $mux cells.
  write interface: 0 write mux blocks.
Mapping memory cell \num_params in module \demo:
  created 24 $dff cells and 0 static cells of width 14.
  read interface: 0 $dff and 31 $mux cells.
  write interface: 0 write mux blocks.
Mapping memory cell \params in module \demo:
  created 76 $dff cells and 0 static cells of width 8.
  read interface: 0 $dff and 127 $mux cells.
  write interface: 0 write mux blocks.

2.29. Executing OPT pass (performing simple optimizations).

2.29.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.
<suppressed ~153 debug messages>

2.29.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\demo'.
Removed a total of 0 cells.

2.29.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \demo..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~12 debug messages>

2.29.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \demo.
    Consolidated identical input bits for $mux cell $procmux$578:
      Old ports: A=4'1100, B=4'0100, Y=$auto$wreduce.cc:455:run$676 [3:0]
      New ports: A=1'1, B=1'0, Y=$auto$wreduce.cc:455:run$676 [3]
      New connections: $auto$wreduce.cc:455:run$676 [2:0] = 3'100
    Consolidated identical input bits for $mux cell $procmux$589:
      Old ports: A=4'1010, B=4'0110, Y=$auto$wreduce.cc:455:run$679 [3:0]
      New ports: A=2'10, B=2'01, Y=$auto$wreduce.cc:455:run$679 [3:2]
      New connections: $auto$wreduce.cc:455:run$679 [1:0] = 2'10
    Consolidated identical input bits for $mux cell $procmux$593:
      Old ports: A=4'0111, B=4'1010, Y=$auto$wreduce.cc:455:run$680 [3:0]
      New ports: A=2'01, B=2'10, Y={ $auto$wreduce.cc:455:run$680 [3] $auto$wreduce.cc:455:run$680 [0] }
      New connections: $auto$wreduce.cc:455:run$680 [2:1] = { $auto$wreduce.cc:455:run$680 [0] 1'1 }
    Consolidated identical input bits for $mux cell $procmux$597:
      Old ports: A=2'10, B=2'00, Y=$auto$wreduce.cc:455:run$681 [1:0]
      New ports: A=1'1, B=1'0, Y=$auto$wreduce.cc:455:run$681 [1]
      New connections: $auto$wreduce.cc:455:run$681 [0] = 1'0
  Optimizing cells in module \demo.
    Consolidated identical input bits for $mux cell $procmux$581:
      Old ports: A=4'1011, B=$auto$wreduce.cc:455:run$676 [3:0], Y=$auto$wreduce.cc:455:run$677 [3:0]
      New ports: A=3'101, B={ $auto$wreduce.cc:455:run$676 [3] 2'10 }, Y={ $auto$wreduce.cc:455:run$677 [3:2] $auto$wreduce.cc:455:run$677 [0] }
      New connections: $auto$wreduce.cc:455:run$677 [1] = $auto$wreduce.cc:455:run$677 [0]
    Consolidated identical input bits for $mux cell $procmux$600:
      Old ports: A={ 2'10 $auto$wreduce.cc:455:run$681 [1:0] }, B=4'0111, Y=$auto$wreduce.cc:455:run$682 [3:0]
      New ports: A={ 1'1 $auto$wreduce.cc:455:run$681 [1] 1'0 }, B=3'011, Y={ $auto$wreduce.cc:455:run$682 [3] $auto$wreduce.cc:455:run$682 [1:0] }
      New connections: $auto$wreduce.cc:455:run$682 [2] = $auto$wreduce.cc:455:run$682 [0]
  Optimizing cells in module \demo.
Performed a total of 6 changes.

2.29.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\demo'.
Removed a total of 0 cells.

2.29.6. Executing OPT_RMDFF pass (remove dff with constant values).
Removing $memory\params[75]$1166 ($dff) from module demo.
Removing $memory\params[74]$1164 ($dff) from module demo.
Removing $memory\params[73]$1162 ($dff) from module demo.
Removing $memory\params[72]$1160 ($dff) from module demo.
Removing $memory\params[71]$1158 ($dff) from module demo.
Removing $memory\params[70]$1156 ($dff) from module demo.
Removing $memory\params[69]$1154 ($dff) from module demo.
Removing $memory\params[68]$1152 ($dff) from module demo.
Removing $memory\params[67]$1150 ($dff) from module demo.
Removing $memory\params[66]$1148 ($dff) from module demo.
Removing $memory\params[65]$1146 ($dff) from module demo.
Removing $memory\params[64]$1144 ($dff) from module demo.
Removing $memory\params[63]$1142 ($dff) from module demo.
Removing $memory\params[62]$1140 ($dff) from module demo.
Removing $memory\params[61]$1138 ($dff) from module demo.
Removing $memory\params[60]$1136 ($dff) from module demo.
Removing $memory\params[59]$1134 ($dff) from module demo.
Removing $memory\params[58]$1132 ($dff) from module demo.
Removing $memory\params[57]$1130 ($dff) from module demo.
Removing $memory\params[56]$1128 ($dff) from module demo.
Removing $memory\params[55]$1126 ($dff) from module demo.
Removing $memory\params[54]$1124 ($dff) from module demo.
Removing $memory\params[53]$1122 ($dff) from module demo.
Removing $memory\params[52]$1120 ($dff) from module demo.
Removing $memory\params[51]$1118 ($dff) from module demo.
Removing $memory\params[50]$1116 ($dff) from module demo.
Removing $memory\params[49]$1114 ($dff) from module demo.
Removing $memory\params[48]$1112 ($dff) from module demo.
Removing $memory\params[47]$1110 ($dff) from module demo.
Removing $memory\params[46]$1108 ($dff) from module demo.
Removing $memory\params[45]$1106 ($dff) from module demo.
Removing $memory\params[44]$1104 ($dff) from module demo.
Removing $memory\params[43]$1102 ($dff) from module demo.
Removing $memory\params[42]$1100 ($dff) from module demo.
Removing $memory\params[41]$1098 ($dff) from module demo.
Removing $memory\params[40]$1096 ($dff) from module demo.
Removing $memory\params[39]$1094 ($dff) from module demo.
Removing $memory\params[38]$1092 ($dff) from module demo.
Removing $memory\params[37]$1090 ($dff) from module demo.
Removing $memory\params[36]$1088 ($dff) from module demo.
Removing $memory\params[35]$1086 ($dff) from module demo.
Removing $memory\params[34]$1084 ($dff) from module demo.
Removing $memory\params[33]$1082 ($dff) from module demo.
Removing $memory\params[32]$1080 ($dff) from module demo.
Removing $memory\params[31]$1078 ($dff) from module demo.
Removing $memory\params[30]$1076 ($dff) from module demo.
Removing $memory\params[29]$1074 ($dff) from module demo.
Removing $memory\params[28]$1072 ($dff) from module demo.
Removing $memory\params[27]$1070 ($dff) from module demo.
Removing $memory\params[26]$1068 ($dff) from module demo.
Removing $memory\params[25]$1066 ($dff) from module demo.
Removing $memory\params[24]$1064 ($dff) from module demo.
Removing $memory\params[23]$1062 ($dff) from module demo.
Removing $memory\params[22]$1060 ($dff) from module demo.
Removing $memory\params[21]$1058 ($dff) from module demo.
Removing $memory\params[20]$1056 ($dff) from module demo.
Removing $memory\params[19]$1054 ($dff) from module demo.
Removing $memory\params[18]$1052 ($dff) from module demo.
Removing $memory\params[17]$1050 ($dff) from module demo.
Removing $memory\params[16]$1048 ($dff) from module demo.
Removing $memory\params[15]$1046 ($dff) from module demo.
Removing $memory\params[14]$1044 ($dff) from module demo.
Removing $memory\params[13]$1042 ($dff) from module demo.
Removing $memory\params[12]$1040 ($dff) from module demo.
Removing $memory\params[11]$1038 ($dff) from module demo.
Removing $memory\params[10]$1036 ($dff) from module demo.
Removing $memory\params[9]$1034 ($dff) from module demo.
Removing $memory\params[8]$1032 ($dff) from module demo.
Removing $memory\params[7]$1030 ($dff) from module demo.
Removing $memory\params[6]$1028 ($dff) from module demo.
Removing $memory\params[5]$1026 ($dff) from module demo.
Removing $memory\params[4]$1024 ($dff) from module demo.
Removing $memory\params[3]$1022 ($dff) from module demo.
Removing $memory\params[2]$1020 ($dff) from module demo.
Removing $memory\params[1]$1018 ($dff) from module demo.
Removing $memory\params[0]$1016 ($dff) from module demo.
Removing $memory\num_params[23]$921 ($dff) from module demo.
Removing $memory\num_params[22]$919 ($dff) from module demo.
Removing $memory\num_params[21]$917 ($dff) from module demo.
Removing $memory\num_params[20]$915 ($dff) from module demo.
Removing $memory\num_params[19]$913 ($dff) from module demo.
Removing $memory\num_params[18]$911 ($dff) from module demo.
Removing $memory\num_params[17]$909 ($dff) from module demo.
Removing $memory\num_params[16]$907 ($dff) from module demo.
Removing $memory\num_params[15]$905 ($dff) from module demo.
Removing $memory\num_params[14]$903 ($dff) from module demo.
Removing $memory\num_params[13]$901 ($dff) from module demo.
Removing $memory\num_params[12]$899 ($dff) from module demo.
Removing $memory\num_params[11]$897 ($dff) from module demo.
Removing $memory\num_params[10]$895 ($dff) from module demo.
Removing $memory\num_params[9]$893 ($dff) from module demo.
Removing $memory\num_params[8]$891 ($dff) from module demo.
Removing $memory\num_params[7]$889 ($dff) from module demo.
Removing $memory\num_params[6]$887 ($dff) from module demo.
Removing $memory\num_params[5]$885 ($dff) from module demo.
Removing $memory\num_params[4]$883 ($dff) from module demo.
Removing $memory\num_params[3]$881 ($dff) from module demo.
Removing $memory\num_params[2]$879 ($dff) from module demo.
Removing $memory\num_params[1]$877 ($dff) from module demo.
Removing $memory\num_params[0]$875 ($dff) from module demo.
Removing $memory\cmd[23]$780 ($dff) from module demo.
Removing $memory\cmd[22]$778 ($dff) from module demo.
Removing $memory\cmd[21]$776 ($dff) from module demo.
Removing $memory\cmd[20]$774 ($dff) from module demo.
Removing $memory\cmd[19]$772 ($dff) from module demo.
Removing $memory\cmd[18]$770 ($dff) from module demo.
Removing $memory\cmd[17]$768 ($dff) from module demo.
Removing $memory\cmd[16]$766 ($dff) from module demo.
Removing $memory\cmd[15]$764 ($dff) from module demo.
Removing $memory\cmd[14]$762 ($dff) from module demo.
Removing $memory\cmd[13]$760 ($dff) from module demo.
Removing $memory\cmd[12]$758 ($dff) from module demo.
Removing $memory\cmd[11]$756 ($dff) from module demo.
Removing $memory\cmd[10]$754 ($dff) from module demo.
Removing $memory\cmd[9]$752 ($dff) from module demo.
Removing $memory\cmd[8]$750 ($dff) from module demo.
Removing $memory\cmd[7]$748 ($dff) from module demo.
Removing $memory\cmd[6]$746 ($dff) from module demo.
Removing $memory\cmd[5]$744 ($dff) from module demo.
Removing $memory\cmd[4]$742 ($dff) from module demo.
Removing $memory\cmd[3]$740 ($dff) from module demo.
Removing $memory\cmd[2]$738 ($dff) from module demo.
Removing $memory\cmd[1]$736 ($dff) from module demo.
Removing $memory\cmd[0]$734 ($dff) from module demo.
Replaced 124 DFF cells.

2.29.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..
Removed 0 unused cells and 379 unused wires.
<suppressed ~1 debug messages>

2.29.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.
<suppressed ~7 debug messages>

2.29.9. Rerunning OPT passes. (Maybe there is more to do..)

2.29.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \demo..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~12 debug messages>

2.29.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \demo.
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][4][0]$827:
      Old ports: A=8'10110001, B=8'10110010, Y=$memory\cmd$rdmux[0][3][0]$a$804
      New ports: A=2'01, B=2'10, Y=$memory\cmd$rdmux[0][3][0]$a$804 [1:0]
      New connections: $memory\cmd$rdmux[0][3][0]$a$804 [7:2] = 6'101100
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][4][10]$857:
      Old ports: A=8'00101010, B=8'00101011, Y=$memory\cmd$rdmux[0][3][5]$a$819
      New ports: A=1'0, B=1'1, Y=$memory\cmd$rdmux[0][3][5]$a$819 [0]
      New connections: $memory\cmd$rdmux[0][3][5]$a$819 [7:1] = 7'0010101
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][4][11]$860:
      Old ports: A=8'00101100, B=8'00000000, Y=$memory\cmd$rdmux[0][3][5]$b$820
      New ports: A=1'1, B=1'0, Y=$memory\cmd$rdmux[0][3][5]$b$820 [2]
      New connections: { $memory\cmd$rdmux[0][3][5]$b$820 [7:3] $memory\cmd$rdmux[0][3][5]$b$820 [1:0] } = { 2'00 $memory\cmd$rdmux[0][3][5]$b$820 [2] 1'0 $memory\cmd$rdmux[0][3][5]$b$820 [2] 2'00 }
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][4][1]$830:
      Old ports: A=8'10110011, B=8'10110100, Y=$memory\cmd$rdmux[0][3][0]$b$805
      New ports: A=2'01, B=2'10, Y={ $memory\cmd$rdmux[0][3][0]$b$805 [2] $memory\cmd$rdmux[0][3][0]$b$805 [0] }
      New connections: { $memory\cmd$rdmux[0][3][0]$b$805 [7:3] $memory\cmd$rdmux[0][3][0]$b$805 [1] } = { 5'10110 $memory\cmd$rdmux[0][3][0]$b$805 [0] }
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][4][2]$833:
      Old ports: A=8'11000000, B=8'11000001, Y=$memory\cmd$rdmux[0][3][1]$a$807
      New ports: A=1'0, B=1'1, Y=$memory\cmd$rdmux[0][3][1]$a$807 [0]
      New connections: $memory\cmd$rdmux[0][3][1]$a$807 [7:1] = 7'1100000
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][4][3]$836:
      Old ports: A=8'11000010, B=8'11000011, Y=$memory\cmd$rdmux[0][3][1]$b$808
      New ports: A=1'0, B=1'1, Y=$memory\cmd$rdmux[0][3][1]$b$808 [0]
      New connections: $memory\cmd$rdmux[0][3][1]$b$808 [7:1] = 7'1100001
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][4][4]$839:
      Old ports: A=8'11000100, B=8'11000101, Y=$memory\cmd$rdmux[0][3][2]$a$810
      New ports: A=1'0, B=1'1, Y=$memory\cmd$rdmux[0][3][2]$a$810 [0]
      New connections: $memory\cmd$rdmux[0][3][2]$a$810 [7:1] = 7'1100010
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][4][5]$842:
      Old ports: A=8'11100000, B=8'11100001, Y=$memory\cmd$rdmux[0][3][2]$b$811
      New ports: A=1'0, B=1'1, Y=$memory\cmd$rdmux[0][3][2]$b$811 [0]
      New connections: $memory\cmd$rdmux[0][3][2]$b$811 [7:1] = 7'1110000
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][4][6]$845:
      Old ports: A=8'11111100, B=8'00111010, Y=$memory\cmd$rdmux[0][3][3]$a$813
      New ports: A=2'10, B=2'01, Y=$memory\cmd$rdmux[0][3][3]$a$813 [2:1]
      New connections: { $memory\cmd$rdmux[0][3][3]$a$813 [7:3] $memory\cmd$rdmux[0][3][3]$a$813 [0] } = { $memory\cmd$rdmux[0][3][3]$a$813 [2] $memory\cmd$rdmux[0][3][3]$a$813 [2] 4'1110 }
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][4][7]$848:
      Old ports: A=8'00110110, B=8'00100001, Y=$memory\cmd$rdmux[0][3][3]$b$814
      New ports: A=2'10, B=2'01, Y=$memory\cmd$rdmux[0][3][3]$b$814 [1:0]
      New connections: $memory\cmd$rdmux[0][3][3]$b$814 [7:2] = { 3'001 $memory\cmd$rdmux[0][3][3]$b$814 [1] 1'0 $memory\cmd$rdmux[0][3][3]$b$814 [1] }
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][4][8]$851:
      Old ports: A=8'00101001, B=8'00101010, Y=$memory\cmd$rdmux[0][3][4]$a$816
      New ports: A=2'01, B=2'10, Y=$memory\cmd$rdmux[0][3][4]$a$816 [1:0]
      New connections: $memory\cmd$rdmux[0][3][4]$a$816 [7:2] = 6'001010
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][4][9]$854:
      Old ports: A=8'00101011, B=8'00101100, Y=$memory\cmd$rdmux[0][3][4]$b$817
      New ports: A=2'01, B=2'10, Y={ $memory\cmd$rdmux[0][3][4]$b$817 [2] $memory\cmd$rdmux[0][3][4]$b$817 [0] }
      New connections: { $memory\cmd$rdmux[0][3][4]$b$817 [7:3] $memory\cmd$rdmux[0][3][4]$b$817 [1] } = { 5'00101 $memory\cmd$rdmux[0][3][4]$b$817 [0] }
    Consolidated identical input bits for $mux cell $memory\num_params$rdmux[0][4][11]$1001:
      Old ports: A=14'11001000000000, B=14'00000000000000, Y=$memory\num_params$rdmux[0][3][5]$b$961
      New ports: A=1'1, B=1'0, Y=$memory\num_params$rdmux[0][3][5]$b$961 [9]
      New connections: { $memory\num_params$rdmux[0][3][5]$b$961 [13:10] $memory\num_params$rdmux[0][3][5]$b$961 [8:0] } = { $memory\num_params$rdmux[0][3][5]$b$961 [9] $memory\num_params$rdmux[0][3][5]$b$961 [9] 11'00000000000 }
    Consolidated identical input bits for $mux cell $memory\num_params$rdmux[0][4][1]$971:
      Old ports: A=14'00000000000110, B=14'00000000000001, Y=$memory\num_params$rdmux[0][3][0]$b$946
      New ports: A=2'10, B=2'01, Y=$memory\num_params$rdmux[0][3][0]$b$946 [1:0]
      New connections: $memory\num_params$rdmux[0][3][0]$b$946 [13:2] = { 11'00000000000 $memory\num_params$rdmux[0][3][0]$b$946 [1] }
    Consolidated identical input bits for $mux cell $memory\num_params$rdmux[0][4][2]$974:
      Old ports: A=14'00000000000011, B=14'00000000000001, Y=$memory\num_params$rdmux[0][3][1]$a$948
      New ports: A=1'1, B=1'0, Y=$memory\num_params$rdmux[0][3][1]$a$948 [1]
      New connections: { $memory\num_params$rdmux[0][3][1]$a$948 [13:2] $memory\num_params$rdmux[0][3][1]$a$948 [0] } = 13'0000000000001
    Consolidated identical input bits for $mux cell $memory\num_params$rdmux[0][4][4]$980:
      Old ports: A=14'00000000000010, B=14'00000000000001, Y=$memory\num_params$rdmux[0][3][2]$a$951
      New ports: A=2'10, B=2'01, Y=$memory\num_params$rdmux[0][3][2]$a$951 [1:0]
      New connections: $memory\num_params$rdmux[0][3][2]$a$951 [13:2] = 12'000000000000
    Consolidated identical input bits for $mux cell $memory\num_params$rdmux[0][4][7]$989:
      Old ports: A=14'00000000000001, B=14'00000000000000, Y=$memory\num_params$rdmux[0][3][3]$b$955
      New ports: A=1'1, B=1'0, Y=$memory\num_params$rdmux[0][3][3]$b$955 [0]
      New connections: $memory\num_params$rdmux[0][3][3]$b$955 [13:1] = 13'0000000000000
    Consolidated identical input bits for $mux cell $memory\num_params$rdmux[0][4][8]$992:
      Old ports: A=14'00000000000000, B=14'00000000000100, Y=$memory\num_params$rdmux[0][3][4]$a$957
      New ports: A=1'0, B=1'1, Y=$memory\num_params$rdmux[0][3][4]$a$957 [2]
      New connections: { $memory\num_params$rdmux[0][3][4]$a$957 [13:3] $memory\num_params$rdmux[0][3][4]$a$957 [1:0] } = 13'0000000000000
    Consolidated identical input bits for $mux cell $memory\num_params$rdmux[0][4][9]$995:
      Old ports: A=14'00000000000100, B=14'00000000000000, Y=$memory\num_params$rdmux[0][3][4]$b$958
      New ports: A=1'1, B=1'0, Y=$memory\num_params$rdmux[0][3][4]$b$958 [2]
      New connections: { $memory\num_params$rdmux[0][3][4]$b$958 [13:3] $memory\num_params$rdmux[0][3][4]$b$958 [1:0] } = 13'0000000000000
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][0]$1357:
      Old ports: A=8'00000101, B=8'00111100, Y=$memory\params$rdmux[0][5][0]$a$1262
      New ports: A=2'01, B=2'10, Y={ $memory\params$rdmux[0][5][0]$a$1262 [3] $memory\params$rdmux[0][5][0]$a$1262 [0] }
      New connections: { $memory\params$rdmux[0][5][0]$a$1262 [7:4] $memory\params$rdmux[0][5][0]$a$1262 [2:1] } = { 2'00 $memory\params$rdmux[0][5][0]$a$1262 [3] $memory\params$rdmux[0][5][0]$a$1262 [3] 2'10 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][10]$1387:
      Old ports: A=8'01101010, B=8'10001101, Y=$memory\params$rdmux[0][5][5]$a$1277
      New ports: A=2'10, B=2'01, Y=$memory\params$rdmux[0][5][5]$a$1277 [1:0]
      New connections: $memory\params$rdmux[0][5][5]$a$1277 [7:2] = { $memory\params$rdmux[0][5][5]$a$1277 [0] $memory\params$rdmux[0][5][5]$a$1277 [1] $memory\params$rdmux[0][5][5]$a$1277 [1] 2'01 $memory\params$rdmux[0][5][5]$a$1277 [0] }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][11]$1390:
      Old ports: A=8'11101110, B=8'00001111, Y=$memory\params$rdmux[0][5][5]$b$1278
      New ports: A=2'10, B=2'01, Y={ $memory\params$rdmux[0][5][5]$b$1278 [5] $memory\params$rdmux[0][5][5]$b$1278 [0] }
      New connections: { $memory\params$rdmux[0][5][5]$b$1278 [7:6] $memory\params$rdmux[0][5][5]$b$1278 [4:1] } = { $memory\params$rdmux[0][5][5]$b$1278 [5] $memory\params$rdmux[0][5][5]$b$1278 [5] 4'0111 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][12]$1393:
      Old ports: A=8'00000111, B=8'00001110, Y=$memory\params$rdmux[0][5][6]$a$1280
      New ports: A=2'01, B=2'10, Y={ $memory\params$rdmux[0][5][6]$a$1280 [3] $memory\params$rdmux[0][5][6]$a$1280 [0] }
      New connections: { $memory\params$rdmux[0][5][6]$a$1280 [7:4] $memory\params$rdmux[0][5][6]$a$1280 [2:1] } = 6'000011
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][13]$1396:
      Old ports: A=8'00001000, B=8'00000111, Y=$memory\params$rdmux[0][5][6]$b$1281
      New ports: A=2'10, B=2'01, Y={ $memory\params$rdmux[0][5][6]$b$1281 [3] $memory\params$rdmux[0][5][6]$b$1281 [0] }
      New connections: { $memory\params$rdmux[0][5][6]$b$1281 [7:4] $memory\params$rdmux[0][5][6]$b$1281 [2:1] } = { 4'0000 $memory\params$rdmux[0][5][6]$b$1281 [0] $memory\params$rdmux[0][5][6]$b$1281 [0] }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][14]$1399:
      Old ports: A=8'00010000, B=8'00000111, Y=$memory\params$rdmux[0][5][7]$a$1283
      New ports: A=2'10, B=2'01, Y={ $memory\params$rdmux[0][5][7]$a$1283 [4] $memory\params$rdmux[0][5][7]$a$1283 [0] }
      New connections: { $memory\params$rdmux[0][5][7]$a$1283 [7:5] $memory\params$rdmux[0][5][7]$a$1283 [3:1] } = { 4'0000 $memory\params$rdmux[0][5][7]$a$1283 [0] $memory\params$rdmux[0][5][7]$a$1283 [0] }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][15]$1402:
      Old ports: A=8'00000010, B=8'00000111, Y=$memory\params$rdmux[0][5][7]$b$1284
      New ports: A=1'0, B=1'1, Y=$memory\params$rdmux[0][5][7]$b$1284 [0]
      New connections: $memory\params$rdmux[0][5][7]$b$1284 [7:1] = { 5'00000 $memory\params$rdmux[0][5][7]$b$1284 [0] 1'1 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][16]$1405:
      Old ports: A=8'00001001, B=8'00001111, Y=$memory\params$rdmux[0][5][8]$a$1286
      New ports: A=1'0, B=1'1, Y=$memory\params$rdmux[0][5][8]$a$1286 [1]
      New connections: { $memory\params$rdmux[0][5][8]$a$1286 [7:2] $memory\params$rdmux[0][5][8]$a$1286 [0] } = { 5'00001 $memory\params$rdmux[0][5][8]$a$1286 [1] 1'1 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][17]$1408:
      Old ports: A=8'00100101, B=8'00110110, Y=$memory\params$rdmux[0][5][8]$b$1287
      New ports: A=2'01, B=2'10, Y=$memory\params$rdmux[0][5][8]$b$1287 [1:0]
      New connections: $memory\params$rdmux[0][5][8]$b$1287 [7:2] = { 3'001 $memory\params$rdmux[0][5][8]$b$1287 [1] 2'01 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][18]$1411:
      Old ports: A=8'00000000, B=8'00001000, Y=$memory\params$rdmux[0][5][9]$a$1289
      New ports: A=1'0, B=1'1, Y=$memory\params$rdmux[0][5][9]$a$1289 [3]
      New connections: { $memory\params$rdmux[0][5][9]$a$1289 [7:4] $memory\params$rdmux[0][5][9]$a$1289 [2:0] } = 7'0000000
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][19]$1414:
      Old ports: A=8'00000100, B=8'00010000, Y=$memory\params$rdmux[0][5][9]$b$1290
      New ports: A=2'01, B=2'10, Y={ $memory\params$rdmux[0][5][9]$b$1290 [4] $memory\params$rdmux[0][5][9]$b$1290 [2] }
      New connections: { $memory\params$rdmux[0][5][9]$b$1290 [7:5] $memory\params$rdmux[0][5][9]$b$1290 [3] $memory\params$rdmux[0][5][9]$b$1290 [1:0] } = 6'000000
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][1]$1360:
      Old ports: A=8'00111100, B=8'00000101, Y=$memory\params$rdmux[0][5][0]$b$1263
      New ports: A=2'10, B=2'01, Y={ $memory\params$rdmux[0][5][0]$b$1263 [3] $memory\params$rdmux[0][5][0]$b$1263 [0] }
      New connections: { $memory\params$rdmux[0][5][0]$b$1263 [7:4] $memory\params$rdmux[0][5][0]$b$1263 [2:1] } = { 2'00 $memory\params$rdmux[0][5][0]$b$1263 [3] $memory\params$rdmux[0][5][0]$b$1263 [3] 2'10 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][20]$1417:
      Old ports: A=8'00001010, B=8'00001101, Y=$memory\params$rdmux[0][5][10]$a$1292
      New ports: A=2'10, B=2'01, Y=$memory\params$rdmux[0][5][10]$a$1292 [1:0]
      New connections: $memory\params$rdmux[0][5][10]$a$1292 [7:2] = { 5'00001 $memory\params$rdmux[0][5][10]$a$1292 [0] }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][21]$1420:
      Old ports: A=8'00001000, B=8'00000111, Y=$memory\params$rdmux[0][5][10]$b$1293
      New ports: A=2'10, B=2'01, Y={ $memory\params$rdmux[0][5][10]$b$1293 [3] $memory\params$rdmux[0][5][10]$b$1293 [0] }
      New connections: { $memory\params$rdmux[0][5][10]$b$1293 [7:4] $memory\params$rdmux[0][5][10]$b$1293 [2:1] } = { 4'0000 $memory\params$rdmux[0][5][10]$b$1293 [0] $memory\params$rdmux[0][5][10]$b$1293 [0] }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][22]$1423:
      Old ports: A=8'00001111, B=8'00000111, Y=$memory\params$rdmux[0][5][11]$a$1295
      New ports: A=1'1, B=1'0, Y=$memory\params$rdmux[0][5][11]$a$1295 [3]
      New connections: { $memory\params$rdmux[0][5][11]$a$1295 [7:4] $memory\params$rdmux[0][5][11]$a$1295 [2:0] } = 7'0000111
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][23]$1426:
      Old ports: A=8'00000010, B=8'00000111, Y=$memory\params$rdmux[0][5][11]$b$1296
      New ports: A=1'0, B=1'1, Y=$memory\params$rdmux[0][5][11]$b$1296 [0]
      New connections: $memory\params$rdmux[0][5][11]$b$1296 [7:1] = { 5'00000 $memory\params$rdmux[0][5][11]$b$1296 [0] 1'1 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][24]$1429:
      Old ports: A=8'00001001, B=8'00001111, Y=$memory\params$rdmux[0][5][12]$a$1298
      New ports: A=1'0, B=1'1, Y=$memory\params$rdmux[0][5][12]$a$1298 [1]
      New connections: { $memory\params$rdmux[0][5][12]$a$1298 [7:2] $memory\params$rdmux[0][5][12]$a$1298 [0] } = { 5'00001 $memory\params$rdmux[0][5][12]$a$1298 [1] 1'1 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][25]$1432:
      Old ports: A=8'00100101, B=8'00110101, Y=$memory\params$rdmux[0][5][12]$b$1299
      New ports: A=1'0, B=1'1, Y=$memory\params$rdmux[0][5][12]$b$1299 [4]
      New connections: { $memory\params$rdmux[0][5][12]$b$1299 [7:5] $memory\params$rdmux[0][5][12]$b$1299 [3:0] } = 7'0010101
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][26]$1435:
      Old ports: A=8'00000000, B=8'00001001, Y=$memory\params$rdmux[0][5][13]$a$1301
      New ports: A=1'0, B=1'1, Y=$memory\params$rdmux[0][5][13]$a$1301 [0]
      New connections: $memory\params$rdmux[0][5][13]$a$1301 [7:1] = { 4'0000 $memory\params$rdmux[0][5][13]$a$1301 [0] 2'00 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][27]$1438:
      Old ports: A=8'00000100, B=8'00010000, Y=$memory\params$rdmux[0][5][13]$b$1302
      New ports: A=2'01, B=2'10, Y={ $memory\params$rdmux[0][5][13]$b$1302 [4] $memory\params$rdmux[0][5][13]$b$1302 [2] }
      New connections: { $memory\params$rdmux[0][5][13]$b$1302 [7:5] $memory\params$rdmux[0][5][13]$b$1302 [3] $memory\params$rdmux[0][5][13]$b$1302 [1:0] } = 6'000000
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][28]$1441:
      Old ports: A=8'10000000, B=8'00000101, Y=$memory\params$rdmux[0][5][14]$a$1304
      New ports: A=2'10, B=2'01, Y={ $memory\params$rdmux[0][5][14]$a$1304 [7] $memory\params$rdmux[0][5][14]$a$1304 [0] }
      New connections: $memory\params$rdmux[0][5][14]$a$1304 [6:1] = { 4'0000 $memory\params$rdmux[0][5][14]$a$1304 [0] 1'0 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][29]$1444:
      Old ports: A=8'01111000, B=8'00000000, Y=$memory\params$rdmux[0][5][14]$b$1305
      New ports: A=1'1, B=1'0, Y=$memory\params$rdmux[0][5][14]$b$1305 [3]
      New connections: { $memory\params$rdmux[0][5][14]$b$1305 [7:4] $memory\params$rdmux[0][5][14]$b$1305 [2:0] } = { 1'0 $memory\params$rdmux[0][5][14]$b$1305 [3] $memory\params$rdmux[0][5][14]$b$1305 [3] $memory\params$rdmux[0][5][14]$b$1305 [3] 3'000 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][30]$1447:
      Old ports: A=8'00011010, B=8'00000000, Y=$memory\params$rdmux[0][5][15]$a$1307
      New ports: A=1'1, B=1'0, Y=$memory\params$rdmux[0][5][15]$a$1307 [1]
      New connections: { $memory\params$rdmux[0][5][15]$a$1307 [7:2] $memory\params$rdmux[0][5][15]$a$1307 [0] } = { 3'000 $memory\params$rdmux[0][5][15]$a$1307 [1] $memory\params$rdmux[0][5][15]$a$1307 [1] 2'00 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][31]$1450:
      Old ports: A=8'01101001, B=8'00000000, Y=$memory\params$rdmux[0][5][15]$b$1308
      New ports: A=1'1, B=1'0, Y=$memory\params$rdmux[0][5][15]$b$1308 [0]
      New connections: $memory\params$rdmux[0][5][15]$b$1308 [7:1] = { 1'0 $memory\params$rdmux[0][5][15]$b$1308 [0] $memory\params$rdmux[0][5][15]$b$1308 [0] 1'0 $memory\params$rdmux[0][5][15]$b$1308 [0] 2'00 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][32]$1453:
      Old ports: A=8'00000001, B=8'00000000, Y=$memory\params$rdmux[0][5][16]$a$1310
      New ports: A=1'1, B=1'0, Y=$memory\params$rdmux[0][5][16]$a$1310 [0]
      New connections: $memory\params$rdmux[0][5][16]$a$1310 [7:1] = 7'0000000
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][33]$1456:
      Old ports: A=8'10100000, B=8'00000000, Y=$memory\params$rdmux[0][5][16]$b$1311
      New ports: A=1'1, B=1'0, Y=$memory\params$rdmux[0][5][16]$b$1311 [5]
      New connections: { $memory\params$rdmux[0][5][16]$b$1311 [7:6] $memory\params$rdmux[0][5][16]$b$1311 [4:0] } = { $memory\params$rdmux[0][5][16]$b$1311 [5] 6'000000 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][34]$1459:
      Old ports: A=8'00000001, B=8'00000000, Y=$memory\params$rdmux[0][5][17]$a$1313
      New ports: A=1'1, B=1'0, Y=$memory\params$rdmux[0][5][17]$a$1313 [0]
      New connections: $memory\params$rdmux[0][5][17]$a$1313 [7:1] = 7'0000000
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][35]$1462:
      Old ports: A=8'10100000, B=8'00000000, Y=$memory\params$rdmux[0][5][17]$b$1314
      New ports: A=1'1, B=1'0, Y=$memory\params$rdmux[0][5][17]$b$1314 [5]
      New connections: { $memory\params$rdmux[0][5][17]$b$1314 [7:6] $memory\params$rdmux[0][5][17]$b$1314 [4:0] } = { $memory\params$rdmux[0][5][17]$b$1314 [5] 6'000000 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][36]$1465:
      Old ports: A=8'00011010, B=8'00000000, Y=$memory\params$rdmux[0][5][18]$a$1316
      New ports: A=1'1, B=1'0, Y=$memory\params$rdmux[0][5][18]$a$1316 [1]
      New connections: { $memory\params$rdmux[0][5][18]$a$1316 [7:2] $memory\params$rdmux[0][5][18]$a$1316 [0] } = { 3'000 $memory\params$rdmux[0][5][18]$a$1316 [1] $memory\params$rdmux[0][5][18]$a$1316 [1] 2'00 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][37]$1468:
      Old ports: A=8'01101001, B=8'11111111, Y=$memory\params$rdmux[0][5][18]$b$1317
      New ports: A=1'0, B=1'1, Y=$memory\params$rdmux[0][5][18]$b$1317 [1]
      New connections: { $memory\params$rdmux[0][5][18]$b$1317 [7:2] $memory\params$rdmux[0][5][18]$b$1317 [0] } = { $memory\params$rdmux[0][5][18]$b$1317 [1] 2'11 $memory\params$rdmux[0][5][18]$b$1317 [1] 1'1 $memory\params$rdmux[0][5][18]$b$1317 [1] 1'1 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][3]$1366:
      Old ports: A=8'00000101, B=8'00111100, Y=$memory\params$rdmux[0][5][1]$b$1266
      New ports: A=2'01, B=2'10, Y={ $memory\params$rdmux[0][5][1]$b$1266 [3] $memory\params$rdmux[0][5][1]$b$1266 [0] }
      New connections: { $memory\params$rdmux[0][5][1]$b$1266 [7:4] $memory\params$rdmux[0][5][1]$b$1266 [2:1] } = { 2'00 $memory\params$rdmux[0][5][1]$b$1266 [3] $memory\params$rdmux[0][5][1]$b$1266 [3] 2'10 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][4]$1369:
      Old ports: A=8'00111100, B=8'00000101, Y=$memory\params$rdmux[0][5][2]$a$1268
      New ports: A=2'10, B=2'01, Y={ $memory\params$rdmux[0][5][2]$a$1268 [3] $memory\params$rdmux[0][5][2]$a$1268 [0] }
      New connections: { $memory\params$rdmux[0][5][2]$a$1268 [7:4] $memory\params$rdmux[0][5][2]$a$1268 [2:1] } = { 2'00 $memory\params$rdmux[0][5][2]$a$1268 [3] $memory\params$rdmux[0][5][2]$a$1268 [3] 2'10 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][6]$1375:
      Old ports: A=8'00000011, B=8'10101011, Y=$memory\params$rdmux[0][5][3]$a$1271
      New ports: A=1'0, B=1'1, Y=$memory\params$rdmux[0][5][3]$a$1271 [3]
      New connections: { $memory\params$rdmux[0][5][3]$a$1271 [7:4] $memory\params$rdmux[0][5][3]$a$1271 [2:0] } = { $memory\params$rdmux[0][5][3]$a$1271 [3] 1'0 $memory\params$rdmux[0][5][3]$a$1271 [3] 4'0011 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][7]$1378:
      Old ports: A=8'00001011, B=8'00000100, Y=$memory\params$rdmux[0][5][3]$b$1272
      New ports: A=2'01, B=2'10, Y={ $memory\params$rdmux[0][5][3]$b$1272 [2] $memory\params$rdmux[0][5][3]$b$1272 [0] }
      New connections: { $memory\params$rdmux[0][5][3]$b$1272 [7:3] $memory\params$rdmux[0][5][3]$b$1272 [1] } = { 4'0000 $memory\params$rdmux[0][5][3]$b$1272 [0] $memory\params$rdmux[0][5][3]$b$1272 [0] }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][8]$1381:
      Old ports: A=8'11000101, B=8'00001101, Y=$memory\params$rdmux[0][5][4]$a$1274
      New ports: A=2'10, B=2'01, Y={ $memory\params$rdmux[0][5][4]$a$1274 [6] $memory\params$rdmux[0][5][4]$a$1274 [3] }
      New connections: { $memory\params$rdmux[0][5][4]$a$1274 [7] $memory\params$rdmux[0][5][4]$a$1274 [5:4] $memory\params$rdmux[0][5][4]$a$1274 [2:0] } = { $memory\params$rdmux[0][5][4]$a$1274 [6] 5'00101 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][6][9]$1384:
      Old ports: A=8'00000000, B=8'10001101, Y=$memory\params$rdmux[0][5][4]$b$1275
      New ports: A=1'0, B=1'1, Y=$memory\params$rdmux[0][5][4]$b$1275 [0]
      New connections: $memory\params$rdmux[0][5][4]$b$1275 [7:1] = { $memory\params$rdmux[0][5][4]$b$1275 [0] 3'000 $memory\params$rdmux[0][5][4]$b$1275 [0] $memory\params$rdmux[0][5][4]$b$1275 [0] 1'0 }
  Optimizing cells in module \demo.
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][3][0]$803:
      Old ports: A=$memory\cmd$rdmux[0][3][0]$a$804, B=$memory\cmd$rdmux[0][3][0]$b$805, Y=$memory\cmd$rdmux[0][2][0]$a$792
      New ports: A={ 1'0 $memory\cmd$rdmux[0][3][0]$a$804 [1:0] }, B={ $memory\cmd$rdmux[0][3][0]$b$805 [2] $memory\cmd$rdmux[0][3][0]$b$805 [0] $memory\cmd$rdmux[0][3][0]$b$805 [0] }, Y=$memory\cmd$rdmux[0][2][0]$a$792 [2:0]
      New connections: $memory\cmd$rdmux[0][2][0]$a$792 [7:3] = 5'10110
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][3][1]$806:
      Old ports: A=$memory\cmd$rdmux[0][3][1]$a$807, B=$memory\cmd$rdmux[0][3][1]$b$808, Y=$memory\cmd$rdmux[0][2][0]$b$793
      New ports: A={ 1'0 $memory\cmd$rdmux[0][3][1]$a$807 [0] }, B={ 1'1 $memory\cmd$rdmux[0][3][1]$b$808 [0] }, Y=$memory\cmd$rdmux[0][2][0]$b$793 [1:0]
      New connections: $memory\cmd$rdmux[0][2][0]$b$793 [7:2] = 6'110000
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][3][2]$809:
      Old ports: A=$memory\cmd$rdmux[0][3][2]$a$810, B=$memory\cmd$rdmux[0][3][2]$b$811, Y=$memory\cmd$rdmux[0][2][1]$a$795
      New ports: A={ 2'01 $memory\cmd$rdmux[0][3][2]$a$810 [0] }, B={ 2'10 $memory\cmd$rdmux[0][3][2]$b$811 [0] }, Y={ $memory\cmd$rdmux[0][2][1]$a$795 [5] $memory\cmd$rdmux[0][2][1]$a$795 [2] $memory\cmd$rdmux[0][2][1]$a$795 [0] }
      New connections: { $memory\cmd$rdmux[0][2][1]$a$795 [7:6] $memory\cmd$rdmux[0][2][1]$a$795 [4:3] $memory\cmd$rdmux[0][2][1]$a$795 [1] } = 5'11000
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][3][3]$812:
      Old ports: A=$memory\cmd$rdmux[0][3][3]$a$813, B=$memory\cmd$rdmux[0][3][3]$b$814, Y=$memory\cmd$rdmux[0][2][1]$b$796
      New ports: A={ $memory\cmd$rdmux[0][3][3]$a$813 [2] 2'11 $memory\cmd$rdmux[0][3][3]$a$813 [2:1] 1'0 }, B={ 1'0 $memory\cmd$rdmux[0][3][3]$b$814 [1] 1'0 $memory\cmd$rdmux[0][3][3]$b$814 [1] $memory\cmd$rdmux[0][3][3]$b$814 [1:0] }, Y={ $memory\cmd$rdmux[0][2][1]$b$796 [6] $memory\cmd$rdmux[0][2][1]$b$796 [4:0] }
      New connections: { $memory\cmd$rdmux[0][2][1]$b$796 [7] $memory\cmd$rdmux[0][2][1]$b$796 [5] } = { $memory\cmd$rdmux[0][2][1]$b$796 [6] 1'1 }
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][3][4]$815:
      Old ports: A=$memory\cmd$rdmux[0][3][4]$a$816, B=$memory\cmd$rdmux[0][3][4]$b$817, Y=$memory\cmd$rdmux[0][2][2]$a$798
      New ports: A={ 1'0 $memory\cmd$rdmux[0][3][4]$a$816 [1:0] }, B={ $memory\cmd$rdmux[0][3][4]$b$817 [2] $memory\cmd$rdmux[0][3][4]$b$817 [0] $memory\cmd$rdmux[0][3][4]$b$817 [0] }, Y=$memory\cmd$rdmux[0][2][2]$a$798 [2:0]
      New connections: $memory\cmd$rdmux[0][2][2]$a$798 [7:3] = 5'00101
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][3][5]$818:
      Old ports: A=$memory\cmd$rdmux[0][3][5]$a$819, B=$memory\cmd$rdmux[0][3][5]$b$820, Y=$memory\cmd$rdmux[0][2][2]$b$799
      New ports: A={ 3'101 $memory\cmd$rdmux[0][3][5]$a$819 [0] }, B={ $memory\cmd$rdmux[0][3][5]$b$820 [2] $memory\cmd$rdmux[0][3][5]$b$820 [2] 2'00 }, Y=$memory\cmd$rdmux[0][2][2]$b$799 [3:0]
      New connections: $memory\cmd$rdmux[0][2][2]$b$799 [7:4] = { 2'00 $memory\cmd$rdmux[0][2][2]$b$799 [3] 1'0 }
    Consolidated identical input bits for $mux cell $memory\num_params$rdmux[0][3][0]$944:
      Old ports: A=$memory\num_params$rdmux[0][3][0]$a$945, B=$memory\num_params$rdmux[0][3][0]$b$946, Y=$memory\num_params$rdmux[0][2][0]$a$933
      New ports: A=3'011, B={ $memory\num_params$rdmux[0][3][0]$b$946 [1] $memory\num_params$rdmux[0][3][0]$b$946 [1:0] }, Y=$memory\num_params$rdmux[0][2][0]$a$933 [2:0]
      New connections: $memory\num_params$rdmux[0][2][0]$a$933 [13:3] = 11'00000000000
    Consolidated identical input bits for $mux cell $memory\num_params$rdmux[0][3][1]$947:
      Old ports: A=$memory\num_params$rdmux[0][3][1]$a$948, B=14'00000000000010, Y=$memory\num_params$rdmux[0][2][0]$b$934
      New ports: A={ $memory\num_params$rdmux[0][3][1]$a$948 [1] 1'1 }, B=2'10, Y=$memory\num_params$rdmux[0][2][0]$b$934 [1:0]
      New connections: $memory\num_params$rdmux[0][2][0]$b$934 [13:2] = 12'000000000000
    Consolidated identical input bits for $mux cell $memory\num_params$rdmux[0][3][2]$950:
      Old ports: A=$memory\num_params$rdmux[0][3][2]$a$951, B=14'00000000010000, Y=$memory\num_params$rdmux[0][2][1]$a$936
      New ports: A={ 1'0 $memory\num_params$rdmux[0][3][2]$a$951 [1:0] }, B=3'100, Y={ $memory\num_params$rdmux[0][2][1]$a$936 [4] $memory\num_params$rdmux[0][2][1]$a$936 [1:0] }
      New connections: { $memory\num_params$rdmux[0][2][1]$a$936 [13:5] $memory\num_params$rdmux[0][2][1]$a$936 [3:2] } = 11'00000000000
    Consolidated identical input bits for $mux cell $memory\num_params$rdmux[0][3][3]$953:
      Old ports: A=$memory\num_params$rdmux[0][3][3]$a$954, B=$memory\num_params$rdmux[0][3][3]$b$955, Y=$memory\num_params$rdmux[0][2][1]$b$937
      New ports: A=1'1, B=$memory\num_params$rdmux[0][3][3]$b$955 [0], Y=$memory\num_params$rdmux[0][2][1]$b$937 [0]
      New connections: $memory\num_params$rdmux[0][2][1]$b$937 [13:1] = 13'0000000000000
    Consolidated identical input bits for $mux cell $memory\num_params$rdmux[0][3][4]$956:
      Old ports: A=$memory\num_params$rdmux[0][3][4]$a$957, B=$memory\num_params$rdmux[0][3][4]$b$958, Y=$memory\num_params$rdmux[0][2][2]$a$939
      New ports: A=$memory\num_params$rdmux[0][3][4]$a$957 [2], B=$memory\num_params$rdmux[0][3][4]$b$958 [2], Y=$memory\num_params$rdmux[0][2][2]$a$939 [2]
      New connections: { $memory\num_params$rdmux[0][2][2]$a$939 [13:3] $memory\num_params$rdmux[0][2][2]$a$939 [1:0] } = 13'0000000000000
    Consolidated identical input bits for $mux cell $memory\num_params$rdmux[0][3][5]$959:
      Old ports: A=$memory\num_params$rdmux[0][3][5]$a$960, B=$memory\num_params$rdmux[0][3][5]$b$961, Y=$memory\num_params$rdmux[0][2][2]$b$940
      New ports: A=2'01, B={ $memory\num_params$rdmux[0][3][5]$b$961 [9] 1'0 }, Y={ $memory\num_params$rdmux[0][2][2]$b$940 [9] $memory\num_params$rdmux[0][2][2]$b$940 [2] }
      New connections: { $memory\num_params$rdmux[0][2][2]$b$940 [13:10] $memory\num_params$rdmux[0][2][2]$b$940 [8:3] $memory\num_params$rdmux[0][2][2]$b$940 [1:0] } = { $memory\num_params$rdmux[0][2][2]$b$940 [9] $memory\num_params$rdmux[0][2][2]$b$940 [9] 10'0000000000 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][0]$1261:
      Old ports: A=$memory\params$rdmux[0][5][0]$a$1262, B=$memory\params$rdmux[0][5][0]$b$1263, Y=$memory\params$rdmux[0][4][0]$a$1214
      New ports: A={ $memory\params$rdmux[0][5][0]$a$1262 [3] $memory\params$rdmux[0][5][0]$a$1262 [0] }, B={ $memory\params$rdmux[0][5][0]$b$1263 [3] $memory\params$rdmux[0][5][0]$b$1263 [0] }, Y={ $memory\params$rdmux[0][4][0]$a$1214 [3] $memory\params$rdmux[0][4][0]$a$1214 [0] }
      New connections: { $memory\params$rdmux[0][4][0]$a$1214 [7:4] $memory\params$rdmux[0][4][0]$a$1214 [2:1] } = { 2'00 $memory\params$rdmux[0][4][0]$a$1214 [3] $memory\params$rdmux[0][4][0]$a$1214 [3] 2'10 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][10]$1291:
      Old ports: A=$memory\params$rdmux[0][5][10]$a$1292, B=$memory\params$rdmux[0][5][10]$b$1293, Y=$memory\params$rdmux[0][4][5]$a$1229
      New ports: A={ 1'1 $memory\params$rdmux[0][5][10]$a$1292 [1:0] }, B={ $memory\params$rdmux[0][5][10]$b$1293 [3] $memory\params$rdmux[0][5][10]$b$1293 [0] $memory\params$rdmux[0][5][10]$b$1293 [0] }, Y={ $memory\params$rdmux[0][4][5]$a$1229 [3] $memory\params$rdmux[0][4][5]$a$1229 [1:0] }
      New connections: { $memory\params$rdmux[0][4][5]$a$1229 [7:4] $memory\params$rdmux[0][4][5]$a$1229 [2] } = { 4'0000 $memory\params$rdmux[0][4][5]$a$1229 [0] }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][11]$1294:
      Old ports: A=$memory\params$rdmux[0][5][11]$a$1295, B=$memory\params$rdmux[0][5][11]$b$1296, Y=$memory\params$rdmux[0][4][5]$b$1230
      New ports: A={ $memory\params$rdmux[0][5][11]$a$1295 [3] 1'1 }, B={ 1'0 $memory\params$rdmux[0][5][11]$b$1296 [0] }, Y={ $memory\params$rdmux[0][4][5]$b$1230 [3] $memory\params$rdmux[0][4][5]$b$1230 [0] }
      New connections: { $memory\params$rdmux[0][4][5]$b$1230 [7:4] $memory\params$rdmux[0][4][5]$b$1230 [2:1] } = { 4'0000 $memory\params$rdmux[0][4][5]$b$1230 [0] 1'1 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][12]$1297:
      Old ports: A=$memory\params$rdmux[0][5][12]$a$1298, B=$memory\params$rdmux[0][5][12]$b$1299, Y=$memory\params$rdmux[0][4][6]$a$1232
      New ports: A={ 3'001 $memory\params$rdmux[0][5][12]$a$1298 [1] $memory\params$rdmux[0][5][12]$a$1298 [1] }, B={ 1'1 $memory\params$rdmux[0][5][12]$b$1299 [4] 3'010 }, Y=$memory\params$rdmux[0][4][6]$a$1232 [5:1]
      New connections: { $memory\params$rdmux[0][4][6]$a$1232 [7:6] $memory\params$rdmux[0][4][6]$a$1232 [0] } = 3'001
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][13]$1300:
      Old ports: A=$memory\params$rdmux[0][5][13]$a$1301, B=$memory\params$rdmux[0][5][13]$b$1302, Y=$memory\params$rdmux[0][4][6]$b$1233
      New ports: A={ 2'00 $memory\params$rdmux[0][5][13]$a$1301 [0] }, B={ $memory\params$rdmux[0][5][13]$b$1302 [4] $memory\params$rdmux[0][5][13]$b$1302 [2] 1'0 }, Y={ $memory\params$rdmux[0][4][6]$b$1233 [4] $memory\params$rdmux[0][4][6]$b$1233 [2] $memory\params$rdmux[0][4][6]$b$1233 [0] }
      New connections: { $memory\params$rdmux[0][4][6]$b$1233 [7:5] $memory\params$rdmux[0][4][6]$b$1233 [3] $memory\params$rdmux[0][4][6]$b$1233 [1] } = { 3'000 $memory\params$rdmux[0][4][6]$b$1233 [0] 1'0 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][14]$1303:
      Old ports: A=$memory\params$rdmux[0][5][14]$a$1304, B=$memory\params$rdmux[0][5][14]$b$1305, Y=$memory\params$rdmux[0][4][7]$a$1235
      New ports: A={ $memory\params$rdmux[0][5][14]$a$1304 [7] 1'0 $memory\params$rdmux[0][5][14]$a$1304 [0] }, B={ 1'0 $memory\params$rdmux[0][5][14]$b$1305 [3] 1'0 }, Y={ $memory\params$rdmux[0][4][7]$a$1235 [7] $memory\params$rdmux[0][4][7]$a$1235 [3] $memory\params$rdmux[0][4][7]$a$1235 [0] }
      New connections: { $memory\params$rdmux[0][4][7]$a$1235 [6:4] $memory\params$rdmux[0][4][7]$a$1235 [2:1] } = { $memory\params$rdmux[0][4][7]$a$1235 [3] $memory\params$rdmux[0][4][7]$a$1235 [3] $memory\params$rdmux[0][4][7]$a$1235 [3] $memory\params$rdmux[0][4][7]$a$1235 [0] 1'0 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][15]$1306:
      Old ports: A=$memory\params$rdmux[0][5][15]$a$1307, B=$memory\params$rdmux[0][5][15]$b$1308, Y=$memory\params$rdmux[0][4][7]$b$1236
      New ports: A={ $memory\params$rdmux[0][5][15]$a$1307 [1] $memory\params$rdmux[0][5][15]$a$1307 [1] 1'0 }, B={ $memory\params$rdmux[0][5][15]$b$1308 [0] 1'0 $memory\params$rdmux[0][5][15]$b$1308 [0] }, Y={ $memory\params$rdmux[0][4][7]$b$1236 [3] $memory\params$rdmux[0][4][7]$b$1236 [1:0] }
      New connections: { $memory\params$rdmux[0][4][7]$b$1236 [7:4] $memory\params$rdmux[0][4][7]$b$1236 [2] } = { 1'0 $memory\params$rdmux[0][4][7]$b$1236 [0] $memory\params$rdmux[0][4][7]$b$1236 [0] $memory\params$rdmux[0][4][7]$b$1236 [1] 1'0 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][16]$1309:
      Old ports: A=$memory\params$rdmux[0][5][16]$a$1310, B=$memory\params$rdmux[0][5][16]$b$1311, Y=$memory\params$rdmux[0][4][8]$a$1238
      New ports: A={ 1'0 $memory\params$rdmux[0][5][16]$a$1310 [0] }, B={ $memory\params$rdmux[0][5][16]$b$1311 [5] 1'0 }, Y={ $memory\params$rdmux[0][4][8]$a$1238 [5] $memory\params$rdmux[0][4][8]$a$1238 [0] }
      New connections: { $memory\params$rdmux[0][4][8]$a$1238 [7:6] $memory\params$rdmux[0][4][8]$a$1238 [4:1] } = { $memory\params$rdmux[0][4][8]$a$1238 [5] 5'00000 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][17]$1312:
      Old ports: A=$memory\params$rdmux[0][5][17]$a$1313, B=$memory\params$rdmux[0][5][17]$b$1314, Y=$memory\params$rdmux[0][4][8]$b$1239
      New ports: A={ 1'0 $memory\params$rdmux[0][5][17]$a$1313 [0] }, B={ $memory\params$rdmux[0][5][17]$b$1314 [5] 1'0 }, Y={ $memory\params$rdmux[0][4][8]$b$1239 [5] $memory\params$rdmux[0][4][8]$b$1239 [0] }
      New connections: { $memory\params$rdmux[0][4][8]$b$1239 [7:6] $memory\params$rdmux[0][4][8]$b$1239 [4:1] } = { $memory\params$rdmux[0][4][8]$b$1239 [5] 5'00000 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][18]$1315:
      Old ports: A=$memory\params$rdmux[0][5][18]$a$1316, B=$memory\params$rdmux[0][5][18]$b$1317, Y=$memory\params$rdmux[0][4][9]$a$1241
      New ports: A={ $memory\params$rdmux[0][5][18]$a$1316 [1] 1'0 $memory\params$rdmux[0][5][18]$a$1316 [1] 1'0 }, B={ 1'1 $memory\params$rdmux[0][5][18]$b$1317 [1] $memory\params$rdmux[0][5][18]$b$1317 [1] 1'1 }, Y=$memory\params$rdmux[0][4][9]$a$1241 [3:0]
      New connections: $memory\params$rdmux[0][4][9]$a$1241 [7:4] = { $memory\params$rdmux[0][4][9]$a$1241 [2] $memory\params$rdmux[0][4][9]$a$1241 [0] $memory\params$rdmux[0][4][9]$a$1241 [0] $memory\params$rdmux[0][4][9]$a$1241 [1] }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][1]$1264:
      Old ports: A=$memory\params$rdmux[0][5][1]$a$1265, B=$memory\params$rdmux[0][5][1]$b$1266, Y=$memory\params$rdmux[0][4][0]$b$1215
      New ports: A=2'10, B={ $memory\params$rdmux[0][5][1]$b$1266 [3] $memory\params$rdmux[0][5][1]$b$1266 [0] }, Y={ $memory\params$rdmux[0][4][0]$b$1215 [3] $memory\params$rdmux[0][4][0]$b$1215 [0] }
      New connections: { $memory\params$rdmux[0][4][0]$b$1215 [7:4] $memory\params$rdmux[0][4][0]$b$1215 [2:1] } = { 2'00 $memory\params$rdmux[0][4][0]$b$1215 [3] $memory\params$rdmux[0][4][0]$b$1215 [3] 2'10 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][2]$1267:
      Old ports: A=$memory\params$rdmux[0][5][2]$a$1268, B=8'00111100, Y=$memory\params$rdmux[0][4][1]$a$1217
      New ports: A={ $memory\params$rdmux[0][5][2]$a$1268 [3] $memory\params$rdmux[0][5][2]$a$1268 [0] }, B=2'10, Y={ $memory\params$rdmux[0][4][1]$a$1217 [3] $memory\params$rdmux[0][4][1]$a$1217 [0] }
      New connections: { $memory\params$rdmux[0][4][1]$a$1217 [7:4] $memory\params$rdmux[0][4][1]$a$1217 [2:1] } = { 2'00 $memory\params$rdmux[0][4][1]$a$1217 [3] $memory\params$rdmux[0][4][1]$a$1217 [3] 2'10 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][3]$1270:
      Old ports: A=$memory\params$rdmux[0][5][3]$a$1271, B=$memory\params$rdmux[0][5][3]$b$1272, Y=$memory\params$rdmux[0][4][1]$b$1218
      New ports: A={ $memory\params$rdmux[0][5][3]$a$1271 [3] $memory\params$rdmux[0][5][3]$a$1271 [3] 2'01 }, B={ 1'0 $memory\params$rdmux[0][5][3]$b$1272 [0] $memory\params$rdmux[0][5][3]$b$1272 [2] $memory\params$rdmux[0][5][3]$b$1272 [0] }, Y={ $memory\params$rdmux[0][4][1]$b$1218 [5] $memory\params$rdmux[0][4][1]$b$1218 [3:2] $memory\params$rdmux[0][4][1]$b$1218 [0] }
      New connections: { $memory\params$rdmux[0][4][1]$b$1218 [7:6] $memory\params$rdmux[0][4][1]$b$1218 [4] $memory\params$rdmux[0][4][1]$b$1218 [1] } = { $memory\params$rdmux[0][4][1]$b$1218 [5] 2'00 $memory\params$rdmux[0][4][1]$b$1218 [0] }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][4]$1273:
      Old ports: A=$memory\params$rdmux[0][5][4]$a$1274, B=$memory\params$rdmux[0][5][4]$b$1275, Y=$memory\params$rdmux[0][4][2]$a$1220
      New ports: A={ $memory\params$rdmux[0][5][4]$a$1274 [6] $memory\params$rdmux[0][5][4]$a$1274 [6] $memory\params$rdmux[0][5][4]$a$1274 [3] 1'1 }, B={ $memory\params$rdmux[0][5][4]$b$1275 [0] 1'0 $memory\params$rdmux[0][5][4]$b$1275 [0] $memory\params$rdmux[0][5][4]$b$1275 [0] }, Y={ $memory\params$rdmux[0][4][2]$a$1220 [7:6] $memory\params$rdmux[0][4][2]$a$1220 [3] $memory\params$rdmux[0][4][2]$a$1220 [0] }
      New connections: { $memory\params$rdmux[0][4][2]$a$1220 [5:4] $memory\params$rdmux[0][4][2]$a$1220 [2:1] } = { 2'00 $memory\params$rdmux[0][4][2]$a$1220 [0] 1'0 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][5]$1276:
      Old ports: A=$memory\params$rdmux[0][5][5]$a$1277, B=$memory\params$rdmux[0][5][5]$b$1278, Y=$memory\params$rdmux[0][4][2]$b$1221
      New ports: A={ $memory\params$rdmux[0][5][5]$a$1277 [0] $memory\params$rdmux[0][5][5]$a$1277 [1:0] $memory\params$rdmux[0][5][5]$a$1277 [1:0] }, B={ $memory\params$rdmux[0][5][5]$b$1278 [5] $memory\params$rdmux[0][5][5]$b$1278 [5] 2'11 $memory\params$rdmux[0][5][5]$b$1278 [0] }, Y={ $memory\params$rdmux[0][4][2]$b$1221 [7] $memory\params$rdmux[0][4][2]$b$1221 [5] $memory\params$rdmux[0][4][2]$b$1221 [2:0] }
      New connections: { $memory\params$rdmux[0][4][2]$b$1221 [6] $memory\params$rdmux[0][4][2]$b$1221 [4:3] } = { $memory\params$rdmux[0][4][2]$b$1221 [5] 2'01 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][6]$1279:
      Old ports: A=$memory\params$rdmux[0][5][6]$a$1280, B=$memory\params$rdmux[0][5][6]$b$1281, Y=$memory\params$rdmux[0][4][3]$a$1223
      New ports: A={ $memory\params$rdmux[0][5][6]$a$1280 [3] 1'1 $memory\params$rdmux[0][5][6]$a$1280 [0] }, B={ $memory\params$rdmux[0][5][6]$b$1281 [3] $memory\params$rdmux[0][5][6]$b$1281 [0] $memory\params$rdmux[0][5][6]$b$1281 [0] }, Y={ $memory\params$rdmux[0][4][3]$a$1223 [3] $memory\params$rdmux[0][4][3]$a$1223 [1:0] }
      New connections: { $memory\params$rdmux[0][4][3]$a$1223 [7:4] $memory\params$rdmux[0][4][3]$a$1223 [2] } = { 4'0000 $memory\params$rdmux[0][4][3]$a$1223 [1] }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][7]$1282:
      Old ports: A=$memory\params$rdmux[0][5][7]$a$1283, B=$memory\params$rdmux[0][5][7]$b$1284, Y=$memory\params$rdmux[0][4][3]$b$1224
      New ports: A={ $memory\params$rdmux[0][5][7]$a$1283 [4] $memory\params$rdmux[0][5][7]$a$1283 [0] $memory\params$rdmux[0][5][7]$a$1283 [0] }, B={ 2'01 $memory\params$rdmux[0][5][7]$b$1284 [0] }, Y={ $memory\params$rdmux[0][4][3]$b$1224 [4] $memory\params$rdmux[0][4][3]$b$1224 [1:0] }
      New connections: { $memory\params$rdmux[0][4][3]$b$1224 [7:5] $memory\params$rdmux[0][4][3]$b$1224 [3:2] } = { 4'0000 $memory\params$rdmux[0][4][3]$b$1224 [0] }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][8]$1285:
      Old ports: A=$memory\params$rdmux[0][5][8]$a$1286, B=$memory\params$rdmux[0][5][8]$b$1287, Y=$memory\params$rdmux[0][4][4]$a$1226
      New ports: A={ 3'001 $memory\params$rdmux[0][5][8]$a$1286 [1] $memory\params$rdmux[0][5][8]$a$1286 [1] 1'1 }, B={ 1'1 $memory\params$rdmux[0][5][8]$b$1287 [1] 2'01 $memory\params$rdmux[0][5][8]$b$1287 [1:0] }, Y=$memory\params$rdmux[0][4][4]$a$1226 [5:0]
      New connections: $memory\params$rdmux[0][4][4]$a$1226 [7:6] = 2'00
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][9]$1288:
      Old ports: A=$memory\params$rdmux[0][5][9]$a$1289, B=$memory\params$rdmux[0][5][9]$b$1290, Y=$memory\params$rdmux[0][4][4]$b$1227
      New ports: A={ 1'0 $memory\params$rdmux[0][5][9]$a$1289 [3] 1'0 }, B={ $memory\params$rdmux[0][5][9]$b$1290 [4] 1'0 $memory\params$rdmux[0][5][9]$b$1290 [2] }, Y=$memory\params$rdmux[0][4][4]$b$1227 [4:2]
      New connections: { $memory\params$rdmux[0][4][4]$b$1227 [7:5] $memory\params$rdmux[0][4][4]$b$1227 [1:0] } = 5'00000
  Optimizing cells in module \demo.
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][2][0]$791:
      Old ports: A=$memory\cmd$rdmux[0][2][0]$a$792, B=$memory\cmd$rdmux[0][2][0]$b$793, Y=$memory\cmd$rdmux[0][1][0]$a$786
      New ports: A={ 2'01 $memory\cmd$rdmux[0][2][0]$a$792 [2:0] }, B={ 3'100 $memory\cmd$rdmux[0][2][0]$b$793 [1:0] }, Y={ $memory\cmd$rdmux[0][1][0]$a$786 [6] $memory\cmd$rdmux[0][1][0]$a$786 [4] $memory\cmd$rdmux[0][1][0]$a$786 [2:0] }
      New connections: { $memory\cmd$rdmux[0][1][0]$a$786 [7] $memory\cmd$rdmux[0][1][0]$a$786 [5] $memory\cmd$rdmux[0][1][0]$a$786 [3] } = { 1'1 $memory\cmd$rdmux[0][1][0]$a$786 [4] 1'0 }
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][2][1]$794:
      Old ports: A=$memory\cmd$rdmux[0][2][1]$a$795, B=$memory\cmd$rdmux[0][2][1]$b$796, Y=$memory\cmd$rdmux[0][1][0]$b$787
      New ports: A={ 1'1 $memory\cmd$rdmux[0][2][1]$a$795 [5] 2'00 $memory\cmd$rdmux[0][2][1]$a$795 [2] 1'0 $memory\cmd$rdmux[0][2][1]$a$795 [0] }, B={ $memory\cmd$rdmux[0][2][1]$b$796 [6] 1'1 $memory\cmd$rdmux[0][2][1]$b$796 [4:0] }, Y=$memory\cmd$rdmux[0][1][0]$b$787 [6:0]
      New connections: $memory\cmd$rdmux[0][1][0]$b$787 [7] = $memory\cmd$rdmux[0][1][0]$b$787 [6]
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][2][2]$797:
      Old ports: A=$memory\cmd$rdmux[0][2][2]$a$798, B=$memory\cmd$rdmux[0][2][2]$b$799, Y=$memory\cmd$rdmux[0][1][1]$a$789
      New ports: A={ 1'1 $memory\cmd$rdmux[0][2][2]$a$798 [2:0] }, B=$memory\cmd$rdmux[0][2][2]$b$799 [3:0], Y=$memory\cmd$rdmux[0][1][1]$a$789 [3:0]
      New connections: $memory\cmd$rdmux[0][1][1]$a$789 [7:4] = { 2'00 $memory\cmd$rdmux[0][1][1]$a$789 [3] 1'0 }
    Consolidated identical input bits for $mux cell $memory\num_params$rdmux[0][2][0]$932:
      Old ports: A=$memory\num_params$rdmux[0][2][0]$a$933, B=$memory\num_params$rdmux[0][2][0]$b$934, Y=$memory\num_params$rdmux[0][1][0]$a$927
      New ports: A=$memory\num_params$rdmux[0][2][0]$a$933 [2:0], B={ 1'0 $memory\num_params$rdmux[0][2][0]$b$934 [1:0] }, Y=$memory\num_params$rdmux[0][1][0]$a$927 [2:0]
      New connections: $memory\num_params$rdmux[0][1][0]$a$927 [13:3] = 11'00000000000
    Consolidated identical input bits for $mux cell $memory\num_params$rdmux[0][2][1]$935:
      Old ports: A=$memory\num_params$rdmux[0][2][1]$a$936, B=$memory\num_params$rdmux[0][2][1]$b$937, Y=$memory\num_params$rdmux[0][1][0]$b$928
      New ports: A={ $memory\num_params$rdmux[0][2][1]$a$936 [4] $memory\num_params$rdmux[0][2][1]$a$936 [1:0] }, B={ 2'00 $memory\num_params$rdmux[0][2][1]$b$937 [0] }, Y={ $memory\num_params$rdmux[0][1][0]$b$928 [4] $memory\num_params$rdmux[0][1][0]$b$928 [1:0] }
      New connections: { $memory\num_params$rdmux[0][1][0]$b$928 [13:5] $memory\num_params$rdmux[0][1][0]$b$928 [3:2] } = 11'00000000000
    Consolidated identical input bits for $mux cell $memory\num_params$rdmux[0][2][2]$938:
      Old ports: A=$memory\num_params$rdmux[0][2][2]$a$939, B=$memory\num_params$rdmux[0][2][2]$b$940, Y=$memory\num_params$rdmux[0][1][1]$a$930
      New ports: A={ 1'0 $memory\num_params$rdmux[0][2][2]$a$939 [2] }, B={ $memory\num_params$rdmux[0][2][2]$b$940 [9] $memory\num_params$rdmux[0][2][2]$b$940 [2] }, Y={ $memory\num_params$rdmux[0][1][1]$a$930 [9] $memory\num_params$rdmux[0][1][1]$a$930 [2] }
      New connections: { $memory\num_params$rdmux[0][1][1]$a$930 [13:10] $memory\num_params$rdmux[0][1][1]$a$930 [8:3] $memory\num_params$rdmux[0][1][1]$a$930 [1:0] } = { $memory\num_params$rdmux[0][1][1]$a$930 [9] $memory\num_params$rdmux[0][1][1]$a$930 [9] 10'0000000000 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][4][0]$1213:
      Old ports: A=$memory\params$rdmux[0][4][0]$a$1214, B=$memory\params$rdmux[0][4][0]$b$1215, Y=$memory\params$rdmux[0][3][0]$a$1190
      New ports: A={ $memory\params$rdmux[0][4][0]$a$1214 [3] $memory\params$rdmux[0][4][0]$a$1214 [0] }, B={ $memory\params$rdmux[0][4][0]$b$1215 [3] $memory\params$rdmux[0][4][0]$b$1215 [0] }, Y={ $memory\params$rdmux[0][3][0]$a$1190 [3] $memory\params$rdmux[0][3][0]$a$1190 [0] }
      New connections: { $memory\params$rdmux[0][3][0]$a$1190 [7:4] $memory\params$rdmux[0][3][0]$a$1190 [2:1] } = { 2'00 $memory\params$rdmux[0][3][0]$a$1190 [3] $memory\params$rdmux[0][3][0]$a$1190 [3] 2'10 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][4][1]$1216:
      Old ports: A=$memory\params$rdmux[0][4][1]$a$1217, B=$memory\params$rdmux[0][4][1]$b$1218, Y=$memory\params$rdmux[0][3][0]$b$1191
      New ports: A={ 1'0 $memory\params$rdmux[0][4][1]$a$1217 [3] $memory\params$rdmux[0][4][1]$a$1217 [3] $memory\params$rdmux[0][4][1]$a$1217 [3] 2'10 $memory\params$rdmux[0][4][1]$a$1217 [0] }, B={ $memory\params$rdmux[0][4][1]$b$1218 [5] $memory\params$rdmux[0][4][1]$b$1218 [5] 1'0 $memory\params$rdmux[0][4][1]$b$1218 [3:2] $memory\params$rdmux[0][4][1]$b$1218 [0] $memory\params$rdmux[0][4][1]$b$1218 [0] }, Y={ $memory\params$rdmux[0][3][0]$b$1191 [7] $memory\params$rdmux[0][3][0]$b$1191 [5:0] }
      New connections: $memory\params$rdmux[0][3][0]$b$1191 [6] = 1'0
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][4][2]$1219:
      Old ports: A=$memory\params$rdmux[0][4][2]$a$1220, B=$memory\params$rdmux[0][4][2]$b$1221, Y=$memory\params$rdmux[0][3][1]$a$1193
      New ports: A={ $memory\params$rdmux[0][4][2]$a$1220 [7:6] 1'0 $memory\params$rdmux[0][4][2]$a$1220 [3] $memory\params$rdmux[0][4][2]$a$1220 [0] 1'0 $memory\params$rdmux[0][4][2]$a$1220 [0] }, B={ $memory\params$rdmux[0][4][2]$b$1221 [7] $memory\params$rdmux[0][4][2]$b$1221 [5] $memory\params$rdmux[0][4][2]$b$1221 [5] 1'1 $memory\params$rdmux[0][4][2]$b$1221 [2:0] }, Y={ $memory\params$rdmux[0][3][1]$a$1193 [7:5] $memory\params$rdmux[0][3][1]$a$1193 [3:0] }
      New connections: $memory\params$rdmux[0][3][1]$a$1193 [4] = 1'0
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][4][3]$1222:
      Old ports: A=$memory\params$rdmux[0][4][3]$a$1223, B=$memory\params$rdmux[0][4][3]$b$1224, Y=$memory\params$rdmux[0][3][1]$b$1194
      New ports: A={ 1'0 $memory\params$rdmux[0][4][3]$a$1223 [3] $memory\params$rdmux[0][4][3]$a$1223 [1] $memory\params$rdmux[0][4][3]$a$1223 [1:0] }, B={ $memory\params$rdmux[0][4][3]$b$1224 [4] 1'0 $memory\params$rdmux[0][4][3]$b$1224 [0] $memory\params$rdmux[0][4][3]$b$1224 [1:0] }, Y=$memory\params$rdmux[0][3][1]$b$1194 [4:0]
      New connections: $memory\params$rdmux[0][3][1]$b$1194 [7:5] = 3'000
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][4][4]$1225:
      Old ports: A=$memory\params$rdmux[0][4][4]$a$1226, B=$memory\params$rdmux[0][4][4]$b$1227, Y=$memory\params$rdmux[0][3][2]$a$1196
      New ports: A=$memory\params$rdmux[0][4][4]$a$1226 [5:0], B={ 1'0 $memory\params$rdmux[0][4][4]$b$1227 [4:2] 2'00 }, Y=$memory\params$rdmux[0][3][2]$a$1196 [5:0]
      New connections: $memory\params$rdmux[0][3][2]$a$1196 [7:6] = 2'00
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][4][5]$1228:
      Old ports: A=$memory\params$rdmux[0][4][5]$a$1229, B=$memory\params$rdmux[0][4][5]$b$1230, Y=$memory\params$rdmux[0][3][2]$b$1197
      New ports: A={ $memory\params$rdmux[0][4][5]$a$1229 [3] $memory\params$rdmux[0][4][5]$a$1229 [1:0] }, B={ $memory\params$rdmux[0][4][5]$b$1230 [3] 1'1 $memory\params$rdmux[0][4][5]$b$1230 [0] }, Y={ $memory\params$rdmux[0][3][2]$b$1197 [3] $memory\params$rdmux[0][3][2]$b$1197 [1:0] }
      New connections: { $memory\params$rdmux[0][3][2]$b$1197 [7:4] $memory\params$rdmux[0][3][2]$b$1197 [2] } = { 4'0000 $memory\params$rdmux[0][3][2]$b$1197 [0] }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][4][6]$1231:
      Old ports: A=$memory\params$rdmux[0][4][6]$a$1232, B=$memory\params$rdmux[0][4][6]$b$1233, Y=$memory\params$rdmux[0][3][3]$a$1199
      New ports: A={ $memory\params$rdmux[0][4][6]$a$1232 [5:1] 1'1 }, B={ 1'0 $memory\params$rdmux[0][4][6]$b$1233 [4] $memory\params$rdmux[0][4][6]$b$1233 [0] $memory\params$rdmux[0][4][6]$b$1233 [2] 1'0 $memory\params$rdmux[0][4][6]$b$1233 [0] }, Y=$memory\params$rdmux[0][3][3]$a$1199 [5:0]
      New connections: $memory\params$rdmux[0][3][3]$a$1199 [7:6] = 2'00
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][4][7]$1234:
      Old ports: A=$memory\params$rdmux[0][4][7]$a$1235, B=$memory\params$rdmux[0][4][7]$b$1236, Y=$memory\params$rdmux[0][3][3]$b$1200
      New ports: A={ $memory\params$rdmux[0][4][7]$a$1235 [7] $memory\params$rdmux[0][4][7]$a$1235 [3] $memory\params$rdmux[0][4][7]$a$1235 [3] $memory\params$rdmux[0][4][7]$a$1235 [3] $memory\params$rdmux[0][4][7]$a$1235 [0] 1'0 $memory\params$rdmux[0][4][7]$a$1235 [0] }, B={ 1'0 $memory\params$rdmux[0][4][7]$b$1236 [0] $memory\params$rdmux[0][4][7]$b$1236 [1] $memory\params$rdmux[0][4][7]$b$1236 [3] 1'0 $memory\params$rdmux[0][4][7]$b$1236 [1:0] }, Y={ $memory\params$rdmux[0][3][3]$b$1200 [7] $memory\params$rdmux[0][3][3]$b$1200 [5:0] }
      New connections: $memory\params$rdmux[0][3][3]$b$1200 [6] = $memory\params$rdmux[0][3][3]$b$1200 [5]
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][4][8]$1237:
      Old ports: A=$memory\params$rdmux[0][4][8]$a$1238, B=$memory\params$rdmux[0][4][8]$b$1239, Y=$memory\params$rdmux[0][3][4]$a$1202
      New ports: A={ $memory\params$rdmux[0][4][8]$a$1238 [5] $memory\params$rdmux[0][4][8]$a$1238 [0] }, B={ $memory\params$rdmux[0][4][8]$b$1239 [5] $memory\params$rdmux[0][4][8]$b$1239 [0] }, Y={ $memory\params$rdmux[0][3][4]$a$1202 [5] $memory\params$rdmux[0][3][4]$a$1202 [0] }
      New connections: { $memory\params$rdmux[0][3][4]$a$1202 [7:6] $memory\params$rdmux[0][3][4]$a$1202 [4:1] } = { $memory\params$rdmux[0][3][4]$a$1202 [5] 5'00000 }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][4][9]$1240:
      Old ports: A=$memory\params$rdmux[0][4][9]$a$1241, B=8'xxxxxxxx, Y=$memory\params$rdmux[0][3][4]$b$1203
      New ports: A=$memory\params$rdmux[0][4][9]$a$1241 [3:0], B=4'xxxx, Y=$memory\params$rdmux[0][3][4]$b$1203 [3:0]
      New connections: $memory\params$rdmux[0][3][4]$b$1203 [7:4] = { $memory\params$rdmux[0][3][4]$b$1203 [2] $memory\params$rdmux[0][3][4]$b$1203 [0] $memory\params$rdmux[0][3][4]$b$1203 [0] $memory\params$rdmux[0][3][4]$b$1203 [1] }
  Optimizing cells in module \demo.
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][1][1]$788:
      Old ports: A=$memory\cmd$rdmux[0][1][1]$a$789, B=8'xxxxxxxx, Y=$memory\cmd$rdmux[0][0][0]$b$784
      New ports: A={ 1'0 $memory\cmd$rdmux[0][1][1]$a$789 [3:0] }, B=5'xxxxx, Y=$memory\cmd$rdmux[0][0][0]$b$784 [4:0]
      New connections: $memory\cmd$rdmux[0][0][0]$b$784 [7:5] = { $memory\cmd$rdmux[0][0][0]$b$784 [4] $memory\cmd$rdmux[0][0][0]$b$784 [4:3] }
    Consolidated identical input bits for $mux cell $memory\num_params$rdmux[0][1][0]$926:
      Old ports: A=$memory\num_params$rdmux[0][1][0]$a$927, B=$memory\num_params$rdmux[0][1][0]$b$928, Y=$memory\num_params$rdmux[0][0][0]$a$924
      New ports: A={ 1'0 $memory\num_params$rdmux[0][1][0]$a$927 [2:0] }, B={ $memory\num_params$rdmux[0][1][0]$b$928 [4] 1'0 $memory\num_params$rdmux[0][1][0]$b$928 [1:0] }, Y={ $memory\num_params$rdmux[0][0][0]$a$924 [4] $memory\num_params$rdmux[0][0][0]$a$924 [2:0] }
      New connections: { $memory\num_params$rdmux[0][0][0]$a$924 [13:5] $memory\num_params$rdmux[0][0][0]$a$924 [3] } = 10'0000000000
    Consolidated identical input bits for $mux cell $memory\num_params$rdmux[0][1][1]$929:
      Old ports: A=$memory\num_params$rdmux[0][1][1]$a$930, B=14'xxxxxxxxxxxxxx, Y=$memory\num_params$rdmux[0][0][0]$b$925
      New ports: A={ $memory\num_params$rdmux[0][1][1]$a$930 [9] $memory\num_params$rdmux[0][1][1]$a$930 [2] 1'0 }, B=3'xxx, Y={ $memory\num_params$rdmux[0][0][0]$b$925 [9] $memory\num_params$rdmux[0][0][0]$b$925 [2] $memory\num_params$rdmux[0][0][0]$b$925 [0] }
      New connections: { $memory\num_params$rdmux[0][0][0]$b$925 [13:10] $memory\num_params$rdmux[0][0][0]$b$925 [8:3] $memory\num_params$rdmux[0][0][0]$b$925 [1] } = { $memory\num_params$rdmux[0][0][0]$b$925 [9] $memory\num_params$rdmux[0][0][0]$b$925 [9] $memory\num_params$rdmux[0][0][0]$b$925 [0] $memory\num_params$rdmux[0][0][0]$b$925 [0] $memory\num_params$rdmux[0][0][0]$b$925 [0] $memory\num_params$rdmux[0][0][0]$b$925 [0] $memory\num_params$rdmux[0][0][0]$b$925 [0] $memory\num_params$rdmux[0][0][0]$b$925 [0] $memory\num_params$rdmux[0][0][0]$b$925 [0] $memory\num_params$rdmux[0][0][0]$b$925 [0] $memory\num_params$rdmux[0][0][0]$b$925 [0] }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][3][0]$1189:
      Old ports: A=$memory\params$rdmux[0][3][0]$a$1190, B=$memory\params$rdmux[0][3][0]$b$1191, Y=$memory\params$rdmux[0][2][0]$a$1178
      New ports: A={ 1'0 $memory\params$rdmux[0][3][0]$a$1190 [3] $memory\params$rdmux[0][3][0]$a$1190 [3] $memory\params$rdmux[0][3][0]$a$1190 [3] 2'10 $memory\params$rdmux[0][3][0]$a$1190 [0] }, B={ $memory\params$rdmux[0][3][0]$b$1191 [7] $memory\params$rdmux[0][3][0]$b$1191 [5:0] }, Y={ $memory\params$rdmux[0][2][0]$a$1178 [7] $memory\params$rdmux[0][2][0]$a$1178 [5:0] }
      New connections: $memory\params$rdmux[0][2][0]$a$1178 [6] = 1'0
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][3][2]$1195:
      Old ports: A=$memory\params$rdmux[0][3][2]$a$1196, B=$memory\params$rdmux[0][3][2]$b$1197, Y=$memory\params$rdmux[0][2][1]$a$1181
      New ports: A=$memory\params$rdmux[0][3][2]$a$1196 [5:0], B={ 2'00 $memory\params$rdmux[0][3][2]$b$1197 [3] $memory\params$rdmux[0][3][2]$b$1197 [0] $memory\params$rdmux[0][3][2]$b$1197 [1:0] }, Y=$memory\params$rdmux[0][2][1]$a$1181 [5:0]
      New connections: $memory\params$rdmux[0][2][1]$a$1181 [7:6] = 2'00
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][3][4]$1201:
      Old ports: A=$memory\params$rdmux[0][3][4]$a$1202, B=$memory\params$rdmux[0][3][4]$b$1203, Y=$memory\params$rdmux[0][2][2]$a$1184
      New ports: A={ $memory\params$rdmux[0][3][4]$a$1202 [5] 1'0 $memory\params$rdmux[0][3][4]$a$1202 [5] 3'000 $memory\params$rdmux[0][3][4]$a$1202 [0] }, B={ $memory\params$rdmux[0][3][4]$b$1203 [2] $memory\params$rdmux[0][3][4]$b$1203 [0] $memory\params$rdmux[0][3][4]$b$1203 [0] $memory\params$rdmux[0][3][4]$b$1203 [3:0] }, Y={ $memory\params$rdmux[0][2][2]$a$1184 [7:5] $memory\params$rdmux[0][2][2]$a$1184 [3:0] }
      New connections: $memory\params$rdmux[0][2][2]$a$1184 [4] = $memory\params$rdmux[0][2][2]$a$1184 [1]
  Optimizing cells in module \demo.
    Consolidated identical input bits for $mux cell $memory\num_params$rdmux[0][0][0]$923:
      Old ports: A=$memory\num_params$rdmux[0][0][0]$a$924, B=$memory\num_params$rdmux[0][0][0]$b$925, Y=$memrd$\num_params$demo.v:313$145_DATA
      New ports: A={ 1'0 $memory\num_params$rdmux[0][0][0]$a$924 [4] 1'0 $memory\num_params$rdmux[0][0][0]$a$924 [2:0] }, B={ $memory\num_params$rdmux[0][0][0]$b$925 [9] $memory\num_params$rdmux[0][0][0]$b$925 [0] $memory\num_params$rdmux[0][0][0]$b$925 [0] $memory\num_params$rdmux[0][0][0]$b$925 [2] $memory\num_params$rdmux[0][0][0]$b$925 [0] $memory\num_params$rdmux[0][0][0]$b$925 [0] }, Y={ $memrd$\num_params$demo.v:313$145_DATA [9] $memrd$\num_params$demo.v:313$145_DATA [4:0] }
      New connections: { $memrd$\num_params$demo.v:313$145_DATA [13:10] $memrd$\num_params$demo.v:313$145_DATA [8:5] } = { $memrd$\num_params$demo.v:313$145_DATA [9] $memrd$\num_params$demo.v:313$145_DATA [9] $memrd$\num_params$demo.v:313$145_DATA [3] $memrd$\num_params$demo.v:313$145_DATA [3] $memrd$\num_params$demo.v:313$145_DATA [3] $memrd$\num_params$demo.v:313$145_DATA [3] $memrd$\num_params$demo.v:313$145_DATA [3] $memrd$\num_params$demo.v:313$145_DATA [3] }
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][2][2]$1183:
      Old ports: A=$memory\params$rdmux[0][2][2]$a$1184, B=8'xxxxxxxx, Y=$memory\params$rdmux[0][1][1]$a$1175
      New ports: A={ $memory\params$rdmux[0][2][2]$a$1184 [7:5] $memory\params$rdmux[0][2][2]$a$1184 [3:0] }, B=7'xxxxxxx, Y={ $memory\params$rdmux[0][1][1]$a$1175 [7:5] $memory\params$rdmux[0][1][1]$a$1175 [3:0] }
      New connections: $memory\params$rdmux[0][1][1]$a$1175 [4] = $memory\params$rdmux[0][1][1]$a$1175 [1]
  Optimizing cells in module \demo.
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][1][1]$1174:
      Old ports: A=$memory\params$rdmux[0][1][1]$a$1175, B=8'xxxxxxxx, Y=$memory\params$rdmux[0][0][0]$b$1170
      New ports: A={ $memory\params$rdmux[0][1][1]$a$1175 [7:5] $memory\params$rdmux[0][1][1]$a$1175 [3:0] }, B=7'xxxxxxx, Y={ $memory\params$rdmux[0][0][0]$b$1170 [7:5] $memory\params$rdmux[0][0][0]$b$1170 [3:0] }
      New connections: $memory\params$rdmux[0][0][0]$b$1170 [4] = $memory\params$rdmux[0][0][0]$b$1170 [1]
  Optimizing cells in module \demo.
Performed a total of 111 changes.

2.29.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\demo'.
<suppressed ~138 debug messages>
Removed a total of 46 cells.

2.29.13. Executing OPT_RMDFF pass (remove dff with constant values).

2.29.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..
Removed 0 unused cells and 53 unused wires.
<suppressed ~1 debug messages>

2.29.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.
<suppressed ~1 debug messages>

2.29.16. Rerunning OPT passes. (Maybe there is more to do..)

2.29.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \demo..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~20 debug messages>

2.29.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \demo.
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][3][0]$803:
      Old ports: A={ 1'0 $memory\cmd$rdmux[0][3][0]$a$804 [1:0] }, B={ $memory\cmd$rdmux[0][3][0]$a$804 [1:0] $memory\cmd$rdmux[0][3][0]$a$804 [0] }, Y=$memory\cmd$rdmux[0][2][0]$a$792 [2:0]
      New ports: A={ 1'0 $memory\cmd$rdmux[0][3][0]$a$804 [1] }, B=$memory\cmd$rdmux[0][3][0]$a$804 [1:0], Y=$memory\cmd$rdmux[0][2][0]$a$792 [2:1]
      New connections: $memory\cmd$rdmux[0][2][0]$a$792 [0] = $memory\cmd$rdmux[0][3][0]$a$804 [0]
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][3][1]$806:
      Old ports: A={ 1'0 $memory\cmd$rdmux[0][3][1]$a$807 [0] }, B={ 1'1 $memory\cmd$rdmux[0][3][1]$a$807 [0] }, Y=$memory\cmd$rdmux[0][2][0]$b$793 [1:0]
      New ports: A=1'0, B=1'1, Y=$memory\cmd$rdmux[0][2][0]$b$793 [1]
      New connections: $memory\cmd$rdmux[0][2][0]$b$793 [0] = $memory\cmd$rdmux[0][3][1]$a$807 [0]
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][3][2]$809:
      Old ports: A={ 2'01 $memory\cmd$rdmux[0][3][1]$a$807 [0] }, B={ 2'10 $memory\cmd$rdmux[0][3][1]$a$807 [0] }, Y={ $memory\cmd$rdmux[0][2][1]$a$795 [5] $memory\cmd$rdmux[0][2][1]$a$795 [2] $memory\cmd$rdmux[0][2][1]$a$795 [0] }
      New ports: A=2'01, B=2'10, Y={ $memory\cmd$rdmux[0][2][1]$a$795 [5] $memory\cmd$rdmux[0][2][1]$a$795 [2] }
      New connections: $memory\cmd$rdmux[0][2][1]$a$795 [0] = $memory\cmd$rdmux[0][3][1]$a$807 [0]
    Consolidated identical input bits for $mux cell $memory\cmd$rdmux[0][3][3]$812:
      Old ports: A={ $memory\cmd$rdmux[0][3][3]$a$813 [7] 2'11 $memory\cmd$rdmux[0][3][3]$a$813 [7] $memory\cmd$rdmux[0][3][3]$a$813 [1] 1'0 }, B={ 1'0 $memory\cmd$rdmux[0][3][3]$a$813 [7] 1'0 $memory\cmd$rdmux[0][3][3]$a$813 [7] $memory\cmd$rdmux[0][3][3]$a$813 [7] $memory\cmd$rdmux[0][3][3]$a$813 [1] }, Y={ $memory\cmd$rdmux[0][2][1]$b$796 [7] $memory\cmd$rdmux[0][2][1]$b$796 [4:0] }
      New ports: A={ $memory\cmd$rdmux[0][3][3]$a$813 [7] 2'11 $memory\cmd$rdmux[0][3][3]$a$813 [1] 1'0 }, B={ 1'0 $memory\cmd$rdmux[0][3][3]$a$813 [7] 1'0 $memory\cmd$rdmux[0][3][3]$a$813 [7] $memory\cmd$rdmux[0][3][3]$a$813 [1] }, Y={ $memory\cmd$rdmux[0][2][1]$b$796 [7] $memory\cmd$rdmux[0][2][1]$b$796 [4:3] $memory\cmd$rdmux[0][2][1]$b$796 [1:0] }
      New connections: $memory\cmd$rdmux[0][2][1]$b$796 [2] = $memory\cmd$rdmux[0][3][3]$a$813 [7]
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][10]$1291:
      Old ports: A={ 1'1 $memory\params$rdmux[0][5][0]$b$1263 [5] $memory\params$rdmux[0][5][0]$b$1263 [0] }, B={ $memory\params$rdmux[0][5][0]$b$1263 [5] $memory\params$rdmux[0][5][0]$b$1263 [0] $memory\params$rdmux[0][5][0]$b$1263 [0] }, Y={ $memory\params$rdmux[0][4][5]$a$1229 [3] $memory\params$rdmux[0][4][5]$a$1229 [1] $memory\params$rdmux[0][4][5]$a$1229 [2] }
      New ports: A={ 1'1 $memory\params$rdmux[0][5][0]$b$1263 [5] }, B={ $memory\params$rdmux[0][5][0]$b$1263 [5] $memory\params$rdmux[0][5][0]$b$1263 [0] }, Y={ $memory\params$rdmux[0][4][5]$a$1229 [3] $memory\params$rdmux[0][4][5]$a$1229 [1] }
      New connections: $memory\params$rdmux[0][4][5]$a$1229 [2] = $memory\params$rdmux[0][5][0]$b$1263 [0]
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][15]$1306:
      Old ports: A={ $memory\params$rdmux[0][5][11]$a$1295 [3] $memory\params$rdmux[0][5][11]$a$1295 [3] 1'0 }, B={ $memory\params$rdmux[0][5][11]$a$1295 [3] 1'0 $memory\params$rdmux[0][5][11]$a$1295 [3] }, Y={ $memory\params$rdmux[0][4][7]$b$1236 [3] $memory\params$rdmux[0][4][7]$b$1236 [4] $memory\params$rdmux[0][4][7]$b$1236 [6] }
      New ports: A={ $memory\params$rdmux[0][5][11]$a$1295 [3] 1'0 }, B={ 1'0 $memory\params$rdmux[0][5][11]$a$1295 [3] }, Y={ $memory\params$rdmux[0][4][7]$b$1236 [4] $memory\params$rdmux[0][4][7]$b$1236 [6] }
      New connections: $memory\params$rdmux[0][4][7]$b$1236 [3] = $memory\params$rdmux[0][5][11]$a$1295 [3]
    Consolidated identical input bits for $mux cell $memory\params$rdmux[0][5][5]$1276:
      Old ports: A={ $memory\params$rdmux[0][5][0]$b$1263 [0] $memory\params$rdmux[0][5][0]$b$1263 [5] $memory\params$rdmux[0][5][0]$b$1263 [0] $memory\params$rdmux[0][5][0]$b$1263 [5] $memory\params$rdmux[0][5][0]$b$1263 [0] }, B={ $memory\params$rdmux[0][5][0]$b$1263 [5] $memory\params$rdmux[0][5][0]$b$1263 [5] 2'11 $memory\params$rdmux[0][5][0]$b$1263 [0] }, Y={ $memory\params$rdmux[0][4][2]$b$1221 [7:6] $memory\params$rdmux[0][4][2]$b$1221 [2:0] }
      New ports: A={ $memory\params$rdmux[0][5][0]$b$1263 [0] $memory\params$rdmux[0][5][0]$b$1263 [0] $memory\params$rdmux[0][5][0]$b$1263 [5] }, B={ $memory\params$rdmux[0][5][0]$b$1263 [5] 2'11 }, Y={ $memory\params$rdmux[0][4][2]$b$1221 [7] $memory\params$rdmux[0][4][2]$b$1221 [2:1] }
      New connections: { $memory\params$rdmux[0][4][2]$b$1221 [6] $memory\params$rdmux[0][4][2]$b$1221 [0] } = { $memory\params$rdmux[0][5][0]$b$1263 [5] $memory\params$rdmux[0][5][0]$b$1263 [0] }
  Optimizing cells in module \demo.
Performed a total of 7 changes.

2.29.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\demo'.
Removed a total of 0 cells.

2.29.20. Executing OPT_RMDFF pass (remove dff with constant values).

2.29.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..
Removed 0 unused cells and 4 unused wires.
<suppressed ~1 debug messages>

2.29.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.

2.29.23. Rerunning OPT passes. (Maybe there is more to do..)

2.29.24. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \demo..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~22 debug messages>

2.29.25. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \demo.
Performed a total of 0 changes.

2.29.26. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\demo'.
Removed a total of 0 cells.

2.29.27. Executing OPT_RMDFF pass (remove dff with constant values).

2.29.28. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..

2.29.29. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.

2.29.30. Finished OPT passes. (There is nothing left to do.)

2.30. Executing TECHMAP pass (map to technology primitives).

2.30.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

2.30.2. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/arith_map.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/arith_map.v' to AST representation.
Generating RTLIL representation for module `\_80_ice40_alu'.
Successfully finished Verilog frontend.

2.30.3. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $not.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=14\B_WIDTH=1\Y_WIDTH=14 for cells of type $alu.
Using extmapper simplemap for cells of type $logic_not.
Using template $paramod$constmap:ee5af906ae0d3d414c6a0471604c553ef70c8e09$paramod$1297efc30c1e19551d1f4e269f2cbfa7dd15f801\_90_shift_shiftx for cells of type $shiftx.
Using extmapper simplemap for cells of type $eq.
Using template $paramod\_90_pmux\WIDTH=14\S_WIDTH=2 for cells of type $pmux.
Using extmapper simplemap for cells of type $reduce_and.
Using extmapper simplemap for cells of type $reduce_or.
Using template $paramod\_90_pmux\WIDTH=8\S_WIDTH=2 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=16\S_WIDTH=3 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=6\S_WIDTH=12 for cells of type $pmux.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=3\B_WIDTH=1\Y_WIDTH=3 for cells of type $alu.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=7\B_WIDTH=16\Y_WIDTH=16 for cells of type $alu.
Using extmapper simplemap for cells of type $or.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=5\Y_WIDTH=5 for cells of type $alu.
Using template $paramod\_90_pmux\WIDTH=1\S_WIDTH=2 for cells of type $pmux.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=16\Y_WIDTH=16 for cells of type $alu.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=7\Y_WIDTH=7 for cells of type $alu.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=5\B_WIDTH=1\Y_WIDTH=5 for cells of type $alu.
Using extmapper simplemap for cells of type $lut.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=16\B_WIDTH=16\Y_WIDTH=16 for cells of type $alu.
Using template $paramod\_90_pmux\WIDTH=1\S_WIDTH=3 for cells of type $pmux.
Using extmapper simplemap for cells of type $dff.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $pos.
Using extmapper simplemap for cells of type $xor.
No more expansions possible.
<suppressed ~562 debug messages>

2.31. Executing ICE40_OPT pass (performing simple optimizations).

2.31.1. Running ICE40 specific optimizations.

2.31.2. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.
<suppressed ~446 debug messages>

2.31.3. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\demo'.
<suppressed ~417 debug messages>
Removed a total of 139 cells.

2.31.4. Executing OPT_RMDFF pass (remove dff with constant values).

2.31.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..
Removed 79 unused cells and 445 unused wires.
<suppressed ~80 debug messages>

2.31.6. Rerunning OPT passes. (Removed registers in this run.)

2.31.7. Running ICE40 specific optimizations.
Optimized away SB_CARRY cell demo.$auto$alumacc.cc:474:replace_alu$688.slice[0].carry: CO=1'1
Optimized away SB_CARRY cell demo.$auto$alumacc.cc:474:replace_alu$697.slice[0].carry: CO=$auto$alumacc.cc:474:replace_alu$697.BB [0]
Optimized away SB_CARRY cell demo.$auto$alumacc.cc:474:replace_alu$710.slice[0].carry: CO=\delay [0]
Optimized away SB_CARRY cell demo.$auto$alumacc.cc:474:replace_alu$713.slice[0].carry: CO=\cmd_counter [0]
Optimized away SB_CARRY cell demo.$auto$alumacc.cc:474:replace_alu$716.slice[0].carry: CO=\param_counter [0]
Optimized away SB_CARRY cell demo.$auto$alumacc.cc:474:replace_alu$719.slice[0].carry: CO=\bit_counter [0]
Optimized away SB_CARRY cell demo.$auto$alumacc.cc:474:replace_alu$722.slice[0].carry: CO=\cmd_counter [0]
Optimized away SB_CARRY cell demo.$auto$alumacc.cc:474:replace_alu$725.slice[0].carry: CO=\params_left [0]
Mapping SB_LUT4 cell demo.$auto$alumacc.cc:474:replace_alu$710.slice[1].adder back to logic.
Mapping SB_LUT4 cell demo.$auto$alumacc.cc:474:replace_alu$713.slice[1].adder back to logic.
Mapping SB_LUT4 cell demo.$auto$alumacc.cc:474:replace_alu$716.slice[1].adder back to logic.
Mapping SB_LUT4 cell demo.$auto$alumacc.cc:474:replace_alu$719.slice[1].adder back to logic.
Mapping SB_LUT4 cell demo.$auto$alumacc.cc:474:replace_alu$722.slice[1].adder back to logic.
Mapping SB_LUT4 cell demo.$auto$alumacc.cc:474:replace_alu$725.slice[1].adder back to logic.

2.31.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.
<suppressed ~77 debug messages>

2.31.9. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\demo'.
<suppressed ~21 debug messages>
Removed a total of 7 cells.

2.31.10. Executing OPT_RMDFF pass (remove dff with constant values).

2.31.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..
Removed 0 unused cells and 19 unused wires.
<suppressed ~1 debug messages>

2.31.12. Rerunning OPT passes. (Removed registers in this run.)

2.31.13. Running ICE40 specific optimizations.
Optimized away SB_CARRY cell demo.$auto$alumacc.cc:474:replace_alu$688.slice[1].carry: CO=1'1

2.31.14. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.

2.31.15. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\demo'.
Removed a total of 0 cells.

2.31.16. Executing OPT_RMDFF pass (remove dff with constant values).

2.31.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..

2.31.18. Rerunning OPT passes. (Removed registers in this run.)

2.31.19. Running ICE40 specific optimizations.
Optimized away SB_CARRY cell demo.$auto$alumacc.cc:474:replace_alu$688.slice[2].carry: CO=1'1

2.31.20. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.

2.31.21. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\demo'.
Removed a total of 0 cells.

2.31.22. Executing OPT_RMDFF pass (remove dff with constant values).

2.31.23. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..

2.31.24. Rerunning OPT passes. (Removed registers in this run.)

2.31.25. Running ICE40 specific optimizations.
Optimized away SB_CARRY cell demo.$auto$alumacc.cc:474:replace_alu$688.slice[3].carry: CO=1'1

2.31.26. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.

2.31.27. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\demo'.
Removed a total of 0 cells.

2.31.28. Executing OPT_RMDFF pass (remove dff with constant values).

2.31.29. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..

2.31.30. Rerunning OPT passes. (Removed registers in this run.)

2.31.31. Running ICE40 specific optimizations.
Optimized away SB_CARRY cell demo.$auto$alumacc.cc:474:replace_alu$688.slice[4].carry: CO=1'1

2.31.32. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.

2.31.33. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\demo'.
Removed a total of 0 cells.

2.31.34. Executing OPT_RMDFF pass (remove dff with constant values).

2.31.35. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..

2.31.36. Rerunning OPT passes. (Removed registers in this run.)

2.31.37. Running ICE40 specific optimizations.
Optimized away SB_CARRY cell demo.$auto$alumacc.cc:474:replace_alu$688.slice[5].carry: CO=\delay [5]

2.31.38. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.

2.31.39. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\demo'.
Removed a total of 0 cells.

2.31.40. Executing OPT_RMDFF pass (remove dff with constant values).

2.31.41. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..

2.31.42. Rerunning OPT passes. (Removed registers in this run.)

2.31.43. Running ICE40 specific optimizations.

2.31.44. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.

2.31.45. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\demo'.
Removed a total of 0 cells.

2.31.46. Executing OPT_RMDFF pass (remove dff with constant values).

2.31.47. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..

2.31.48. Finished OPT passes. (There is nothing left to do.)

2.32. Executing DFFSR2DFF pass (mapping DFFSR cells to simpler FFs).

2.33. Executing DFF2DFFE pass (transform $dff to $dffe where applicable).
Selected cell types for direct conversion:
  $_DFF_PP1_ -> $__DFFE_PP1
  $_DFF_PP0_ -> $__DFFE_PP0
  $_DFF_PN1_ -> $__DFFE_PN1
  $_DFF_PN0_ -> $__DFFE_PN0
  $_DFF_NP1_ -> $__DFFE_NP1
  $_DFF_NP0_ -> $__DFFE_NP0
  $_DFF_NN1_ -> $__DFFE_NN1
  $_DFF_NN0_ -> $__DFFE_NN0
  $_DFF_N_ -> $_DFFE_NP_
  $_DFF_P_ -> $_DFFE_PP_
Transforming FF to FF+Enable cells in module demo:
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2411 to $_DFFE_PP_ for $0\rst[0:0] -> \rst.
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2412 to $_DFFE_PP_ for $0\dc[0:0] -> \dc.
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2413 to $_DFFE_PP_ for $0\mosi[0:0] -> \mosi.
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2414 to $_DFFE_PP_ for $0\cs[0:0] -> \cs.
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2415 to $_DFFE_PP_ for $0\state[5:0] [0] -> \state [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2416 to $_DFFE_PP_ for $0\state[5:0] [1] -> \state [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2417 to $_DFFE_PP_ for $0\state[5:0] [2] -> \state [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2418 to $_DFFE_PP_ for $0\state[5:0] [3] -> \state [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2419 to $_DFFE_PP_ for $0\state[5:0] [4] -> \state [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2420 to $_DFFE_PP_ for $0\state[5:0] [5] -> \state [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2421 to $_DFFE_PP_ for $0\delay[15:0] [0] -> \delay [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2422 to $_DFFE_PP_ for $0\delay[15:0] [1] -> \delay [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2423 to $_DFFE_PP_ for $0\delay[15:0] [2] -> \delay [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2424 to $_DFFE_PP_ for $0\delay[15:0] [3] -> \delay [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2425 to $_DFFE_PP_ for $0\delay[15:0] [4] -> \delay [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2426 to $_DFFE_PP_ for $0\delay[15:0] [5] -> \delay [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2427 to $_DFFE_PP_ for $0\delay[15:0] [6] -> \delay [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2428 to $_DFFE_PP_ for $0\delay[15:0] [7] -> \delay [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2429 to $_DFFE_PP_ for $0\delay[15:0] [8] -> \delay [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2430 to $_DFFE_PP_ for $0\delay[15:0] [9] -> \delay [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2431 to $_DFFE_PP_ for $0\delay[15:0] [10] -> \delay [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2432 to $_DFFE_PP_ for $0\delay[15:0] [11] -> \delay [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2433 to $_DFFE_PP_ for $0\delay[15:0] [12] -> \delay [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2434 to $_DFFE_PP_ for $0\delay[15:0] [13] -> \delay [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2435 to $_DFFE_PP_ for $0\delay[15:0] [14] -> \delay [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2436 to $_DFFE_PP_ for $0\delay[15:0] [15] -> \delay [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2437 to $_DFFE_PP_ for $0\data[7:0] [0] -> \data [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2438 to $_DFFE_PP_ for $0\data[7:0] [1] -> \data [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2439 to $_DFFE_PP_ for $0\data[7:0] [2] -> \data [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2440 to $_DFFE_PP_ for $0\data[7:0] [3] -> \data [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2441 to $_DFFE_PP_ for $0\data[7:0] [4] -> \data [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2442 to $_DFFE_PP_ for $0\data[7:0] [5] -> \data [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2443 to $_DFFE_PP_ for $0\data[7:0] [6] -> \data [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2444 to $_DFFE_PP_ for $0\data[7:0] [7] -> \data [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2445 to $_DFFE_PP_ for $0\bit_counter[2:0] [0] -> \bit_counter [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2446 to $_DFFE_PP_ for $0\bit_counter[2:0] [1] -> \bit_counter [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2447 to $_DFFE_PP_ for $0\bit_counter[2:0] [2] -> \bit_counter [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2448 to $_DFFE_PP_ for $0\cmd_counter[4:0] [0] -> \cmd_counter [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2449 to $_DFFE_PP_ for $0\cmd_counter[4:0] [1] -> \cmd_counter [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2450 to $_DFFE_PP_ for $0\cmd_counter[4:0] [2] -> \cmd_counter [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2451 to $_DFFE_PP_ for $0\cmd_counter[4:0] [3] -> \cmd_counter [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2452 to $_DFFE_PP_ for $0\cmd_counter[4:0] [4] -> \cmd_counter [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2453 to $_DFFE_PP_ for $0\param_counter[6:0] [0] -> \param_counter [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2454 to $_DFFE_PP_ for $0\param_counter[6:0] [1] -> \param_counter [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2455 to $_DFFE_PP_ for $0\param_counter[6:0] [2] -> \param_counter [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2456 to $_DFFE_PP_ for $0\param_counter[6:0] [3] -> \param_counter [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2457 to $_DFFE_PP_ for $0\param_counter[6:0] [4] -> \param_counter [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2458 to $_DFFE_PP_ for $0\param_counter[6:0] [5] -> \param_counter [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2459 to $_DFFE_PP_ for $0\param_counter[6:0] [6] -> \param_counter [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2460 to $_DFFE_PP_ for $0\params_left[13:0] [0] -> \params_left [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2461 to $_DFFE_PP_ for $0\params_left[13:0] [1] -> \params_left [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2462 to $_DFFE_PP_ for $0\params_left[13:0] [2] -> \params_left [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2463 to $_DFFE_PP_ for $0\params_left[13:0] [3] -> \params_left [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2464 to $_DFFE_PP_ for $0\params_left[13:0] [4] -> \params_left [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2465 to $_DFFE_PP_ for $0\params_left[13:0] [5] -> \params_left [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2466 to $_DFFE_PP_ for $0\params_left[13:0] [6] -> \params_left [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2467 to $_DFFE_PP_ for $0\params_left[13:0] [7] -> \params_left [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2468 to $_DFFE_PP_ for $0\params_left[13:0] [8] -> \params_left [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2469 to $_DFFE_PP_ for $0\params_left[13:0] [9] -> \params_left [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2470 to $_DFFE_PP_ for $0\params_left[13:0] [10] -> \params_left [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2471 to $_DFFE_PP_ for $0\params_left[13:0] [11] -> \params_left [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2472 to $_DFFE_PP_ for $0\params_left[13:0] [12] -> \params_left [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2473 to $_DFFE_PP_ for $0\params_left[13:0] [13] -> \params_left [13].

2.34. Executing TECHMAP pass (map to technology primitives).

2.34.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/cells_map.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$__DFFE_NN0'.
Generating RTLIL representation for module `\$__DFFE_NN1'.
Generating RTLIL representation for module `\$__DFFE_PN0'.
Generating RTLIL representation for module `\$__DFFE_PN1'.
Generating RTLIL representation for module `\$__DFFE_NP0'.
Generating RTLIL representation for module `\$__DFFE_NP1'.
Generating RTLIL representation for module `\$__DFFE_PP0'.
Generating RTLIL representation for module `\$__DFFE_PP1'.
Successfully finished Verilog frontend.

2.34.2. Continuing TECHMAP pass.
Using template \$_DFFE_PP_ for cells of type $_DFFE_PP_.
Using template \$_DFF_P_ for cells of type $_DFF_P_.
No more expansions possible.
<suppressed ~64 debug messages>

2.35. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.
<suppressed ~134 debug messages>

2.36. Executing SIMPLEMAP pass (map simple cells to gate primitives).

2.37. Executing ICE40_FFINIT pass (implement FF init values).
Handling FF init values in demo.
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2474 (SB_DFF): \scl = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2418 (SB_DFFE): \state [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2417 (SB_DFFE): \state [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2460 (SB_DFFE): \params_left [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2416 (SB_DFFE): \state [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2419 (SB_DFFE): \state [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2420 (SB_DFFE): \state [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2415 (SB_DFFE): \state [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2437 (SB_DFFE): \data [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2438 (SB_DFFE): \data [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2439 (SB_DFFE): \data [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2440 (SB_DFFE): \data [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2441 (SB_DFFE): \data [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2442 (SB_DFFE): \data [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2443 (SB_DFFE): \data [6] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2444 (SB_DFFE): \data [7] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2446 (SB_DFFE): \bit_counter [1] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2453 (SB_DFFE): \param_counter [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2447 (SB_DFFE): \bit_counter [2] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2449 (SB_DFFE): \cmd_counter [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2450 (SB_DFFE): \cmd_counter [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2451 (SB_DFFE): \cmd_counter [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2445 (SB_DFFE): \bit_counter [0] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2452 (SB_DFFE): \cmd_counter [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2454 (SB_DFFE): \param_counter [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2455 (SB_DFFE): \param_counter [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2456 (SB_DFFE): \param_counter [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2457 (SB_DFFE): \param_counter [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2458 (SB_DFFE): \param_counter [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2461 (SB_DFFE): \params_left [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2448 (SB_DFFE): \cmd_counter [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2459 (SB_DFFE): \param_counter [6] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2462 (SB_DFFE): \params_left [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2463 (SB_DFFE): \params_left [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2464 (SB_DFFE): \params_left [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2465 (SB_DFFE): \params_left [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2466 (SB_DFFE): \params_left [6] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2467 (SB_DFFE): \params_left [7] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2468 (SB_DFFE): \params_left [8] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2469 (SB_DFFE): \params_left [9] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2470 (SB_DFFE): \params_left [10] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2471 (SB_DFFE): \params_left [11] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2472 (SB_DFFE): \params_left [12] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2473 (SB_DFFE): \params_left [13] = 0

2.38. Executing ICE40_FFSSR pass (merge synchronous set/reset into FF cells).
Merging set/reset $_MUX_ cells into SB_FFs in demo.

2.39. Executing ICE40_OPT pass (performing simple optimizations).

2.39.1. Running ICE40 specific optimizations.

2.39.2. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.
<suppressed ~90 debug messages>

2.39.3. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\demo'.
<suppressed ~63 debug messages>
Removed a total of 21 cells.

2.39.4. Executing OPT_RMDFF pass (remove dff with constant values).

2.39.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..
Removed 0 unused cells and 444 unused wires.
<suppressed ~1 debug messages>

2.39.6. Rerunning OPT passes. (Removed registers in this run.)

2.39.7. Running ICE40 specific optimizations.

2.39.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module demo.

2.39.9. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\demo'.
Removed a total of 0 cells.

2.39.10. Executing OPT_RMDFF pass (remove dff with constant values).

2.39.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \demo..

2.39.12. Finished OPT passes. (There is nothing left to do.)

2.40. Executing TECHMAP pass (map to technology primitives).

2.40.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/latches_map.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/latches_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Successfully finished Verilog frontend.

2.40.2. Continuing TECHMAP pass.
No more expansions possible.

2.41. Executing ABC pass (technology mapping using ABC).

2.41.1. Extracting gate netlist of module `\demo' to `<abc-temp-dir>/input.blif'..
Extracted 588 gates and 689 wires to a netlist network with 99 inputs and 86 outputs.

2.41.1.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + lutpack -S 1 
ABC: + dress 
ABC: Total number of equiv classes                =     156.
ABC: Participating nodes from both networks       =     357.
ABC: Participating nodes from the first network   =     157. (  66.53 % of nodes)
ABC: Participating nodes from the second network  =     200. (  84.75 % of nodes)
ABC: Node pairs (any polarity)                    =     157. (  66.53 % of names can be moved)
ABC: Node pairs (same polarity)                   =     129. (  54.66 % of names can be moved)
ABC: Total runtime =     0.08 sec
ABC: + write_blif <abc-temp-dir>/output.blif 

2.41.1.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:      466
ABC RESULTS:        internal signals:      504
ABC RESULTS:           input signals:       99
ABC RESULTS:          output signals:       86
Removing temp directory.
Removed 0 unused cells and 299 unused wires.

2.42. Executing TECHMAP pass (map to technology primitives).

2.42.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/cells_map.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$__DFFE_NN0'.
Generating RTLIL representation for module `\$__DFFE_NN1'.
Generating RTLIL representation for module `\$__DFFE_PN0'.
Generating RTLIL representation for module `\$__DFFE_PN1'.
Generating RTLIL representation for module `\$__DFFE_NP0'.
Generating RTLIL representation for module `\$__DFFE_NP1'.
Generating RTLIL representation for module `\$__DFFE_PP0'.
Generating RTLIL representation for module `\$__DFFE_PP1'.
Generating RTLIL representation for module `\$lut'.
Successfully finished Verilog frontend.

2.42.2. Continuing TECHMAP pass.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111000100111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0111111100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00000111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111010000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000101110111011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000010011110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000011110100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001010000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111000000010001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=1\LUT=2'01 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01101111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100001000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000011101000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11111110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000001011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111000100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000101000000011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011111011111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0101111110001011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100110111111100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1110000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000111100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11110100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100111110100000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111110000001010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1110111111111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000011100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1110111011110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100101011111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11111000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111100010001000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000111001111101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000110111000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111111111000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011111101010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111001100000101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011101011111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011000010111011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011010100100011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000111110001000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1101110000110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011001100001100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00010100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1101000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000000000001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100110000001011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000010001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000001110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000011100100010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100110000000111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0101001100001000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011101100001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111100000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1001000000001000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011100010101011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11100000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000101111000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001111111111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001000000000011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111010001000100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0110111111111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100111100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000000111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000101000001100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111100010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001010001000011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1010000000111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001011100110001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001111000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00001110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1001000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111111100000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000101100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000011110001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000001101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000011101111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000111111101110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000110100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100111101000100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111010011111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111101110000 for cells of type $lut.
No more expansions possible.
<suppressed ~1366 debug messages>
Removed 0 unused cells and 466 unused wires.

2.43. Executing HIERARCHY pass (managing design hierarchy).

2.43.1. Analyzing design hierarchy..
Top module:  \demo

2.43.2. Analyzing design hierarchy..
Top module:  \demo
Removed 0 unused modules.

2.44. Printing statistics.

=== demo ===

   Number of wires:                379
   Number of wire bits:           1569
   Number of public wires:         142
   Number of public wire bits:    1206
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                404
     SB_CARRY                       63
     SB_DFF                          1
     SB_DFFE                        63
     SB_LUT4                       277

2.45. Executing CHECK pass (checking for obvious problems).
checking module demo..
found and reported 0 problems.

2.46. Executing BLIF backend.

2.47. Executing JSON backend.

End of script. Logfile hash: 969fa11041
CPU: user 2.78s system 0.16s, MEM: 32.30 MB total, 26.68 MB resident
Yosys 0.9 (git sha1 1979e0b)
Time spent: 17% 27x opt_clean (0 sec), 16% 27x opt_expr (0 sec), ...
