
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2019  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9 (git sha1 1979e0b)


-- Parsing `lcd-rst_sleep-out.v' using frontend `verilog' --

1. Executing Verilog-2005 frontend: lcd-rst_sleep-out.v
Parsing Verilog input from `lcd-rst_sleep-out.v' to AST representation.
Generating RTLIL representation for module `\lcd_rst'.
Warning: wire '\SCLK' is assigned in a block at lcd-rst_sleep-out.v:112.
Warning: wire '\SCLK' is assigned in a block at lcd-rst_sleep-out.v:166.
lcd-rst_sleep-out.v:112: Warning: Identifier `\SCLK' is implicitly declared.
Successfully finished Verilog frontend.

-- Running command `synth_ice40 -json lcd-rst_sleep-out.json -blif lcd-rst_sleep-out.blif' --

2. Executing SYNTH_ICE40 pass.

2.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/cells_sim.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\SB_IO'.
Generating RTLIL representation for module `\SB_GB_IO'.
Generating RTLIL representation for module `\SB_GB'.
Generating RTLIL representation for module `\SB_LUT4'.
Generating RTLIL representation for module `\SB_CARRY'.
Generating RTLIL representation for module `\SB_DFF'.
Generating RTLIL representation for module `\SB_DFFE'.
Generating RTLIL representation for module `\SB_DFFSR'.
Generating RTLIL representation for module `\SB_DFFR'.
Generating RTLIL representation for module `\SB_DFFSS'.
Generating RTLIL representation for module `\SB_DFFS'.
Generating RTLIL representation for module `\SB_DFFESR'.
Generating RTLIL representation for module `\SB_DFFER'.
Generating RTLIL representation for module `\SB_DFFESS'.
Generating RTLIL representation for module `\SB_DFFES'.
Generating RTLIL representation for module `\SB_DFFN'.
Generating RTLIL representation for module `\SB_DFFNE'.
Generating RTLIL representation for module `\SB_DFFNSR'.
Generating RTLIL representation for module `\SB_DFFNR'.
Generating RTLIL representation for module `\SB_DFFNSS'.
Generating RTLIL representation for module `\SB_DFFNS'.
Generating RTLIL representation for module `\SB_DFFNESR'.
Generating RTLIL representation for module `\SB_DFFNER'.
Generating RTLIL representation for module `\SB_DFFNESS'.
Generating RTLIL representation for module `\SB_DFFNES'.
Generating RTLIL representation for module `\SB_RAM40_4K'.
Generating RTLIL representation for module `\SB_RAM40_4KNR'.
Generating RTLIL representation for module `\SB_RAM40_4KNW'.
Generating RTLIL representation for module `\SB_RAM40_4KNRNW'.
Generating RTLIL representation for module `\ICESTORM_LC'.
Generating RTLIL representation for module `\SB_PLL40_CORE'.
Generating RTLIL representation for module `\SB_PLL40_PAD'.
Generating RTLIL representation for module `\SB_PLL40_2_PAD'.
Generating RTLIL representation for module `\SB_PLL40_2F_CORE'.
Generating RTLIL representation for module `\SB_PLL40_2F_PAD'.
Generating RTLIL representation for module `\SB_WARMBOOT'.
Generating RTLIL representation for module `\SB_SPRAM256KA'.
Generating RTLIL representation for module `\SB_HFOSC'.
Generating RTLIL representation for module `\SB_LFOSC'.
Generating RTLIL representation for module `\SB_RGBA_DRV'.
Generating RTLIL representation for module `\SB_LED_DRV_CUR'.
Generating RTLIL representation for module `\SB_RGB_DRV'.
Generating RTLIL representation for module `\SB_I2C'.
Generating RTLIL representation for module `\SB_SPI'.
Generating RTLIL representation for module `\SB_LEDDA_IP'.
Generating RTLIL representation for module `\SB_FILTER_50NS'.
Generating RTLIL representation for module `\SB_IO_I3C'.
Generating RTLIL representation for module `\SB_IO_OD'.
Generating RTLIL representation for module `\SB_MAC16'.
Successfully finished Verilog frontend.

2.2. Executing HIERARCHY pass (managing design hierarchy).

2.2.1. Finding top of design hierarchy..
root of   0 design levels: lcd_rst             
Automatically selected lcd_rst as design top module.

2.2.2. Analyzing design hierarchy..
Top module:  \lcd_rst

2.2.3. Analyzing design hierarchy..
Top module:  \lcd_rst
Removed 0 unused modules.

2.3. Executing PROC pass (convert processes to netlists).

2.3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

2.3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 6 switch rules as full_case in process $proc$lcd-rst_sleep-out.v:46$1 in module lcd_rst.
Removed a total of 0 dead cases.

2.3.3. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\lcd_rst.$proc$lcd-rst_sleep-out.v:39$10'.
  Set init value: \state = 0
  Set init value: \counter = 26'00000000000000000000000000
  Set init value: \data = 8'00000000
  Set init value: \bit_counter = 3'000

2.3.4. Executing PROC_ARST pass (detect async resets in processes).

2.3.5. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\lcd_rst.$proc$lcd-rst_sleep-out.v:39$10'.
     1/4: $1\bit_counter[2:0]
     2/4: $1\data[7:0]
     3/4: $1\state[31:0]
     4/4: $1\counter[25:0]
Creating decoders for process `\lcd_rst.$proc$lcd-rst_sleep-out.v:46$1'.
     1/11: $0\SCLK[0:0]
     2/11: $0\bit_counter[2:0]
     3/11: $0\DC[0:0]
     4/11: $0\RST[0:0]
     5/11: $0\SCK[0:0]
     6/11: $0\CS[0:0]
     7/11: $0\SDA[0:0]
     8/11: $0\LED[0:0]
     9/11: $0\data[7:0]
    10/11: $0\counter[25:0]
    11/11: $0\state[31:0]

2.3.6. Executing PROC_DLATCH pass (convert process syncs to latches).

2.3.7. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\lcd_rst.\state' using process `\lcd_rst.$proc$lcd-rst_sleep-out.v:46$1'.
  created $dff cell `$procdff$141' with positive edge clock.
Creating register for signal `\lcd_rst.\counter' using process `\lcd_rst.$proc$lcd-rst_sleep-out.v:46$1'.
  created $dff cell `$procdff$142' with positive edge clock.
Creating register for signal `\lcd_rst.\data' using process `\lcd_rst.$proc$lcd-rst_sleep-out.v:46$1'.
  created $dff cell `$procdff$143' with positive edge clock.
Creating register for signal `\lcd_rst.\LED' using process `\lcd_rst.$proc$lcd-rst_sleep-out.v:46$1'.
  created $dff cell `$procdff$144' with positive edge clock.
Creating register for signal `\lcd_rst.\SDA' using process `\lcd_rst.$proc$lcd-rst_sleep-out.v:46$1'.
  created $dff cell `$procdff$145' with positive edge clock.
Creating register for signal `\lcd_rst.\CS' using process `\lcd_rst.$proc$lcd-rst_sleep-out.v:46$1'.
  created $dff cell `$procdff$146' with positive edge clock.
Creating register for signal `\lcd_rst.\SCK' using process `\lcd_rst.$proc$lcd-rst_sleep-out.v:46$1'.
  created $dff cell `$procdff$147' with positive edge clock.
Creating register for signal `\lcd_rst.\RST' using process `\lcd_rst.$proc$lcd-rst_sleep-out.v:46$1'.
  created $dff cell `$procdff$148' with positive edge clock.
Creating register for signal `\lcd_rst.\DC' using process `\lcd_rst.$proc$lcd-rst_sleep-out.v:46$1'.
  created $dff cell `$procdff$149' with positive edge clock.
Creating register for signal `\lcd_rst.\bit_counter' using process `\lcd_rst.$proc$lcd-rst_sleep-out.v:46$1'.
  created $dff cell `$procdff$150' with positive edge clock.
Creating register for signal `\lcd_rst.\SCLK' using process `\lcd_rst.$proc$lcd-rst_sleep-out.v:46$1'.
  created $dff cell `$procdff$151' with positive edge clock.

2.3.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `lcd_rst.$proc$lcd-rst_sleep-out.v:39$10'.
Found and cleaned up 7 empty switches in `\lcd_rst.$proc$lcd-rst_sleep-out.v:46$1'.
Removing empty process `lcd_rst.$proc$lcd-rst_sleep-out.v:46$1'.
Cleaned up 7 empty switches.

2.4. Executing FLATTEN pass (flatten design).
No more expansions possible.

2.5. Executing TRIBUF pass.

2.6. Executing DEMINOUT pass (demote inout ports to input or output).

2.7. Executing OPT_EXPR pass (perform const folding).
Optimizing module lcd_rst.
<suppressed ~12 debug messages>

2.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \lcd_rst..
Removed 6 unused cells and 37 unused wires.
<suppressed ~8 debug messages>

2.9. Executing CHECK pass (checking for obvious problems).
checking module lcd_rst..
found and reported 0 problems.

2.10. Executing OPT pass (performing simple optimizations).

2.10.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module lcd_rst.

2.10.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\lcd_rst'.
<suppressed ~96 debug messages>
Removed a total of 32 cells.

2.10.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \lcd_rst..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~10 debug messages>

2.10.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \lcd_rst.
    New ctrl vector for $pmux cell $procmux$36: { $auto$opt_reduce.cc:132:opt_mux$153 $procmux$118_CMP }
    New ctrl vector for $pmux cell $procmux$66: { $auto$opt_reduce.cc:132:opt_mux$155 $procmux$118_CMP }
    New ctrl vector for $pmux cell $procmux$113: { $procmux$120_CMP $auto$opt_reduce.cc:132:opt_mux$157 $procmux$118_CMP $procmux$114_CMP }
    New ctrl vector for $pmux cell $procmux$87: { $procmux$120_CMP $auto$opt_reduce.cc:132:opt_mux$161 $auto$opt_reduce.cc:132:opt_mux$159 }
    New ctrl vector for $pmux cell $procmux$123: { $procmux$120_CMP $auto$opt_reduce.cc:132:opt_mux$163 $procmux$107_CMP $procmux$131_CMP $procmux$106_CMP $procmux$118_CMP $procmux$114_CMP $procmux$124_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$160: { $procmux$100_CMP $procmux$106_CMP $procmux$107_CMP $procmux$114_CMP $procmux$118_CMP }
  Optimizing cells in module \lcd_rst.
Performed a total of 6 changes.

2.10.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\lcd_rst'.
<suppressed ~9 debug messages>
Removed a total of 3 cells.

2.10.6. Executing OPT_RMDFF pass (remove dff with constant values).

2.10.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \lcd_rst..
Removed 0 unused cells and 35 unused wires.
<suppressed ~1 debug messages>

2.10.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module lcd_rst.

2.10.9. Rerunning OPT passes. (Maybe there is more to do..)

2.10.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \lcd_rst..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~11 debug messages>

2.10.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \lcd_rst.
Performed a total of 0 changes.

2.10.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\lcd_rst'.
Removed a total of 0 cells.

2.10.13. Executing OPT_RMDFF pass (remove dff with constant values).

2.10.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \lcd_rst..

2.10.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module lcd_rst.

2.10.16. Finished OPT passes. (There is nothing left to do.)

2.11. Executing WREDUCE pass (reducing word size of cells).
Removed top 5 bits (of 26) from port B of cell lcd_rst.$eq$lcd-rst_sleep-out.v:61$2 ($eq).
Removed top 2 bits (of 3) from port B of cell lcd_rst.$add$lcd-rst_sleep-out.v:135$6 ($add).
Removed top 5 bits (of 26) from port B of cell lcd_rst.$eq$lcd-rst_sleep-out.v:171$8 ($eq).
Removed top 25 bits (of 26) from port B of cell lcd_rst.$add$lcd-rst_sleep-out.v:178$9 ($add).
Removed top 29 bits (of 32) from port B of cell lcd_rst.$procmux$106_CMP0 ($eq).
Removed top 29 bits (of 32) from port B of cell lcd_rst.$procmux$107_CMP0 ($eq).
Removed top 28 bits (of 32) from port B of cell lcd_rst.$procmux$114_CMP0 ($eq).
Removed top 31 bits (of 32) from port B of cell lcd_rst.$procmux$120_CMP0 ($eq).
Removed top 29 bits (of 32) from port B of cell lcd_rst.$procmux$118_CMP0 ($eq).
Removed top 30 bits (of 32) from port B of cell lcd_rst.$procmux$119_CMP0 ($eq).
Removed top 28 bits (of 32) from mux cell lcd_rst.$procmux$127 ($mux).
Removed top 28 bits (of 32) from port B of cell lcd_rst.$procmux$124_CMP0 ($eq).
Removed top 29 bits (of 32) from port B of cell lcd_rst.$procmux$131_CMP0 ($eq).
Removed top 29 bits (of 32) from mux cell lcd_rst.$procmux$135 ($mux).
Removed top 28 bits (of 32) from wire lcd_rst.$procmux$127_Y.
Removed top 29 bits (of 32) from wire lcd_rst.$procmux$135_Y.

2.12. Executing PEEPOPT pass (run peephole optimizers).

2.13. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \lcd_rst..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

2.14. Executing SHARE pass (SAT-based resource sharing).

2.15. Executing TECHMAP pass (map to technology primitives).

2.15.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/cmp2lut.v
Parsing Verilog input from `/usr/bin/../share/yosys/cmp2lut.v' to AST representation.
Generating RTLIL representation for module `\_90_lut_cmp_'.
Successfully finished Verilog frontend.

2.15.2. Continuing TECHMAP pass.
Using template $paramod$77ad031fce233083715243f95e3cd2547d931e42\_90_lut_cmp_ for cells of type $eq.
No more expansions possible.
<suppressed ~184 debug messages>

2.16. Executing OPT_EXPR pass (perform const folding).
Optimizing module lcd_rst.

2.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \lcd_rst..
Removed 0 unused cells and 3 unused wires.
<suppressed ~1 debug messages>

2.18. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module lcd_rst:
  creating $macc model for $add$lcd-rst_sleep-out.v:135$6 ($add).
  creating $macc model for $add$lcd-rst_sleep-out.v:178$9 ($add).
  creating $macc model for $add$lcd-rst_sleep-out.v:75$4 ($add).
  creating $alu model for $macc $add$lcd-rst_sleep-out.v:75$4.
  creating $alu model for $macc $add$lcd-rst_sleep-out.v:178$9.
  creating $alu model for $macc $add$lcd-rst_sleep-out.v:135$6.
  creating $alu cell for $add$lcd-rst_sleep-out.v:135$6: $auto$alumacc.cc:474:replace_alu$168
  creating $alu cell for $add$lcd-rst_sleep-out.v:178$9: $auto$alumacc.cc:474:replace_alu$171
  creating $alu cell for $add$lcd-rst_sleep-out.v:75$4: $auto$alumacc.cc:474:replace_alu$174
  created 3 $alu and 0 $macc cells.

2.19. Executing OPT pass (performing simple optimizations).

2.19.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module lcd_rst.

2.19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\lcd_rst'.
<suppressed ~5 debug messages>
Removed a total of 1 cells.

2.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \lcd_rst..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~11 debug messages>

2.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \lcd_rst.
Performed a total of 0 changes.

2.19.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\lcd_rst'.
Removed a total of 0 cells.

2.19.6. Executing OPT_RMDFF pass (remove dff with constant values).

2.19.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \lcd_rst..
Removed 0 unused cells and 3 unused wires.
<suppressed ~1 debug messages>

2.19.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module lcd_rst.

2.19.9. Finished OPT passes. (There is nothing left to do.)

2.20. Executing FSM pass (extract and optimize FSM).

2.20.1. Executing FSM_DETECT pass (finding FSMs in design).
Not marking lcd_rst.state as FSM state register:
    Register has an initialization value.

2.20.2. Executing FSM_EXTRACT pass (extracting FSM from design).

2.20.3. Executing FSM_OPT pass (simple optimizations of FSMs).

2.20.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \lcd_rst..

2.20.5. Executing FSM_OPT pass (simple optimizations of FSMs).

2.20.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

2.20.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

2.20.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

2.21. Executing OPT pass (performing simple optimizations).

2.21.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module lcd_rst.

2.21.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\lcd_rst'.
Removed a total of 0 cells.

2.21.3. Executing OPT_RMDFF pass (remove dff with constant values).

2.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \lcd_rst..

2.21.5. Finished fast OPT passes.

2.22. Executing MEMORY pass.

2.22.1. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

2.22.2. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \lcd_rst..

2.22.3. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

2.22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \lcd_rst..

2.22.5. Executing MEMORY_COLLECT pass (generating $mem cells).

2.23. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \lcd_rst..

2.24. Executing MEMORY_BRAM pass (mapping $mem cells to block memories).

2.25. Executing TECHMAP pass (map to technology primitives).

2.25.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/brams_map.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/brams_map.v' to AST representation.
Generating RTLIL representation for module `\$__ICE40_RAM4K'.
Generating RTLIL representation for module `\$__ICE40_RAM4K_M0'.
Generating RTLIL representation for module `\$__ICE40_RAM4K_M123'.
Successfully finished Verilog frontend.

2.25.2. Continuing TECHMAP pass.
No more expansions possible.

2.26. Executing ICE40_BRAMINIT pass.

2.27. Executing OPT pass (performing simple optimizations).

2.27.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module lcd_rst.
<suppressed ~1 debug messages>

2.27.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\lcd_rst'.
Removed a total of 0 cells.

2.27.3. Executing OPT_RMDFF pass (remove dff with constant values).

2.27.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \lcd_rst..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

2.27.5. Finished fast OPT passes.

2.28. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).

2.29. Executing OPT pass (performing simple optimizations).

2.29.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module lcd_rst.

2.29.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\lcd_rst'.
Removed a total of 0 cells.

2.29.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \lcd_rst..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~10 debug messages>

2.29.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \lcd_rst.
    Consolidated identical input bits for $mux cell $procmux$127:
      Old ports: A=4'0110, B=4'1010, Y=$auto$wreduce.cc:455:run$164 [3:0]
      New ports: A=2'01, B=2'10, Y=$auto$wreduce.cc:455:run$164 [3:2]
      New connections: $auto$wreduce.cc:455:run$164 [1:0] = 2'10
    Consolidated identical input bits for $mux cell $procmux$135:
      Old ports: A=3'010, B=3'100, Y=$auto$wreduce.cc:455:run$165 [2:0]
      New ports: A=2'01, B=2'10, Y=$auto$wreduce.cc:455:run$165 [2:1]
      New connections: $auto$wreduce.cc:455:run$165 [0] = 1'0
  Optimizing cells in module \lcd_rst.
Performed a total of 2 changes.

2.29.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\lcd_rst'.
Removed a total of 0 cells.

2.29.6. Executing OPT_RMDFF pass (remove dff with constant values).

2.29.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \lcd_rst..

2.29.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module lcd_rst.

2.29.9. Rerunning OPT passes. (Maybe there is more to do..)

2.29.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \lcd_rst..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~10 debug messages>

2.29.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \lcd_rst.
Performed a total of 0 changes.

2.29.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\lcd_rst'.
Removed a total of 0 cells.

2.29.13. Executing OPT_RMDFF pass (remove dff with constant values).

2.29.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \lcd_rst..

2.29.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module lcd_rst.

2.29.16. Finished OPT passes. (There is nothing left to do.)

2.30. Executing TECHMAP pass (map to technology primitives).

2.30.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

2.30.2. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/arith_map.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/arith_map.v' to AST representation.
Generating RTLIL representation for module `\_80_ice40_alu'.
Successfully finished Verilog frontend.

2.30.3. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $mux.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=3\Y_WIDTH=3 for cells of type $alu.
Using template $paramod\_90_pmux\WIDTH=3\S_WIDTH=3 for cells of type $pmux.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=26\Y_WIDTH=26 for cells of type $alu.
Using template $paramod\_90_pmux\WIDTH=1\S_WIDTH=2 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=1\S_WIDTH=3 for cells of type $pmux.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $logic_not.
Using template $paramod\_90_pmux\WIDTH=8\S_WIDTH=2 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=26\S_WIDTH=4 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=32\S_WIDTH=8 for cells of type $pmux.
Using extmapper simplemap for cells of type $lut.
Using extmapper simplemap for cells of type $dff.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $pos.
Using extmapper simplemap for cells of type $and.
No more expansions possible.
<suppressed ~281 debug messages>

2.31. Executing ICE40_OPT pass (performing simple optimizations).

2.31.1. Running ICE40 specific optimizations.

2.31.2. Executing OPT_EXPR pass (perform const folding).
Optimizing module lcd_rst.
<suppressed ~917 debug messages>

2.31.3. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\lcd_rst'.
<suppressed ~747 debug messages>
Removed a total of 249 cells.

2.31.4. Executing OPT_RMDFF pass (remove dff with constant values).

2.31.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \lcd_rst..
Removed 35 unused cells and 426 unused wires.
<suppressed ~36 debug messages>

2.31.6. Rerunning OPT passes. (Removed registers in this run.)

2.31.7. Running ICE40 specific optimizations.
Optimized away SB_CARRY cell lcd_rst.$auto$alumacc.cc:474:replace_alu$168.slice[0].carry: CO=\bit_counter [0]
Optimized away SB_CARRY cell lcd_rst.$auto$alumacc.cc:474:replace_alu$171.slice[0].carry: CO=\counter [0]
Mapping SB_LUT4 cell lcd_rst.$auto$alumacc.cc:474:replace_alu$168.slice[1].adder back to logic.
Mapping SB_LUT4 cell lcd_rst.$auto$alumacc.cc:474:replace_alu$171.slice[1].adder back to logic.

2.31.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module lcd_rst.
<suppressed ~26 debug messages>

2.31.9. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\lcd_rst'.
Removed a total of 0 cells.

2.31.10. Executing OPT_RMDFF pass (remove dff with constant values).

2.31.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \lcd_rst..
Removed 0 unused cells and 6 unused wires.
<suppressed ~1 debug messages>

2.31.12. Rerunning OPT passes. (Removed registers in this run.)

2.31.13. Running ICE40 specific optimizations.

2.31.14. Executing OPT_EXPR pass (perform const folding).
Optimizing module lcd_rst.

2.31.15. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\lcd_rst'.
Removed a total of 0 cells.

2.31.16. Executing OPT_RMDFF pass (remove dff with constant values).

2.31.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \lcd_rst..

2.31.18. Finished OPT passes. (There is nothing left to do.)

2.32. Executing DFFSR2DFF pass (mapping DFFSR cells to simpler FFs).

2.33. Executing DFF2DFFE pass (transform $dff to $dffe where applicable).
Selected cell types for direct conversion:
  $_DFF_PP1_ -> $__DFFE_PP1
  $_DFF_PP0_ -> $__DFFE_PP0
  $_DFF_PN1_ -> $__DFFE_PN1
  $_DFF_PN0_ -> $__DFFE_PN0
  $_DFF_NP1_ -> $__DFFE_NP1
  $_DFF_NP0_ -> $__DFFE_NP0
  $_DFF_NN1_ -> $__DFFE_NN1
  $_DFF_NN0_ -> $__DFFE_NN0
  $_DFF_N_ -> $_DFFE_NP_
  $_DFF_P_ -> $_DFFE_PP_
Transforming FF to FF+Enable cells in module lcd_rst:
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1236 to $_DFFE_PP_ for $0\counter[25:0] [0] -> \counter [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1237 to $_DFFE_PP_ for $0\counter[25:0] [1] -> \counter [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1238 to $_DFFE_PP_ for $0\counter[25:0] [2] -> \counter [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1239 to $_DFFE_PP_ for $0\counter[25:0] [3] -> \counter [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1240 to $_DFFE_PP_ for $0\counter[25:0] [4] -> \counter [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1241 to $_DFFE_PP_ for $0\counter[25:0] [5] -> \counter [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1242 to $_DFFE_PP_ for $0\counter[25:0] [6] -> \counter [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1243 to $_DFFE_PP_ for $0\counter[25:0] [7] -> \counter [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1244 to $_DFFE_PP_ for $0\counter[25:0] [8] -> \counter [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1245 to $_DFFE_PP_ for $0\counter[25:0] [9] -> \counter [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1246 to $_DFFE_PP_ for $0\counter[25:0] [10] -> \counter [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1247 to $_DFFE_PP_ for $0\counter[25:0] [11] -> \counter [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1248 to $_DFFE_PP_ for $0\counter[25:0] [12] -> \counter [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1249 to $_DFFE_PP_ for $0\counter[25:0] [13] -> \counter [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1250 to $_DFFE_PP_ for $0\counter[25:0] [14] -> \counter [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1251 to $_DFFE_PP_ for $0\counter[25:0] [15] -> \counter [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1252 to $_DFFE_PP_ for $0\counter[25:0] [16] -> \counter [16].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1253 to $_DFFE_PP_ for $0\counter[25:0] [17] -> \counter [17].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1254 to $_DFFE_PP_ for $0\counter[25:0] [18] -> \counter [18].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1255 to $_DFFE_PP_ for $0\counter[25:0] [19] -> \counter [19].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1256 to $_DFFE_PP_ for $0\counter[25:0] [20] -> \counter [20].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1257 to $_DFFE_PP_ for $0\counter[25:0] [21] -> \counter [21].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1258 to $_DFFE_PP_ for $0\counter[25:0] [22] -> \counter [22].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1259 to $_DFFE_PP_ for $0\counter[25:0] [23] -> \counter [23].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1260 to $_DFFE_PP_ for $0\counter[25:0] [24] -> \counter [24].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1261 to $_DFFE_PP_ for $0\counter[25:0] [25] -> \counter [25].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1262 to $_DFFE_PP_ for $0\data[7:0] [0] -> \data [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1263 to $_DFFE_PP_ for $0\data[7:0] [1] -> \data [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1264 to $_DFFE_PP_ for $0\data[7:0] [2] -> \data [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1265 to $_DFFE_PP_ for $0\data[7:0] [3] -> \data [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1266 to $_DFFE_PP_ for $0\data[7:0] [4] -> \data [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1267 to $_DFFE_PP_ for $0\data[7:0] [5] -> \data [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1268 to $_DFFE_PP_ for $0\data[7:0] [6] -> \data [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1269 to $_DFFE_PP_ for $0\data[7:0] [7] -> \data [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1270 to $_DFFE_PP_ for $0\LED[0:0] -> \LED.
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1271 to $_DFFE_PP_ for $0\SDA[0:0] -> \SDA.
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1272 to $_DFFE_PP_ for $0\CS[0:0] -> \CS.
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1273 to $_DFFE_PP_ for $0\SCK[0:0] -> \SCK.
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1274 to $_DFFE_PP_ for $0\RST[0:0] -> \RST.
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1275 to $_DFFE_PP_ for $0\DC[0:0] -> \DC.
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1276 to $_DFFE_PP_ for $0\bit_counter[2:0] [0] -> \bit_counter [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1277 to $_DFFE_PP_ for $0\bit_counter[2:0] [1] -> \bit_counter [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1278 to $_DFFE_PP_ for $0\bit_counter[2:0] [2] -> \bit_counter [2].

2.34. Executing TECHMAP pass (map to technology primitives).

2.34.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/cells_map.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$__DFFE_NN0'.
Generating RTLIL representation for module `\$__DFFE_NN1'.
Generating RTLIL representation for module `\$__DFFE_PN0'.
Generating RTLIL representation for module `\$__DFFE_PN1'.
Generating RTLIL representation for module `\$__DFFE_NP0'.
Generating RTLIL representation for module `\$__DFFE_NP1'.
Generating RTLIL representation for module `\$__DFFE_PP0'.
Generating RTLIL representation for module `\$__DFFE_PP1'.
Successfully finished Verilog frontend.

2.34.2. Continuing TECHMAP pass.
Using template \$_DFF_P_ for cells of type $_DFF_P_.
Using template \$_DFFE_PP_ for cells of type $_DFFE_PP_.
No more expansions possible.
<suppressed ~75 debug messages>

2.35. Executing OPT_EXPR pass (perform const folding).
Optimizing module lcd_rst.
<suppressed ~86 debug messages>

2.36. Executing SIMPLEMAP pass (map simple cells to gate primitives).

2.37. Executing ICE40_FFINIT pass (implement FF init values).
Handling FF init values in lcd_rst.
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1277 (SB_DFFE): \bit_counter [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1276 (SB_DFFE): \bit_counter [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1204 (SB_DFF): \state [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1205 (SB_DFF): \state [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1206 (SB_DFF): \state [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1207 (SB_DFF): \state [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1208 (SB_DFF): \state [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1209 (SB_DFF): \state [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1210 (SB_DFF): \state [6] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1211 (SB_DFF): \state [7] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1213 (SB_DFF): \state [9] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1214 (SB_DFF): \state [10] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1215 (SB_DFF): \state [11] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1216 (SB_DFF): \state [12] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1217 (SB_DFF): \state [13] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1218 (SB_DFF): \state [14] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1219 (SB_DFF): \state [15] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1220 (SB_DFF): \state [16] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1221 (SB_DFF): \state [17] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1222 (SB_DFF): \state [18] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1223 (SB_DFF): \state [19] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1224 (SB_DFF): \state [20] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1225 (SB_DFF): \state [21] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1226 (SB_DFF): \state [22] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1227 (SB_DFF): \state [23] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1228 (SB_DFF): \state [24] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1229 (SB_DFF): \state [25] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1230 (SB_DFF): \state [26] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1231 (SB_DFF): \state [27] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1232 (SB_DFF): \state [28] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1233 (SB_DFF): \state [29] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1234 (SB_DFF): \state [30] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1235 (SB_DFF): \state [31] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1236 (SB_DFFE): \counter [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1237 (SB_DFFE): \counter [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1238 (SB_DFFE): \counter [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1239 (SB_DFFE): \counter [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1240 (SB_DFFE): \counter [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1241 (SB_DFFE): \counter [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1242 (SB_DFFE): \counter [6] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1212 (SB_DFF): \state [8] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1243 (SB_DFFE): \counter [7] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1245 (SB_DFFE): \counter [9] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1246 (SB_DFFE): \counter [10] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1247 (SB_DFFE): \counter [11] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1248 (SB_DFFE): \counter [12] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1249 (SB_DFFE): \counter [13] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1250 (SB_DFFE): \counter [14] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1251 (SB_DFFE): \counter [15] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1252 (SB_DFFE): \counter [16] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1253 (SB_DFFE): \counter [17] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1254 (SB_DFFE): \counter [18] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1255 (SB_DFFE): \counter [19] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1256 (SB_DFFE): \counter [20] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1257 (SB_DFFE): \counter [21] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1258 (SB_DFFE): \counter [22] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1259 (SB_DFFE): \counter [23] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1260 (SB_DFFE): \counter [24] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1261 (SB_DFFE): \counter [25] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1262 (SB_DFFE): \data [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1263 (SB_DFFE): \data [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1264 (SB_DFFE): \data [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1265 (SB_DFFE): \data [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1266 (SB_DFFE): \data [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1267 (SB_DFFE): \data [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1268 (SB_DFFE): \data [6] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1244 (SB_DFFE): \counter [8] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1278 (SB_DFFE): \bit_counter [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1269 (SB_DFFE): \data [7] = 0

2.38. Executing ICE40_FFSSR pass (merge synchronous set/reset into FF cells).
Merging set/reset $_MUX_ cells into SB_FFs in lcd_rst.
  Merging $auto$simplemap.cc:277:simplemap_mux$2341 (A=1'0, B=$procmux$123.Y_B [0], S=$techmap$procmux$123.$reduce_or$/usr/bin/../share/yosys/techmap.v:445$1044_Y) into $auto$simplemap.cc:420:simplemap_dff$1204 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2342 (A=1'0, B=$procmux$123.Y_B [1], S=$techmap$procmux$123.$reduce_or$/usr/bin/../share/yosys/techmap.v:445$1044_Y) into $auto$simplemap.cc:420:simplemap_dff$1205 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2343 (A=1'0, B=$procmux$123.Y_B [2], S=$techmap$procmux$123.$reduce_or$/usr/bin/../share/yosys/techmap.v:445$1044_Y) into $auto$simplemap.cc:420:simplemap_dff$1206 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2344 (A=1'0, B=$procmux$123.Y_B [3], S=$techmap$procmux$123.$reduce_or$/usr/bin/../share/yosys/techmap.v:445$1044_Y) into $auto$simplemap.cc:420:simplemap_dff$1207 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2345 (A=1'0, B=$auto$simplemap.cc:127:simplemap_reduce$2035 [3], S=$techmap$procmux$123.$reduce_or$/usr/bin/../share/yosys/techmap.v:445$1044_Y) into $auto$simplemap.cc:420:simplemap_dff$1208 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2346 (A=1'0, B=$auto$simplemap.cc:127:simplemap_reduce$2025 [3], S=$techmap$procmux$123.$reduce_or$/usr/bin/../share/yosys/techmap.v:445$1044_Y) into $auto$simplemap.cc:420:simplemap_dff$1209 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2347 (A=1'0, B=$auto$simplemap.cc:127:simplemap_reduce$2015 [3], S=$techmap$procmux$123.$reduce_or$/usr/bin/../share/yosys/techmap.v:445$1044_Y) into $auto$simplemap.cc:420:simplemap_dff$1210 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2348 (A=1'0, B=$auto$simplemap.cc:127:simplemap_reduce$2005 [3], S=$techmap$procmux$123.$reduce_or$/usr/bin/../share/yosys/techmap.v:445$1044_Y) into $auto$simplemap.cc:420:simplemap_dff$1211 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2350 (A=1'0, B=$auto$simplemap.cc:127:simplemap_reduce$1985 [3], S=$techmap$procmux$123.$reduce_or$/usr/bin/../share/yosys/techmap.v:445$1044_Y) into $auto$simplemap.cc:420:simplemap_dff$1213 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2351 (A=1'0, B=$auto$simplemap.cc:127:simplemap_reduce$1975 [3], S=$techmap$procmux$123.$reduce_or$/usr/bin/../share/yosys/techmap.v:445$1044_Y) into $auto$simplemap.cc:420:simplemap_dff$1214 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2352 (A=1'0, B=$auto$simplemap.cc:127:simplemap_reduce$1965 [3], S=$techmap$procmux$123.$reduce_or$/usr/bin/../share/yosys/techmap.v:445$1044_Y) into $auto$simplemap.cc:420:simplemap_dff$1215 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2353 (A=1'0, B=$auto$simplemap.cc:127:simplemap_reduce$1955 [3], S=$techmap$procmux$123.$reduce_or$/usr/bin/../share/yosys/techmap.v:445$1044_Y) into $auto$simplemap.cc:420:simplemap_dff$1216 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2354 (A=1'0, B=$auto$simplemap.cc:127:simplemap_reduce$1945 [3], S=$techmap$procmux$123.$reduce_or$/usr/bin/../share/yosys/techmap.v:445$1044_Y) into $auto$simplemap.cc:420:simplemap_dff$1217 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2355 (A=1'0, B=$auto$simplemap.cc:127:simplemap_reduce$1935 [3], S=$techmap$procmux$123.$reduce_or$/usr/bin/../share/yosys/techmap.v:445$1044_Y) into $auto$simplemap.cc:420:simplemap_dff$1218 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2356 (A=1'0, B=$auto$simplemap.cc:127:simplemap_reduce$1925 [3], S=$techmap$procmux$123.$reduce_or$/usr/bin/../share/yosys/techmap.v:445$1044_Y) into $auto$simplemap.cc:420:simplemap_dff$1219 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2357 (A=1'0, B=$auto$simplemap.cc:127:simplemap_reduce$1915 [3], S=$techmap$procmux$123.$reduce_or$/usr/bin/../share/yosys/techmap.v:445$1044_Y) into $auto$simplemap.cc:420:simplemap_dff$1220 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2358 (A=1'0, B=$auto$simplemap.cc:127:simplemap_reduce$1905 [3], S=$techmap$procmux$123.$reduce_or$/usr/bin/../share/yosys/techmap.v:445$1044_Y) into $auto$simplemap.cc:420:simplemap_dff$1221 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2359 (A=1'0, B=$auto$simplemap.cc:127:simplemap_reduce$1895 [3], S=$techmap$procmux$123.$reduce_or$/usr/bin/../share/yosys/techmap.v:445$1044_Y) into $auto$simplemap.cc:420:simplemap_dff$1222 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2360 (A=1'0, B=$auto$simplemap.cc:127:simplemap_reduce$1885 [3], S=$techmap$procmux$123.$reduce_or$/usr/bin/../share/yosys/techmap.v:445$1044_Y) into $auto$simplemap.cc:420:simplemap_dff$1223 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2361 (A=1'0, B=$auto$simplemap.cc:127:simplemap_reduce$1875 [3], S=$techmap$procmux$123.$reduce_or$/usr/bin/../share/yosys/techmap.v:445$1044_Y) into $auto$simplemap.cc:420:simplemap_dff$1224 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2362 (A=1'0, B=$auto$simplemap.cc:127:simplemap_reduce$1865 [3], S=$techmap$procmux$123.$reduce_or$/usr/bin/../share/yosys/techmap.v:445$1044_Y) into $auto$simplemap.cc:420:simplemap_dff$1225 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2363 (A=1'0, B=$auto$simplemap.cc:127:simplemap_reduce$1855 [3], S=$techmap$procmux$123.$reduce_or$/usr/bin/../share/yosys/techmap.v:445$1044_Y) into $auto$simplemap.cc:420:simplemap_dff$1226 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2364 (A=1'0, B=$auto$simplemap.cc:127:simplemap_reduce$1845 [3], S=$techmap$procmux$123.$reduce_or$/usr/bin/../share/yosys/techmap.v:445$1044_Y) into $auto$simplemap.cc:420:simplemap_dff$1227 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2365 (A=1'0, B=$auto$simplemap.cc:127:simplemap_reduce$1835 [3], S=$techmap$procmux$123.$reduce_or$/usr/bin/../share/yosys/techmap.v:445$1044_Y) into $auto$simplemap.cc:420:simplemap_dff$1228 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2366 (A=1'0, B=$auto$simplemap.cc:127:simplemap_reduce$1825 [3], S=$techmap$procmux$123.$reduce_or$/usr/bin/../share/yosys/techmap.v:445$1044_Y) into $auto$simplemap.cc:420:simplemap_dff$1229 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2367 (A=1'0, B=$auto$simplemap.cc:127:simplemap_reduce$1815 [3], S=$techmap$procmux$123.$reduce_or$/usr/bin/../share/yosys/techmap.v:445$1044_Y) into $auto$simplemap.cc:420:simplemap_dff$1230 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2368 (A=1'0, B=$auto$simplemap.cc:127:simplemap_reduce$1805 [3], S=$techmap$procmux$123.$reduce_or$/usr/bin/../share/yosys/techmap.v:445$1044_Y) into $auto$simplemap.cc:420:simplemap_dff$1231 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2369 (A=1'0, B=$auto$simplemap.cc:127:simplemap_reduce$1795 [3], S=$techmap$procmux$123.$reduce_or$/usr/bin/../share/yosys/techmap.v:445$1044_Y) into $auto$simplemap.cc:420:simplemap_dff$1232 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2370 (A=1'0, B=$auto$simplemap.cc:127:simplemap_reduce$1785 [3], S=$techmap$procmux$123.$reduce_or$/usr/bin/../share/yosys/techmap.v:445$1044_Y) into $auto$simplemap.cc:420:simplemap_dff$1233 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2371 (A=1'0, B=$auto$simplemap.cc:127:simplemap_reduce$1775 [3], S=$techmap$procmux$123.$reduce_or$/usr/bin/../share/yosys/techmap.v:445$1044_Y) into $auto$simplemap.cc:420:simplemap_dff$1234 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2372 (A=1'0, B=$auto$simplemap.cc:127:simplemap_reduce$1765 [3], S=$techmap$procmux$123.$reduce_or$/usr/bin/../share/yosys/techmap.v:445$1044_Y) into $auto$simplemap.cc:420:simplemap_dff$1235 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2349 (A=1'0, B=$auto$simplemap.cc:127:simplemap_reduce$1995 [3], S=$techmap$procmux$123.$reduce_or$/usr/bin/../share/yosys/techmap.v:445$1044_Y) into $auto$simplemap.cc:420:simplemap_dff$1212 (SB_DFF).

2.39. Executing ICE40_OPT pass (performing simple optimizations).

2.39.1. Running ICE40 specific optimizations.

2.39.2. Executing OPT_EXPR pass (perform const folding).
Optimizing module lcd_rst.
<suppressed ~93 debug messages>

2.39.3. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\lcd_rst'.
<suppressed ~93 debug messages>
Removed a total of 31 cells.

2.39.4. Executing OPT_RMDFF pass (remove dff with constant values).

2.39.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \lcd_rst..
Removed 32 unused cells and 396 unused wires.
<suppressed ~33 debug messages>

2.39.6. Rerunning OPT passes. (Removed registers in this run.)

2.39.7. Running ICE40 specific optimizations.

2.39.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module lcd_rst.

2.39.9. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\lcd_rst'.
Removed a total of 0 cells.

2.39.10. Executing OPT_RMDFF pass (remove dff with constant values).

2.39.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \lcd_rst..

2.39.12. Finished OPT passes. (There is nothing left to do.)

2.40. Executing TECHMAP pass (map to technology primitives).

2.40.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/latches_map.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/latches_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Successfully finished Verilog frontend.

2.40.2. Continuing TECHMAP pass.
No more expansions possible.

2.41. Executing ABC pass (technology mapping using ABC).

2.41.1. Extracting gate netlist of module `\lcd_rst' to `<abc-temp-dir>/input.blif'..
Extracted 458 gates and 562 wires to a netlist network with 102 inputs and 83 outputs.

2.41.1.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + lutpack -S 1 
ABC: + dress 
ABC: Total number of equiv classes                =      83.
ABC: Participating nodes from both networks       =     206.
ABC: Participating nodes from the first network   =     110. (  80.88 % of nodes)
ABC: Participating nodes from the second network  =      96. (  70.59 % of nodes)
ABC: Node pairs (any polarity)                    =      84. (  61.76 % of names can be moved)
ABC: Node pairs (same polarity)                   =      68. (  50.00 % of names can be moved)
ABC: Total runtime =     0.16 sec
ABC: + write_blif <abc-temp-dir>/output.blif 

2.41.1.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:      214
ABC RESULTS:        internal signals:      377
ABC RESULTS:           input signals:      102
ABC RESULTS:          output signals:       83
Removing temp directory.
Removed 0 unused cells and 311 unused wires.

2.42. Executing TECHMAP pass (map to technology primitives).

2.42.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/cells_map.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$__DFFE_NN0'.
Generating RTLIL representation for module `\$__DFFE_NN1'.
Generating RTLIL representation for module `\$__DFFE_PN0'.
Generating RTLIL representation for module `\$__DFFE_PN1'.
Generating RTLIL representation for module `\$__DFFE_NP0'.
Generating RTLIL representation for module `\$__DFFE_NP1'.
Generating RTLIL representation for module `\$__DFFE_PP0'.
Generating RTLIL representation for module `\$__DFFE_PP1'.
Generating RTLIL representation for module `\$lut'.
Successfully finished Verilog frontend.

2.42.2. Continuing TECHMAP pass.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111111111110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00001011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111010001000100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11100000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11101111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1010101100110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111100011111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111100000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11111110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111111100000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011101011000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111100010001000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000011111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11111000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10110000 for cells of type $lut.
No more expansions possible.
<suppressed ~459 debug messages>
Removed 0 unused cells and 214 unused wires.

2.43. Executing HIERARCHY pass (managing design hierarchy).

2.43.1. Analyzing design hierarchy..
Top module:  \lcd_rst

2.43.2. Analyzing design hierarchy..
Top module:  \lcd_rst
Removed 0 unused modules.

2.44. Printing statistics.

=== lcd_rst ===

   Number of wires:                113
   Number of wire bits:            239
   Number of public wires:          11
   Number of public wire bits:      76
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                234
     SB_CARRY                       25
     SB_DFFE                        43
     SB_DFFSR                       32
     SB_LUT4                       134

2.45. Executing CHECK pass (checking for obvious problems).
checking module lcd_rst..
found and reported 0 problems.

2.46. Executing BLIF backend.

2.47. Executing JSON backend.

Warnings: 3 unique messages, 3 total
End of script. Logfile hash: f0cb49ff94
CPU: user 1.35s system 0.11s, MEM: 46.11 MB total, 40.66 MB resident
Yosys 0.9 (git sha1 1979e0b)
Time spent: 17% 10x read_verilog (0 sec), 17% 18x opt_expr (0 sec), ...
